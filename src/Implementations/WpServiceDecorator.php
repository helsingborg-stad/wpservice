<?php

namespace WpService\Implementations;

/**
 * Class WpServiceDecorator
 */
class WpServiceDecorator implements \WpService\WpService
{
    /**
     * Class constructor.
     *
     * @param \WpService\WpService $inner The inner WPService instance.
     */
    public function __construct(private \WpService\WpService $inner)
    {
    }

    /**
 * Reads an unsigned integer with most significant bits first.
 *
 * @param binary string $input     Must be at least $num_bytes-long.
 * @param int $numBytes Number of parsed bytes.
 * @return int                     Value.
 */
    public function readBigEndian(int $numBytes): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Reads bytes and advances the stream position by the same count.
 *
 * @param \stream $handle    Bytes will be read from this resource.
 * @param int $numBytes Number of bytes read. Must be greater than 0.
 * @return \binary string|false            The raw bytes or false on failure.
 */
    public function read(\stream $handle, int $numBytes): \binary
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Advances the stream position by the given offset.
 *
 * @param \stream $handle    Bytes will be skipped from this resource.
 * @param int $numBytes Number of skipped bytes. Can be 0.
 * @return bool             True on success or false on failure.
 */
    public function skip(\stream $handle, int $numBytes): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds an action hook specific to this page.
 *
 * Fires on {@see 'wp_head'}.
 *
 * @since MU (3.0.0)
 */
    public function doActivateHeader(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads styles specific to this page.
 *
 * @since MU (3.0.0)
 */
    public function wpmuActivateStylesheet(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display JavaScript on the page.
 *
 * @since 3.5.0
 */
    public function exportAddJs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates the date options fields for exporting a given post type.
 *
 * @since 3.1.0
 *
 * @global wpdb      $wpdb      WordPress database abstraction object.
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @param string $postType The post type. Default 'post'.
 */
    public function exportDateOptions(string $postType = 'post'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles the Heartbeat API in the no-privilege context via AJAX .
 *
 * Runs when the user is not logged in.
 *
 * @since 3.6.0
 */
    public function wpAjaxNoprivHeartbeat(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles fetching a list table via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxFetchList(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles tag search via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxAjaxTagSearch(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles compression testing via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxWpCompressionTest(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles image editor previews via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxImgeditPreview(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles oEmbed caching via AJAX.
 *
 * @since 3.1.0
 *
 * @global WP_Embed $wp_embed WordPress Embed object.
 */
    public function wpAjaxOembedCache(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles user autocomplete via AJAX.
 *
 * @since 3.4.0
 */
    public function wpAjaxAutocompleteUser(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles Ajax requests for community events
 *
 * @since 4.8.0
 */
    public function wpAjaxGetCommunityEvents(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles dashboard widgets via AJAX.
 *
 * @since 3.4.0
 */
    public function wpAjaxDashboardWidgets(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles Customizer preview logged-in status via AJAX.
 *
 * @since 3.4.0
 */
    public function wpAjaxLoggedIn(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles deleting a comment via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxDeleteComment(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles deleting a tag via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxDeleteTag(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles deleting a link via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxDeleteLink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles deleting meta via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxDeleteMeta(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles deleting a post via AJAX.
 *
 * @since 3.1.0
 *
 * @param string $action Action to perform.
 */
    public function wpAjaxDeletePost(string $action): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles sending a post to the Trash via AJAX.
 *
 * @since 3.1.0
 *
 * @param string $action Action to perform.
 */
    public function wpAjaxTrashPost(string $action): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles restoring a post from the Trash via AJAX.
 *
 * @since 3.1.0
 *
 * @param string $action Action to perform.
 */
    public function wpAjaxUntrashPost(string $action): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles deleting a page via AJAX.
 *
 * @since 3.1.0
 *
 * @param string $action Action to perform.
 */
    public function wpAjaxDeletePage(string $action): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles dimming a comment via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxDimComment(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles adding a link category via AJAX.
 *
 * @since 3.1.0
 *
 * @param string $action Action to perform.
 */
    public function wpAjaxAddLinkCategory(string $action): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles adding a tag via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxAddTag(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles getting a tagcloud via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxGetTagcloud(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles getting comments via AJAX.
 *
 * @since 3.1.0
 *
 * @global int $post_id
 *
 * @param string $action Action to perform.
 */
    public function wpAjaxGetComments(string $action): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles replying to a comment via AJAX.
 *
 * @since 3.1.0
 *
 * @param string $action Action to perform.
 */
    public function wpAjaxReplytoComment(string $action): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles editing a comment via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxEditComment(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles adding a menu item via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxAddMenuItem(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles adding meta via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxAddMeta(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles adding a user via AJAX.
 *
 * @since 3.1.0
 *
 * @param string $action Action to perform.
 */
    public function wpAjaxAddUser(string $action): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles closed post boxes via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxClosedPostboxes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles hidden columns via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxHiddenColumns(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles updating whether to display the welcome panel via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxUpdateWelcomePanel(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles for retrieving menu meta boxes via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxMenuGetMetabox(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles internal linking via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxWpLinkAjax(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles saving menu locations via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxMenuLocationsSave(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles saving the meta box order via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxMetaBoxOrder(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles menu quick searching via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxMenuQuickSearch(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles retrieving a permalink via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxGetPermalink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles retrieving a sample permalink via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxSamplePermalink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles Quick Edit saving a post from a list table via AJAX.
 *
 * @since 3.1.0
 *
 * @global string $mode List table view mode.
 */
    public function wpAjaxInlineSave(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles Quick Edit saving for a term via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxInlineSaveTax(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles querying posts for the Find Posts modal via AJAX.
 *
 * @see window.findPosts
 *
 * @since 3.1.0
 */
    public function wpAjaxFindPosts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles saving the widgets order via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxWidgetsOrder(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles saving a widget via AJAX.
 *
 * @since 3.1.0
 *
 * @global array $wp_registered_widgets
 * @global array $wp_registered_widget_controls
 * @global array $wp_registered_widget_updates
 */
    public function wpAjaxSaveWidget(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles updating a widget via AJAX.
 *
 * @since 3.9.0
 *
 * @global WP_Customize_Manager $wp_customize
 */
    public function wpAjaxUpdateWidget(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles removing inactive widgets via AJAX.
 *
 * @since 4.4.0
 */
    public function wpAjaxDeleteInactiveWidgets(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles creating missing image sub-sizes for just uploaded images via AJAX.
 *
 * @since 5.3.0
 */
    public function wpAjaxMediaCreateImageSubsizes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles uploading attachments via AJAX.
 *
 * @since 3.3.0
 */
    public function wpAjaxUploadAttachment(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles image editing via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxImageEditor(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles setting the featured image via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxSetPostThumbnail(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles retrieving HTML for the featured image via AJAX.
 *
 * @since 4.6.0
 */
    public function wpAjaxGetPostThumbnailHtml(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles setting the featured image for an attachment via AJAX.
 *
 * @since 4.0.0
 *
 * @see set_post_thumbnail()
 */
    public function wpAjaxSetAttachmentThumbnail(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles formatting a date via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxDateFormat(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles formatting a time via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxTimeFormat(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles removing a post lock via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxWpRemovePostLock(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles dismissing a WordPress pointer via AJAX.
 *
 * @since 3.1.0
 */
    public function wpAjaxDismissWpPointer(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles getting an attachment via AJAX.
 *
 * @since 3.5.0
 */
    public function wpAjaxGetAttachment(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles querying attachments via AJAX.
 *
 * @since 3.5.0
 */
    public function wpAjaxQueryAttachments(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles updating attachment attributes via AJAX.
 *
 * @since 3.5.0
 */
    public function wpAjaxSaveAttachment(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles saving backward compatible attachment attributes via AJAX.
 *
 * @since 3.5.0
 */
    public function wpAjaxSaveAttachmentCompat(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles saving the attachment order via AJAX.
 *
 * @since 3.5.0
 */
    public function wpAjaxSaveAttachmentOrder(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles sending an attachment to the editor via AJAX.
 *
 * Generates the HTML to send an attachment to the editor.
 * Backward compatible with the {@see 'media_send_to_editor'} filter
 * and the chain of filters that follow.
 *
 * @since 3.5.0
 */
    public function wpAjaxSendAttachmentToEditor(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles sending a link to the editor via AJAX.
 *
 * Generates the HTML to send a non-image embed link to the editor.
 *
 * Backward compatible with the following filters:
 * - file_send_to_editor_url
 * - audio_send_to_editor_url
 * - video_send_to_editor_url
 *
 * @since 3.5.0
 *
 * @global WP_Post  $post     Global post object.
 * @global WP_Embed $wp_embed WordPress Embed object.
 */
    public function wpAjaxSendLinkToEditor(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles the Heartbeat API via AJAX.
 *
 * Runs when the user is logged in.
 *
 * @since 3.6.0
 */
    public function wpAjaxHeartbeat(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles getting revision diffs via AJAX.
 *
 * @since 3.6.0
 */
    public function wpAjaxGetRevisionDiffs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles auto-saving the selected color scheme for
 * a user's own profile via AJAX.
 *
 * @since 3.8.0
 *
 * @global array $_wp_admin_css_colors
 */
    public function wpAjaxSaveUserColorScheme(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles getting themes from themes_api() via AJAX.
 *
 * @since 3.9.0
 *
 * @global array $themes_allowedtags
 * @global array $theme_field_defaults
 */
    public function wpAjaxQueryThemes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Applies [embed] Ajax handlers to a string.
 *
 * @since 4.0.0
 *
 * @global WP_Post    $post          Global post object.
 * @global WP_Embed   $wp_embed      WordPress Embed object.
 * @global WP_Scripts $wp_scripts
 * @global int        $content_width
 */
    public function wpAjaxParseEmbed(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @since 4.0.0
 *
 * @global WP_Post    $post       Global post object.
 * @global WP_Scripts $wp_scripts
 */
    public function wpAjaxParseMediaShortcode(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles destroying multiple open sessions for a user via AJAX.
 *
 * @since 4.1.0
 */
    public function wpAjaxDestroySessions(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles cropping an image via AJAX.
 *
 * @since 4.3.0
 */
    public function wpAjaxCropImage(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles generating a password via AJAX.
 *
 * @since 4.4.0
 */
    public function wpAjaxGeneratePassword(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles generating a password in the no-privilege context via AJAX.
 *
 * @since 5.7.0
 */
    public function wpAjaxNoprivGeneratePassword(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles saving the user's WordPress.org username via AJAX.
 *
 * @since 4.4.0
 */
    public function wpAjaxSaveWporgUsername(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles installing a theme via AJAX.
 *
 * @since 4.6.0
 *
 * @see Theme_Upgrader
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 */
    public function wpAjaxInstallTheme(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles updating a theme via AJAX.
 *
 * @since 4.6.0
 *
 * @see Theme_Upgrader
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 */
    public function wpAjaxUpdateTheme(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles deleting a theme via AJAX.
 *
 * @since 4.6.0
 *
 * @see delete_theme()
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 */
    public function wpAjaxDeleteTheme(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles installing a plugin via AJAX.
 *
 * @since 4.6.0
 *
 * @see Plugin_Upgrader
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 */
    public function wpAjaxInstallPlugin(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles activating a plugin via AJAX.
 *
 * @since 6.5.0
 */
    public function wpAjaxActivatePlugin(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles updating a plugin via AJAX.
 *
 * @since 4.2.0
 *
 * @see Plugin_Upgrader
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 */
    public function wpAjaxUpdatePlugin(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles deleting a plugin via AJAX.
 *
 * @since 4.6.0
 *
 * @see delete_plugins()
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 */
    public function wpAjaxDeletePlugin(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles searching plugins via AJAX.
 *
 * @since 4.6.0
 *
 * @global string $s Search term.
 */
    public function wpAjaxSearchPlugins(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles searching plugins to install via AJAX.
 *
 * @since 4.6.0
 */
    public function wpAjaxSearchInstallPlugins(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles editing a theme or plugin file via AJAX.
 *
 * @since 4.9.0
 *
 * @see wp_edit_theme_plugin_file()
 */
    public function wpAjaxEditThemePluginFile(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles exporting a user's personal data via AJAX.
 *
 * @since 4.9.6
 */
    public function wpAjaxWpPrivacyExportPersonalData(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles erasing personal data via AJAX.
 *
 * @since 4.9.6
 */
    public function wpAjaxWpPrivacyErasePersonalData(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles site health check to update the result status via AJAX.
 *
 * @since 5.2.0
 */
    public function wpAjaxHealthCheckSiteStatusResult(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles renewing the REST API nonce via AJAX.
 *
 * @since 5.3.0
 */
    public function wpAjaxRestNonce(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles enabling or disable plugin and theme auto-updates via AJAX.
 *
 * @since 5.5.0
 */
    public function wpAjaxToggleAutoUpdates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles sending a password reset link via AJAX.
 *
 * @since 5.7.0
 */
    public function wpAjaxSendPasswordReset(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a link using values provided in $_POST.
 *
 * @since 2.0.0
 *
 * @return int|\WP_Error Value 0 or WP_Error on failure. The link ID on success.
 */
    public function addLink(): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates or inserts a link using values provided in $_POST.
 *
 * @since 2.0.0
 *
 * @param int $linkId Optional. ID of the link to edit. Default 0.
 * @return int|\WP_Error Value 0 or WP_Error on failure. The link ID on success.
 */
    public function editLink(int $linkId = 0): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the default link for editing.
 *
 * @since 2.0.0
 *
 * @return \stdClass Default link object.
 */
    public function getDefaultLinkToEdit(): \stdClass
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a specified link from the database.
 *
 * @since 2.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $linkId ID of the link to delete.
 * @return true Always true.
 */
    public function wpDeleteLink(int $linkId): true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the link category IDs associated with the link specified.
 *
 * @since 2.1.0
 *
 * @param int $linkId Link ID to look up.
 * @return int[] The IDs of the requested link's categories.
 */
    public function wpGetLinkCats(int $linkId = 0): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves link data based on its ID.
 *
 * @since 2.0.0
 *
 * @param int|\stdClass $link Link ID or object to retrieve.
 * @return object Link object for editing.
 */
    public function getLinkToEdit(int|\stdClass $link): object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Inserts a link into the database, or updates an existing link.
 *
 * Runs all the necessary sanitizing, provides default values if arguments are missing,
 * and finally saves the link.
 *
 * @since 2.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array $linkdata {
 *     Elements that make up the link to insert.
 *
 *     @type int    $link_id          Optional. The ID of the existing link if updating.
 *     @type string $link_url         The URL the link points to.
 *     @type string $link_name        The title of the link.
 *     @type string $link_image       Optional. A URL of an image.
 *     @type string $link_target      Optional. The target element for the anchor tag.
 *     @type string $link_description Optional. A short description of the link.
 *     @type string $link_visible     Optional. 'Y' means visible, anything else means not.
 *     @type int    $link_owner       Optional. A user ID.
 *     @type int    $link_rating      Optional. A rating for the link.
 *     @type string $link_rel         Optional. A relationship of the link to you.
 *     @type string $link_notes       Optional. An extended description of or notes on the link.
 *     @type string $link_rss         Optional. A URL of an associated RSS feed.
 *     @type int    $link_category    Optional. The term ID of the link category.
 *                                    If empty, uses default link category.
 * }
 * @param bool $wpError Optional. Whether to return a WP_Error object on failure. Default false.
 * @return int|\WP_Error Value 0 or WP_Error on failure. The link ID on success.
 */
    public function wpInsertLink(array $linkdata, bool $wpError = false): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates link with the specified link categories.
 *
 * @since 2.1.0
 *
 * @param int $linkId         ID of the link to update.
 * @param int[] $linkCategories Array of link category IDs to add the link to.
 */
    public function wpSetLinkCats(int $linkId = 0, array $linkCategories = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates a link in the database.
 *
 * @since 2.0.0
 *
 * @param array $linkdata Link data to update. See wp_insert_link() for accepted arguments.
 * @return int|\WP_Error Value 0 or WP_Error on failure. The updated link ID on success.
 */
    public function wpUpdateLink(array $linkdata): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns value of command line params.
 * Exits when a required param is not set.
 *
 * @param string $param
 * @param bool $required
 * @return mixed
 */
    public function getCliArgs(string $param, bool $required = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if a comment exists based on author and date.
 *
 * For best performance, use `$timezone = 'gmt'`, which queries a field that is properly indexed. The default value
 * for `$timezone` is 'blog' for legacy reasons.
 *
 * @since 2.0.0
 * @since 4.4.0 Added the `$timezone` parameter.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $commentAuthor Author of the comment.
 * @param string $commentDate   Date of the comment.
 * @param string $timezone       Timezone. Accepts 'blog' or 'gmt'. Default 'blog'.
 * @return string|null Comment post ID on success.
 */
    public function commentExists(string $commentAuthor, string $commentDate, string $timezone = 'blog'): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates a comment with values provided in $_POST.
 *
 * @since 2.0.0
 * @since 5.5.0 A return value was added.
 *
 * @return int|\WP_Error The value 1 if the comment was updated, 0 if not updated.
 *                      A WP_Error object on failure.
 */
    public function editComment(): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a WP_Comment object based on comment ID.
 *
 * @since 2.0.0
 *
 * @param int $id ID of comment to retrieve.
 * @return \WP_Comment|false Comment if found. False on failure.
 */
    public function getCommentToEdit(int $id): \WP_Comment|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the number of pending comments on a post or posts.
 *
 * @since 2.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|int[] $postId Either a single Post ID or an array of Post IDs
 * @return int|int[] Either a single Posts pending comments as an int or an array of ints keyed on the Post IDs
 */
    public function getPendingCommentsNum(int|array $postId): int|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds avatars to relevant places in admin.
 *
 * @since 2.5.0
 *
 * @param string $name User name.
 * @return string Avatar with the user name.
 */
    public function floatedAdminAvatar(string $name): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues comment shortcuts jQuery script.
 *
 * @since 2.7.0
 */
    public function enqueueCommentHotkeysJs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays error message at bottom of comments.
 *
 * @param string $msg Error Message. Assumed to contain HTML and be sanitized.
 */
    public function commentFooterDie(string $msg): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the contributor credits.
 *
 * @since 3.2.0
 * @since 5.6.0 Added the `$version` and `$locale` parameters.
 *
 * @param string $version WordPress version. Defaults to the current version.
 * @param string $locale  WordPress locale. Defaults to the current user's locale.
 * @return array|false A list of all of the contributors, or false on error.
 */
    public function wpCredits(string $version = '', string $locale = ''): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the title for a given group of contributors.
 *
 * @since 5.3.0
 *
 * @param array $groupData The current contributor group.
 */
    public function wpCreditsSectionTitle(array $groupData = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a list of contributors for a given group.
 *
 * @since 5.3.0
 *
 * @param array $credits The credits groups returned from the API.
 * @param string $slug    The current group to display.
 */
    public function wpCreditsSectionList(array $credits = [], string $slug = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers dashboard widgets.
 *
 * Handles POST data, sets up filters.
 *
 * @since 2.5.0
 *
 * @global array $wp_registered_widgets
 * @global array $wp_registered_widget_controls
 * @global callable[] $wp_dashboard_control_callbacks
 */
    public function wpDashboardSetup(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new dashboard widget.
 *
 * @since 2.7.0
 * @since 5.6.0 The `$context` and `$priority` parameters were added.
 *
 * @global callable[] $wp_dashboard_control_callbacks
 *
 * @param string $widgetId        Widget ID  (used in the 'id' attribute for the widget).
 * @param string $widgetName      Title of the widget.
 * @param callable $callback         Function that fills the widget with the desired content.
 *                                   The function should echo its output.
 * @param callable $controlCallback Optional. Function that outputs controls for the widget. Default null.
 * @param array $callbackArgs    Optional. Data that should be set as the $args property of the widget array
 *                                   (which is the second parameter passed to your callback). Default null.
 * @param string $context          Optional. The context within the screen where the box should display.
 *                                   Accepts 'normal', 'side', 'column3', or 'column4'. Default 'normal'.
 * @param string $priority         Optional. The priority within the context where the box should show.
 *                                   Accepts 'high', 'core', 'default', or 'low'. Default 'core'.
 */
    public function wpAddDashboardWidget(string $widgetId, string $widgetName, callable $callback, callable $controlCallback = null, array $callbackArgs = null, string $context = 'normal', string $priority = 'core'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the dashboard.
 *
 * @since 2.5.0
 */
    public function wpDashboard(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Dashboard widget that displays some basic stats about the site.
 *
 * Formerly 'Right Now'. A streamlined 'At a Glance' as of 3.8.
 *
 * @since 2.7.0
 */
    public function wpDashboardRightNow(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @since 3.1.0
 */
    public function wpNetworkDashboardRightNow(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the Quick Draft widget.
 *
 * @since 3.8.0
 *
 * @global int $post_ID
 *
 * @param string|false $errorMsg Optional. Error message. Default false.
 */
    public function wpDashboardQuickPress(string|false $errorMsg = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Show recent drafts of the user on the dashboard.
 *
 * @since 2.7.0
 *
 * @param WP_Post[]|false $drafts Optional. Array of posts to display. Default false.
 */
    public function wpDashboardRecentDrafts(array|false $drafts = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the Activity widget.
 *
 * Callback function for {@see 'dashboard_activity'}.
 *
 * @since 3.8.0
 */
    public function wpDashboardSiteActivity(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates Publishing Soon and Recently Published sections.
 *
 * @since 3.8.0
 *
 * @param array $args {
 *     An array of query and display arguments.
 *
 *     @type int    $max     Number of posts to display.
 *     @type string $status  Post status.
 *     @type string $order   Designates ascending ('ASC') or descending ('DESC') order.
 *     @type string $title   Section title.
 *     @type string $id      The container id.
 * }
 * @return bool False if no posts were found. True otherwise.
 */
    public function wpDashboardRecentPosts(array $args): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Show Comments section.
 *
 * @since 3.8.0
 *
 * @param int $totalItems Optional. Number of comments to query. Default 5.
 * @return bool False if no comments were found. True otherwise.
 */
    public function wpDashboardRecentComments(int $totalItems = 5): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display generic dashboard RSS widget feed.
 *
 * @since 2.5.0
 *
 * @param string $widgetId
 */
    public function wpDashboardRssOutput(string $widgetId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks to see if all of the feed url in $check_urls are cached.
 *
 * If $check_urls is empty, look for the rss feed url found in the dashboard
 * widget options of $widget_id. If cached, call $callback, a function that
 * echoes out output for this widget. If not cache, echo a "Loading..." stub
 * which is later replaced by Ajax call (see top of /wp-admin/index.php)
 *
 * @since 2.5.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @param string $widgetId  The widget ID.
 * @param callable $callback   The callback function used to display each feed.
 * @param array $checkUrls RSS feeds.
 * @param mixed    ...$args    Optional additional parameters to pass to the callback function.
 * @return bool True on success, false on failure.
 */
    public function wpDashboardCachedRssWidget(string $widgetId, callable $callback, array $checkUrls = []): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calls widget control callback.
 *
 * @since 2.5.0
 *
 * @global callable[] $wp_dashboard_control_callbacks
 *
 * @param int|false $widgetControlId Optional. Registered widget ID. Default false.
 */
    public function wpDashboardTriggerWidgetControl(int|false $widgetControlId = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets up the RSS dashboard widget control and $args to be used as input to wp_widget_rss_form().
 *
 * Handles POST data from RSS-type widgets.
 *
 * @since 2.5.0
 *
 * @param string $widgetId
 * @param array $formInputs
 */
    public function wpDashboardRssControl(string $widgetId, array $formInputs = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the Events and News dashboard widget.
 *
 * @since 4.8.0
 */
    public function wpDashboardEventsNews(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the markup for the Community Events section of the Events and News Dashboard widget.
 *
 * @since 4.8.0
 */
    public function wpPrintCommunityEventsMarkup(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the events templates for the Event and News widget.
 *
 * @since 4.8.0
 */
    public function wpPrintCommunityEventsTemplates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * 'WordPress Events and News' dashboard widget.
 *
 * @since 2.7.0
 * @since 4.8.0 Removed popular plugins feed.
 */
    public function wpDashboardPrimary(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the WordPress events and news feeds.
 *
 * @since 3.8.0
 * @since 4.8.0 Removed popular plugins feed.
 *
 * @param string $widgetId Widget ID.
 * @param array $feeds     Array of RSS feeds.
 */
    public function wpDashboardPrimaryOutput(string $widgetId, array $feeds): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays file upload quota on dashboard.
 *
 * Runs on the {@see 'activity_box_end'} hook in wp_dashboard_right_now().
 *
 * @since 3.0.0
 *
 * @return true|void True if not multisite, user can't upload files, or the space check option is disabled.
 */
    public function wpDashboardQuota(): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the browser update nag.
 *
 * @since 3.2.0
 * @since 5.8.0 Added a special message for Internet Explorer users.
 *
 * @global bool $is_IE
 */
    public function wpDashboardBrowserNag(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds an additional class to the browser nag if the current version is insecure.
 *
 * @since 3.2.0
 *
 * @param string[] $classes Array of meta box classes.
 * @return string[] Modified array of meta box classes.
 */
    public function dashboardBrowserNagClass(array $classes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if the user needs a browser update.
 *
 * @since 3.2.0
 *
 * @return array|false Array of browser data on success, false on failure.
 */
    public function wpCheckBrowserVersion(): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the PHP update nag.
 *
 * @since 5.1.0
 */
    public function wpDashboardPhpNag(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds an additional class to the PHP nag if the current version is insecure.
 *
 * @since 5.1.0
 *
 * @param string[] $classes Array of meta box classes.
 * @return string[] Modified array of meta box classes.
 */
    public function dashboardPhpNagClass(array $classes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the Site Health Status widget.
 *
 * @since 5.4.0
 */
    public function wpDashboardSiteHealth(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs empty dashboard widget to be populated by JS later.
 *
 * Usable by plugins.
 *
 * @since 2.5.0
 */
    public function wpDashboardEmpty(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a welcome panel to introduce users to WordPress.
 *
 * @since 3.3.0
 * @since 5.9.0 Send users to the Site Editor if the active theme is block-based.
 */
    public function wpWelcomePanel(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates the WXR export file for download.
 *
 * Default behavior is to export all content, however, note that post content will only
 * be exported for post types with the `can_export` argument enabled. Any posts with the
 * 'auto-draft' status will be skipped.
 *
 * @since 2.1.0
 * @since 5.7.0 Added the `post_modified` and `post_modified_gmt` fields to the export file.
 *
 * @global wpdb    $wpdb WordPress database abstraction object.
 * @global WP_Post $post Global post object.
 *
 * @param array $args {
 *     Optional. Arguments for generating the WXR export file for download. Default empty array.
 *
 *     @type string $content    Type of content to export. If set, only the post content of this post type
 *                              will be exported. Accepts 'all', 'post', 'page', 'attachment', or a defined
 *                              custom post. If an invalid custom post type is supplied, every post type for
 *                              which `can_export` is enabled will be exported instead. If a valid custom post
 *                              type is supplied but `can_export` is disabled, then 'posts' will be exported
 *                              instead. When 'all' is supplied, only post types with `can_export` enabled will
 *                              be exported. Default 'all'.
 *     @type string $author     Author to export content for. Only used when `$content` is 'post', 'page', or
 *                              'attachment'. Accepts false (all) or a specific author ID. Default false (all).
 *     @type string $category   Category (slug) to export content for. Used only when `$content` is 'post'. If
 *                              set, only post content assigned to `$category` will be exported. Accepts false
 *                              or a specific category slug. Default is false (all categories).
 *     @type string $start_date Start date to export content from. Expected date format is 'Y-m-d'. Used only
 *                              when `$content` is 'post', 'page' or 'attachment'. Default false (since the
 *                              beginning of time).
 *     @type string $end_date   End date to export content to. Expected date format is 'Y-m-d'. Used only when
 *                              `$content` is 'post', 'page' or 'attachment'. Default false (latest publish date).
 *     @type string $status     Post status to export posts for. Used only when `$content` is 'post' or 'page'.
 *                              Accepts false (all statuses except 'auto-draft'), or a specific status, i.e.
 *                              'publish', 'pending', 'draft', 'auto-draft', 'future', 'private', 'inherit', or
 *                              'trash'. Default false (all statuses except 'auto-draft').
 * }
 */
    public function exportWp(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the description for standard WordPress theme files.
 *
 * @since 1.5.0
 *
 * @global array $wp_file_descriptions Theme file descriptions.
 * @global array $allowed_files        List of allowed files.
 *
 * @param string $file Filesystem path or filename.
 * @return string Description of file from $wp_file_descriptions or basename of $file if description doesn't exist.
 *                Appends 'Page Template' to basename of $file if the file is a page template.
 */
    public function getFileDescription(string $file): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the absolute filesystem path to the root of the WordPress installation.
 *
 * @since 1.5.0
 *
 * @return string Full filesystem path to the root of the WordPress installation.
 */
    public function getHomePath(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep.
 *
 * The depth of the recursiveness can be controlled by the $levels param.
 *
 * @since 2.6.0
 * @since 4.9.0 Added the `$exclusions` parameter.
 * @since 6.3.0 Added the `$include_hidden` parameter.
 *
 * @param string $folder         Optional. Full path to folder. Default empty.
 * @param int $levels         Optional. Levels of folders to follow, Default 100 (PHP Loop limit).
 * @param string[] $exclusions     Optional. List of folders and files to skip.
 * @param bool $includeHidden Optional. Whether to include details of hidden ("." prefixed) files.
 *                                 Default false.
 * @return string[]|false Array of files on success, false on failure.
 */
    public function listFiles(string $folder = '', int $levels = 100, array $exclusions = [], bool $includeHidden = false): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the list of file extensions that are editable in plugins.
 *
 * @since 4.9.0
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return string[] Array of editable file extensions.
 */
    public function wpGetPluginFileEditableExtensions(string $plugin): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the list of file extensions that are editable for a given theme.
 *
 * @since 4.9.0
 *
 * @param \WP_Theme $theme Theme object.
 * @return string[] Array of editable file extensions.
 */
    public function wpGetThemeFileEditableExtensions(\WP_Theme $theme): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints file editor templates (for plugins and themes).
 *
 * @since 4.9.0
 */
    public function wpPrintFileEditorTemplates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Attempts to edit a file for a theme or plugin.
 *
 * When editing a PHP file, loopback requests will be made to the admin and the homepage
 * to attempt to see if there is a fatal error introduced. If so, the PHP change will be
 * reverted.
 *
 * @since 4.9.0
 *
 * @param string[] $args {
 *     Args. Note that all of the arg values are already unslashed. They are, however,
 *     coming straight from `$_POST` and are not validated or sanitized in any way.
 *
 *     @type string $file       Relative path to file.
 *     @type string $plugin     Path to the plugin file relative to the plugins directory.
 *     @type string $theme      Theme being edited.
 *     @type string $newcontent New content for the file.
 *     @type string $nonce      Nonce.
 * }
 * @return true|\WP_Error True on success or `WP_Error` on failure.
 */
    public function wpEditThemePluginFile(array $args): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a filename of a temporary unique file.
 *
 * Please note that the calling function must delete or move the file.
 *
 * The filename is based off the passed parameter or defaults to the current unix timestamp,
 * while the directory can either be passed as well, or by leaving it blank, default to a writable
 * temporary directory.
 *
 * @since 2.6.0
 *
 * @param string $filename Optional. Filename to base the Unique file off. Default empty.
 * @param string $dir      Optional. Directory to store the file in. Default empty.
 * @return string A writable filename.
 */
    public function wpTempnam(string $filename = '', string $dir = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Makes sure that the file that was requested to be edited is allowed to be edited.
 *
 * Function will die if you are not allowed to edit the file.
 *
 * @since 1.5.0
 *
 * @param string $file          File the user is attempting to edit.
 * @param string[] $allowedFiles Optional. Array of allowed files to edit.
 *                                `$file` must match an entry exactly.
 * @return string|void Returns the file name on success, dies on failure.
 */
    public function validateFileToEdit(string $file, array $allowedFiles = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Wrapper for _wp_handle_upload().
 *
 * Passes the {@see 'wp_handle_upload'} action.
 *
 * @since 2.0.0
 *
 * @see _wp_handle_upload()
 *
 * @param array $file      Reference to a single element of `$_FILES`.
 *                               Call the function once for each uploaded file.
 *                               See _wp_handle_upload() for accepted values.
 * @param array|false $overrides Optional. An associative array of names => values
 *                               to override default variables. Default false.
 *                               See _wp_handle_upload() for accepted values.
 * @param string|null $time      Optional. Time formatted in 'yyyy/mm'. Default null.
 * @return array See _wp_handle_upload() for return value.
 */
    public function wpHandleUpload(array $file, array|false $overrides = false, string|null $time = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Wrapper for _wp_handle_upload().
 *
 * Passes the {@see 'wp_handle_sideload'} action.
 *
 * @since 2.6.0
 *
 * @see _wp_handle_upload()
 *
 * @param array $file      Reference to a single element of `$_FILES`.
 *                               Call the function once for each uploaded file.
 *                               See _wp_handle_upload() for accepted values.
 * @param array|false $overrides Optional. An associative array of names => values
 *                               to override default variables. Default false.
 *                               See _wp_handle_upload() for accepted values.
 * @param string|null $time      Optional. Time formatted in 'yyyy/mm'. Default null.
 * @return array See _wp_handle_upload() for return value.
 */
    public function wpHandleSideload(array $file, array|false $overrides = false, string|null $time = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Downloads a URL to a local temporary file using the WordPress HTTP API.
 *
 * Please note that the calling function must delete or move the file.
 *
 * @since 2.5.0
 * @since 5.2.0 Signature Verification with SoftFail was added.
 * @since 5.9.0 Support for Content-Disposition filename was added.
 *
 * @param string $url                    The URL of the file to download.
 * @param int $timeout                The timeout for the request to download the file.
 *                                       Default 300 seconds.
 * @param bool $signatureVerification Whether to perform Signature Verification.
 *                                       Default false.
 * @return string|\WP_Error Filename on success, WP_Error on failure.
 */
    public function downloadUrl(string $url, int $timeout = 300, bool $signatureVerification = false): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calculates and compares the MD5 of a file to its expected value.
 *
 * @since 3.7.0
 *
 * @param string $filename     The filename to check the MD5 of.
 * @param string $expectedMd5 The expected MD5 of the file, either a base64-encoded raw md5,
 *                             or a hex-encoded md5.
 * @return bool|\WP_Error True on success, false when the MD5 format is unknown/unexpected,
 *                       WP_Error on failure.
 */
    public function verifyFileMd5(string $filename, string $expectedMd5): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Verifies the contents of a file against its ED25519 signature.
 *
 * @since 5.2.0
 *
 * @param string $filename            The file to validate.
 * @param string|array $signatures          A Signature provided for the file.
 * @param string|false $filenameForErrors Optional. A friendly filename for errors.
 * @return bool|\WP_Error True on success, false if verification not attempted,
 *                       or WP_Error describing an error condition.
 */
    public function verifyFileSignature(string $filename, string|array $signatures, string|false $filenameForErrors = false): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the list of signing keys trusted by WordPress.
 *
 * @since 5.2.0
 *
 * @return string[] Array of base64-encoded signing keys.
 */
    public function wpTrustedKeys(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the given file is a valid ZIP file.
 *
 * This function does not test to ensure that a file exists. Non-existent files
 * are not valid ZIPs, so those will also return false.
 *
 * @since 6.4.4
 *
 * @param string $file Full path to the ZIP file.
 * @return bool Whether the file is a valid ZIP file.
 */
    public function wpZipFileIsValid(string $file): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unzips a specified ZIP file to a location on the filesystem via the WordPress
 * Filesystem Abstraction.
 *
 * Assumes that WP_Filesystem() has already been called and set up. Does not extract
 * a root-level __MACOSX directory, if present.
 *
 * Attempts to increase the PHP memory limit to 256M before uncompressing. However,
 * the most memory required shouldn't be much larger than the archive itself.
 *
 * @since 2.5.0
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 *
 * @param string $file Full path and filename of ZIP archive.
 * @param string $to   Full path on the filesystem to extract archive to.
 * @return true|\WP_Error True on success, WP_Error on failure.
 */
    public function unzipFile(string $file, string $to): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Copies a directory from one location to another via the WordPress Filesystem
 * Abstraction.
 *
 * Assumes that WP_Filesystem() has already been called and setup.
 *
 * @since 2.5.0
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 *
 * @param string $from      Source directory.
 * @param string $to        Destination directory.
 * @param string[] $skipList An array of files/folders to skip copying.
 * @return true|\WP_Error True on success, WP_Error on failure.
 */
    public function copyDir(string $from, string $to, array $skipList = []): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Moves a directory from one location to another.
 *
 * Recursively invalidates OPcache on success.
 *
 * If the renaming failed, falls back to copy_dir().
 *
 * Assumes that WP_Filesystem() has already been called and setup.
 *
 * This function is not designed to merge directories, copy_dir() should be used instead.
 *
 * @since 6.2.0
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 *
 * @param string $from      Source directory.
 * @param string $to        Destination directory.
 * @param bool $overwrite Optional. Whether to overwrite the destination directory if it exists.
 *                          Default false.
 * @return true|\WP_Error True on success, WP_Error on failure.
 */
    public function moveDir(string $from, string $to, bool $overwrite = false): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Initializes and connects the WordPress Filesystem Abstraction classes.
 *
 * This function will include the chosen transport and attempt connecting.
 *
 * Plugins may add extra transports, And force WordPress to use them by returning
 * the filename via the {@see 'filesystem_method_file'} filter.
 *
 * @since 2.5.0
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 *
 * @param array|false $args                         Optional. Connection args, These are passed
 *                                                   directly to the `WP_Filesystem_*()` classes.
 *                                                   Default false.
 * @param string|false $context                      Optional. Context for get_filesystem_method().
 *                                                   Default false.
 * @param bool $allowRelaxedFileOwnership Optional. Whether to allow Group/World writable.
 *                                                   Default false.
 * @return bool|null True on success, false on failure,
 *                   null if the filesystem method class file does not exist.
 */
    public function wPFilesystem(array|false $args = false, string|false $context = false, bool $allowRelaxedFileOwnership = false): bool|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines which method to use for reading, writing, modifying, or deleting
 * files on the filesystem.
 *
 * The priority of the transports are: Direct, SSH2, FTP PHP Extension, FTP Sockets
 * (Via Sockets class, or `fsockopen()`). Valid values for these are: 'direct', 'ssh2',
 * 'ftpext' or 'ftpsockets'.
 *
 * The return value can be overridden by defining the `FS_METHOD` constant in `wp-config.php`,
 * or filtering via {@see 'filesystem_method'}.
 *
 * @link https://developer.wordpress.org/advanced-administration/wordpress/wp-config/#wordpress-upgrade-constants
 *
 * Plugins may define a custom transport handler, See WP_Filesystem().
 *
 * @since 2.5.0
 *
 * @global callable $_wp_filesystem_direct_method
 *
 * @param array $args                         Optional. Connection details. Default empty array.
 * @param string $context                      Optional. Full path to the directory that is tested
 *                                             for being writable. Default empty.
 * @param bool $allowRelaxedFileOwnership Optional. Whether to allow Group/World writable.
 *                                             Default false.
 * @return string The transport to use, see description for valid return values.
 */
    public function getFilesystemMethod(array $args = [], string $context = '', bool $allowRelaxedFileOwnership = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a form to the user to request for their FTP/SSH details in order
 * to connect to the filesystem.
 *
 * All chosen/entered details are saved, excluding the password.
 *
 * Hostnames may be in the form of hostname:portnumber (eg: wordpress.org:2467)
 * to specify an alternate FTP/SSH port.
 *
 * Plugins may override this form by returning true|false via the {@see 'request_filesystem_credentials'} filter.
 *
 * @since 2.5.0
 * @since 4.6.0 The `$context` parameter default changed from `false` to an empty string.
 *
 * @global string $pagenow The filename of the current screen.
 *
 * @param string $formPost                    The URL to post the form to.
 * @param string $type                         Optional. Chosen type of filesystem. Default empty.
 * @param bool|\WP_Error $error                        Optional. Whether the current request has failed
 *                                                    to connect, or an error object. Default false.
 * @param string $context                      Optional. Full path to the directory that is tested
 *                                                    for being writable. Default empty.
 * @param array $extraFields                 Optional. Extra `POST` fields to be checked
 *                                                    for inclusion in the post. Default null.
 * @param bool $allowRelaxedFileOwnership Optional. Whether to allow Group/World writable.
 *                                                    Default false.
 * @return bool|array True if no filesystem credentials are required,
 *                    false if they are required but have not been provided,
 *                    array of credentials if they are required and have been provided.
 */
    public function requestFilesystemCredentials(string $formPost, string $type = '', bool|\WP_Error $error = false, string $context = '', array $extraFields = null, bool $allowRelaxedFileOwnership = false): bool|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the filesystem credentials modal when needed.
 *
 * @since 4.2.0
 */
    public function wpPrintRequestFilesystemCredentialsModal(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Attempts to clear the opcode cache for an individual PHP file.
 *
 * This function can be called safely without having to check the file extension
 * or availability of the OPcache extension.
 *
 * Whether or not invalidation is possible is cached to improve performance.
 *
 * @since 5.5.0
 *
 * @link https://www.php.net/manual/en/function.opcache-invalidate.php
 *
 * @param string $filepath Path to the file, including extension, for which the opcode cache is to be cleared.
 * @param bool $force    Invalidate even if the modification time is not newer than the file in cache.
 *                         Default false.
 * @return bool True if opcache was invalidated for `$filepath`, or there was nothing to invalidate.
 *              False if opcache invalidation is not available, or is disabled via filter.
 */
    public function wpOpcacheInvalidate(string $filepath, bool $force = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Attempts to clear the opcode cache for a directory of files.
 *
 * @since 6.2.0
 *
 * @see wp_opcache_invalidate()
 * @link https://www.php.net/manual/en/function.opcache-invalidate.php
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 *
 * @param string $dir The path to the directory for which the opcode cache is to be cleared.
 */
    public function wpOpcacheInvalidateDirectory(string $dir): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the WP image-editing interface.
 *
 * @since 2.9.0
 *
 * @param int $postId Attachment post ID.
 * @param false|object $msg     Optional. Message to display for image editor updates or errors.
 *                              Default false.
 */
    public function wpImageEditor(int $postId, false|object $msg = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Streams image in WP_Image_Editor to browser.
 *
 * @since 2.9.0
 *
 * @param \WP_Image_Editor $image         The image editor instance.
 * @param string $mimeType     The mime type of the image.
 * @param int $attachmentId The image's attachment post ID.
 * @return bool True on success, false on failure.
 */
    public function wpStreamImage(\WP_Image_Editor $image, string $mimeType, int $attachmentId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves image to file.
 *
 * @since 2.9.0
 * @since 3.5.0 The `$image` parameter expects a `WP_Image_Editor` instance.
 * @since 6.0.0 The `$filesize` value was added to the returned array.
 *
 * @param string $filename  Name of the file to be saved.
 * @param \WP_Image_Editor $image     The image editor instance.
 * @param string $mimeType The mime type of the image.
 * @param int $postId   Attachment post ID.
 * @return array|\WP_Error|bool {
 *     Array on success or WP_Error if the file failed to save.
 *     When called with a deprecated value for the `$image` parameter,
 *     i.e. a non-`WP_Image_Editor` image resource or `GdImage` instance,
 *     the function will return true on success, false on failure.
 *
 *     @type string $path      Path to the image file.
 *     @type string $file      Name of the image file.
 *     @type int    $width     Image width.
 *     @type int    $height    Image height.
 *     @type string $mime-type The mime type of the image.
 *     @type int    $filesize  File size of the image.
 * }
 */
    public function wpSaveImageFile(string $filename, \WP_Image_Editor $image, string $mimeType, int $postId): array|\WP_Error|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs group of changes on Editor specified.
 *
 * @since 2.9.0
 *
 * @param \WP_Image_Editor $image   WP_Image_Editor instance.
 * @param array $changes Array of change operations.
 * @return \WP_Image_Editor WP_Image_Editor instance with changes applied.
 */
    public function imageEditApplyChanges(\WP_Image_Editor $image, array $changes): \WP_Image_Editor
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Streams image in post to browser, along with enqueued changes
 * in `$_REQUEST['history']`.
 *
 * @since 2.9.0
 *
 * @param int $postId Attachment post ID.
 * @return bool True on success, false on failure.
 */
    public function streamPreviewImage(int $postId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Restores the metadata for a given attachment.
 *
 * @since 2.9.0
 *
 * @param int $postId Attachment post ID.
 * @return \stdClass Image restoration message object.
 */
    public function wpRestoreImage(int $postId): \stdClass
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves image to post, along with enqueued changes
 * in `$_REQUEST['history']`.
 *
 * @since 2.9.0
 *
 * @param int $postId Attachment post ID.
 * @return \stdClass
 */
    public function wpSaveImage(int $postId): \stdClass
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Crops an image to a given size.
 *
 * @since 2.1.0
 *
 * @param string|int $src      The source file or Attachment ID.
 * @param int $srcX    The start x position to crop from.
 * @param int $srcY    The start y position to crop from.
 * @param int $srcW    The width to crop.
 * @param int $srcH    The height to crop.
 * @param int $dstW    The destination width.
 * @param int $dstH    The destination height.
 * @param bool|false $srcAbs  Optional. If the source crop points are absolute.
 * @param string|false $dstFile Optional. The destination file to write to.
 * @return string|\WP_Error New filepath on success, WP_Error on failure.
 */
    public function wpCropImage(string|int $src, int $srcX, int $srcY, int $srcW, int $srcH, int $dstW, int $dstH, bool $srcAbs = false, string|false $dstFile = false): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Compare the existing image sub-sizes (as saved in the attachment meta)
 * to the currently registered image sub-sizes, and return the difference.
 *
 * Registered sub-sizes that are larger than the image are skipped.
 *
 * @since 5.3.0
 *
 * @param int $attachmentId The image attachment post ID.
 * @return array[] Associative array of arrays of image sub-size information for
 *                 missing image sizes, keyed by image size name.
 */
    public function wpGetMissingImageSubsizes(int $attachmentId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * If any of the currently registered image sub-sizes are missing,
 * create them and update the image meta data.
 *
 * @since 5.3.0
 *
 * @param int $attachmentId The image attachment post ID.
 * @return array|\WP_Error The updated image meta data array or WP_Error object
 *                        if both the image meta and the attached file are missing.
 */
    public function wpUpdateImageSubsizes(int $attachmentId): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates image sub-sizes, adds the new data to the image meta `sizes` array, and updates the image metadata.
 *
 * Intended for use after an image is uploaded. Saves/updates the image metadata after each
 * sub-size is created. If there was an error, it is added to the returned image metadata array.
 *
 * @since 5.3.0
 *
 * @param string $file          Full path to the image file.
 * @param int $attachmentId Attachment ID to process.
 * @return array The image attachment meta data.
 */
    public function wpCreateImageSubsizes(string $file, int $attachmentId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Copy parent attachment properties to newly cropped image.
 *
 * @since 6.5.0
 *
 * @param string $cropped              Path to the cropped image file.
 * @param int $parentAttachmentId Parent file Attachment ID.
 * @param string $context              Control calling the function.
 * @return array Properties of attachment.
 */
    public function wpCopyParentAttachmentProperties(string $cropped, int $parentAttachmentId, string $context = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates attachment meta data and create image sub-sizes for images.
 *
 * @since 2.1.0
 * @since 6.0.0 The `$filesize` value was added to the returned array.
 *
 * @param int $attachmentId Attachment ID to process.
 * @param string $file          Filepath of the attached image.
 * @return array Metadata for attachment.
 */
    public function wpGenerateAttachmentMetadata(int $attachmentId, string $file): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts a fraction string to a decimal.
 *
 * @since 2.5.0
 *
 * @param string $str Fraction string.
 * @return int|float Returns calculated fraction or integer 0 on invalid input.
 */
    public function wpExifFrac2dec(string $str): int|float
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts the exif date format to a unix timestamp.
 *
 * @since 2.5.0
 *
 * @param string $str A date string expected to be in Exif format (Y:m:d H:i:s).
 * @return int|false The unix timestamp, or false on failure.
 */
    public function wpExifDate2ts(string $str): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets extended image metadata, exif or iptc as available.
 *
 * Retrieves the EXIF metadata aperture, credit, camera, caption, copyright, iso
 * created_timestamp, focal_length, shutter_speed, and title.
 *
 * The IPTC metadata that is retrieved is APP13, credit, byline, created date
 * and time, caption, copyright, and title. Also includes FNumber, Model,
 * DateTimeDigitized, FocalLength, ISOSpeedRatings, and ExposureTime.
 *
 * @todo Try other exif libraries if available.
 * @since 2.5.0
 *
 * @param string $file
 * @return array|false Image metadata array on success, false on failure.
 */
    public function wpReadImageMetadata(string $file): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates that file is an image.
 *
 * @since 2.5.0
 *
 * @param string $path File path to test if valid image.
 * @return bool True if valid image, false if not valid image.
 */
    public function fileIsValidImage(string $path): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates that file is suitable for displaying within a web page.
 *
 * @since 2.5.0
 *
 * @param string $path File path to test.
 * @return bool True if suitable, false if not suitable.
 */
    public function fileIsDisplayableImage(string $path): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads an image resource for editing.
 *
 * @since 2.9.0
 *
 * @param int $attachmentId Attachment ID.
 * @param string $mimeType     Image mime type.
 * @param string|int[] $size          Optional. Image size. Accepts any registered image size name, or an array
 *                                    of width and height values in pixels (in that order). Default 'full'.
 * @return \resource|\GdImage|false The resulting image resource or GdImage instance on success,
 *                                false on failure.
 */
    public function loadImageToEdit(int $attachmentId, string $mimeType, string|array $size = 'full'): \resource|\GdImage|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the list of importers.
 *
 * @since 2.0.0
 *
 * @global array $wp_importers
 * @return array
 */
    public function getImporters(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers importer for WordPress.
 *
 * @since 2.0.0
 *
 * @global array $wp_importers
 *
 * @param string $id          Importer tag. Used to uniquely identify importer.
 * @param string $name        Importer name and title.
 * @param string $description Importer description.
 * @param callable $callback    Callback to run.
 * @return void|\WP_Error Void on success. WP_Error when $callback is WP_Error.
 */
    public function registerImporter(string $id, string $name, string $description, callable $callback): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleanup importer.
 *
 * Removes attachment based on ID.
 *
 * @since 2.0.0
 *
 * @param string $id Importer ID.
 */
    public function wpImportCleanup(string $id): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles importer uploading and adds attachment.
 *
 * @since 2.0.0
 *
 * @return array Uploaded file's details on success, error message on failure.
 */
    public function wpImportHandleUpload(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a list from WordPress.org of popular importer plugins.
 *
 * @since 3.5.0
 *
 * @return array Importers with metadata for each.
 */
    public function wpGetPopularImporters(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register column headers for a particular screen.
 *
 * @see get_column_headers(), print_column_headers(), get_hidden_columns()
 *
 * @since 2.7.0
 *
 * @param string $screen The handle for the screen to register column headers for. This is
 *                          usually the hook name returned by the `add_*_page()` functions.
 * @param string[] $columns An array of columns with column IDs as the keys and translated
 *                          column names as the values.
 */
    public function registerColumnHeaders(string $screen, array $columns): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints column headers for a particular screen.
 *
 * @since 2.7.0
 *
 * @param string|\WP_Screen $screen  The screen hook name or screen object.
 * @param bool $withId Whether to set the ID attribute or not.
 */
    public function printColumnHeaders(string|\WP_Screen $screen, bool $withId = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines the default media upload tabs.
 *
 * @since 2.5.0
 *
 * @return string[] Default tabs.
 */
    public function mediaUploadTabs(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the gallery tab back to the tabs array if post has image attachments.
 *
 * @since 2.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array $tabs
 * @return array $tabs with gallery if post has image attachment
 */
    public function updateGalleryTab(array $tabs): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the legacy media upload tabs UI.
 *
 * @since 2.5.0
 *
 * @global string $redir_tab
 */
    public function theMediaUploadTabs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the image HTML to send to the editor.
 *
 * @since 2.5.0
 *
 * @param int $id      Image attachment ID.
 * @param string $caption Image caption.
 * @param string $title   Image title attribute.
 * @param string $align   Image CSS alignment property.
 * @param string $url     Optional. Image src URL. Default empty.
 * @param bool|string $rel     Optional. Value for rel attribute or whether to add a default value. Default false.
 * @param string|int[] $size    Optional. Image size. Accepts any registered image size name, or an array of
 *                              width and height values in pixels (in that order). Default 'medium'.
 * @param string $alt     Optional. Image alt attribute. Default empty.
 * @return string The HTML output to insert into the editor.
 */
    public function getImageSendToEditor(int $id, string $caption, string $title, string $align, string $url = '', bool|string $rel = false, string|array $size = 'medium', string $alt = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds image shortcode with caption to editor.
 *
 * @since 2.6.0
 *
 * @param string $html    The image HTML markup to send.
 * @param int $id      Image attachment ID.
 * @param string $caption Image caption.
 * @param string $title   Image title attribute (not used).
 * @param string $align   Image CSS alignment property.
 * @param string $url     Image source URL (not used).
 * @param string $size    Image size (not used).
 * @param string $alt     Image `alt` attribute (not used).
 * @return string The image HTML markup with caption shortcode.
 */
    public function imageAddCaption(string $html, int $id, string $caption, string $title, string $align, string $url, string $size, string $alt = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds image HTML to editor.
 *
 * @since 2.5.0
 *
 * @param string $html
 */
    public function mediaSendToEditor(string $html): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves a file submitted from a POST request and create an attachment post for it.
 *
 * @since 2.5.0
 *
 * @param string $fileId   Index of the `$_FILES` array that the file was sent.
 * @param int $postId   The post ID of a post to attach the media item to. Required, but can
 *                          be set to 0, creating a media item that has no relationship to a post.
 * @param array $postData Optional. Overwrite some of the attachment.
 * @param array $overrides Optional. Override the wp_handle_upload() behavior.
 * @return int|\WP_Error ID of the attachment or a WP_Error object on failure.
 */
    public function mediaHandleUpload(string $fileId, int $postId, array $postData = [], array $overrides = []): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles a side-loaded file in the same way as an uploaded file is handled by media_handle_upload().
 *
 * @since 2.6.0
 * @since 5.3.0 The `$post_id` parameter was made optional.
 *
 * @param string[] $fileArray Array that represents a `$_FILES` upload array.
 * @param int $postId    Optional. The post ID the media is associated with.
 * @param string $desc       Optional. Description of the side-loaded file. Default null.
 * @param array $postData  Optional. Post data to override. Default empty array.
 * @return int|\WP_Error The ID of the attachment or a WP_Error on failure.
 */
    public function mediaHandleSideload(array $fileArray, int $postId = 0, string $desc = null, array $postData = []): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the iframe to display the media upload page.
 *
 * @since 2.5.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @global string $body_id
 *
 * @param callable $contentFunc Function that outputs the content.
 * @param mixed    ...$args      Optional additional parameters to pass to the callback function when it's called.
 */
    public function wpIframe(callable $contentFunc): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the media button to the editor.
 *
 * @since 2.5.0
 *
 * @global int $post_ID
 *
 * @param string $editorId
 */
    public function mediaButtons(string $editorId = 'content'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the upload iframe source URL.
 *
 * @since 3.0.0
 *
 * @global int $post_ID
 *
 * @param string $type    Media type.
 * @param int $postId Post ID.
 * @param string $tab     Media upload tab.
 * @return string Upload iframe source URL.
 */
    public function getUploadIframeSrc(string $type = null, int $postId = null, string $tab = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles form submissions for the legacy media uploader.
 *
 * @since 2.5.0
 *
 * @return null|array|void Array of error messages keyed by attachment ID, null or void on success.
 */
    public function mediaUploadFormHandler(): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles the process of uploading media.
 *
 * @since 2.5.0
 *
 * @return null|string
 */
    public function wpMediaUploadHandler(): null|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Downloads an image from the specified URL, saves it as an attachment, and optionally attaches it to a post.
 *
 * @since 2.6.0
 * @since 4.2.0 Introduced the `$return_type` parameter.
 * @since 4.8.0 Introduced the 'id' option for the `$return_type` parameter.
 * @since 5.3.0 The `$post_id` parameter was made optional.
 * @since 5.4.0 The original URL of the attachment is stored in the `_source_url`
 *              post meta value.
 * @since 5.8.0 Added 'webp' to the default list of allowed file extensions.
 *
 * @param string $file        The URL of the image to download.
 * @param int $postId     Optional. The post ID the media is to be associated with.
 * @param string $desc        Optional. Description of the image.
 * @param string $returnType Optional. Accepts 'html' (image tag html) or 'src' (URL),
 *                            or 'id' (attachment ID). Default 'html'.
 * @return string|int|\WP_Error Populated HTML img tag, attachment ID, or attachment source
 *                             on success, WP_Error object otherwise.
 */
    public function mediaSideloadImage(string $file, int $postId = 0, string $desc = null, string $returnType = 'html'): string|int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the legacy media uploader form in an iframe.
 *
 * @since 2.5.0
 *
 * @return string|null
 */
    public function mediaUploadGallery(): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the legacy media library form in an iframe.
 *
 * @since 2.5.0
 *
 * @return string|null
 */
    public function mediaUploadLibrary(): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML for the image alignment radio buttons with the specified one checked.
 *
 * @since 2.7.0
 *
 * @param \WP_Post $post
 * @param string $checked
 * @return string
 */
    public function imageAlignInputFields(\WP_Post $post, string $checked = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML for the size radio buttons with the specified one checked.
 *
 * @since 2.7.0
 *
 * @param \WP_Post $post
 * @param bool|string $check
 * @return array
 */
    public function imageSizeInputFields(\WP_Post $post, bool|string $check = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML for the Link URL buttons with the default link type as specified.
 *
 * @since 2.7.0
 *
 * @param \WP_Post $post
 * @param string $urlType
 * @return string
 */
    public function imageLinkInputFields(\WP_Post $post, string $urlType = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs a textarea element for inputting an attachment caption.
 *
 * @since 3.4.0
 *
 * @param \WP_Post $editPost Attachment WP_Post object.
 * @return string HTML markup for the textarea element.
 */
    public function wpCaptionInputTextarea(\WP_Post $editPost): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the image attachment fields to edit form fields.
 *
 * @since 2.5.0
 *
 * @param array $formFields
 * @param object $post
 * @return array
 */
    public function imageAttachmentFieldsToEdit(array $formFields, object $post): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the single non-image attachment fields to edit form fields.
 *
 * @since 2.5.0
 *
 * @param array $formFields An array of attachment form fields.
 * @param \WP_Post $post        The WP_Post attachment object.
 * @return array Filtered attachment form fields.
 */
    public function mediaSingleAttachmentFieldsToEdit(array $formFields, \WP_Post $post): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post non-image attachment fields to edit form fields.
 *
 * @since 2.8.0
 *
 * @param array $formFields An array of attachment form fields.
 * @param \WP_Post $post        The WP_Post attachment object.
 * @return array Filtered attachment form fields.
 */
    public function mediaPostSingleAttachmentFieldsToEdit(array $formFields, \WP_Post $post): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the media element HTML to send to the editor.
 *
 * @since 2.5.0
 *
 * @param string $html
 * @param int $attachmentId
 * @param array $attachment
 * @return string
 */
    public function imageMediaSendToEditor(string $html, int $attachmentId, array $attachment): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the attachment fields to edit form fields.
 *
 * @since 2.5.0
 *
 * @param \WP_Post $post
 * @param array $errors
 * @return array
 */
    public function getAttachmentFieldsToEdit(\WP_Post $post, array $errors = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML for media items of post gallery.
 *
 * The HTML markup retrieved will be created for the progress of SWF Upload
 * component. Will also create link for showing and hiding the form to modify
 * the image attachment.
 *
 * @since 2.5.0
 *
 * @global WP_Query $wp_the_query WordPress Query object.
 *
 * @param int $postId Post ID.
 * @param array $errors  Errors for attachment, if any.
 * @return string HTML content for media items of post gallery.
 */
    public function getMediaItems(int $postId, array $errors): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML form for modifying the image attachment.
 *
 * @since 2.5.0
 *
 * @global string $redir_tab
 *
 * @param int $attachmentId Attachment ID for modification.
 * @param string|array $args          Optional. Override defaults.
 * @return string HTML form for attachment.
 */
    public function getMediaItem(int $attachmentId, string|array $args = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @since 3.5.0
 *
 * @param int $attachmentId
 * @param array $args
 * @return array
 */
    public function getCompatMediaMarkup(int $attachmentId, array $args = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the legacy media upload header.
 *
 * @since 2.5.0
 */
    public function mediaUploadHeader(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the legacy media upload form.
 *
 * @since 2.5.0
 *
 * @global string $type
 * @global string $tab
 *
 * @param array $errors
 */
    public function mediaUploadForm(array $errors = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the legacy media upload form for a given media type.
 *
 * @since 2.5.0
 *
 * @param string $type
 * @param array $errors
 * @param int|\WP_Error $id
 */
    public function mediaUploadTypeForm(string $type = 'file', array $errors = null, int|\WP_Error $id = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the legacy media upload form for external media.
 *
 * @since 2.7.0
 *
 * @param string $type
 * @param object $errors
 * @param int $id
 */
    public function mediaUploadTypeUrlForm(string $type = null, object $errors = null, int $id = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds gallery form to upload iframe.
 *
 * @since 2.5.0
 *
 * @global string $redir_tab
 * @global string $type
 * @global string $tab
 *
 * @param array $errors
 */
    public function mediaUploadGalleryForm(array $errors): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the legacy media upload form for the media library.
 *
 * @since 2.5.0
 *
 * @global wpdb      $wpdb            WordPress database abstraction object.
 * @global WP_Query  $wp_query        WordPress Query object.
 * @global WP_Locale $wp_locale       WordPress date and time locale object.
 * @global string    $type
 * @global string    $tab
 * @global array     $post_mime_types
 *
 * @param array $errors
 */
    public function mediaUploadLibraryForm(array $errors): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates the form for external url.
 *
 * @since 2.7.0
 *
 * @param string $defaultView
 * @return string HTML content of the form.
 */
    public function wpMediaInsertUrlForm(string $defaultView = 'image'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the multi-file uploader message.
 *
 * @since 2.6.0
 *
 * @global int $post_ID
 */
    public function mediaUploadFlashBypass(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the browser's built-in uploader message.
 *
 * @since 2.6.0
 */
    public function mediaUploadHtmlBypass(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Used to display a "After a file has been uploaded..." help message.
 *
 * @since 3.3.0
 */
    public function mediaUploadTextAfter(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the checkbox to scale images.
 *
 * @since 3.3.0
 */
    public function mediaUploadMaxImageResize(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the out of storage quota message in Multisite.
 *
 * @since 3.5.0
 */
    public function multisiteOverQuotaMessage(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the image and editor in the post editor
 *
 * @since 3.5.0
 *
 * @param \WP_Post $post A post object.
 */
    public function editFormImageEditor(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays non-editable attachment metadata in the publish meta box.
 *
 * @since 3.5.0
 */
    public function attachmentSubmitboxMetadata(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses ID3v2, ID3v1, and getID3 comments to extract usable data.
 *
 * @since 3.6.0
 *
 * @param array $metadata An existing array with data.
 * @param array $data Data supplied by ID3 tags.
 */
    public function wpAddId3TagData(array $metadata, array $data): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves metadata from a video file's ID3 tags.
 *
 * @since 3.6.0
 *
 * @param string $file Path to file.
 * @return array|false Returns array of metadata, if found.
 */
    public function wpReadVideoMetadata(string $file): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves metadata from an audio file's ID3 tags.
 *
 * @since 3.6.0
 *
 * @param string $file Path to file.
 * @return array|false Returns array of metadata, if found.
 */
    public function wpReadAudioMetadata(string $file): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses creation date from media metadata.
 *
 * The getID3 library doesn't have a standard method for getting creation dates,
 * so the location of this data can vary based on the MIME type.
 *
 * @since 4.9.0
 *
 * @link https://github.com/JamesHeinrich/getID3/blob/master/structure.txt
 *
 * @param array $metadata The metadata returned by getID3::analyze().
 * @return int|false A UNIX timestamp for the media's creation date if available
 *                   or a boolean FALSE if a timestamp could not be determined.
 */
    public function wpGetMediaCreationTimestamp(array $metadata): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Encapsulates the logic for Attach/Detach actions.
 *
 * @since 4.2.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $parentId Attachment parent ID.
 * @param string $action    Optional. Attach/detach action. Accepts 'attach' or 'detach'.
 *                          Default 'attach'.
 */
    public function wpMediaAttachAction(int $parentId, string $action = 'attach'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a CSS class to a string.
 *
 * @since 2.7.0
 *
 * @param string $classToAdd The CSS class to add.
 * @param string $classes      The string to add the CSS class to.
 * @return string The string with the CSS class added.
 */
    public function addCssclass(string $classToAdd, string $classes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds CSS classes for top-level administration menu items.
 *
 * The list of added classes includes `.menu-top-first` and `.menu-top-last`.
 *
 * @since 2.7.0
 *
 * @param array $menu The array of administration menu items.
 * @return array The array of administration menu items with the CSS classes added.
 */
    public function addMenuClasses(array $menu): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * @global array $menu_order
     * @global array $default_menu_order
     *
     * @param array $a
     * @param array $b
     * @return int
     */
    public function sortMenu(array $a, array $b): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays post submit form fields.
 *
 * @since 2.7.0
 *
 * @global string $action
 *
 * @param \WP_Post $post Current post object.
 * @param array $args {
 *     Array of arguments for building the post submit meta box.
 *
 *     @type string   $id       Meta box 'id' attribute.
 *     @type string   $title    Meta box title.
 *     @type callable $callback Meta box display callback.
 *     @type array    $args     Extra meta box arguments.
 * }
 */
    public function postSubmitMetaBox(\WP_Post $post, array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays attachment submit form fields.
 *
 * @since 3.5.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function attachmentSubmitMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays post format form elements.
 *
 * @since 3.1.0
 *
 * @param \WP_Post $post Current post object.
 * @param array $box {
 *     Post formats meta box arguments.
 *
 *     @type string   $id       Meta box 'id' attribute.
 *     @type string   $title    Meta box title.
 *     @type callable $callback Meta box display callback.
 *     @type array    $args     Extra meta box arguments.
 * }
 */
    public function postFormatMetaBox(\WP_Post $post, array $box): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays post tags form fields.
 *
 * @since 2.6.0
 *
 * @todo Create taxonomy-agnostic wrapper for this.
 *
 * @param \WP_Post $post Current post object.
 * @param array $box {
 *     Tags meta box arguments.
 *
 *     @type string   $id       Meta box 'id' attribute.
 *     @type string   $title    Meta box title.
 *     @type callable $callback Meta box display callback.
 *     @type array    $args {
 *         Extra meta box arguments.
 *
 *         @type string $taxonomy Taxonomy. Default 'post_tag'.
 *     }
 * }
 */
    public function postTagsMetaBox(\WP_Post $post, array $box): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays post categories form fields.
 *
 * @since 2.6.0
 *
 * @todo Create taxonomy-agnostic wrapper for this.
 *
 * @param \WP_Post $post Current post object.
 * @param array $box {
 *     Categories meta box arguments.
 *
 *     @type string   $id       Meta box 'id' attribute.
 *     @type string   $title    Meta box title.
 *     @type callable $callback Meta box display callback.
 *     @type array    $args {
 *         Extra meta box arguments.
 *
 *         @type string $taxonomy Taxonomy. Default 'category'.
 *     }
 * }
 */
    public function postCategoriesMetaBox(\WP_Post $post, array $box): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays post excerpt form fields.
 *
 * @since 2.6.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function postExcerptMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays trackback links form fields.
 *
 * @since 2.6.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function postTrackbackMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays custom fields form fields.
 *
 * @since 2.6.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function postCustomMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays comments status form fields.
 *
 * @since 2.6.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function postCommentStatusMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays comments for post table header
 *
 * @since 3.0.0
 *
 * @param array $result Table header rows.
 * @return array
 */
    public function postCommentMetaBoxThead(array $result): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays comments for post.
 *
 * @since 2.8.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function postCommentMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays slug form fields.
 *
 * @since 2.6.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function postSlugMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays form field with list of authors.
 *
 * @since 2.6.0
 *
 * @global int $user_ID
 *
 * @param \WP_Post $post Current post object.
 */
    public function postAuthorMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays list of revisions.
 *
 * @since 2.6.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function postRevisionsMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays page attributes form fields.
 *
 * @since 2.7.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function pageAttributesMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays link create form fields.
 *
 * @since 2.7.0
 *
 * @param object $link Current link object.
 */
    public function linkSubmitMetaBox(object $link): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays link categories form fields.
 *
 * @since 2.6.0
 *
 * @param object $link Current link object.
 */
    public function linkCategoriesMetaBox(object $link): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays form fields for changing link target.
 *
 * @since 2.6.0
 *
 * @param object $link Current link object.
 */
    public function linkTargetMetaBox(object $link): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays 'checked' checkboxes attribute for XFN microformat options.
 *
 * @since 1.0.1
 *
 * @global object $link Current link object.
 *
 * @param string $xfnRelationship XFN relationship category. Possible values are:
 *                                 'friendship', 'physical', 'professional',
 *                                 'geographical', 'family', 'romantic', 'identity'.
 * @param string $xfnValue        Optional. The XFN value to mark as checked
 *                                 if it matches the current link's relationship.
 *                                 Default empty string.
 * @param mixed $deprecated       Deprecated. Not used.
 */
    public function xfnCheck(string $xfnRelationship, string $xfnValue = '', mixed $deprecated = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays XFN form fields.
 *
 * @since 2.6.0
 *
 * @param object $link Current link object.
 */
    public function linkXfnMetaBox(object $link): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays advanced link options form fields.
 *
 * @since 2.6.0
 *
 * @param object $link Current link object.
 */
    public function linkAdvancedMetaBox(object $link): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays post thumbnail meta box.
 *
 * @since 2.9.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function postThumbnailMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays fields for ID3 data.
 *
 * @since 3.9.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function attachmentId3DataMetaBox(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the default post meta boxes, and runs the `do_meta_boxes` actions.
 *
 * @since 5.0.0
 *
 * @param \WP_Post $post The post object that these meta boxes are being generated for.
 */
    public function registerAndDoPostMetaBoxes(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether the server is running Apache with the mod_rewrite module loaded.
 *
 * @since 2.0.0
 *
 * @return bool Whether the server is running Apache with the mod_rewrite module loaded.
 */
    public function gotModRewrite(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether the server supports URL rewriting.
 *
 * Detects Apache's mod_rewrite, IIS 7.0+ permalink support, and nginx.
 *
 * @since 3.7.0
 *
 * @global bool $is_nginx
 * @global bool $is_caddy
 *
 * @return bool Whether the server supports URL rewriting.
 */
    public function gotUrlRewrite(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Extracts strings from between the BEGIN and END markers in the .htaccess file.
 *
 * @since 1.5.0
 *
 * @param string $filename Filename to extract the strings from.
 * @param string $marker   The marker to extract the strings from.
 * @return string[] An array of strings from a file (.htaccess) from between BEGIN and END markers.
 */
    public function extractFromMarkers(string $filename, string $marker): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Inserts an array of strings into a file (.htaccess), placing it between
 * BEGIN and END markers.
 *
 * Replaces existing marked info. Retains surrounding
 * data. Creates file if none exists.
 *
 * @since 1.5.0
 *
 * @param string $filename  Filename to alter.
 * @param string $marker    The marker to alter.
 * @param array|string $insertion The new content to insert.
 * @return bool True on write success, false on failure.
 */
    public function insertWithMarkers(string $filename, string $marker, array|string $insertion): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the htaccess file with the current rules if it is writable.
 *
 * Always writes to the file if it exists and is writable to ensure that we
 * blank out old rules.
 *
 * @since 1.5.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @return bool|null True on write success, false on failure. Null in multisite.
 */
    public function saveModRewriteRules(): bool|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the IIS web.config file with the current rules if it is writable.
 * If the permalinks do not require rewrite rules then the rules are deleted from the web.config file.
 *
 * @since 2.8.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @return bool|null True on write success, false on failure. Null in multisite.
 */
    public function iis7SaveUrlRewriteRules(): bool|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the "recently-edited" file for the plugin or theme file editor.
 *
 * @since 1.5.0
 *
 * @param string $file
 */
    public function updateRecentlyEdited(string $file): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Flushes rewrite rules if `siteurl`, `home` or `page_on_front` changed.
 *
 * @since 2.1.0
 *
 * @param string $oldValue
 * @param string $value
 */
    public function updateHomeSiteurl(string $oldValue, string $value): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Resets global variables based on `$_GET` and `$_POST`.
 *
 * This function resets global variables based on the names passed
 * in the `$vars` array to the value of `$_POST[$var]` or `$_GET[$var]` or an
 * empty string if neither is defined.
 *
 * @since 2.0.0
 *
 * @param array $vars An array of globals to reset.
 */
    public function wpResetVars(array $vars): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the given administration message.
 *
 * @since 2.1.0
 *
 * @param string|\WP_Error $message
 */
    public function showMessage(string|\WP_Error $message): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @since 2.8.0
 *
 * @param string $content
 * @return array
 */
    public function wpDocLinkParse(string $content): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves option for number of rows when listing posts, pages, comments, etc.
 *
 * @since 2.8.0
 */
    public function setScreenOptions(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if rewrite rule for WordPress already exists in the IIS 7+ configuration file.
 *
 * @since 2.8.0
 *
 * @param string $filename The file path to the configuration file.
 * @return bool
 */
    public function iis7RewriteRuleExists(string $filename): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes WordPress rewrite rule from web.config file if it exists there.
 *
 * @since 2.8.0
 *
 * @param string $filename Name of the configuration file.
 * @return bool
 */
    public function iis7DeleteRewriteRule(string $filename): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds WordPress rewrite rule to the IIS 7+ configuration file.
 *
 * @since 2.8.0
 *
 * @param string $filename     The file path to the configuration file.
 * @param string $rewriteRule The XML fragment with URL Rewrite rule.
 * @return bool
 */
    public function iis7AddRewriteRule(string $filename, string $rewriteRule): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves the XML document into a file.
 *
 * @since 2.8.0
 *
 * @param \DOMDocument $doc
 * @param string $filename
 */
    public function saveDomDocument(\DOMDocument $doc, string $filename): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the default admin color scheme picker (Used in user-edit.php).
 *
 * @since 3.0.0
 *
 * @global array $_wp_admin_css_colors
 *
 * @param int $userId User ID.
 */
    public function adminColorSchemePicker(int $userId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 *
 * @global array $_wp_admin_css_colors
 */
    public function wpColorSchemeSettings(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the viewport meta in the admin.
 *
 * @since 5.5.0
 */
    public function wpAdminViewportMeta(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks lock status for posts displayed on the Posts screen.
 *
 * @since 3.6.0
 *
 * @param array $response  The Heartbeat response.
 * @param array $data      The $_POST data sent.
 * @param string $screenId The screen ID.
 * @return array The Heartbeat response.
 */
    public function wpCheckLockedPosts(array $response, array $data, string $screenId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks lock status on the New/Edit Post screen and refresh the lock.
 *
 * @since 3.6.0
 *
 * @param array $response  The Heartbeat response.
 * @param array $data      The $_POST data sent.
 * @param string $screenId The screen ID.
 * @return array The Heartbeat response.
 */
    public function wpRefreshPostLock(array $response, array $data, string $screenId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks nonce expiration on the New/Edit Post screen and refresh if needed.
 *
 * @since 3.6.0
 *
 * @param array $response  The Heartbeat response.
 * @param array $data      The $_POST data sent.
 * @param string $screenId The screen ID.
 * @return array The Heartbeat response.
 */
    public function wpRefreshPostNonces(array $response, array $data, string $screenId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Refresh nonces used with meta boxes in the block editor.
 *
 * @since 6.1.0
 *
 * @param array $response  The Heartbeat response.
 * @param array $data      The $_POST data sent.
 * @return array The Heartbeat response.
 */
    public function wpRefreshMetaboxLoaderNonces(array $response, array $data): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the latest Heartbeat and REST API nonce to the Heartbeat response.
 *
 * @since 5.0.0
 *
 * @param array $response The Heartbeat response.
 * @return array The Heartbeat response.
 */
    public function wpRefreshHeartbeatNonces(array $response): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Disables suspension of Heartbeat on the Add/Edit Post screens.
 *
 * @since 3.8.0
 *
 * @global string $pagenow The filename of the current screen.
 *
 * @param array $settings An array of Heartbeat settings.
 * @return array Filtered Heartbeat settings.
 */
    public function wpHeartbeatSetSuspension(array $settings): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs autosave with heartbeat.
 *
 * @since 3.9.0
 *
 * @param array $response The Heartbeat response.
 * @param array $data     The $_POST data sent.
 * @return array The Heartbeat response.
 */
    public function heartbeatAutosave(array $response, array $data): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes single-use URL parameters and create canonical link based on new URL.
 *
 * Removes specific query string parameters from a URL, create the canonical link,
 * put it in the admin header, and change the current URL to match.
 *
 * @since 4.2.0
 */
    public function wpAdminCanonicalUrl(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a referrer policy header so referrers are not sent externally from administration screens.
 *
 * @since 4.9.0
 */
    public function wpAdminHeaders(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs JS that reloads the page if the user navigated to it with the Back or Forward button.
 *
 * Used on the Edit Post and Add New Post screens. Needed to ensure the page is not loaded from browser cache,
 * so the post title and editor content are the last saved versions. Ideally this script should run first in the head.
 *
 * @since 4.6.0
 */
    public function wpPageReloadOnBackButtonJs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a confirmation request email when a change of site admin email address is attempted.
 *
 * The new site admin address will not become active until confirmed.
 *
 * @since 3.0.0
 * @since 4.9.0 This function was moved from wp-admin/includes/ms.php so it's no longer Multisite specific.
 *
 * @param string $oldValue The old site admin email address.
 * @param string $value     The proposed new site admin email address.
 */
    public function updateOptionNewAdminEmail(string $oldValue, string $value): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if the user needs to update PHP.
 *
 * @since 5.1.0
 * @since 5.1.1 Added the {@see 'wp_is_php_version_acceptable'} filter.
 *
 * @return array|false {
 *     Array of PHP version data. False on failure.
 *
 *     @type string $recommended_version The PHP version recommended by WordPress.
 *     @type string $minimum_version     The minimum required PHP version.
 *     @type bool   $is_supported        Whether the PHP version is actively supported.
 *     @type bool   $is_secure           Whether the PHP version receives security updates.
 *     @type bool   $is_acceptable       Whether the PHP version is still acceptable or warnings
 *                                       should be shown and an update recommended.
 * }
 */
    public function wpCheckPhpVersion(): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether uploaded file exceeds space quota.
 *
 * @since 3.0.0
 *
 * @param array $file An element from the `$_FILES` array for a given file.
 * @return array The `$_FILES` array element with 'error' key set if file exceeds quota. 'error' is empty otherwise.
 */
    public function checkUploadSize(array $file): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a site.
 *
 * @since 3.0.0
 * @since 5.1.0 Use wp_delete_site() internally to delete the site row from the database.
 *
 * @param int $blogId Site ID.
 * @param bool $drop    True if site's database tables should be dropped. Default false.
 */
    public function wpmuDeleteBlog(int $blogId, bool $drop = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a user and all of their posts from the network.
 *
 * This function:
 *
 * - Deletes all posts (of all post types) authored by the user on all sites on the network
 * - Deletes all links owned by the user on all sites on the network
 * - Removes the user from all sites on the network
 * - Deletes the user from the database
 *
 * @since 3.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $id The user ID.
 * @return bool True if the user was deleted, false otherwise.
 */
    public function wpmuDeleteUser(int $id): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a site has used its allotted upload space.
 *
 * @since MU (3.0.0)
 *
 * @param bool $displayMessage Optional. If set to true and the quota is exceeded,
 *                              a warning message is displayed. Default true.
 * @return bool True if user is over upload space quota, otherwise false.
 */
    public function uploadIsUserOverQuota(bool $displayMessage = true): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the amount of disk space used by the current site. Not used in core.
 *
 * @since MU (3.0.0)
 */
    public function displaySpaceUsage(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the remaining upload space for this site.
 *
 * @since MU (3.0.0)
 *
 * @param int $size Current max size in bytes.
 * @return int Max size in bytes.
 */
    public function fixImportFormSize(int $size): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the site upload space quota setting form on the Edit Site Settings screen.
 *
 * @since 3.0.0
 *
 * @param int $id The ID of the site to display the setting for.
 */
    public function uploadSpaceSetting(int $id): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleans the user cache for a specific user.
 *
 * @since 3.0.0
 *
 * @param int $id The user ID.
 * @return int|false The ID of the refreshed user or false if the user does not exist.
 */
    public function refreshUserDetails(int $id): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the language for a language code.
 *
 * @since 3.0.0
 *
 * @param string $code Optional. The two-letter language code. Default empty.
 * @return string The language corresponding to $code if it exists. If it does not exist,
 *                then the first two letters of $code is returned.
 */
    public function formatCodeLang(string $code = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if the current user has permissions to import new users.
 *
 * @since 3.0.0
 *
 * @param string $permission A permission to be checked. Currently not used.
 * @return bool True if the user has proper permissions, false if they do not.
 */
    public function checkImportNewUsers(string $permission): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates and displays a drop-down of available languages.
 *
 * @since 3.0.0
 *
 * @param string[] $langFiles Optional. An array of the language files. Default empty array.
 * @param string $current    Optional. The current language code. Default empty.
 */
    public function muDropdownLanguages(array $langFiles = [], string $current = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays an admin notice to upgrade all sites after a core upgrade.
 *
 * @since 3.0.0
 *
 * @global int    $wp_db_version WordPress database version.
 * @global string $pagenow       The filename of the current screen.
 *
 * @return void|false Void on success. False if the current user is not a super admin.
 */
    public function siteAdminNotice(): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Avoids a collision between a site slug and a permalink slug.
 *
 * In a subdirectory installation this will make sure that a site and a post do not use the
 * same subdirectory by checking for a site with the same name as a new post.
 *
 * @since 3.0.0
 *
 * @param array $data    An array of post data.
 * @param array $postarr An array of posts. Not currently used.
 * @return array The new array of post data after checking for collisions.
 */
    public function avoidBlogPagePermalinkCollision(array $data, array $postarr): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles the display of choosing a user's primary site.
 *
 * This displays the user's primary site and allows the user to choose
 * which site is primary.
 *
 * @since 3.0.0
 */
    public function choosePrimaryBlog(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether or not this network from this page can be edited.
 *
 * By default editing of network is restricted to the Network Admin for that `$network_id`.
 * This function allows for this to be overridden.
 *
 * @since 3.1.0
 *
 * @param int $networkId The network ID to check.
 * @return bool True if network can be edited, false otherwise.
 */
    public function canEditNetwork(int $networkId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @param array $users
 * @return bool
 */
    public function confirmDeleteUsers(array $users): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints JavaScript in the header on the Network Settings screen.
 *
 * @since 4.1.0
 */
    public function networkSettingsAddJs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the HTML for a network's "Edit Site" tabular interface.
 *
 * @since 4.6.0
 *
 * @global string $pagenow The filename of the current screen.
 *
 * @param array $args {
 *     Optional. Array or string of Query parameters. Default empty array.
 *
 *     @type int    $blog_id  The site ID. Default is the current site.
 *     @type array  $links    The tabs to include with (label|url|cap) keys.
 *     @type string $selected The ID of the selected link.
 * }
 */
    public function networkEditSiteNav(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the arguments for the help tab on the Edit Site screens.
 *
 * @since 4.9.0
 *
 * @return array Help tab arguments.
 */
    public function getSiteScreenHelpTabArgs(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the content for the help sidebar on the Edit Site screens.
 *
 * @since 4.9.0
 *
 * @return string Help sidebar content.
 */
    public function getSiteScreenHelpSidebarContent(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register nav menu meta boxes and advanced menu items.
 *
 * @since 3.0.0
 */
    public function wpNavMenuSetup(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Limit the amount of meta boxes to pages, posts, links, and categories for first time users.
 *
 * @since 3.0.0
 *
 * @global array $wp_meta_boxes Global meta box state.
 */
    public function wpInitialNavMenuMetaBoxes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates meta boxes for any post type menu item..
 *
 * @since 3.0.0
 */
    public function wpNavMenuPostTypeMetaBoxes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates meta boxes for any taxonomy menu item.
 *
 * @since 3.0.0
 */
    public function wpNavMenuTaxonomyMetaBoxes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Check whether to disable the Menu Locations meta box submit button and inputs.
 *
 * @since 3.6.0
 * @since 5.3.1 The `$display` parameter was added.
 *
 * @global bool $one_theme_location_no_menus to determine if no menus exist
 *
 * @param int|string $navMenuSelectedId ID, name, or slug of the currently selected menu.
 * @param bool $display              Whether to display or just return the string.
 * @return string|false Disabled attribute if at least one menu exists, false if not.
 */
    public function wpNavMenuDisabledCheck(int|string $navMenuSelectedId, bool $display = true): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a meta box for the custom links menu item.
 *
 * @since 3.0.0
 *
 * @global int        $_nav_menu_placeholder
 * @global int|string $nav_menu_selected_id
 */
    public function wpNavMenuItemLinkMetaBox(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a meta box for a post type menu item.
 *
 * @since 3.0.0
 *
 * @global int        $_nav_menu_placeholder
 * @global int|string $nav_menu_selected_id
 *
 * @param string $dataObject Not used.
 * @param array $box {
 *     Post type menu item meta box arguments.
 *
 *     @type string       $id       Meta box 'id' attribute.
 *     @type string       $title    Meta box title.
 *     @type callable     $callback Meta box display callback.
 *     @type WP_Post_Type $args     Extra meta box arguments (the post type object for this meta box).
 * }
 */
    public function wpNavMenuItemPostTypeMetaBox(string $dataObject, array $box): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a meta box for a taxonomy menu item.
 *
 * @since 3.0.0
 *
 * @global int|string $nav_menu_selected_id
 *
 * @param string $dataObject Not used.
 * @param array $box {
 *     Taxonomy menu item meta box arguments.
 *
 *     @type string   $id       Meta box 'id' attribute.
 *     @type string   $title    Meta box title.
 *     @type callable $callback Meta box display callback.
 *     @type object   $args     Extra meta box arguments (the taxonomy object for this meta box).
 * }
 */
    public function wpNavMenuItemTaxonomyMetaBox(string $dataObject, array $box): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Save posted nav menu item data.
 *
 * @since 3.0.0
 *
 * @param int $menuId   The menu ID for which to save this item. Value of 0 makes a draft, orphaned menu item. Default 0.
 * @param array[] $menuData The unsanitized POSTed menu item data.
 * @return int[] The database IDs of the items saved
 */
    public function wpSaveNavMenuItems(int $menuId = 0, array $menuData = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the menu formatted to edit.
 *
 * @since 3.0.0
 *
 * @param int $menuId Optional. The ID of the menu to format. Default 0.
 * @return string|\WP_Error The menu formatted to edit or error object on failure.
 */
    public function wpGetNavMenuToEdit(int $menuId = 0): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the columns for the nav menus page.
 *
 * @since 3.0.0
 *
 * @return string[] Array of column titles keyed by their column name.
 */
    public function wpNavMenuManageColumns(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves nav menu items.
 *
 * @since 3.6.0
 *
 * @param int|string $navMenuSelectedId    ID, slug, or name of the currently-selected menu.
 * @param string $navMenuSelectedTitle Title of the currently-selected menu.
 * @return string[] The menu updated messages.
 */
    public function wpNavMenuUpdateMenuItems(int|string $navMenuSelectedId, string $navMenuSelectedTitle): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Check for an existing network.
 *
 * @since 3.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return string|false Base domain if network exists, otherwise false.
 */
    public function networkDomainCheck(): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Allow subdomain installation
 *
 * @since 3.0.0
 * @return bool Whether subdomain installation is allowed
 */
    public function allowSubdomainInstall(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Allow subdirectory installation.
 *
 * @since 3.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return bool Whether subdirectory installation is allowed
 */
    public function allowSubdirectoryInstall(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get base domain of network.
 *
 * @since 3.0.0
 * @return string Base domain.
 */
    public function getCleanBasedomain(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints step 1 for Network installation process.
 *
 * @todo Realistically, step 1 should be a welcome screen explaining what a Network is and such.
 *       Navigating to Tools > Network should not be a sudden "Welcome to a new install process!
 *       Fill this out and click here." See also contextual help todo.
 *
 * @since 3.0.0
 *
 * @global bool $is_apache
 *
 * @param false|\WP_Error $errors Optional. Error object. Default false.
 */
    public function networkStep1(false|\WP_Error $errors = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints step 2 for Network installation process.
 *
 * @since 3.0.0
 *
 * @global wpdb $wpdb     WordPress database abstraction object.
 * @global bool $is_nginx Whether the server software is Nginx or something else.
 *
 * @param false|\WP_Error $errors Optional. Error object. Default false.
 */
    public function networkStep2(false|\WP_Error $errors = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Output JavaScript to toggle display of additional settings if avatars are disabled.
 *
 * @since 4.2.0
 */
    public function optionsDiscussionAddJs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display JavaScript on the page.
 *
 * @since 3.5.0
 */
    public function optionsGeneralAddJs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display JavaScript on the page.
 *
 * @since 3.5.0
 */
    public function optionsReadingAddJs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Render the site charset setting.
 *
 * @since 3.5.0
 */
    public function optionsReadingBlogCharset(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves plugin installer pages from the WordPress.org Plugins API.
 *
 * It is possible for a plugin to override the Plugin API result with three
 * filters. Assume this is for plugins, which can extend on the Plugin Info to
 * offer more choices. This is very powerful and must be used with care when
 * overriding the filters.
 *
 * The first filter, {@see 'plugins_api_args'}, is for the args and gives the action
 * as the second parameter. The hook for {@see 'plugins_api_args'} must ensure that
 * an object is returned.
 *
 * The second filter, {@see 'plugins_api'}, allows a plugin to override the WordPress.org
 * Plugin Installation API entirely. If `$action` is 'query_plugins' or 'plugin_information',
 * an object MUST be passed. If `$action` is 'hot_tags' or 'hot_categories', an array MUST
 * be passed.
 *
 * Finally, the third filter, {@see 'plugins_api_result'}, makes it possible to filter the
 * response object or array, depending on the `$action` type.
 *
 * Supported arguments per action:
 *
 * | Argument Name        | query_plugins | plugin_information | hot_tags | hot_categories |
 * | -------------------- | :-----------: | :----------------: | :------: | :------------: |
 * | `$slug`              | No            |  Yes               | No       | No             |
 * | `$per_page`          | Yes           |  No                | No       | No             |
 * | `$page`              | Yes           |  No                | No       | No             |
 * | `$number`            | No            |  No                | Yes      | Yes            |
 * | `$search`            | Yes           |  No                | No       | No             |
 * | `$tag`               | Yes           |  No                | No       | No             |
 * | `$author`            | Yes           |  No                | No       | No             |
 * | `$user`              | Yes           |  No                | No       | No             |
 * | `$browse`            | Yes           |  No                | No       | No             |
 * | `$locale`            | Yes           |  Yes               | No       | No             |
 * | `$installed_plugins` | Yes           |  No                | No       | No             |
 * | `$is_ssl`            | Yes           |  Yes               | No       | No             |
 * | `$fields`            | Yes           |  Yes               | No       | No             |
 *
 * @since 2.7.0
 *
 * @param string $action API action to perform: 'query_plugins', 'plugin_information',
 *                             'hot_tags' or 'hot_categories'.
 * @param array|object $args   {
 *     Optional. Array or object of arguments to serialize for the Plugin Info API.
 *
 *     @type string  $slug              The plugin slug. Default empty.
 *     @type int     $per_page          Number of plugins per page. Default 24.
 *     @type int     $page              Number of current page. Default 1.
 *     @type int     $number            Number of tags or categories to be queried.
 *     @type string  $search            A search term. Default empty.
 *     @type string  $tag               Tag to filter plugins. Default empty.
 *     @type string  $author            Username of an plugin author to filter plugins. Default empty.
 *     @type string  $user              Username to query for their favorites. Default empty.
 *     @type string  $browse            Browse view: 'popular', 'new', 'beta', 'recommended'.
 *     @type string  $locale            Locale to provide context-sensitive results. Default is the value
 *                                      of get_locale().
 *     @type string  $installed_plugins Installed plugins to provide context-sensitive results.
 *     @type bool    $is_ssl            Whether links should be returned with https or not. Default false.
 *     @type array   $fields            {
 *         Array of fields which should or should not be returned.
 *
 *         @type bool $short_description Whether to return the plugin short description. Default true.
 *         @type bool $description       Whether to return the plugin full description. Default false.
 *         @type bool $sections          Whether to return the plugin readme sections: description, installation,
 *                                       FAQ, screenshots, other notes, and changelog. Default false.
 *         @type bool $tested            Whether to return the 'Compatible up to' value. Default true.
 *         @type bool $requires          Whether to return the required WordPress version. Default true.
 *         @type bool $requires_php      Whether to return the required PHP version. Default true.
 *         @type bool $rating            Whether to return the rating in percent and total number of ratings.
 *                                       Default true.
 *         @type bool $ratings           Whether to return the number of rating for each star (1-5). Default true.
 *         @type bool $downloaded        Whether to return the download count. Default true.
 *         @type bool $downloadlink      Whether to return the download link for the package. Default true.
 *         @type bool $last_updated      Whether to return the date of the last update. Default true.
 *         @type bool $added             Whether to return the date when the plugin was added to the wordpress.org
 *                                       repository. Default true.
 *         @type bool $tags              Whether to return the assigned tags. Default true.
 *         @type bool $compatibility     Whether to return the WordPress compatibility list. Default true.
 *         @type bool $homepage          Whether to return the plugin homepage link. Default true.
 *         @type bool $versions          Whether to return the list of all available versions. Default false.
 *         @type bool $donate_link       Whether to return the donation link. Default true.
 *         @type bool $reviews           Whether to return the plugin reviews. Default false.
 *         @type bool $banners           Whether to return the banner images links. Default false.
 *         @type bool $icons             Whether to return the icon links. Default false.
 *         @type bool $active_installs   Whether to return the number of active installations. Default false.
 *         @type bool $group             Whether to return the assigned group. Default false.
 *         @type bool $contributors      Whether to return the list of contributors. Default false.
 *     }
 * }
 * @return object|array|WP_Error Response object or array on success, WP_Error on failure. See the
 *         {@link https://developer.wordpress.org/reference/functions/plugins_api/ function reference article}
 *         for more information on the make-up of possible return values depending on the value of `$action`.
 */
    public function pluginsApi(string $action, array|object $args = []): array|object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves popular WordPress plugin tags.
 *
 * @since 2.7.0
 *
 * @param array $args
 * @return array|\WP_Error
 */
    public function installPopularTags(array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the Featured tab of Add Plugins screen.
 *
 * @since 2.7.0
 */
    public function installDashboard(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a search form for searching plugins.
 *
 * @since 2.7.0
 * @since 4.6.0 The `$type_selector` parameter was deprecated.
 *
 * @param bool $deprecated Not used.
 */
    public function installSearchForm(bool $deprecated = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a form to upload plugins from zip files.
 *
 * @since 2.8.0
 */
    public function installPluginsUpload(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Shows a username form for the favorites page.
 *
 * @since 3.5.0
 */
    public function installPluginsFavoritesForm(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays plugin content based on plugin list.
 *
 * @since 2.7.0
 *
 * @global WP_List_Table $wp_list_table
 */
    public function displayPluginsTable(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines the status we can perform on a plugin.
 *
 * @since 3.0.0
 *
 * @param array|object $api  Data about the plugin retrieved from the API.
 * @param bool $loop Optional. Disable further loops. Default false.
 * @return array {
 *     Plugin installation status data.
 *
 *     @type string $status  Status of a plugin. Could be one of 'install', 'update_available', 'latest_installed' or 'newer_installed'.
 *     @type string $url     Plugin installation URL.
 *     @type string $version The most recent version of the plugin.
 *     @type string $file    Plugin filename relative to the plugins directory.
 * }
 */
    public function installPluginInstallStatus(array|object $api, bool $loop = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays plugin information in dialog box form.
 *
 * @since 2.7.0
 *
 * @global string $tab
 */
    public function installPluginInformation(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the markup for the plugin install action button.
 *
 * @since 6.5.0
 *
 * @param string $name           Plugin name.
 * @param array|object $data           {
 *     An array or object of plugin data. Can be retrieved from the API.
 *
 *     @type string   $slug             The plugin slug.
 *     @type string[] $requires_plugins An array of plugin dependency slugs.
 *     @type string   $version          The plugin's version string. Used when getting the install status.
 * }
 * @param bool $compatiblePhp   The result of a PHP compatibility check.
 * @param bool $compatibleWp    The result of a WP compatibility check.
 * @return string The markup for the dependency row button. An empty string if the user does not have capabilities.
 */
    public function wpGetPluginActionButton(string $name, array|object $data, bool $compatiblePhp, bool $compatibleWp): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses the plugin contents to retrieve plugin's metadata.
 *
 * All plugin headers must be on their own line. Plugin description must not have
 * any newlines, otherwise only parts of the description will be displayed.
 * The below is formatted for printing.
 *
 *     /*
 *     Plugin Name: Name of the plugin.
 *     Plugin URI: The home page of the plugin.
 *     Description: Plugin description.
 *     Author: Plugin author's name.
 *     Author URI: Link to the author's website.
 *     Version: Plugin version.
 *     Text Domain: Optional. Unique identifier, should be same as the one used in
 *          load_plugin_textdomain().
 *     Domain Path: Optional. Only useful if the translations are located in a
 *          folder above the plugin's base path. For example, if .mo files are
 *          located in the locale folder then Domain Path will be "/locale/" and
 *          must have the first slash. Defaults to the base folder the plugin is
 *          located in.
 *     Network: Optional. Specify "Network: true" to require that a plugin is activated
 *          across all sites in an installation. This will prevent a plugin from being
 *          activated on a single site when Multisite is enabled.
 *     Requires at least: Optional. Specify the minimum required WordPress version.
 *     Requires PHP: Optional. Specify the minimum required PHP version.
 *     * / # Remove the space to close comment.
 *
 * The first 8 KB of the file will be pulled in and if the plugin data is not
 * within that first 8 KB, then the plugin author should correct their plugin
 * and move the plugin data headers to the top.
 *
 * The plugin file is assumed to have permissions to allow for scripts to read
 * the file. This is not checked however and the file is only opened for
 * reading.
 *
 * @since 1.5.0
 * @since 5.3.0 Added support for `Requires at least` and `Requires PHP` headers.
 * @since 5.8.0 Added support for `Update URI` header.
 * @since 6.5.0 Added support for `Requires Plugins` header.
 *
 * @param string $pluginFile Absolute path to the main plugin file.
 * @param bool $markup      Optional. If the returned data should have HTML markup applied.
 *                            Default true.
 * @param bool $translate   Optional. If the returned data should be translated. Default true.
 * @return array {
 *     Plugin data. Values will be empty if not supplied by the plugin.
 *
 *     @type string $Name            Name of the plugin. Should be unique.
 *     @type string $PluginURI       Plugin URI.
 *     @type string $Version         Plugin version.
 *     @type string $Description     Plugin description.
 *     @type string $Author          Plugin author's name.
 *     @type string $AuthorURI       Plugin author's website address (if set).
 *     @type string $TextDomain      Plugin textdomain.
 *     @type string $DomainPath      Plugin's relative directory path to .mo files.
 *     @type bool   $Network         Whether the plugin can only be activated network-wide.
 *     @type string $RequiresWP      Minimum required version of WordPress.
 *     @type string $RequiresPHP     Minimum required version of PHP.
 *     @type string $UpdateURI       ID of the plugin for update purposes, should be a URI.
 *     @type string $RequiresPlugins Comma separated list of dot org plugin slugs.
 *     @type string $Title           Title of the plugin and link to the plugin's site (if set).
 *     @type string $AuthorName      Plugin author's name.
 * }
 */
    public function getPluginData(string $pluginFile, bool $markup = true, bool $translate = true): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a list of a plugin's files.
 *
 * @since 2.8.0
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return string[] Array of file names relative to the plugin root.
 */
    public function getPluginFiles(string $plugin): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks the plugins directory and retrieve all plugin files with plugin data.
 *
 * WordPress only supports plugin files in the base plugins directory
 * (wp-content/plugins) and in one directory above the plugins directory
 * (wp-content/plugins/my-plugin). The file it looks for has the plugin data
 * and must be found in those two locations. It is recommended to keep your
 * plugin files in their own directories.
 *
 * The file with the plugin data is the file that will be included and therefore
 * needs to have the main execution for the plugin. This does not mean
 * everything must be contained in the file and it is recommended that the file
 * be split for maintainability. Keep everything in one file for extreme
 * optimization purposes.
 *
 * @since 1.5.0
 *
 * @param string $pluginFolder Optional. Relative path to single plugin folder.
 * @return array[] Array of arrays of plugin data, keyed by plugin file name. See get_plugin_data().
 */
    public function getPlugins(string $pluginFolder = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks the mu-plugins directory and retrieve all mu-plugin files with any plugin data.
 *
 * WordPress only includes mu-plugin files in the base mu-plugins directory (wp-content/mu-plugins).
 *
 * @since 3.0.0
 * @return array[] Array of arrays of mu-plugin data, keyed by plugin file name. See get_plugin_data().
 */
    public function getMuPlugins(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks the wp-content directory and retrieve all drop-ins with any plugin data.
 *
 * @since 3.0.0
 * @return array[] Array of arrays of dropin plugin data, keyed by plugin file name. See get_plugin_data().
 */
    public function getDropins(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a plugin is active.
 *
 * Only plugins installed in the plugins/ folder can be active.
 *
 * Plugins in the mu-plugins/ folder can't be "activated," so this function will
 * return false for those plugins.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.5.0
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return bool True, if in the active plugins list. False, not in the list.
 */
    public function isPluginActive(string $plugin): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the plugin is inactive.
 *
 * Reverse of is_plugin_active(). Used as a callback.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 3.1.0
 *
 * @see is_plugin_active()
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return bool True if inactive. False if active.
 */
    public function isPluginInactive(string $plugin): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the plugin is active for the entire network.
 *
 * Only plugins installed in the plugins/ folder can be active.
 *
 * Plugins in the mu-plugins/ folder can't be "activated," so this function will
 * return false for those plugins.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 3.0.0
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return bool True if active for the network, otherwise false.
 */
    public function isPluginActiveForNetwork(string $plugin): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks for "Network: true" in the plugin header to see if this should
 * be activated only as a network wide plugin. The plugin would also work
 * when Multisite is not enabled.
 *
 * Checks for "Site Wide Only: true" for backward compatibility.
 *
 * @since 3.0.0
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return bool True if plugin is network only, false otherwise.
 */
    public function isNetworkOnlyPlugin(string $plugin): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Attempts activation of plugin in a "sandbox" and redirects on success.
 *
 * A plugin that is already activated will not attempt to be activated again.
 *
 * The way it works is by setting the redirection to the error before trying to
 * include the plugin file. If the plugin fails, then the redirection will not
 * be overwritten with the success message. Also, the options will not be
 * updated and the activation hook will not be called on plugin error.
 *
 * It should be noted that in no way the below code will actually prevent errors
 * within the file. The code should not be used elsewhere to replicate the
 * "sandbox", which uses redirection to work.
 * {@source 13 1}
 *
 * If any errors are found or text is outputted, then it will be captured to
 * ensure that the success redirection will update the error redirection.
 *
 * @since 2.5.0
 * @since 5.2.0 Test for WordPress version and PHP version compatibility.
 *
 * @param string $plugin       Path to the plugin file relative to the plugins directory.
 * @param string $redirect     Optional. URL to redirect to.
 * @param bool $networkWide Optional. Whether to enable the plugin for all sites in the network
 *                             or just the current site. Multisite only. Default false.
 * @param bool $silent       Optional. Whether to prevent calling activation hooks. Default false.
 * @return null|\WP_Error Null on success, WP_Error on invalid file.
 */
    public function activatePlugin(string $plugin, string $redirect = '', bool $networkWide = false, bool $silent = false): null|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deactivates a single plugin or multiple plugins.
 *
 * The deactivation hook is disabled by the plugin upgrader by using the $silent
 * parameter.
 *
 * @since 2.5.0
 *
 * @param string|string[] $plugins      Single plugin or list of plugins to deactivate.
 * @param bool $silent       Prevent calling deactivation hooks. Default false.
 * @param bool|null $networkWide Whether to deactivate the plugin for all sites in the network.
 *                                      A value of null will deactivate plugins for both the network
 *                                      and the current site. Multisite only. Default null.
 */
    public function deactivatePlugins(string|array $plugins, bool $silent = false, bool|null $networkWide = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Activates multiple plugins.
 *
 * When WP_Error is returned, it does not mean that one of the plugins had
 * errors. It means that one or more of the plugin file paths were invalid.
 *
 * The execution will be halted as soon as one of the plugins has an error.
 *
 * @since 2.6.0
 *
 * @param string|string[] $plugins      Single plugin or list of plugins to activate.
 * @param string $redirect     Redirect to page after successful activation.
 * @param bool $networkWide Whether to enable the plugin for all sites in the network.
 *                                      Default false.
 * @param bool $silent       Prevent calling activation hooks. Default false.
 * @return true|\WP_Error True when finished or WP_Error if there were errors during a plugin activation.
 */
    public function activatePlugins(string|array $plugins, string $redirect = '', bool $networkWide = false, bool $silent = false): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes directory and files of a plugin for a list of plugins.
 *
 * @since 2.6.0
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 *
 * @param string[] $plugins    List of plugin paths to delete, relative to the plugins directory.
 * @param string $deprecated Not used.
 * @return bool|null|\WP_Error True on success, false if `$plugins` is empty, `WP_Error` on failure.
 *                            `null` if filesystem credentials are required to proceed.
 */
    public function deletePlugins(array $plugins, string $deprecated = ''): bool|null|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates active plugins.
 *
 * Validate all active plugins, deactivates invalid and
 * returns an array of deactivated ones.
 *
 * @since 2.5.0
 * @return WP_Error[] Array of plugin errors keyed by plugin file name.
 */
    public function validateActivePlugins(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates the plugin path.
 *
 * Checks that the main plugin file exists and is a valid plugin. See validate_file().
 *
 * @since 2.5.0
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return int|\WP_Error 0 on success, WP_Error on failure.
 */
    public function validatePlugin(string $plugin): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates the plugin requirements for WordPress version and PHP version.
 *
 * Uses the information from `Requires at least`, `Requires PHP` and `Requires Plugins` headers
 * defined in the plugin's main PHP file.
 *
 * @since 5.2.0
 * @since 5.3.0 Added support for reading the headers from the plugin's
 *              main PHP file, with `readme.txt` as a fallback.
 * @since 5.8.0 Removed support for using `readme.txt` as a fallback.
 * @since 6.5.0 Added support for the 'Requires Plugins' header.
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return true|\WP_Error True if requirements are met, WP_Error on failure.
 */
    public function validatePluginRequirements(string $plugin): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the plugin can be uninstalled.
 *
 * @since 2.7.0
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return bool Whether plugin can be uninstalled.
 */
    public function isUninstallablePlugin(string $plugin): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Uninstalls a single plugin.
 *
 * Calls the uninstall hook, if it is available.
 *
 * @since 2.7.0
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return true|void True if a plugin's uninstall.php file has been found and included.
 *                   Void otherwise.
 */
    public function uninstallPlugin(string $plugin): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a top-level menu page.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 1.5.0
 *
 * @global array $menu
 * @global array $admin_page_hooks
 * @global array $_registered_pages
 * @global array $_parent_pages
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by. Should be unique for this menu page and only
 *                              include lowercase alphanumeric, dashes, and underscores characters to be compatible
 *                              with sanitize_key().
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param string $iconUrl   Optional. The URL to the icon to be used for this menu.
 *                              * Pass a base64-encoded SVG using a data URI, which will be colored to match
 *                                the color scheme. This should begin with 'data:image/svg+xml;base64,'.
 *                              * Pass the name of a Dashicons helper class to use a font icon,
 *                                e.g. 'dashicons-chart-pie'.
 *                              * Pass 'none' to leave div.wp-menu-image empty so an icon can be added via CSS.
 * @param int|float $position   Optional. The position in the menu order this item should appear.
 * @return string The resulting page's hook_suffix.
 */
    public function addMenuPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, string $iconUrl = '', int|float $position = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 1.5.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @global array $submenu
 * @global array $menu
 * @global array $_wp_real_parent_file
 * @global bool  $_wp_submenu_nopriv
 * @global array $_registered_pages
 * @global array $_parent_pages
 *
 * @param string $parentSlug The slug name for the parent menu (or the file name of a standard
 *                               WordPress admin page).
 * @param string $pageTitle  The text to be displayed in the title tags of the page when the menu
 *                               is selected.
 * @param string $menuTitle  The text to be used for the menu.
 * @param string $capability  The capability required for this menu to be displayed to the user.
 * @param string $menuSlug   The slug name to refer to this menu by. Should be unique for this menu
 *                               and only include lowercase alphanumeric, dashes, and underscores characters
 *                               to be compatible with sanitize_key().
 * @param callable $callback    Optional. The function to be called to output the content for this page.
 * @param int|float $position    Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addSubmenuPage(string $parentSlug, string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int|float $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Tools main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 1.5.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addManagementPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Settings main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 1.5.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addOptionsPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Appearance main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 2.0.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addThemePage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Plugins main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 3.0.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addPluginsPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Users/Profile main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 2.1.3
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addUsersPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Dashboard main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 2.7.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addDashboardPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Posts main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 2.7.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addPostsPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Media main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 2.7.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addMediaPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Links main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 2.7.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addLinksPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Pages main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 2.7.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addPagesPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a submenu page to the Comments main menu.
 *
 * This function takes a capability which will be used to determine whether
 * or not a page is included in the menu.
 *
 * The function which is hooked in to handle the output of the page must check
 * that the user has the required capability as well.
 *
 * @since 2.7.0
 * @since 5.3.0 Added the `$position` parameter.
 *
 * @param string $pageTitle The text to be displayed in the title tags of the page when the menu is selected.
 * @param string $menuTitle The text to be used for the menu.
 * @param string $capability The capability required for this menu to be displayed to the user.
 * @param string $menuSlug  The slug name to refer to this menu by (should be unique for this menu).
 * @param callable $callback   Optional. The function to be called to output the content for this page.
 * @param int $position   Optional. The position in the menu order this item should appear.
 * @return string|false The resulting page's hook_suffix, or false if the user does not have the capability required.
 */
    public function addCommentsPage(string $pageTitle, string $menuTitle, string $capability, string $menuSlug, callable $callback = null, int $position = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a top-level admin menu.
 *
 * Example usage:
 *
 *  - `remove_menu_page( 'tools.php' )`
 *  - `remove_menu_page( 'plugin_menu_slug' )`
 *
 * @since 3.1.0
 *
 * @global array $menu
 *
 * @param string $menuSlug The slug of the menu.
 * @return array|false The removed menu on success, false if not found.
 */
    public function removeMenuPage(string $menuSlug): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes an admin submenu.
 *
 * Example usage:
 *
 *  - `remove_submenu_page( 'themes.php', 'nav-menus.php' )`
 *  - `remove_submenu_page( 'tools.php', 'plugin_submenu_slug' )`
 *  - `remove_submenu_page( 'plugin_menu_slug', 'plugin_submenu_slug' )`
 *
 * @since 3.1.0
 *
 * @global array $submenu
 *
 * @param string $menuSlug    The slug for the parent menu.
 * @param string $submenuSlug The slug of the submenu.
 * @return array|false The removed submenu on success, false if not found.
 */
    public function removeSubmenuPage(string $menuSlug, string $submenuSlug): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the URL to access a particular menu page based on the slug it was registered with.
 *
 * If the slug hasn't been registered properly, no URL will be returned.
 *
 * @since 3.0.0
 *
 * @global array $_parent_pages
 *
 * @param string $menuSlug The slug name to refer to this menu by (should be unique for this menu).
 * @param bool $display   Optional. Whether or not to display the URL. Default true.
 * @return string The menu page URL.
 */
    public function menuPageUrl(string $menuSlug, bool $display = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the parent file of the current admin page.
 *
 * @since 1.5.0
 *
 * @global string $parent_file
 * @global array  $menu
 * @global array  $submenu
 * @global string $pagenow              The filename of the current screen.
 * @global string $typenow              The post type of the current screen.
 * @global string $plugin_page
 * @global array  $_wp_real_parent_file
 * @global array  $_wp_menu_nopriv
 * @global array  $_wp_submenu_nopriv
 *
 * @param string $parentPage Optional. The slug name for the parent menu (or the file name
 *                            of a standard WordPress admin page). Default empty string.
 * @return string The parent file of the current admin page.
 */
    public function getAdminPageParent(string $parentPage = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the title of the current admin page.
 *
 * @since 1.5.0
 *
 * @global string $title       The title of the current screen.
 * @global array  $menu
 * @global array  $submenu
 * @global string $pagenow     The filename of the current screen.
 * @global string $typenow     The post type of the current screen.
 * @global string $plugin_page
 *
 * @return string The title of the current admin page.
 */
    public function getAdminPageTitle(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the hook attached to the administrative page of a plugin.
 *
 * @since 1.5.0
 *
 * @param string $pluginPage The slug name of the plugin page.
 * @param string $parentPage The slug name for the parent menu (or the file name of a standard
 *                            WordPress admin page).
 * @return string|null Hook attached to the plugin page, null otherwise.
 */
    public function getPluginPageHook(string $pluginPage, string $parentPage): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the hook name for the administrative page of a plugin.
 *
 * @since 1.5.0
 *
 * @global array $admin_page_hooks
 *
 * @param string $pluginPage The slug name of the plugin page.
 * @param string $parentPage The slug name for the parent menu (or the file name of a standard
 *                            WordPress admin page).
 * @return string Hook name for the plugin page.
 */
    public function getPluginPageHookname(string $pluginPage, string $parentPage): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current user can access the current admin page.
 *
 * @since 1.5.0
 *
 * @global string $pagenow            The filename of the current screen.
 * @global array  $menu
 * @global array  $submenu
 * @global array  $_wp_menu_nopriv
 * @global array  $_wp_submenu_nopriv
 * @global string $plugin_page
 * @global array  $_registered_pages
 *
 * @return bool True if the current user can access the admin page, false otherwise.
 */
    public function userCanAccessAdminPage(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Refreshes the value of the allowed options list available via the 'allowed_options' hook.
 *
 * See the {@see 'allowed_options'} filter.
 *
 * @since 2.7.0
 * @since 5.5.0 `$new_whitelist_options` was renamed to `$new_allowed_options`.
 *              Please consider writing more inclusive code.
 *
 * @global array $new_allowed_options
 *
 * @param array $options
 * @return array
 */
    public function optionUpdateFilter(array $options): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds an array of options to the list of allowed options.
 *
 * @since 5.5.0
 *
 * @global array $allowed_options
 *
 * @param array $newOptions
 * @param string|array $options
 * @return array
 */
    public function addAllowedOptions(array $newOptions, string|array $options = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a list of options from the allowed options list.
 *
 * @since 5.5.0
 *
 * @global array $allowed_options
 *
 * @param array $delOptions
 * @param string|array $options
 * @return array
 */
    public function removeAllowedOptions(array $delOptions, string|array $options = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs nonce, action, and option_page fields for a settings page.
 *
 * @since 2.7.0
 *
 * @param string $optionGroup A settings group name. This should match the group name
 *                             used in register_setting().
 */
    public function settingsFields(string $optionGroup): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Clears the plugins cache used by get_plugins() and by default, the plugin updates cache.
 *
 * @since 3.7.0
 *
 * @param bool $clearUpdateCache Whether to clear the plugin updates cache. Default true.
 */
    public function wpCleanPluginsCache(bool $clearUpdateCache = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads a given plugin attempt to generate errors.
 *
 * @since 3.0.0
 * @since 4.4.0 Function was moved into the `wp-admin/includes/plugin.php` file.
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 */
    public function pluginSandboxScrape(string $plugin): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Declares a helper function for adding content to the Privacy Policy Guide.
 *
 * Plugins and themes should suggest text for inclusion in the site's privacy policy.
 * The suggested text should contain information about any functionality that affects user privacy,
 * and will be shown on the Privacy Policy Guide screen.
 *
 * A plugin or theme can use this function multiple times as long as it will help to better present
 * the suggested policy content. For example modular plugins such as WooCommerse or Jetpack
 * can add or remove suggested content depending on the modules/extensions that are enabled.
 * For more information see the Plugin Handbook:
 * https://developer.wordpress.org/plugins/privacy/suggesting-text-for-the-site-privacy-policy/.
 *
 * The HTML contents of the `$policy_text` supports use of a specialized `.privacy-policy-tutorial`
 * CSS class which can be used to provide supplemental information. Any content contained within
 * HTML elements that have the `.privacy-policy-tutorial` CSS class applied will be omitted
 * from the clipboard when the section content is copied.
 *
 * Intended for use with the `'admin_init'` action.
 *
 * @since 4.9.6
 *
 * @param string $pluginName The name of the plugin or theme that is suggesting content
 *                            for the site's privacy policy.
 * @param string $policyText The suggested content for inclusion in the policy.
 */
    public function wpAddPrivacyPolicyContent(string $pluginName, string $policyText): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a plugin is technically active but was paused while
 * loading.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 5.2.0
 *
 * @global WP_Paused_Extensions_Storage $_paused_plugins
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return bool True, if in the list of paused plugins. False, if not in the list.
 */
    public function isPluginPaused(string $plugin): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the error that was recorded for a paused plugin.
 *
 * @since 5.2.0
 *
 * @global WP_Paused_Extensions_Storage $_paused_plugins
 *
 * @param string $plugin Path to the plugin file relative to the plugins directory.
 * @return array|false Array of error information as returned by `error_get_last()`,
 *                     or false if none was recorded.
 */
    public function wpGetPluginError(string $plugin): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Tries to resume a single plugin.
 *
 * If a redirect was provided, we first ensure the plugin does not throw fatal
 * errors anymore.
 *
 * The way it works is by setting the redirection to the error before trying to
 * include the plugin file. If the plugin fails, then the redirection will not
 * be overwritten with the success message and the plugin will not be resumed.
 *
 * @since 5.2.0
 *
 * @param string $plugin   Single plugin to resume.
 * @param string $redirect Optional. URL to redirect to. Default empty string.
 * @return true|\WP_Error True on success, false if `$plugin` was not paused,
 *                       `WP_Error` on failure.
 */
    public function resumePlugin(string $plugin, string $redirect = ''): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders an admin notice in case some plugins have been paused due to errors.
 *
 * @since 5.2.0
 *
 * @global string                       $pagenow         The filename of the current screen.
 * @global WP_Paused_Extensions_Storage $_paused_plugins
 */
    public function pausedPluginsNotice(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates an existing post with values provided in `$_POST`.
 *
 * If post data is passed as an argument, it is treated as an array of data
 * keyed appropriately for turning into a post object.
 *
 * If post data is not passed, the `$_POST` global variable is used instead.
 *
 * @since 1.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array|null $postData Optional. The array of post data to process.
 *                              Defaults to the `$_POST` superglobal.
 * @return int Post ID.
 */
    public function editPost(array|null $postData = null): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Processes the post data for the bulk editing of posts.
 *
 * Updates all bulk edited posts/pages, adding (but not removing) tags and
 * categories. Skips pages when they would be their own parent or child.
 *
 * @since 2.7.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array|null $postData Optional. The array of post data to process.
 *                              Defaults to the `$_POST` superglobal.
 * @return array
 */
    public function bulkEditPosts(array|null $postData = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns default post information to use when populating the "Write Post" form.
 *
 * @since 2.0.0
 *
 * @param string $postType    Optional. A post type string. Default 'post'.
 * @param bool $createInDb Optional. Whether to insert the post into database. Default false.
 * @return \WP_Post Post object containing all the default post data as attributes
 */
    public function getDefaultPostToEdit(string $postType = 'post', bool $createInDb = false): \WP_Post
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if a post exists based on title, content, date and type.
 *
 * @since 2.0.0
 * @since 5.2.0 Added the `$type` parameter.
 * @since 5.8.0 Added the `$status` parameter.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $title   Post title.
 * @param string $content Optional. Post content.
 * @param string $date    Optional. Post date.
 * @param string $type    Optional. Post type.
 * @param string $status  Optional. Post status.
 * @return int Post ID if post exists, 0 otherwise.
 */
    public function postExists(string $title, string $content = '', string $date = '', string $type = '', string $status = ''): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates a new post from the "Write Post" form using `$_POST` information.
 *
 * @since 2.1.0
 *
 * @global WP_User $current_user
 *
 * @return int|\WP_Error Post ID on success, WP_Error on failure.
 */
    public function wpWritePost(): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calls wp_write_post() and handles the errors.
 *
 * @since 2.0.0
 *
 * @return int|void Post ID on success, void on failure.
 */
    public function writePost(): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds post meta data defined in the `$_POST` superglobal for a post with given ID.
 *
 * @since 1.2.0
 *
 * @param int $postId
 * @return int|bool
 */
    public function addMeta(int $postId): int|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes post meta data by meta ID.
 *
 * @since 1.2.0
 *
 * @param int $mid
 * @return bool
 */
    public function deleteMeta(int $mid): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a list of previously defined keys.
 *
 * @since 1.2.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return string[] Array of meta key names.
 */
    public function getMetaKeys(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns post meta data by meta ID.
 *
 * @since 2.1.0
 *
 * @param int $mid
 * @return object|bool
 */
    public function getPostMetaById(int $mid): object|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns meta data for the given post ID.
 *
 * @since 1.2.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $postId A post ID.
 * @return array[] {
 *     Array of meta data arrays for the given post ID.
 *
 *     @type array ...$0 {
 *         Associative array of meta data.
 *
 *         @type string $meta_key   Meta key.
 *         @type mixed  $meta_value Meta value.
 *         @type string $meta_id    Meta ID as a numeric string.
 *         @type string $post_id    Post ID as a numeric string.
 *     }
 * }
 */
    public function hasMeta(int $postId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates post meta data by meta ID.
 *
 * @since 1.2.0
 *
 * @param int $metaId    Meta ID.
 * @param string $metaKey   Meta key. Expect slashed.
 * @param string $metaValue Meta value. Expect slashed.
 * @return bool
 */
    public function updateMeta(int $metaId, string $metaKey, string $metaValue): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns all the possible statuses for a post type.
 *
 * @since 2.5.0
 *
 * @param string $type The post_type you want the statuses for. Default 'post'.
 * @return string[] An array of all the statuses for the supplied post type.
 */
    public function getAvailablePostStatuses(string $type = 'post'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Runs the query to fetch the posts for listing on the edit posts page.
 *
 * @since 2.5.0
 *
 * @param array|false $q Optional. Array of query variables to use to build the query.
 *                       Defaults to the `$_GET` superglobal.
 * @return array
 */
    public function wpEditPostsQuery(array|false $q = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the query variables for the current attachments request.
 *
 * @since 4.2.0
 *
 * @param array|false $q Optional. Array of query variables to use to build the query.
 *                       Defaults to the `$_GET` superglobal.
 * @return array The parsed query vars.
 */
    public function wpEditAttachmentsQueryVars(array|false $q = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Executes a query for attachments. An array of WP_Query arguments
 * can be passed in, which will override the arguments set by this function.
 *
 * @since 2.5.0
 *
 * @param array|false $q Optional. Array of query variables to use to build the query.
 *                       Defaults to the `$_GET` superglobal.
 * @return array
 */
    public function wpEditAttachmentsQuery(array|false $q = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the list of classes to be used by a meta box.
 *
 * @since 2.5.0
 *
 * @param string $boxId    Meta box ID (used in the 'id' attribute for the meta box).
 * @param string $screenId The screen on which the meta box is shown.
 * @return string Space-separated string of class names.
 */
    public function postboxClasses(string $boxId, string $screenId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a sample permalink based on the post name.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Post $post  Post ID or post object.
 * @param string|null $title Optional. Title to override the post's current title
 *                           when generating the post name. Default null.
 * @param string|null $name  Optional. Name to override the post name. Default null.
 * @return array {
 *     Array containing the sample permalink with placeholder for the post name, and the post name.
 *
 *     @type string $0 The permalink with placeholder for the post name.
 *     @type string $1 The post name.
 * }
 */
    public function getSamplePermalink(int|\WP_Post $post, string|null $title = null, string|null $name = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the HTML of the sample permalink slug editor.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Post $post      Post ID or post object.
 * @param string|null $newTitle Optional. New title. Default null.
 * @param string|null $newSlug  Optional. New slug. Default null.
 * @return string The HTML of the sample permalink slug editor.
 */
    public function getSamplePermalinkHtml(int|\WP_Post $post, string|null $newTitle = null, string|null $newSlug = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the post is currently being edited by another user.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Post $post ID or object of the post to check for editing.
 * @return int|false ID of the user with lock. False if the post does not exist, post is not locked,
 *                   the user with lock does not exist, or the post is locked by current user.
 */
    public function wpCheckPostLock(int|\WP_Post $post): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Marks the post as currently being edited by the current user.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Post $post ID or object of the post being edited.
 * @return array|false {
 *     Array of the lock time and user ID. False if the post does not exist, or there
 *     is no current user.
 *
 *     @type int $0 The current time as a Unix timestamp.
 *     @type int $1 The ID of the current user.
 * }
 */
    public function wpSetPostLock(int|\WP_Post $post): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates autosave data for the specified post from `$_POST` data.
 *
 * @since 2.6.0
 *
 * @param array|int $postData Associative array containing the post data, or integer post ID.
 *                             If a numeric post ID is provided, will use the `$_POST` superglobal.
 * @return int|\WP_Error The autosave revision ID. WP_Error or 0 on error.
 */
    public function wpCreatePostAutosave(array|int $postData): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Autosave the revisioned meta fields.
 *
 * Iterates through the revisioned meta fields and checks each to see if they are set,
 * and have a changed value. If so, the meta value is saved and attached to the autosave.
 *
 * @since 6.4.0
 *
 * @param array $newAutosave The new post data being autosaved.
 */
    public function wpAutosavePostRevisionedMetaFields(array $newAutosave): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves a draft or manually autosaves for the purpose of showing a post preview.
 *
 * @since 2.7.0
 *
 * @return string URL to redirect to show the preview.
 */
    public function postPreview(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves a post submitted with XHR.
 *
 * Intended for use with heartbeat and autosave.js
 *
 * @since 3.9.0
 *
 * @param array $postData Associative array of the submitted post data.
 * @return mixed The value 0 or WP_Error on failure. The saved post ID on success.
 *               The ID can be the draft post_id or the autosave revision post_id.
 */
    public function wpAutosave(array $postData): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Redirects to previous page.
 *
 * @since 2.7.0
 *
 * @param int $postId Optional. Post ID.
 */
    public function redirectPost(int|string $postId = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes POST values from a checkbox taxonomy metabox.
 *
 * @since 5.1.0
 *
 * @param string $taxonomy The taxonomy name.
 * @param array $terms    Raw term data from the 'tax_input' field.
 * @return int[] Array of sanitized term IDs.
 */
    public function taxonomyMetaBoxSanitizeCbCheckboxes(string $taxonomy, array $terms): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes POST values from an input taxonomy metabox.
 *
 * @since 5.1.0
 *
 * @param string $taxonomy The taxonomy name.
 * @param array|string $terms    Raw term data from the 'tax_input' field.
 * @return array
 */
    public function taxonomyMetaBoxSanitizeCbInput(string $taxonomy, array|string $terms): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prepares server-registered blocks for the block editor.
 *
 * Returns an associative array of registered block data keyed by block name. Data includes properties
 * of a block relevant for client registration.
 *
 * @since 5.0.0
 * @since 6.3.0 Added `selectors` field.
 * @since 6.4.0 Added `block_hooks` field.
 *
 * @return array An associative array of registered block data.
 */
    public function getBlockEditorServerBlockSettings(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the meta boxes forms.
 *
 * @since 5.0.0
 *
 * @global WP_Post   $post           Global post object.
 * @global WP_Screen $current_screen WordPress current screen object.
 * @global array     $wp_meta_boxes  Global meta box state.
 */
    public function theBlockEditorMetaBoxes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the hidden form required for the meta boxes form.
 *
 * @since 5.0.0
 *
 * @param \WP_Post $post Current post object.
 */
    public function theBlockEditorMetaBoxPostFormHiddenFields(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generate a single group for the personal data export report.
 *
 * @since 4.9.6
 * @since 5.4.0 Added the `$group_id` and `$groups_count` parameters.
 *
 * @param array $groupData {
 *     The group data to render.
 *
 *     @type string $group_label  The user-facing heading for the group, e.g. 'Comments'.
 *     @type array  $items        {
 *         An array of group items.
 *
 *         @type array  $group_item_data  {
 *             An array of name-value pairs for the item.
 *
 *             @type string $name   The user-facing name of an item name-value pair, e.g. 'IP Address'.
 *             @type string $value  The user-facing value of an item data pair, e.g. '50.60.70.0'.
 *         }
 *     }
 * }
 * @param string $groupId     The group identifier.
 * @param int $groupsCount The number of all groups
 * @return string The HTML for this group and its items.
 */
    public function wpPrivacyGeneratePersonalDataExportGroupHtml(array $groupData, string $groupId = '', int $groupsCount = 1): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generate the personal data export file.
 *
 * @since 4.9.6
 *
 * @param int $requestId The export request ID.
 */
    public function wpPrivacyGeneratePersonalDataExportFile(int $requestId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Send an email to the user with a link to the personal data export file
 *
 * @since 4.9.6
 *
 * @param int $requestId The request ID for this personal data export.
 * @return true|\WP_Error True on success or `WP_Error` on failure.
 */
    public function wpPrivacySendPersonalDataExportEmail(int $requestId): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Intercept personal data exporter page Ajax responses in order to assemble the personal data export file.
 *
 * @since 4.9.6
 *
 * @see 'wp_privacy_personal_data_export_page'
 *
 * @param array $response        The response from the personal data exporter for the given page.
 * @param int $exporterIndex  The index of the personal data exporter. Begins at 1.
 * @param string $emailAddress   The email address of the user whose personal data this is.
 * @param int $page            The page of personal data for this exporter. Begins at 1.
 * @param int $requestId      The request ID for this personal data export.
 * @param bool $sendAsEmail   Whether the final results of the export should be emailed to the user.
 * @param string $exporterKey    The slug (key) of the exporter.
 * @return array The filtered response.
 */
    public function wpPrivacyProcessPersonalDataExportPage(array $response, int $exporterIndex, string $emailAddress, int $page, int $requestId, bool $sendAsEmail, string $exporterKey): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Mark erasure requests as completed after processing is finished.
 *
 * This intercepts the Ajax responses to personal data eraser page requests, and
 * monitors the status of a request. Once all of the processing has finished, the
 * request is marked as completed.
 *
 * @since 4.9.6
 *
 * @see 'wp_privacy_personal_data_erasure_page'
 *
 * @param array $response      The response from the personal data eraser for
 *                              the given page.
 * @param int $eraserIndex  The index of the personal data eraser. Begins
 *                              at 1.
 * @param string $emailAddress The email address of the user whose personal
 *                              data this is.
 * @param int $page          The page of personal data for this eraser.
 *                              Begins at 1.
 * @param int $requestId    The request ID for this personal data erasure.
 * @return array The filtered response.
 */
    public function wpPrivacyProcessPersonalDataErasurePage(array $response, int $eraserIndex, string $emailAddress, int $page, int $requestId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get the revision UI diff.
 *
 * @since 3.6.0
 *
 * @param \WP_Post|int $post         The post object or post ID.
 * @param int $compareFrom The revision ID to compare from.
 * @param int $compareTo   The revision ID to come to.
 * @return array|false Associative array of a post's revisioned fields and their diffs.
 *                     Or, false on failure.
 */
    public function wpGetRevisionUiDiff(\WP_Post|int $post, int $compareFrom, int $compareTo): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prepare revisions for JavaScript.
 *
 * @since 3.6.0
 *
 * @param \WP_Post|int $post                 The post object or post ID.
 * @param int $selectedRevisionId The selected revision ID.
 * @param int $from                 Optional. The revision ID to compare from.
 * @return array An associative array of revision data and related settings.
 */
    public function wpPrepareRevisionsForJs(\WP_Post|int $post, int $selectedRevisionId, int $from = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Print JavaScript templates required for the revisions experience.
 *
 * @since 4.1.0
 *
 * @global WP_Post $post Global post object.
 */
    public function wpPrintRevisionTemplates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieve the SQL for creating database tables.
 *
 * @since 3.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $scope   Optional. The tables for which to retrieve SQL. Can be all, global, ms_global, or blog tables. Defaults to all.
 * @param int $blogId Optional. The site ID for which to retrieve SQL. Default is the current site ID.
 * @return string The SQL needed to create the requested tables.
 */
    public function wpGetDbSchema(string $scope = 'all', int $blogId = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Create WordPress options and set the default values.
 *
 * @since 1.5.0
 * @since 5.1.0 The $options parameter has been added.
 *
 * @global wpdb $wpdb                  WordPress database abstraction object.
 * @global int  $wp_db_version         WordPress database version.
 * @global int  $wp_current_db_version The old (current) database version.
 *
 * @param array $options Optional. Custom option $key => $value pairs to use. Default empty array.
 */
    public function populateOptions(array $options = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Execute WordPress role creation for the various WordPress versions.
 *
 * @since 2.0.0
 */
    public function populateRoles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Create the roles for WordPress 2.0
 *
 * @since 2.0.0
 */
    public function populateRoles160(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Create and modify WordPress roles for WordPress 2.1.
 *
 * @since 2.1.0
 */
    public function populateRoles210(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Create and modify WordPress roles for WordPress 2.3.
 *
 * @since 2.3.0
 */
    public function populateRoles230(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Create and modify WordPress roles for WordPress 2.5.
 *
 * @since 2.5.0
 */
    public function populateRoles250(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Create and modify WordPress roles for WordPress 2.6.
 *
 * @since 2.6.0
 */
    public function populateRoles260(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Create and modify WordPress roles for WordPress 2.7.
 *
 * @since 2.7.0
 */
    public function populateRoles270(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Create and modify WordPress roles for WordPress 2.8.
 *
 * @since 2.8.0
 */
    public function populateRoles280(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Create and modify WordPress roles for WordPress 3.0.
 *
 * @since 3.0.0
 */
    public function populateRoles300(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Install Network.
     *
     * @since 3.0.0
     */
    public function installNetwork(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Populate network settings.
 *
 * @since 3.0.0
 *
 * @global wpdb       $wpdb         WordPress database abstraction object.
 * @global object     $current_site
 * @global WP_Rewrite $wp_rewrite   WordPress rewrite component.
 *
 * @param int $networkId        ID of network to populate.
 * @param string $domain            The domain name for the network. Example: "example.com".
 * @param string $email             Email address for the network administrator.
 * @param string $siteName         The name of the network.
 * @param string $path              Optional. The path to append to the network's domain name. Default '/'.
 * @param bool $subdomainInstall Optional. Whether the network is a subdomain installation or a subdirectory installation.
 *                                  Default false, meaning the network is a subdirectory installation.
 * @return true|\WP_Error True on success, or WP_Error on warning (with the installation otherwise successful,
 *                       so the error code must be checked) or failure.
 */
    public function populateNetwork(int $networkId = 1, string $domain = '', string $email = '', string $siteName = '', string $path = '/', bool $subdomainInstall = false): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates WordPress network meta and sets the default values.
 *
 * @since 5.1.0
 *
 * @global wpdb $wpdb          WordPress database abstraction object.
 * @global int  $wp_db_version WordPress database version.
 *
 * @param int $networkId Network ID to populate meta for.
 * @param array $meta       Optional. Custom meta $key => $value pairs to use. Default empty array.
 */
    public function populateNetworkMeta(int $networkId, array $meta = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates WordPress site meta and sets the default values.
 *
 * @since 5.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $siteId Site ID to populate meta for.
 * @param array $meta    Optional. Custom meta $key => $value pairs to use. Default empty array.
 */
    public function populateSiteMeta(int $siteId, array $meta = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get the column headers for a screen
 *
 * @since 2.7.0
 *
 * @param string|\WP_Screen $screen The screen you want the headers for
 * @return string[] The column header labels keyed by column ID.
 */
    public function getColumnHeaders(string|\WP_Screen $screen): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get a list of hidden columns.
 *
 * @since 2.7.0
 *
 * @param string|\WP_Screen $screen The screen you want the hidden columns for
 * @return string[] Array of IDs of hidden columns.
 */
    public function getHiddenColumns(string|\WP_Screen $screen): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the meta box preferences for screen meta.
 *
 * @since 2.7.0
 *
 * @global array $wp_meta_boxes Global meta box state.
 *
 * @param \WP_Screen $screen
 */
    public function metaBoxPrefs(\WP_Screen $screen): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets an array of IDs of hidden meta boxes.
 *
 * @since 2.7.0
 *
 * @param string|\WP_Screen $screen Screen identifier
 * @return string[] IDs of hidden meta boxes.
 */
    public function getHiddenMetaBoxes(string|\WP_Screen $screen): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register and configure an admin screen option
 *
 * @since 3.1.0
 *
 * @param string $option An option name.
 * @param mixed $args   Option-dependent arguments.
 */
    public function addScreenOption(string $option, mixed $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get the current screen object
 *
 * @since 3.1.0
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 *
 * @return \WP_Screen|null Current screen object or null when screen not defined.
 */
    public function getCurrentScreen(): \WP_Screen|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Set the current screen object
 *
 * @since 3.0.0
 *
 * @param string|\WP_Screen $hookName Optional. The hook name (also known as the hook suffix) used to determine the screen,
 *                                    or an existing screen object.
 */
    public function setCurrentScreen(string|\WP_Screen $hookName = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a category exists.
 *
 * @since 2.0.0
 *
 * @see term_exists()
 *
 * @param int|string $catName        Category name.
 * @param int $categoryParent Optional. ID of parent category.
 * @return string|null Returns the category ID as a numeric string if the pairing exists, null if not.
 */
    public function categoryExists(int|string $catName, int $categoryParent = null): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets category object for given ID and 'edit' filter context.
 *
 * @since 2.0.0
 *
 * @param int $id
 * @return object
 */
    public function getCategoryToEdit(int $id): object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new category to the database if it does not already exist.
 *
 * @since 2.0.0
 *
 * @param int|string $catName        Category name.
 * @param int $categoryParent Optional. ID of parent category.
 * @return int|\WP_Error
 */
    public function wpCreateCategory(int|string $catName, int $categoryParent = 0): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates categories for the given post.
 *
 * @since 2.0.0
 *
 * @param string[] $categories Array of category names to create.
 * @param int $postId    Optional. The post ID. Default empty.
 * @return int[] Array of IDs of categories assigned to the given post.
 */
    public function wpCreateCategories(array $categories, int|string $postId = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates an existing Category or creates a new Category.
 *
 * @since 2.0.0
 * @since 2.5.0 $wp_error parameter was added.
 * @since 3.0.0 The 'taxonomy' argument was added.
 *
 * @param array $catarr {
 *     Array of arguments for inserting a new category.
 *
 *     @type int        $cat_ID               Category ID. A non-zero value updates an existing category.
 *                                            Default 0.
 *     @type string     $taxonomy             Taxonomy slug. Default 'category'.
 *     @type string     $cat_name             Category name. Default empty.
 *     @type string     $category_description Category description. Default empty.
 *     @type string     $category_nicename    Category nice (display) name. Default empty.
 *     @type int|string $category_parent      Category parent ID. Default empty.
 * }
 * @param bool $wpError Optional. Default false.
 * @return int|\WP_Error The ID number of the new or updated Category on success. Zero or a WP_Error on failure,
 *                      depending on param `$wp_error`.
 */
    public function wpInsertCategory(array $catarr, bool $wpError = false): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Aliases wp_insert_category() with minimal args.
 *
 * If you want to update only some fields of an existing category, call this
 * function with only the new values set inside $catarr.
 *
 * @since 2.0.0
 *
 * @param array $catarr The 'cat_ID' value is required. All other keys are optional.
 * @return int|false The ID number of the new or updated Category on success. Zero or FALSE on failure.
 */
    public function wpUpdateCategory(array $catarr): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a post tag with a given name exists.
 *
 * @since 2.3.0
 *
 * @param int|string $tagName
 * @return mixed Returns null if the term does not exist.
 *               Returns an array of the term ID and the term taxonomy ID if the pairing exists.
 *               Returns 0 if term ID 0 is passed to the function.
 */
    public function tagExists(int|string $tagName): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new tag to the database if it does not already exist.
 *
 * @since 2.3.0
 *
 * @param int|string $tagName
 * @return array|\WP_Error
 */
    public function wpCreateTag(int|string $tagName): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets comma-separated list of tags available to edit.
 *
 * @since 2.3.0
 *
 * @param int $postId
 * @param string $taxonomy Optional. The taxonomy for which to retrieve terms. Default 'post_tag'.
 * @return string|false|\WP_Error
 */
    public function getTagsToEdit(int $postId, string $taxonomy = 'post_tag'): string|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets comma-separated list of terms available to edit for the given post ID.
 *
 * @since 2.8.0
 *
 * @param int $postId
 * @param string $taxonomy Optional. The taxonomy for which to retrieve terms. Default 'post_tag'.
 * @return string|false|\WP_Error
 */
    public function getTermsToEdit(int $postId, string $taxonomy = 'post_tag'): string|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new term to the database if it does not already exist.
 *
 * @since 2.8.0
 *
 * @param string $tagName The term name.
 * @param string $taxonomy Optional. The taxonomy within which to create the term. Default 'post_tag'.
 * @return array|\WP_Error
 */
    public function wpCreateTerm(string $tagName, string $taxonomy = 'post_tag'): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs an unordered list of checkbox input elements labeled with category names.
 *
 * @since 2.5.1
 *
 * @see wp_terms_checklist()
 *
 * @param int $postId              Optional. Post to generate a categories checklist for. Default 0.
 *                                          $selected_cats must not be an array. Default 0.
 * @param int $descendantsAndSelf Optional. ID of the category to output along with its descendants.
 *                                          Default 0.
 * @param int[]|false $selectedCats        Optional. Array of category IDs to mark as checked. Default false.
 * @param int[]|false $popularCats         Optional. Array of category IDs to receive the "popular-category" class.
 *                                          Default false.
 * @param \Walker $walker               Optional. Walker object to use to build the output.
 *                                          Default is a Walker_Category_Checklist instance.
 * @param bool $checkedOntop        Optional. Whether to move checked items out of the hierarchy and to
 *                                          the top of the list. Default true.
 */
    public function wpCategoryChecklist(int $postId = 0, int $descendantsAndSelf = 0, array|false $selectedCats = false, array|false $popularCats = false, \Walker $walker = null, bool $checkedOntop = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs an unordered list of checkbox input elements labelled with term names.
 *
 * Taxonomy-independent version of wp_category_checklist().
 *
 * @since 3.0.0
 * @since 4.4.0 Introduced the `$echo` argument.
 *
 * @param int $postId Optional. Post ID. Default 0.
 * @param array|string $args {
 *     Optional. Array or string of arguments for generating a terms checklist. Default empty array.
 *
 *     @type int    $descendants_and_self ID of the category to output along with its descendants.
 *                                        Default 0.
 *     @type int[]  $selected_cats        Array of category IDs to mark as checked. Default false.
 *     @type int[]  $popular_cats         Array of category IDs to receive the "popular-category" class.
 *                                        Default false.
 *     @type Walker $walker               Walker object to use to build the output. Default empty which
 *                                        results in a Walker_Category_Checklist instance being used.
 *     @type string $taxonomy             Taxonomy to generate the checklist for. Default 'category'.
 *     @type bool   $checked_ontop        Whether to move checked items out of the hierarchy and to
 *                                        the top of the list. Default true.
 *     @type bool   $echo                 Whether to echo the generated markup. False to return the markup instead
 *                                        of echoing it. Default true.
 * }
 * @return string HTML list of input elements.
 */
    public function wpTermsChecklist(int $postId = 0, array|string $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of the most popular terms from the specified taxonomy.
 *
 * If the `$display` argument is true then the elements for a list of checkbox
 * `<input>` elements labelled with the names of the selected terms is output.
 * If the `$post_ID` global is not empty then the terms associated with that
 * post will be marked as checked.
 *
 * @since 2.5.0
 *
 * @param string $taxonomy     Taxonomy to retrieve terms from.
 * @param int $defaultTerm Optional. Not used.
 * @param int $number       Optional. Number of terms to retrieve. Default 10.
 * @param bool $display      Optional. Whether to display the list as well. Default true.
 * @return int[] Array of popular term IDs.
 */
    public function wpPopularTermsChecklist(string $taxonomy, int $defaultTerm = 0, int $number = 10, bool $display = true): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs a link category checklist element.
 *
 * @since 2.5.1
 *
 * @param int $linkId Optional. The link ID. Default 0.
 */
    public function wpLinkCategoryChecklist(int $linkId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds hidden fields with the data for use in the inline editor for posts and pages.
 *
 * @since 2.7.0
 *
 * @param \WP_Post $post Post object.
 */
    public function getInlineData(\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the in-line comment reply-to form in the Comments list table.
 *
 * @since 2.7.0
 *
 * @global WP_List_Table $wp_list_table
 *
 * @param int $position  Optional. The value of the 'position' input field. Default 1.
 * @param bool $checkbox  Optional. The value of the 'checkbox' input field. Default false.
 * @param string $mode      Optional. If set to 'single', will use WP_Post_Comments_List_Table,
 *                          otherwise WP_Comments_List_Table. Default 'single'.
 * @param bool $tableRow Optional. Whether to use a table instead of a div element. Default true.
 */
    public function wpCommentReply(int $position = 1, bool $checkbox = false, string $mode = 'single', bool $tableRow = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs 'undo move to Trash' text for comments.
 *
 * @since 2.9.0
 */
    public function wpCommentTrashnotice(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs a post's public meta data in the Custom Fields meta box.
 *
 * @since 1.2.0
 *
 * @param array[] $meta An array of meta data arrays keyed on 'meta_key' and 'meta_value'.
 */
    public function listMeta(array $meta): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the form in the Custom Fields meta box.
 *
 * @since 1.2.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param \WP_Post $post Optional. The post being edited.
 */
    public function metaForm(\WP_Post $post = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints out HTML form date elements for editing post or comment publish date.
 *
 * @since 0.71
 * @since 4.4.0 Converted to use get_comment() instead of the global `$comment`.
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @param int|bool $edit      Accepts 1|true for editing the date, 0|false for adding the date.
 * @param int|bool $forPost  Accepts 1|true for applying the date to a post, 0|false for a comment.
 * @param int $tabIndex The tabindex attribute to add. Default 0.
 * @param int|bool $multi     Optional. Whether the additional fields and buttons should be added.
 *                            Default 0|false.
 */
    public function touchTime(int|bool $edit = 1, int|bool $forPost = 1, int $tabIndex = 0, int|bool $multi = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints out option HTML elements for the page templates drop-down.
 *
 * @since 1.5.0
 * @since 4.7.0 Added the `$post_type` parameter.
 *
 * @param string $defaultTemplate Optional. The template file name. Default empty.
 * @param string $postType        Optional. Post type to get templates for. Default 'page'.
 */
    public function pageTemplateDropdown(string $defaultTemplate = '', string $postType = 'page'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints out option HTML elements for the page parents drop-down.
 *
 * @since 1.5.0
 * @since 4.4.0 `$post` argument was added.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $defaultPage Optional. The default page ID to be pre-selected. Default 0.
 * @param int $parentPage  Optional. The parent page ID. Default 0.
 * @param int $level        Optional. Page depth level. Default 0.
 * @param int|\WP_Post $post         Post ID or WP_Post object.
 * @return void|false Void on success, false if the page has no children.
 */
    public function parentDropdown(int $defaultPage = 0, int $parentPage = 0, int $level = 0, int|\WP_Post $post = null): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints out option HTML elements for role selectors.
 *
 * @since 2.1.0
 *
 * @param string $selected Slug for the role that should be already selected.
 */
    public function wpDropdownRoles(string $selected = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the form used by the importers to accept the data to be imported.
 *
 * @since 2.0.0
 *
 * @param string $action The action attribute for the form.
 */
    public function wpImportUploadForm(string $action): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a meta box to one or more screens.
 *
 * @since 2.5.0
 * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.
 *
 * @global array $wp_meta_boxes Global meta box state.
 *
 * @param string $id            Meta box ID (used in the 'id' attribute for the meta box).
 * @param string $title         Title of the meta box.
 * @param callable $callback      Function that fills the box with the desired content.
 *                                              The function should echo its output.
 * @param string|array|\WP_Screen $screen        Optional. The screen or screens on which to show the box
 *                                              (such as a post type, 'link', or 'comment'). Accepts a single
 *                                              screen ID, WP_Screen object, or array of screen IDs. Default
 *                                              is the current screen.  If you have used add_menu_page() or
 *                                              add_submenu_page() to create a new screen (and hence screen_id),
 *                                              make sure your menu slug conforms to the limits of sanitize_key()
 *                                              otherwise the 'screen' menu may not correctly render on your page.
 * @param string $context       Optional. The context within the screen where the box
 *                                              should display. Available contexts vary from screen to
 *                                              screen. Post edit screen contexts include 'normal', 'side',
 *                                              and 'advanced'. Comments screen contexts include 'normal'
 *                                              and 'side'. Menus meta boxes (accordion sections) all use
 *                                              the 'side' context. Global default is 'advanced'.
 * @param string $priority      Optional. The priority within the context where the box should show.
 *                                              Accepts 'high', 'core', 'default', or 'low'. Default 'default'.
 * @param array $callbackArgs Optional. Data that should be set as the $args property
 *                                              of the box array (which is the second parameter passed
 *                                              to your callback). Default null.
 */
    public function addMetaBox(string $id, string $title, callable $callback, string|array|\WP_Screen $screen = null, string $context = 'advanced', string $priority = 'default', array $callbackArgs = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders a "fake" meta box with an information message,
 * shown on the block editor, when an incompatible meta box is found.
 *
 * @since 5.0.0
 *
 * @param mixed $dataObject The data object being rendered on this screen.
 * @param array $box         {
 *     Custom formats meta box arguments.
 *
 *     @type string   $id           Meta box 'id' attribute.
 *     @type string   $title        Meta box title.
 *     @type callable $old_callback The original callback for this meta box.
 *     @type array    $args         Extra meta box arguments.
 * }
 */
    public function doBlockEditorIncompatibleMetaBox(mixed $dataObject, array $box): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Meta-Box template function.
 *
 * @since 2.5.0
 *
 * @global array $wp_meta_boxes Global meta box state.
 *
 * @param string|\WP_Screen $screen      The screen identifier. If you have used add_menu_page() or
 *                                      add_submenu_page() to create a new screen (and hence screen_id)
 *                                      make sure your menu slug conforms to the limits of sanitize_key()
 *                                      otherwise the 'screen' menu may not correctly render on your page.
 * @param string $context     The screen context for which to display meta boxes.
 * @param mixed $dataObject Gets passed to the meta box callback function as the first parameter.
 *                                      Often this is the object that's the focus of the current screen,
 *                                      for example a `WP_Post` or `WP_Comment` object.
 * @return int Number of meta_boxes.
 */
    public function doMetaBoxes(string|\WP_Screen $screen, string $context, mixed $dataObject): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a meta box from one or more screens.
 *
 * @since 2.6.0
 * @since 4.4.0 The `$screen` parameter now accepts an array of screen IDs.
 *
 * @global array $wp_meta_boxes Global meta box state.
 *
 * @param string $id      Meta box ID (used in the 'id' attribute for the meta box).
 * @param string|array|\WP_Screen $screen  The screen or screens on which the meta box is shown (such as a
 *                                        post type, 'link', or 'comment'). Accepts a single screen ID,
 *                                        WP_Screen object, or array of screen IDs.
 * @param string $context The context within the screen where the box is set to display.
 *                                        Contexts vary from screen to screen. Post edit screen contexts
 *                                        include 'normal', 'side', and 'advanced'. Comments screen contexts
 *                                        include 'normal' and 'side'. Menus meta boxes (accordion sections)
 *                                        all use the 'side' context.
 */
    public function removeMetaBox(string $id, string|array|\WP_Screen $screen, string $context): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Meta Box Accordion Template Function.
 *
 * Largely made up of abstracted code from do_meta_boxes(), this
 * function serves to build meta boxes as list items for display as
 * a collapsible accordion.
 *
 * @since 3.6.0
 *
 * @uses global $wp_meta_boxes Used to retrieve registered meta boxes.
 *
 * @param string|object $screen      The screen identifier.
 * @param string $context     The screen context for which to display accordion sections.
 * @param mixed $dataObject Gets passed to the section callback function as the first parameter.
 * @return int Number of meta boxes as accordion sections.
 */
    public function doAccordionSections(string|object $screen, string $context, mixed $dataObject): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new section to a settings page.
 *
 * Part of the Settings API. Use this to define new settings sections for an admin page.
 * Show settings sections in your admin page callback function with do_settings_sections().
 * Add settings fields to your section with add_settings_field().
 *
 * The $callback argument should be the name of a function that echoes out any
 * content you want to show at the top of the settings section before the actual
 * fields. It can output nothing if you want.
 *
 * @since 2.7.0
 * @since 6.1.0 Added an `$args` parameter for the section's HTML wrapper and class name.
 *
 * @global array $wp_settings_sections Storage array of all settings sections added to admin pages.
 *
 * @param string $id       Slug-name to identify the section. Used in the 'id' attribute of tags.
 * @param string $title    Formatted title of the section. Shown as the heading for the section.
 * @param callable $callback Function that echos out any content at the top of the section (between heading and fields).
 * @param string $page     The slug-name of the settings page on which to show the section. Built-in pages include
 *                           'general', 'reading', 'writing', 'discussion', 'media', etc. Create your own using
 *                           add_options_page();
 * @param array $args     {
 *     Arguments used to create the settings section.
 *
 *     @type string $before_section HTML content to prepend to the section's HTML output.
 *                                  Receives the section's class name as `%s`. Default empty.
 *     @type string $after_section  HTML content to append to the section's HTML output. Default empty.
 *     @type string $section_class  The class name to use for the section. Default empty.
 * }
 */
    public function addSettingsSection(string $id, string $title, callable $callback, string $page, array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new field to a section of a settings page.
 *
 * Part of the Settings API. Use this to define a settings field that will show
 * as part of a settings section inside a settings page. The fields are shown using
 * do_settings_fields() in do_settings_sections().
 *
 * The $callback argument should be the name of a function that echoes out the
 * HTML input tags for this setting field. Use get_option() to retrieve existing
 * values to show.
 *
 * @since 2.7.0
 * @since 4.2.0 The `$class` argument was added.
 *
 * @global array $wp_settings_fields Storage array of settings fields and info about their pages/sections.
 *
 * @param string $id       Slug-name to identify the field. Used in the 'id' attribute of tags.
 * @param string $title    Formatted title of the field. Shown as the label for the field
 *                           during output.
 * @param callable $callback Function that fills the field with the desired form inputs. The
 *                           function should echo its output.
 * @param string $page     The slug-name of the settings page on which to show the section
 *                           (general, reading, writing, ...).
 * @param string $section  Optional. The slug-name of the section of the settings page
 *                           in which to show the box. Default 'default'.
 * @param array $args {
 *     Optional. Extra arguments that get passed to the callback function.
 *
 *     @type string $label_for When supplied, the setting title will be wrapped
 *                             in a `<label>` element, its `for` attribute populated
 *                             with this value.
 *     @type string $class     CSS Class to be added to the `<tr>` element when the
 *                             field is output.
 * }
 */
    public function addSettingsField(string $id, string $title, callable $callback, string $page, string $section = 'default', array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints out all settings sections added to a particular settings page.
 *
 * Part of the Settings API. Use this in a settings page callback function
 * to output all the sections and fields that were added to that $page with
 * add_settings_section() and add_settings_field()
 *
 * @global array $wp_settings_sections Storage array of all settings sections added to admin pages.
 * @global array $wp_settings_fields Storage array of settings fields and info about their pages/sections.
 * @since 2.7.0
 *
 * @param string $page The slug name of the page whose settings sections you want to output.
 */
    public function doSettingsSections(string $page): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints out the settings fields for a particular settings section.
 *
 * Part of the Settings API. Use this in a settings page to output
 * a specific section. Should normally be called by do_settings_sections()
 * rather than directly.
 *
 * @global array $wp_settings_fields Storage array of settings fields and their pages/sections.
 *
 * @since 2.7.0
 *
 * @param string $page Slug title of the admin page whose settings fields you want to show.
 * @param string $section Slug title of the settings section whose fields you want to show.
 */
    public function doSettingsFields(string $page, string $section): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a settings error to be displayed to the user.
 *
 * Part of the Settings API. Use this to show messages to users about settings validation
 * problems, missing settings or anything else.
 *
 * Settings errors should be added inside the $sanitize_callback function defined in
 * register_setting() for a given setting to give feedback about the submission.
 *
 * By default messages will show immediately after the submission that generated the error.
 * Additional calls to settings_errors() can be used to show errors even when the settings
 * page is first accessed.
 *
 * @since 3.0.0
 * @since 5.3.0 Added `warning` and `info` as possible values for `$type`.
 *
 * @global array[] $wp_settings_errors Storage array of errors registered during this pageload
 *
 * @param string $setting Slug title of the setting to which this error applies.
 * @param string $code    Slug-name to identify the error. Used as part of 'id' attribute in HTML output.
 * @param string $message The formatted message text to display to the user (will be shown inside styled
 *                        `<div>` and `<p>` tags).
 * @param string $type    Optional. Message type, controls HTML class. Possible values include 'error',
 *                        'success', 'warning', 'info'. Default 'error'.
 */
    public function addSettingsError(string $setting, string $code, string $message, string $type = 'error'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fetches settings errors registered by add_settings_error().
 *
 * Checks the $wp_settings_errors array for any errors declared during the current
 * pageload and returns them.
 *
 * If changes were just submitted ($_GET['settings-updated']) and settings errors were saved
 * to the 'settings_errors' transient then those errors will be returned instead. This
 * is used to pass errors back across pageloads.
 *
 * Use the $sanitize argument to manually re-sanitize the option before returning errors.
 * This is useful if you have errors or notices you want to show even when the user
 * hasn't submitted data (i.e. when they first load an options page, or in the {@see 'admin_notices'}
 * action hook).
 *
 * @since 3.0.0
 *
 * @global array[] $wp_settings_errors Storage array of errors registered during this pageload
 *
 * @param string $setting  Optional. Slug title of a specific setting whose errors you want.
 * @param bool $sanitize Optional. Whether to re-sanitize the setting value before returning errors.
 * @return array[] {
 *     Array of settings error arrays.
 *
 *     @type array ...$0 {
 *         Associative array of setting error data.
 *
 *         @type string $setting Slug title of the setting to which this error applies.
 *         @type string $code    Slug-name to identify the error. Used as part of 'id' attribute in HTML output.
 *         @type string $message The formatted message text to display to the user (will be shown inside styled
 *                               `<div>` and `<p>` tags).
 *         @type string $type    Optional. Message type, controls HTML class. Possible values include 'error',
 *                               'success', 'warning', 'info'. Default 'error'.
 *     }
 * }
 */
    public function getSettingsErrors(string $setting = '', bool $sanitize = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays settings errors registered by add_settings_error().
 *
 * Part of the Settings API. Outputs a div for each error retrieved by
 * get_settings_errors().
 *
 * This is called automatically after a settings page based on the
 * Settings API is submitted. Errors should be added during the validation
 * callback function for a setting defined in register_setting().
 *
 * The $sanitize option is passed into get_settings_errors() and will
 * re-run the setting sanitization
 * on its current value.
 *
 * The $hide_on_update option will cause errors to only show when the settings
 * page is first loaded. if the user has already saved new values it will be
 * hidden to avoid repeating messages already shown in the default error
 * reporting after submission. This is useful to show general errors like
 * missing settings when the user arrives at the settings page.
 *
 * @since 3.0.0
 * @since 5.3.0 Legacy `error` and `updated` CSS classes are mapped to
 *              `notice-error` and `notice-success`.
 *
 * @param string $setting        Optional slug title of a specific setting whose errors you want.
 * @param bool $sanitize       Whether to re-sanitize the setting value before returning errors.
 * @param bool $hideOnUpdate If set to true errors will not be shown if the settings page has
 *                               already been submitted.
 */
    public function settingsErrors(string $setting = '', bool $sanitize = false, bool $hideOnUpdate = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the modal window used for attaching media to posts or pages in the media-listing screen.
 *
 * @since 2.7.0
 *
 * @param string $foundAction Optional. The value of the 'found_action' input field. Default empty string.
 */
    public function findPostsDiv(string $foundAction = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post password.
 *
 * The password is passed through esc_attr() to ensure that it is safe for placing in an HTML attribute.
 *
 * @since 2.7.0
 */
    public function thePostPassword(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generic Iframe header for use with Thickbox.
 *
 * @since 2.7.0
 *
 * @global string    $hook_suffix
 * @global string    $admin_body_class
 * @global string    $body_id
 * @global WP_Locale $wp_locale        WordPress date and time locale object.
 *
 * @param string $title      Optional. Title of the Iframe page. Default empty.
 * @param bool $deprecated Not used.
 */
    public function iframeHeader(string $title = '', bool $deprecated = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generic Iframe footer for use with Thickbox.
 *
 * @since 2.7.0
 */
    public function iframeFooter(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an array of post states from a post.
 *
 * @since 5.3.0
 *
 * @param \WP_Post $post The post to retrieve states for.
 * @return string[] Array of post state labels keyed by their state.
 */
    public function getPostStates(\WP_Post $post): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an array of media states from an attachment.
 *
 * @since 5.6.0
 *
 * @param \WP_Post $post The attachment to retrieve states for.
 * @return string[] Array of media state labels keyed by their state.
 */
    public function getMediaStates(\WP_Post $post): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Tests support for compressing JavaScript from PHP.
 *
 * Outputs JavaScript that tests if compression from PHP works as expected
 * and sets an option with the result. Has no effect when the current user
 * is not an administrator. To run the test again the option 'can_compress_scripts'
 * has to be deleted.
 *
 * @since 2.8.0
 */
    public function compressionTest(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Echoes a submit button, with provided text and appropriate class(es).
 *
 * @since 3.1.0
 *
 * @see get_submit_button()
 *
 * @param string $text             Optional. The text of the button. Defaults to 'Save Changes'.
 * @param string $type             Optional. The type and CSS class(es) of the button. Core values
 *                                       include 'primary', 'small', and 'large'. Default 'primary'.
 * @param string $name             Optional. The HTML name of the submit button. If no `id` attribute
 *                                       is given in the `$other_attributes` parameter, `$name` will be used
 *                                       as the button's `id`. Default 'submit'.
 * @param bool $wrap             Optional. True if the output button should be wrapped in a paragraph tag,
 *                                       false otherwise. Default true.
 * @param array|string $otherAttributes Optional. Other attributes that should be output with the button,
 *                                       mapping attributes to their values, e.g. `array( 'id' => 'search-submit' )`.
 *                                       These key/value attribute pairs will be output as `attribute="value"`,
 *                                       where attribute is the key. Attributes can also be provided as a string,
 *                                       e.g. `id="search-submit"`, though the array format is generally preferred.
 *                                       Default empty string.
 */
    public function submitButton(string $text = '', string $type = 'primary', string $name = 'submit', bool $wrap = true, array|string $otherAttributes = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a submit button, with provided text and appropriate class.
 *
 * @since 3.1.0
 *
 * @param string $text             Optional. The text of the button. Defaults to 'Save Changes'.
 * @param string $type             Optional. The type and CSS class(es) of the button. Core values
 *                                       include 'primary', 'small', and 'large'. Default 'primary large'.
 * @param string $name             Optional. The HTML name of the submit button. If no `id` attribute
 *                                       is given in the `$other_attributes` parameter, `$name` will be used
 *                                       as the button's `id`. Default 'submit'.
 * @param bool $wrap             Optional. True if the output button should be wrapped in a paragraph tag,
 *                                       false otherwise. Default true.
 * @param array|string $otherAttributes Optional. Other attributes that should be output with the button,
 *                                       mapping attributes to their values, e.g. `array( 'id' => 'search-submit' )`.
 *                                       These key/value attribute pairs will be output as `attribute="value"`,
 *                                       where attribute is the key. Attributes can also be provided as a string,
 *                                       e.g. `id="search-submit"`, though the array format is generally preferred.
 *                                       Default empty string.
 * @return string Submit button HTML.
 */
    public function getSubmitButton(string $text = '', string $type = 'primary large', string $name = 'submit', bool $wrap = true, array|string $otherAttributes = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts a screen string to a screen object.
 *
 * @since 3.0.0
 *
 * @param string $hookName The hook name (also known as the hook suffix) used to determine the screen.
 * @return \WP_Screen Screen object.
 */
    public function convertToScreen(string $hookName): \WP_Screen
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs a HTML element with a star rating for a given rating.
 *
 * Outputs a HTML element with the star rating exposed on a 0..5 scale in
 * half star increments (ie. 1, 1.5, 2 stars). Optionally, if specified, the
 * number of ratings may also be displayed by passing the $number parameter.
 *
 * @since 3.8.0
 * @since 4.4.0 Introduced the `echo` parameter.
 *
 * @param array $args {
 *     Optional. Array of star ratings arguments.
 *
 *     @type int|float $rating The rating to display, expressed in either a 0.5 rating increment,
 *                             or percentage. Default 0.
 *     @type string    $type   Format that the $rating is in. Valid values are 'rating' (default),
 *                             or, 'percent'. Default 'rating'.
 *     @type int       $number The number of ratings that makes up this rating. Default 0.
 *     @type bool      $echo   Whether to echo the generated markup. False to return the markup instead
 *                             of echoing it. Default true.
 * }
 * @return string Star rating HTML.
 */
    public function wpStarRating(array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays search form for searching themes.
 *
 * @since 2.8.0
 *
 * @param bool $typeSelector
 */
    public function installThemeSearchForm(bool $typeSelector = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays tags filter for themes.
 *
 * @since 2.8.0
 */
    public function installThemesDashboard(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a form to upload themes from zip files.
 *
 * @since 2.8.0
 */
    public function installThemesUpload(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays theme content based on theme list.
 *
 * @since 2.8.0
 *
 * @global WP_Theme_Install_List_Table $wp_list_table
 */
    public function displayThemes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays theme information in dialog box form.
 *
 * @since 2.8.0
 *
 * @global WP_Theme_Install_List_Table $wp_list_table
 */
    public function installThemeInformation(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a theme.
 *
 * @since 2.8.0
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 *
 * @param string $stylesheet Stylesheet of the theme to delete.
 * @param string $redirect   Redirect to page when complete.
 * @return bool|null|\WP_Error True on success, false if `$stylesheet` is empty, WP_Error on failure.
 *                            Null if filesystem credentials are required to proceed.
 */
    public function deleteTheme(string $stylesheet, string $redirect = ''): bool|null|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the page templates available in this theme.
 *
 * @since 1.5.0
 * @since 4.7.0 Added the `$post_type` parameter.
 *
 * @param \WP_Post|null $post      Optional. The post being edited, provided for context.
 * @param string $postType Optional. Post type to get the templates for. Default 'page'.
 * @return string[] Array of template file names keyed by the template header name.
 */
    public function getPageTemplates(\WP_Post|null $post = null, string $postType = 'page'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Check if there is an update for a theme available.
 *
 * Will display link, if there is an update available.
 *
 * @since 2.7.0
 *
 * @see get_theme_update_available()
 *
 * @param \WP_Theme $theme Theme data object.
 */
    public function themeUpdateAvailable(\WP_Theme $theme): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the update link if there is a theme update available.
 *
 * Will return a link if there is an update available.
 *
 * @since 3.8.0
 *
 * @param \WP_Theme $theme WP_Theme object.
 * @return string|false HTML for the update link, or false if invalid info was passed.
 */
    public function getThemeUpdateAvailable(\WP_Theme $theme): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves list of WordPress theme features (aka theme tags).
 *
 * @since 3.1.0
 * @since 3.2.0 Added 'Gray' color and 'Featured Image Header', 'Featured Images',
 *              'Full Width Template', and 'Post Formats' features.
 * @since 3.5.0 Added 'Flexible Header' feature.
 * @since 3.8.0 Renamed 'Width' filter to 'Layout'.
 * @since 3.8.0 Renamed 'Fixed Width' and 'Flexible Width' options
 *              to 'Fixed Layout' and 'Fluid Layout'.
 * @since 3.8.0 Added 'Accessibility Ready' feature and 'Responsive Layout' option.
 * @since 3.9.0 Combined 'Layout' and 'Columns' filters.
 * @since 4.6.0 Removed 'Colors' filter.
 * @since 4.6.0 Added 'Grid Layout' option.
 *              Removed 'Fixed Layout', 'Fluid Layout', and 'Responsive Layout' options.
 * @since 4.6.0 Added 'Custom Logo' and 'Footer Widgets' features.
 *              Removed 'Blavatar' feature.
 * @since 4.6.0 Added 'Blog', 'E-Commerce', 'Education', 'Entertainment', 'Food & Drink',
 *              'Holiday', 'News', 'Photography', and 'Portfolio' subjects.
 *              Removed 'Photoblogging' and 'Seasonal' subjects.
 * @since 4.9.0 Reordered the filters from 'Layout', 'Features', 'Subject'
 *              to 'Subject', 'Features', 'Layout'.
 * @since 4.9.0 Removed 'BuddyPress', 'Custom Menu', 'Flexible Header',
 *              'Front Page Posting', 'Microformats', 'RTL Language Support',
 *              'Threaded Comments', and 'Translation Ready' features.
 * @since 5.5.0 Added 'Block Editor Patterns', 'Block Editor Styles',
 *              and 'Full Site Editing' features.
 * @since 5.5.0 Added 'Wide Blocks' layout option.
 * @since 5.8.1 Added 'Template Editing' feature.
 * @since 6.1.1 Replaced 'Full Site Editing' feature name with 'Site Editor'.
 * @since 6.2.0 Added 'Style Variations' feature.
 *
 * @param bool $api Optional. Whether try to fetch tags from the WordPress.org API. Defaults to true.
 * @return array Array of features keyed by category with translations keyed by slug.
 */
    public function getThemeFeatureList(bool $api = true): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves theme installer pages from the WordPress.org Themes API.
 *
 * It is possible for a theme to override the Themes API result with three
 * filters. Assume this is for themes, which can extend on the Theme Info to
 * offer more choices. This is very powerful and must be used with care, when
 * overriding the filters.
 *
 * The first filter, {@see 'themes_api_args'}, is for the args and gives the action
 * as the second parameter. The hook for {@see 'themes_api_args'} must ensure that
 * an object is returned.
 *
 * The second filter, {@see 'themes_api'}, allows a plugin to override the WordPress.org
 * Theme API entirely. If `$action` is 'query_themes', 'theme_information', or 'feature_list',
 * an object MUST be passed. If `$action` is 'hot_tags', an array should be passed.
 *
 * Finally, the third filter, {@see 'themes_api_result'}, makes it possible to filter the
 * response object or array, depending on the `$action` type.
 *
 * Supported arguments per action:
 *
 * | Argument Name      | 'query_themes' | 'theme_information' | 'hot_tags' | 'feature_list'   |
 * | -------------------| :------------: | :-----------------: | :--------: | :--------------: |
 * | `$slug`            | No             |  Yes                | No         | No               |
 * | `$per_page`        | Yes            |  No                 | No         | No               |
 * | `$page`            | Yes            |  No                 | No         | No               |
 * | `$number`          | No             |  No                 | Yes        | No               |
 * | `$search`          | Yes            |  No                 | No         | No               |
 * | `$tag`             | Yes            |  No                 | No         | No               |
 * | `$author`          | Yes            |  No                 | No         | No               |
 * | `$user`            | Yes            |  No                 | No         | No               |
 * | `$browse`          | Yes            |  No                 | No         | No               |
 * | `$locale`          | Yes            |  Yes                | No         | No               |
 * | `$fields`          | Yes            |  Yes                | No         | No               |
 *
 * @since 2.8.0
 *
 * @param string $action API action to perform: Accepts 'query_themes', 'theme_information',
 *                             'hot_tags' or 'feature_list'.
 * @param array|object $args   {
 *     Optional. Array or object of arguments to serialize for the Themes API. Default empty array.
 *
 *     @type string  $slug     The theme slug. Default empty.
 *     @type int     $per_page Number of themes per page. Default 24.
 *     @type int     $page     Number of current page. Default 1.
 *     @type int     $number   Number of tags to be queried.
 *     @type string  $search   A search term. Default empty.
 *     @type string  $tag      Tag to filter themes. Default empty.
 *     @type string  $author   Username of an author to filter themes. Default empty.
 *     @type string  $user     Username to query for their favorites. Default empty.
 *     @type string  $browse   Browse view: 'featured', 'popular', 'updated', 'favorites'.
 *     @type string  $locale   Locale to provide context-sensitive results. Default is the value of get_locale().
 *     @type array   $fields   {
 *         Array of fields which should or should not be returned.
 *
 *         @type bool $description        Whether to return the theme full description. Default false.
 *         @type bool $sections           Whether to return the theme readme sections: description, installation,
 *                                        FAQ, screenshots, other notes, and changelog. Default false.
 *         @type bool $rating             Whether to return the rating in percent and total number of ratings.
 *                                        Default false.
 *         @type bool $ratings            Whether to return the number of rating for each star (1-5). Default false.
 *         @type bool $downloaded         Whether to return the download count. Default false.
 *         @type bool $downloadlink       Whether to return the download link for the package. Default false.
 *         @type bool $last_updated       Whether to return the date of the last update. Default false.
 *         @type bool $tags               Whether to return the assigned tags. Default false.
 *         @type bool $homepage           Whether to return the theme homepage link. Default false.
 *         @type bool $screenshots        Whether to return the screenshots. Default false.
 *         @type int  $screenshot_count   Number of screenshots to return. Default 1.
 *         @type bool $screenshot_url     Whether to return the URL of the first screenshot. Default false.
 *         @type bool $photon_screenshots Whether to return the screenshots via Photon. Default false.
 *         @type bool $template           Whether to return the slug of the parent theme. Default false.
 *         @type bool $parent             Whether to return the slug, name and homepage of the parent theme. Default false.
 *         @type bool $versions           Whether to return the list of all available versions. Default false.
 *         @type bool $theme_url          Whether to return theme's URL. Default false.
 *         @type bool $extended_author    Whether to return nicename or nicename and display name. Default false.
 *     }
 * }
 * @return object|array|WP_Error Response object or array on success, WP_Error on failure. See the
 *         {@link https://developer.wordpress.org/reference/functions/themes_api/ function reference article}
 *         for more information on the make-up of possible return objects depending on the value of `$action`.
 */
    public function themesApi(string $action, array|object $args = []): array|object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prepares themes for JavaScript.
 *
 * @since 3.8.0
 *
 * @param WP_Theme[] $themes Optional. Array of theme objects to prepare.
 *                           Defaults to all allowed themes.
 *
 * @return array An associative array of theme data, sorted by name.
 */
    public function wpPrepareThemesForJs(array $themes = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints JS templates for the theme-browsing UI in the Customizer.
 *
 * @since 4.2.0
 */
    public function customizeThemesPrintTemplates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a theme is technically active but was paused while
 * loading.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 5.2.0
 *
 * @global WP_Paused_Extensions_Storage $_paused_themes
 *
 * @param string $theme Path to the theme directory relative to the themes directory.
 * @return bool True, if in the list of paused themes. False, not in the list.
 */
    public function isThemePaused(string $theme): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the error that was recorded for a paused theme.
 *
 * @since 5.2.0
 *
 * @global WP_Paused_Extensions_Storage $_paused_themes
 *
 * @param string $theme Path to the theme directory relative to the themes
 *                      directory.
 * @return array|false Array of error information as it was returned by
 *                     `error_get_last()`, or false if none was recorded.
 */
    public function wpGetThemeError(string $theme): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Tries to resume a single theme.
 *
 * If a redirect was provided and a functions.php file was found, we first ensure that
 * functions.php file does not throw fatal errors anymore.
 *
 * The way it works is by setting the redirection to the error before trying to
 * include the file. If the theme fails, then the redirection will not be overwritten
 * with the success message and the theme will not be resumed.
 *
 * @since 5.2.0
 *
 * @global string $wp_stylesheet_path Path to current theme's stylesheet directory.
 * @global string $wp_template_path   Path to current theme's template directory.
 *
 * @param string $theme    Single theme to resume.
 * @param string $redirect Optional. URL to redirect to. Default empty string.
 * @return bool|\WP_Error True on success, false if `$theme` was not paused,
 *                       `WP_Error` on failure.
 */
    public function resumeTheme(string $theme, string $redirect = ''): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders an admin notice in case some themes have been paused due to errors.
 *
 * @since 5.2.0
 *
 * @global string                       $pagenow        The filename of the current screen.
 * @global WP_Paused_Extensions_Storage $_paused_themes
 */
    public function pausedThemesNotice(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieve translations from WordPress Translation API.
 *
 * @since 4.0.0
 *
 * @param string $type Type of translations. Accepts 'plugins', 'themes', 'core'.
 * @param array|object $args Translation API arguments. Optional.
 * @return array|\WP_Error On success an associative array of translations, WP_Error on failure.
 */
    public function translationsApi(string $type, array|object $args = null): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get available translations from the WordPress.org API.
 *
 * @since 4.0.0
 *
 * @see translations_api()
 *
 * @return array[] Array of translations, each an array of data, keyed by the language. If the API response results
 *                 in an error, an empty array will be returned.
 */
    public function wpGetAvailableTranslations(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Output the select form for the language selection on the installation screen.
 *
 * @since 4.0.0
 *
 * @global string $wp_local_package Locale code of the package.
 *
 * @param array[] $languages Array of available languages (populated via the Translation API).
 */
    public function wpInstallLanguageForm(array $languages): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Download a language pack.
 *
 * @since 4.0.0
 *
 * @see wp_get_available_translations()
 *
 * @param string $download Language code to download.
 * @return string|false Returns the language code if successfully downloaded
 *                      (or already installed), or false on failure.
 */
    public function wpDownloadLanguagePack(string $download): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Check if WordPress has access to the filesystem without asking for
 * credentials.
 *
 * @since 4.0.0
 *
 * @return bool Returns true on success, false on failure.
 */
    public function wpCanInstallLanguagePack(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Upgrades the core of WordPress.
 *
 * This will create a .maintenance file at the base of the WordPress directory
 * to ensure that people can not access the website, when the files are being
 * copied to their locations.
 *
 * The files in the `$_old_files` list will be removed and the new files
 * copied from the zip file after the database is upgraded.
 *
 * The files in the `$_new_bundled_files` list will be added to the installation
 * if the version is greater than or equal to the old version being upgraded.
 *
 * The steps for the upgrader for after the new release is downloaded and
 * unzipped is:
 *   1. Test unzipped location for select files to ensure that unzipped worked.
 *   2. Create the .maintenance file in current WordPress base.
 *   3. Copy new WordPress directory over old WordPress files.
 *   4. Upgrade WordPress to new version.
 *     4.1. Copy all files/folders other than wp-content
 *     4.2. Copy any language files to WP_LANG_DIR (which may differ from WP_CONTENT_DIR
 *     4.3. Copy any new bundled themes/plugins to their respective locations
 *   5. Delete new WordPress directory path.
 *   6. Delete .maintenance file.
 *   7. Remove old files.
 *   8. Delete 'update_core' option.
 *
 * There are several areas of failure. For instance if PHP times out before step
 * 6, then you will not be able to access any portion of your site. Also, since
 * the upgrade will not continue where it left off, you will not be able to
 * automatically remove old files and remove the 'update_core' option. This
 * isn't that bad.
 *
 * If the copy of the new WordPress over the old fails, then the worse is that
 * the new WordPress directory will remain.
 *
 * If it is assumed that every file will be copied over, including plugins and
 * themes, then if you edit the default theme, you should rename it, so that
 * your changes remain.
 *
 * @since 2.7.0
 *
 * @global WP_Filesystem_Base $wp_filesystem          WordPress filesystem subclass.
 * @global array              $_old_files
 * @global array              $_old_requests_files
 * @global array              $_new_bundled_files
 * @global wpdb               $wpdb                   WordPress database abstraction object.
 * @global string             $wp_version
 * @global string             $required_php_version
 * @global string             $required_mysql_version
 *
 * @param string $from New release unzipped path.
 * @param string $to   Path to old WordPress installation.
 * @return string|\WP_Error New WordPress version on success, WP_Error on failure.
 */
    public function updateCore(string $from, string $to): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Selects the first update version from the update_core option.
 *
 * @since 2.7.0
 *
 * @return object|array|false The response from the API on success, false on failure.
 */
    public function getPreferredFromUpdateCore(): object|array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets available core updates.
 *
 * @since 2.7.0
 *
 * @param array $options Set $options['dismissed'] to true to show dismissed upgrades too,
 *                       set $options['available'] to false to skip not-dismissed updates.
 * @return array|false Array of the update objects on success, false on failure.
 */
    public function getCoreUpdates(array $options = []): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the best available (and enabled) Auto-Update for WordPress core.
 *
 * If there's 1.2.3 and 1.3 on offer, it'll choose 1.3 if the installation allows it, else, 1.2.3.
 *
 * @since 3.7.0
 *
 * @return object|false The core update offering on success, false on failure.
 */
    public function findCoreAutoUpdate(): object|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets and caches the checksums for the given version of WordPress.
 *
 * @since 3.7.0
 *
 * @param string $version Version string to query.
 * @param string $locale  Locale to query.
 * @return array|false An array of checksums on success, false on failure.
 */
    public function getCoreChecksums(string $version, string $locale): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Dismisses core update.
 *
 * @since 2.7.0
 *
 * @param object $update
 * @return bool
 */
    public function dismissCoreUpdate(object $update): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Undismisses core update.
 *
 * @since 2.7.0
 *
 * @param string $version
 * @param string $locale
 * @return bool
 */
    public function undismissCoreUpdate(string $version, string $locale): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds the available update for WordPress core.
 *
 * @since 2.7.0
 *
 * @param string $version Version string to find the update for.
 * @param string $locale  Locale to find the update for.
 * @return object|false The core update offering on success, false on failure.
 */
    public function findCoreUpdate(string $version, string $locale): object|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns core update footer message.
 *
 * @since 2.3.0
 *
 * @param string $msg
 * @return string
 */
    public function coreUpdateFooter(string $msg = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns core update notification message.
 *
 * @since 2.3.0
 *
 * @global string $pagenow The filename of the current screen.
 * @return void|false
 */
    public function updateNag(): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays WordPress version and active theme in the 'At a Glance' dashboard widget.
 *
 * @since 2.5.0
 */
    public function updateRightNowMessage(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves plugins with updates available.
 *
 * @since 2.9.0
 *
 * @return array
 */
    public function getPluginUpdates(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a callback to display update information for plugins with updates available.
 *
 * @since 2.9.0
 */
    public function wpPluginUpdateRows(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays update information for a plugin.
 *
 * @since 2.3.0
 *
 * @param string $file        Plugin basename.
 * @param array $pluginData Plugin information.
 * @return void|false
 */
    public function wpPluginUpdateRow(string $file, array $pluginData): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves themes with updates available.
 *
 * @since 2.9.0
 *
 * @return array
 */
    public function getThemeUpdates(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a callback to display update information for themes with updates available.
 *
 * @since 3.1.0
 */
    public function wpThemeUpdateRows(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays update information for a theme.
 *
 * @since 3.1.0
 *
 * @param string $themeKey Theme stylesheet.
 * @param \WP_Theme $theme     Theme object.
 * @return void|false
 */
    public function wpThemeUpdateRow(string $themeKey, \WP_Theme $theme): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays maintenance nag HTML message.
 *
 * @since 2.7.0
 *
 * @global int $upgrading
 *
 * @return void|false
 */
    public function maintenanceNag(): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the JavaScript templates for update admin notices.
 *
 * @since 4.6.0
 *
 * Template takes one argument with four values:
 *
 *     param {object} data {
 *         Arguments for admin notice.
 *
 *         @type string id        ID of the notice.
 *         @type string className Class names for the notice.
 *         @type string message   The notice's message.
 *         @type string type      The type of update the notice is for. Either 'plugin' or 'theme'.
 *     }
 */
    public function wpPrintAdminNoticeTemplates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the JavaScript templates for update and deletion rows in list tables.
 *
 * @since 4.6.0
 *
 * The update template takes one argument with four values:
 *
 *     param {object} data {
 *         Arguments for the update row
 *
 *         @type string slug    Plugin slug.
 *         @type string plugin  Plugin base name.
 *         @type string colspan The number of table columns this row spans.
 *         @type string content The row content.
 *     }
 *
 * The delete template takes one argument with four values:
 *
 *     param {object} data {
 *         Arguments for the update row
 *
 *         @type string slug    Plugin slug.
 *         @type string plugin  Plugin base name.
 *         @type string name    Plugin name.
 *         @type string colspan The number of table columns this row spans.
 *     }
 */
    public function wpPrintUpdateRowTemplates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a notice when the user is in recovery mode.
 *
 * @since 5.2.0
 */
    public function wpRecoveryModeNag(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether auto-updates are enabled.
 *
 * @since 5.5.0
 *
 * @param string $type The type of update being checked: Either 'theme' or 'plugin'.
 * @return bool True if auto-updates are enabled for `$type`, false otherwise.
 */
    public function wpIsAutoUpdateEnabledForType(string $type): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether auto-updates are forced for an item.
 *
 * @since 5.6.0
 *
 * @param string $type   The type of update being checked: Either 'theme' or 'plugin'.
 * @param bool|null $update Whether to update. The value of null is internally used
 *                          to detect whether nothing has hooked into this filter.
 * @param object $item   The update offer.
 * @return bool True if auto-updates are forced for `$item`, false otherwise.
 */
    public function wpIsAutoUpdateForcedForItem(string $type, bool|null $update, object $item): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines the appropriate auto-update message to be displayed.
 *
 * @since 5.5.0
 *
 * @return string The update message to be shown.
 */
    public function wpGetAutoUpdateMessage(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates a new user from the "Users" form using $_POST information.
 *
 * @since 2.0.0
 *
 * @return int|\WP_Error WP_Error or User ID.
 */
    public function addUser(): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Edit user settings based on contents of $_POST
 *
 * Used on user-edit.php and profile.php to manage and process user options, passwords etc.
 *
 * @since 2.0.0
 *
 * @param int $userId Optional. User ID.
 * @return int|\WP_Error User ID of the updated user or WP_Error on failure.
 */
    public function editUser(int $userId = 0): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fetch a filtered list of user roles that the current user is
 * allowed to edit.
 *
 * Simple function whose main purpose is to allow filtering of the
 * list of roles in the $wp_roles object so that plugins can remove
 * inappropriate ones depending on the situation or user making edits.
 * Specifically because without filtering anyone with the edit_users
 * capability can edit others to be administrators, even if they are
 * only editors or authors. This filter allows admins to delegate
 * user management.
 *
 * @since 2.8.0
 *
 * @return array[] Array of arrays containing role information.
 */
    public function getEditableRoles(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieve user data and filter it.
 *
 * @since 2.0.5
 *
 * @param int $userId User ID.
 * @return \WP_User|false WP_User object on success, false on failure.
 */
    public function getUserToEdit(int $userId): \WP_User|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieve the user's drafts.
 *
 * @since 2.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $userId User ID.
 * @return array
 */
    public function getUsersDrafts(int $userId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Delete user and optionally reassign posts and links to another user.
 *
 * Note that on a Multisite installation the user only gets removed from the site
 * and does not get deleted from the database.
 *
 * If the `$reassign` parameter is not assigned to a user ID, then all posts will
 * be deleted of that user. The action {@see 'delete_user'} that is passed the user ID
 * being deleted will be run after the posts are either reassigned or deleted.
 * The user meta will also be deleted that are for that user ID.
 *
 * @since 2.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $id       User ID.
 * @param int $reassign Optional. Reassign posts and links to new User ID.
 * @return bool True when finished.
 */
    public function wpDeleteUser(int $id, int $reassign = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Remove all capabilities from user.
 *
 * @since 2.1.0
 *
 * @param int $id User ID.
 */
    public function wpRevokeUser(int $id): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @since 2.8.0
 *
 * @global int $user_ID
 *
 * @param false $errors Deprecated.
 */
    public function defaultPasswordNagHandler(false $errors = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @since 2.8.0
 *
 * @param int $userID
 * @param \WP_User $oldData
 */
    public function defaultPasswordNagEditUser(int $userID, \WP_User $oldData): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @since 2.8.0
 *
 * @global string $pagenow The filename of the current screen.
 */
    public function defaultPasswordNag(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Optional SSL preference that can be turned on by hooking to the 'personal_options' action.
 *
 * See the {@see 'personal_options'} action.
 *
 * @since 2.7.0
 *
 * @param \WP_User $user User data object.
 */
    public function useSslPreference(\WP_User $user): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @since MU (3.0.0)
 *
 * @param string $text
 * @return string
 */
    public function adminCreatedUserEmail(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if the Authorize Application Password request is valid.
 *
 * @since 5.6.0
 * @since 6.2.0 Allow insecure HTTP connections for the local environment.
 * @since 6.3.2 Validates the success and reject URLs to prevent `javascript` pseudo protocol from being executed.
 *
 * @param array $request {
 *     The array of request data. All arguments are optional and may be empty.
 *
 *     @type string $app_name    The suggested name of the application.
 *     @type string $app_id      A UUID provided by the application to uniquely identify it.
 *     @type string $success_url The URL the user will be redirected to after approving the application.
 *     @type string $reject_url  The URL the user will be redirected to after rejecting the application.
 * }
 * @param \WP_User $user The user authorizing the application.
 * @return true|\WP_Error True if the request is valid, a WP_Error object contains errors if not.
 */
    public function wpIsAuthorizeApplicationPasswordRequestValid(array $request, \WP_User $user): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates the redirect URL protocol scheme. The protocol can be anything except `http` and `javascript`.
 *
 * @since 6.3.2
 *
 * @param string $url The redirect URL to be validated.
 * @return true|\WP_Error True if the redirect URL is valid, a WP_Error object otherwise.
 */
    public function wpIsAuthorizeApplicationRedirectUrlValid(string $url): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display list of the available widgets.
 *
 * @since 2.5.0
 *
 * @global array $wp_registered_widgets
 * @global array $wp_registered_widget_controls
 */
    public function wpListWidgets(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Show the widgets and their settings for a sidebar.
 * Used in the admin widget config screen.
 *
 * @since 2.5.0
 *
 * @param string $sidebar      Sidebar ID.
 * @param string $sidebarName Optional. Sidebar name. Default empty.
 */
    public function wpListWidgetControls(string $sidebar, string $sidebarName = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the widget control arguments.
 *
 * @since 2.5.0
 *
 * @global array $wp_registered_widgets
 *
 * @param array $params
 * @return array
 */
    public function wpListWidgetControlsDynamicSidebar(array $params): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @global array $wp_registered_widgets
 *
 * @param string $idBase
 * @return int
 */
    public function nextWidgetIdNumber(string $idBase): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Meta widget used to display the control form for a widget.
 *
 * Called from dynamic_sidebar().
 *
 * @since 2.5.0
 *
 * @global array $wp_registered_widgets
 * @global array $wp_registered_widget_controls
 * @global array $sidebars_widgets
 *
 * @param array $sidebarArgs
 * @return array
 */
    public function wpWidgetControl(array $sidebarArgs): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @param string $classes
 * @return string
 */
    public function wpWidgetsAccessBodyClass(string $classes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display installation header.
 *
 * @since 2.5.0
 *
 * @param string $bodyClasses
 */
    public function displayHeader(string $bodyClasses = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays installer setup form.
 *
 * @since 2.8.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string|null $error
 */
    public function displaySetupForm(string|null $error = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @global int $_wp_nav_menu_max_depth
 *
 * @param string $classes
 * @return string
 */
    public function wpNavMenuMaxDepth(string $classes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display setup wp-config.php file header.
 *
 * @ignore
 * @since 2.3.0
 *
 * @param string|string[] $bodyClasses Class attribute values for the body tag.
 */
    public function setupConfigDisplayHeader(string|array $bodyClasses = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the JavaScript template used to display the auto-update setting for a theme.
 *
 * @since 5.5.0
 *
 * @return string The template for displaying the auto-update setting link.
 */
    public function wpThemeAutoUpdateSettingTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Lists available core updates.
 *
 * @since 2.7.0
 *
 * @global string $wp_local_package Locale code of the package.
 * @global wpdb   $wpdb             WordPress database abstraction object.
 *
 * @param object $update
 */
    public function listCoreUpdate(object $update): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display dismissed updates.
 *
 * @since 2.7.0
 */
    public function dismissedUpdates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display upgrade WordPress for downloading latest or upgrading automatically form.
 *
 * @since 2.7.0
 */
    public function coreUpgradePreamble(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display WordPress auto-updates settings.
 *
 * @since 5.6.0
 */
    public function coreAutoUpdatesSettings(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display the upgrade plugins form.
 *
 * @since 2.9.0
 */
    public function listPluginUpdates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display the upgrade themes form.
 *
 * @since 2.9.0
 */
    public function listThemeUpdates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display the update translations form.
 *
 * @since 3.7.0
 */
    public function listTranslationUpdates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Upgrades WordPress core display.
 *
 * @since 2.7.0
 *
 * @global WP_Filesystem_Base $wp_filesystem WordPress filesystem subclass.
 *
 * @param bool $reinstall
 */
    public function doCoreUpgrade(bool $reinstall = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Dismiss a core update.
 *
 * @since 2.7.0
 */
    public function doDismissCoreUpdate(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Undismiss a core update.
 *
 * @since 2.7.0
 */
    public function doUndismissCoreUpdate(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the admin bar to the page based on the $wp_admin_bar->menu member var.
 *
 * This is called very early on the {@see 'wp_body_open'} action so that it will render
 * before anything else being added to the page body.
 *
 * For backward compatibility with themes not using the 'wp_body_open' action,
 * the function is also called late on {@see 'wp_footer'}.
 *
 * It includes the {@see 'admin_bar_menu'} action which should be used to hook in and
 * add new menus to the admin bar. This also gives you access to the `$post` global,
 * among others.
 *
 * @since 3.1.0
 * @since 5.4.0 Called on 'wp_body_open' action first, with 'wp_footer' as a fallback.
 *
 * @global WP_Admin_Bar $wp_admin_bar
 */
    public function wpAdminBarRender(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the WordPress logo menu.
 *
 * @since 3.3.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarWpMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the sidebar toggle button.
 *
 * @since 3.8.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarSidebarToggle(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the "My Account" item.
 *
 * @since 3.3.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarMyAccountItem(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the "My Account" submenu items.
 *
 * @since 3.1.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarMyAccountMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the "Site Name" menu.
 *
 * @since 3.3.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarSiteMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the "Edit site" link to the Toolbar.
 *
 * @since 5.9.0
 * @since 6.3.0 Added `$_wp_current_template_id` global for editing of current template directly from the admin bar.
 * @since 6.6.0 Added the `canvas` query arg to the Site Editor link.
 *
 * @global string $_wp_current_template_id
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarEditSiteMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the "Customize" link to the Toolbar.
 *
 * @since 4.3.0
 *
 * @global WP_Customize_Manager $wp_customize
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarCustomizeMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the "My Sites/[Site Name]" menu and all submenus.
 *
 * @since 3.1.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarMySitesMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Provides a shortlink.
 *
 * @since 3.1.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarShortlinkMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Provides an edit link for posts and terms.
 *
 * @since 3.1.0
 * @since 5.5.0 Added a "View Post" link on Comments screen for a single post.
 *
 * @global WP_Term  $tag
 * @global WP_Query $wp_the_query WordPress Query object.
 * @global int      $user_id      The ID of the user being edited. Not to be confused with the
 *                                global $user_ID, which contains the ID of the current user.
 * @global int      $post_id      The ID of the post when editing comments for a single post.
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarEditMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds "Add New" menu.
 *
 * @since 3.1.0
 * @since 6.5.0 Added a New Site link for network installations.
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarNewContentMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds edit comments link with awaiting moderation count bubble.
 *
 * @since 3.1.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarCommentsMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds appearance submenu items to the "Site Name" menu.
 *
 * @since 3.1.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarAppearanceMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Provides an update link if theme/plugin/core updates are available.
 *
 * @since 3.1.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarUpdatesMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds search form.
 *
 * @since 3.3.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarSearchMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a link to exit recovery mode when Recovery Mode is active.
 *
 * @since 5.2.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarRecoveryModeMenu(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds secondary menus.
 *
 * @since 3.3.0
 *
 * @param \WP_Admin_Bar $wpAdminBar The WP_Admin_Bar instance.
 */
    public function wpAdminBarAddSecondaryGroups(\WP_Admin_Bar $wpAdminBar): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues inline style to hide the admin bar when printing.
 *
 * @since 6.4.0
 */
    public function wpEnqueueAdminBarHeaderStyles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues inline bump styles to make room for the admin bar.
 *
 * @since 6.4.0
 */
    public function wpEnqueueAdminBarBumpStyles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the display status of the admin bar.
 *
 * This can be called immediately upon plugin load. It does not need to be called
 * from a function hooked to the {@see 'init'} action.
 *
 * @since 3.1.0
 *
 * @global bool $show_admin_bar
 *
 * @param bool $show Whether to allow the admin bar to show.
 */
    public function showAdminBar(bool $show): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the admin bar should be showing.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 3.1.0
 *
 * @global bool   $show_admin_bar
 * @global string $pagenow        The filename of the current screen.
 *
 * @return bool Whether the admin bar should be showing.
 */
    public function isAdminBarShowing(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the author of the current post.
 *
 * @since 1.5.0
 * @since 6.3.0 Returns an empty string if the author's display name is unknown.
 *
 * @global WP_User $authordata The current author's data.
 *
 * @param string $deprecated Deprecated.
 * @return string The author's display name, empty string if unknown.
 */
    public function getTheAuthor(string $deprecated = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the name of the author of the current post.
 *
 * The behavior of this function is based off of old functionality predating
 * get_the_author(). This function is not deprecated, but is designed to echo
 * the value from get_the_author() and as an result of any old theme that might
 * still use the old behavior will also pass the value from get_the_author().
 *
 * The normal, expected behavior of this function is to echo the author and not
 * return it. However, backward compatibility has to be maintained.
 *
 * @since 0.71
 *
 * @see get_the_author()
 * @link https://developer.wordpress.org/reference/functions/the_author/
 *
 * @param string $deprecated      Deprecated.
 * @param bool $deprecatedEcho Deprecated. Use get_the_author(). Echo the string or return it.
 * @return string The author's display name, from get_the_author().
 */
    public function theAuthor(string $deprecated = '', bool $deprecatedEcho = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the author who last edited the current post.
 *
 * @since 2.8.0
 *
 * @return string|void The author's display name, empty string if unknown.
 */
    public function getTheModifiedAuthor(): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the name of the author who last edited the current post,
 * if the author's ID is available.
 *
 * @since 2.8.0
 *
 * @see get_the_author()
 */
    public function theModifiedAuthor(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the requested data of the author of the current post.
 *
 * Valid values for the `$field` parameter include:
 *
 * - admin_color
 * - aim
 * - comment_shortcuts
 * - description
 * - display_name
 * - first_name
 * - ID
 * - jabber
 * - last_name
 * - nickname
 * - plugins_last_view
 * - plugins_per_page
 * - rich_editing
 * - syntax_highlighting
 * - user_activation_key
 * - user_description
 * - user_email
 * - user_firstname
 * - user_lastname
 * - user_level
 * - user_login
 * - user_nicename
 * - user_pass
 * - user_registered
 * - user_status
 * - user_url
 * - yim
 *
 * @since 2.8.0
 *
 * @global WP_User $authordata The current author's data.
 *
 * @param string $field   Optional. The user field to retrieve. Default empty.
 * @param int|false $userId Optional. User ID. Defaults to the current post author.
 * @return string The author's field from the current author's DB object, otherwise an empty string.
 */
    public function getTheAuthorMeta(string $field = '', int|false $userId = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the field from the user's DB object. Defaults to current post's author.
 *
 * @since 2.8.0
 *
 * @param string $field   Selects the field of the users record. See get_the_author_meta()
 *                           for the list of possible fields.
 * @param int|false $userId Optional. User ID. Defaults to the current post author.
 *
 * @see get_the_author_meta()
 */
    public function theAuthorMeta(string $field = '', int|false $userId = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves either author's link or author's name.
 *
 * If the author has a home page set, return an HTML link, otherwise just return
 * the author's name.
 *
 * @since 3.0.0
 *
 * @global WP_User $authordata The current author's data.
 *
 * @return string An HTML link if the author's URL exists in user meta,
 *                otherwise the result of get_the_author().
 */
    public function getTheAuthorLink(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays either author's link or author's name.
 *
 * If the author has a home page set, echo an HTML link, otherwise just echo the
 * author's name.
 *
 * @link https://developer.wordpress.org/reference/functions/the_author_link/
 *
 * @since 2.1.0
 */
    public function theAuthorLink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the number of posts by the author of the current post.
 *
 * @since 1.5.0
 *
 * @return int The number of posts by the author.
 */
    public function getTheAuthorPosts(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the number of posts by the author of the current post.
 *
 * @link https://developer.wordpress.org/reference/functions/the_author_posts/
 * @since 0.71
 */
    public function theAuthorPosts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an HTML link to the author page of the current post's author.
 *
 * Returns an HTML-formatted link using get_author_posts_url().
 *
 * @since 4.4.0
 *
 * @global WP_User $authordata The current author's data.
 *
 * @return string An HTML link to the author page, or an empty string if $authordata is not set.
 */
    public function getTheAuthorPostsLink(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays an HTML link to the author page of the current post's author.
 *
 * @since 1.2.0
 * @since 4.4.0 Converted into a wrapper for get_the_author_posts_link()
 *
 * @param string $deprecated Unused.
 */
    public function theAuthorPostsLink(string $deprecated = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the author page for the user with the ID provided.
 *
 * @since 2.1.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param int $authorId       Author ID.
 * @param string $authorNicename Optional. The author's nicename (slug). Default empty.
 * @return string The URL to the author's page.
 */
    public function getAuthorPostsUrl(int $authorId, string $authorNicename = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Lists all the authors of the site, with several options available.
 *
 * @link https://developer.wordpress.org/reference/functions/wp_list_authors/
 *
 * @since 1.2.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string|array $args {
 *     Optional. Array or string of default arguments.
 *
 *     @type string       $orderby       How to sort the authors. Accepts 'nicename', 'email', 'url', 'registered',
 *                                       'user_nicename', 'user_email', 'user_url', 'user_registered', 'name',
 *                                       'display_name', 'post_count', 'ID', 'meta_value', 'user_login'. Default 'name'.
 *     @type string       $order         Sorting direction for $orderby. Accepts 'ASC', 'DESC'. Default 'ASC'.
 *     @type int          $number        Maximum authors to return or display. Default empty (all authors).
 *     @type bool         $optioncount   Show the count in parenthesis next to the author's name. Default false.
 *     @type bool         $exclude_admin Whether to exclude the 'admin' account, if it exists. Default true.
 *     @type bool         $show_fullname Whether to show the author's full name. Default false.
 *     @type bool         $hide_empty    Whether to hide any authors with no posts. Default true.
 *     @type string       $feed          If not empty, show a link to the author's feed and use this text as the alt
 *                                       parameter of the link. Default empty.
 *     @type string       $feed_image    If not empty, show a link to the author's feed and use this image URL as
 *                                       clickable anchor. Default empty.
 *     @type string       $feed_type     The feed type to link to. Possible values include 'rss2', 'atom'.
 *                                       Default is the value of get_default_feed().
 *     @type bool         $echo          Whether to output the result or instead return it. Default true.
 *     @type string       $style         If 'list', each author is wrapped in an `<li>` element, otherwise the authors
 *                                       will be separated by commas.
 *     @type bool         $html          Whether to list the items in HTML form or plaintext. Default true.
 *     @type int[]|string $exclude       Array or comma/space-separated list of author IDs to exclude. Default empty.
 *     @type int[]|string $include       Array or comma/space-separated list of author IDs to include. Default empty.
 * }
 * @return void|string Void if 'echo' argument is true, list of authors if 'echo' is false.
 */
    public function wpListAuthors(string|array $args = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether this site has more than one author.
 *
 * Checks to see if more than one author has published posts.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 3.2.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return bool Whether or not we have more than one author
 */
    public function isMultiAuthor(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a new block bindings source.
 *
 * Registering a source consists of defining a **name** for that source and a callback function specifying
 * how to get a value from that source and pass it to a block attribute.
 *
 * Once a source is registered, any block that supports the Block Bindings API can use a value
 * from that source by setting its `metadata.bindings` attribute to a value that refers to the source.
 *
 * Note that `register_block_bindings_source()` should be called from a handler attached to the `init` hook.
 *
 *
 * ## Example
 *
 * ### Registering a source
 *
 * First, you need to define a function that will be used to get the value from the source.
 *
 *     function my_plugin_get_custom_source_value( array $source_args, $block_instance, string $attribute_name ) {
 *       // Your custom logic to get the value from the source.
 *       // For example, you can use the `$source_args` to look up a value in a custom table or get it from an external API.
 *       $value = $source_args['key'];
 *
 *       return "The value passed to the block is: $value"
 *     }
 *
 * The `$source_args` will contain the arguments passed to the source in the block's
 * `metadata.bindings` attribute. See the example in the "Usage in a block" section below.
 *
 *     function my_plugin_register_block_bindings_sources() {
 *       register_block_bindings_source( 'my-plugin/my-custom-source', array(
 *         'label'              => __( 'My Custom Source', 'my-plugin' ),
 *         'get_value_callback' => 'my_plugin_get_custom_source_value',
 *       ) );
 *     }
 *     add_action( 'init', 'my_plugin_register_block_bindings_sources' );
 *
 * ### Usage in a block
 *
 * In a block's `metadata.bindings` attribute, you can specify the source and
 * its arguments. Such a block will use the source to override the block
 * attribute's value. For example:
 *
 *     <!-- wp:paragraph {
 *       "metadata": {
 *         "bindings": {
 *           "content": {
 *             "source": "my-plugin/my-custom-source",
 *             "args": {
 *               "key": "you can pass any custom arguments here"
 *             }
 *           }
 *         }
 *       }
 *     } -->
 *     <p>Fallback text that gets replaced.</p>
 *     <!-- /wp:paragraph -->
 *
 * @since 6.5.0
 *
 * @param string $sourceName       The name of the source. It must be a string containing a namespace prefix, i.e.
 *                                  `my-plugin/my-custom-source`. It must only contain lowercase alphanumeric
 *                                  characters, the forward slash `/` and dashes.
 * @param array $sourceProperties {
 *     The array of arguments that are used to register a source.
 *
 *     @type string   $label              The label of the source.
 *     @type callable $get_value_callback A callback executed when the source is processed during block rendering.
 *                                        The callback should have the following signature:
 *
 *                                        `function( $source_args, $block_instance, $attribute_name ): mixed`
 *                                            - @param array $sourceArgs    Array containing source arguments
 *                                                                              used to look up the override value,
 *                                                                              i.e. {"key": "foo"}.
 *                                            - @param \WP_Block $blockInstance The block instance.
 *                                            - @param string $attributeName The name of an attribute.
 *                                        The callback has a mixed return type; it may return a string to override
 *                                        the block's original value, null, false to remove an attribute, etc.
 *     @type string[] $uses_context       Optional. Array of values to add to block `uses_context` needed by the source.
 * }
 * @return \WP_Block_Bindings_Source|false Source when the registration was successful, or `false` on failure.
 */
    public function registerBlockBindingsSource(string $sourceName, array $sourceProperties, array $sourceArgs, \WP_Block $blockInstance, string $attributeName): \WP_Block_Bindings_Source|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a block bindings source.
 *
 * @since 6.5.0
 *
 * @param string $sourceName Block bindings source name including namespace.
 * @return \WP_Block_Bindings_Source|false The unregistered block bindings source on success and `false` otherwise.
 */
    public function unregisterBlockBindingsSource(string $sourceName): \WP_Block_Bindings_Source|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the list of all registered block bindings sources.
 *
 * @since 6.5.0
 *
 * @return WP_Block_Bindings_Source[] The array of registered block bindings sources.
 */
    public function getAllRegisteredBlockBindingsSources(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a registered block bindings source.
 *
 * @since 6.5.0
 *
 * @param string $sourceName The name of the source.
 * @return \WP_Block_Bindings_Source|null The registered block bindings source, or `null` if it is not registered.
 */
    public function getBlockBindingsSource(string $sourceName): \WP_Block_Bindings_Source|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the list of default categories for block types.
 *
 * @since 5.8.0
 * @since 6.3.0 Reusable Blocks renamed to Patterns.
 *
 * @return array[] Array of categories for block types.
 */
    public function getDefaultBlockCategories(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns all the categories for block types that will be shown in the block editor.
 *
 * @since 5.0.0
 * @since 5.8.0 It is possible to pass the block editor context as param.
 *
 * @param \WP_Post|\WP_Block_Editor_Context $postOrBlockEditorContext The current post object or
 *                                                                      the block editor context.
 *
 * @return array[] Array of categories for block types.
 */
    public function getBlockCategories(\WP_Post|\WP_Block_Editor_Context $postOrBlockEditorContext): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the list of allowed block types to use in the block editor.
 *
 * @since 5.8.0
 *
 * @param \WP_Block_Editor_Context $blockEditorContext The current block editor context.
 *
 * @return bool|string[] Array of block type slugs, or boolean to enable/disable all.
 */
    public function getAllowedBlockTypes(\WP_Block_Editor_Context $blockEditorContext): bool|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the default block editor settings.
 *
 * @since 5.8.0
 *
 * @return array The default block editor settings.
 */
    public function getDefaultBlockEditorSettings(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the block editor settings needed to use the Legacy Widget block which
 * is not registered by default.
 *
 * @since 5.8.0
 *
 * @return array Settings to be used with get_block_editor_settings().
 */
    public function getLegacyWidgetBlockEditorSettings(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds the first occurrence of a specific block in an array of blocks.
 *
 * @since 6.3.0
 *
 * @param array $blocks     Array of blocks.
 * @param string $blockName Name of the block to find.
 * @return array Found block, or empty array if none found.
 */
    public function wpGetFirstBlock(array $blocks, string $blockName): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the contextualized block editor settings for a selected editor context.
 *
 * @since 5.8.0
 *
 * @param array $customSettings      Custom settings to use with the given editor type.
 * @param \WP_Block_Editor_Context $blockEditorContext The current block editor context.
 *
 * @return array The contextualized block editor settings.
 */
    public function getBlockEditorSettings(array $customSettings, \WP_Block_Editor_Context $blockEditorContext): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Preloads common data used with the block editor by specifying an array of
 * REST API paths that will be preloaded for a given block editor context.
 *
 * @since 5.8.0
 *
 * @global WP_Post    $post       Global post object.
 * @global WP_Scripts $wp_scripts The WP_Scripts object for printing scripts.
 * @global WP_Styles  $wp_styles  The WP_Styles object for printing styles.
 *
 * @param (string|string[])[] $preloadPaths        List of paths to preload.
 * @param \WP_Block_Editor_Context $blockEditorContext The current block editor context.
 */
    public function blockEditorRestApiPreload(string|array $preloadPaths, \WP_Block_Editor_Context $blockEditorContext): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates an array of theme styles to load into the block editor.
 *
 * @since 5.8.0
 *
 * @global array $editor_styles
 *
 * @return array An array of theme styles for the block editor.
 */
    public function getBlockEditorThemeStyles(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the classic theme supports settings for block editor.
 *
 * @since 6.2.0
 * @since 6.6.0 Add support for 'editor-spacing-sizes' theme support.
 *
 * @return array The classic theme supports settings.
 */
    public function getClassicThemeSupportsBlockEditorSettings(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines the block style variation names within a CSS class string.
 *
 * @since 6.6.0
 *
 * @param string $classString CSS class string to look for a variation in.
 *
 * @return array|null The block style variation name if found.
 */
    public function wpGetBlockStyleVariationNameFromClass(string $classString): array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Ensure the elements block support class name generated, and added to
 * block attributes, in the `render_block_data` filter gets applied to the
 * block's markup.
 *
 * @see wp_render_elements_support_styles
 * @since 6.6.0
 *
 * @param string $blockContent Rendered block content.
 * @param array $block         Block object.
 * @return string                Filtered block content.
 */
    public function wpRenderElementsClassName(string $blockContent, array $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates an inline style value for a typography feature e.g. text decoration,
 * text transform, and font style.
 *
 * Note: This function is for backwards compatibility.
 * * It is necessary to parse older blocks whose typography styles contain presets.
 * * It mostly replaces the deprecated `wp_typography_get_css_variable_inline_style()`,
 *   but skips compiling a CSS declaration as the style engine takes over this role.
 * @link https://github.com/wordpress/gutenberg/pull/27555
 *
 * @since 6.1.0
 *
 * @param string $styleValue  A raw style value for a single typography feature from a block's style attribute.
 * @param string $cssProperty Slug for the CSS property the inline style sets.
 * @return string A CSS inline style value.
 */
    public function wpTypographyGetPresetInlineStyleValue(string $styleValue, string $cssProperty): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders typography styles/content to the block wrapper.
 *
 * @since 6.1.0
 *
 * @param string $blockContent Rendered block content.
 * @param array $block         Block object.
 * @return string Filtered block content.
 */
    public function wpRenderTypographySupport(string $blockContent, array $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks a string for a unit and value and returns an array
 * consisting of `'value'` and `'unit'`, e.g. array( '42', 'rem' ).
 *
 * @since 6.1.0
 *
 * @param string|int|float $rawValue Raw size value from theme.json.
 * @param array $options   {
 *     Optional. An associative array of options. Default is empty array.
 *
 *     @type string   $coerce_to        Coerce the value to rem or px. Default `'rem'`.
 *     @type int      $root_size_value  Value of root font size for rem|em <-> px conversion. Default `16`.
 *     @type string[] $acceptable_units An array of font size units. Default `array( 'rem', 'px', 'em' )`;
 * }
 * @return array|null An array consisting of `'value'` and `'unit'` properties on success.
 *                    `null` on failure.
 */
    public function wpGetTypographyValueAndUnit(string|int|float $rawValue, array $options = []): array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a font-size value based on a given font-size preset.
 * Takes into account fluid typography parameters and attempts to return a CSS
 * formula depending on available, valid values.
 *
 * @since 6.1.0
 * @since 6.1.1 Adjusted rules for min and max font sizes.
 * @since 6.2.0 Added 'settings.typography.fluid.minFontSize' support.
 * @since 6.3.0 Using layout.wideSize as max viewport width, and logarithmic scale factor to calculate minimum font scale.
 * @since 6.4.0 Added configurable min and max viewport width values to the typography.fluid theme.json schema.
 * @since 6.6.0 Deprecated bool argument $should_use_fluid_typography.
 *
 * @param array $preset   {
 *     Required. fontSizes preset value as seen in theme.json.
 *
 *     @type string           $name Name of the font size preset.
 *     @type string           $slug Kebab-case, unique identifier for the font size preset.
 *     @type string|int|float $size CSS font-size value, including units if applicable.
 * }
 * @param bool|array $settings Optional Theme JSON settings array that overrides any global theme settings.
 *                             Default is false.
 * @return string|null Font-size value or null if a size is not passed in $preset.
 */
    public function wpGetTypographyFontSizeValue(array $preset, bool|array $settings = []): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * For backward compatibility reasons,
 * block themes might be using block-templates or block-template-parts,
 * this function ensures we fallback to these folders properly.
 *
 * @since 5.9.0
 *
 * @param string $themeStylesheet The stylesheet. Default is to leverage the main theme root.
 *
 * @return string[] {
 *     Folder names used by block themes.
 *
 *     @type string $wp_template      Theme-relative directory name for block templates.
 *     @type string $wp_template_part Theme-relative directory name for block template parts.
 * }
 */
    public function getBlockThemeFolders(string $themeStylesheet = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a filtered list of allowed area values for template parts.
 *
 * @since 5.9.0
 *
 * @return array[] {
 *     The allowed template part area values.
 *
 *     @type array ...$0 {
 *         Data for the allowed template part area.
 *
 *         @type string $area        Template part area name.
 *         @type string $label       Template part area label.
 *         @type string $description Template part area description.
 *         @type string $icon        Template part area icon.
 *         @type string $area_tag    Template part area tag.
 *     }
 * }
 */
    public function getAllowedBlockTemplatePartAreas(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a filtered list of default template types, containing their
 * localized titles and descriptions.
 *
 * @since 5.9.0
 *
 * @return array[] {
 *     The default template types.
 *
 *     @type array ...$0 {
 *         Data for the template type.
 *
 *         @type string $title       Template type title.
 *         @type string $description Template type description.
 *    }
 * }
 */
    public function getDefaultBlockTemplateTypes(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of unified template objects based on a query.
 *
 * @since 5.8.0
 *
 * @param array $query {
 *     Optional. Arguments to retrieve templates.
 *
 *     @type string[] $slug__in  List of slugs to include.
 *     @type int      $wp_id     Post ID of customized template.
 *     @type string   $area      A 'wp_template_part_area' taxonomy value to filter by (for 'wp_template_part' template type only).
 *     @type string   $post_type Post type to get the templates for.
 * }
 * @param string $templateType Template type. Either 'wp_template' or 'wp_template_part'.
 * @return WP_Block_Template[] Array of block templates.
 */
    public function getBlockTemplates(array $query = [], string $templateType = 'wp_template'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a single unified template object using its id.
 *
 * @since 5.8.0
 *
 * @param string $id            Template unique identifier (example: 'theme_slug//template_slug').
 * @param string $templateType Optional. Template type. Either 'wp_template' or 'wp_template_part'.
 *                              Default 'wp_template'.
 * @return \WP_Block_Template|null Template.
 */
    public function getBlockTemplate(string $id, string $templateType = 'wp_template'): \WP_Block_Template|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a unified template object based on a theme file.
 *
 * This is a fallback of get_block_template(), used when no templates are found in the database.
 *
 * @since 5.9.0
 *
 * @param string $id            Template unique identifier (example: 'theme_slug//template_slug').
 * @param string $templateType Optional. Template type. Either 'wp_template' or 'wp_template_part'.
 *                              Default 'wp_template'.
 * @return \WP_Block_Template|null The found block template, or null if there isn't one.
 */
    public function getBlockFileTemplate(string $id, string $templateType = 'wp_template'): \WP_Block_Template|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints a block template part.
 *
 * @since 5.9.0
 *
 * @param string $part The block template part to print, for example 'header' or 'footer'.
 */
    public function blockTemplatePart(string $part): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the header block template part.
 *
 * @since 5.9.0
 */
    public function blockHeaderArea(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the footer block template part.
 *
 * @since 5.9.0
 */
    public function blockFooterArea(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a theme directory should be ignored during export.
 *
 * @since 6.0.0
 *
 * @param string $path The path of the file in the theme.
 * @return bool Whether this file is in an ignored directory.
 */
    public function wpIsThemeDirectoryIgnored(string $path): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates an export of the current templates and
 * template parts from the site editor at the
 * specified path in a ZIP file.
 *
 * @since 5.9.0
 * @since 6.0.0 Adds the whole theme to the export archive.
 *
 * @global string $wp_version The WordPress version string.
 *
 * @return \WP_Error|string Path of the ZIP file or error on failure.
 */
    public function wpGenerateBlockTemplatesExportFile(): \WP_Error|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the template hierarchy for the given template slug to be created.
 *
 * Note: Always add `index` as the last fallback template.
 *
 * @since 6.1.0
 *
 * @param string $slug            The template slug to be created.
 * @param bool $isCustom       Optional. Indicates if a template is custom or
 *                                part of the template hierarchy. Default false.
 * @param string $templatePrefix Optional. The template prefix for the created template.
 *                                Used to extract the main template type, e.g.
 *                                in `taxonomy-books` the `taxonomy` is extracted.
 *                                Default empty string.
 * @return string[] The template hierarchy.
 */
    public function getTemplateHierarchy(string $slug, bool $isCustom = false, string $templatePrefix = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds a block template with equal or higher specificity than a given PHP template file.
 *
 * Internally, this communicates the block content that needs to be used by the template canvas through a global variable.
 *
 * @since 5.8.0
 * @since 6.3.0 Added `$_wp_current_template_id` global for editing of current template directly from the admin bar.
 *
 * @global string $_wp_current_template_content
 * @global string $_wp_current_template_id
 *
 * @param string $template  Path to the template. See locate_template().
 * @param string $type      Sanitized filename without extension.
 * @param string[] $templates A list of template candidates, in descending order of priority.
 * @return string The path to the Site Editor template canvas file, or the fallback PHP template.
 */
    public function locateBlockTemplate(string $template, string $type, array $templates): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes the block asset's path prefix if provided.
 *
 * @since 5.5.0
 *
 * @param string $assetHandleOrPath Asset handle or prefixed path.
 * @return string Path without the prefix or the original value.
 */
    public function removeBlockAssetPathPrefix(string $assetHandleOrPath): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates the name for an asset based on the name of the block
 * and the field name provided.
 *
 * @since 5.5.0
 * @since 6.1.0 Added `$index` parameter.
 * @since 6.5.0 Added support for `viewScriptModule` field.
 *
 * @param string $blockName Name of the block.
 * @param string $fieldName Name of the metadata field.
 * @param int $index      Optional. Index of the asset when multiple items passed.
 *                           Default 0.
 * @return string Generated asset name for the block's field.
 */
    public function generateBlockAssetHandle(string $blockName, string $fieldName, int $index = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the URL to a block asset.
 *
 * @since 6.4.0
 *
 * @param string $path A normalized path to a block asset.
 * @return string|false The URL to the block asset or false on failure.
 */
    public function getBlockAssetUrl(string $path): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds a script module ID for the selected block metadata field. It detects
 * when a path to file was provided and optionally finds a corresponding asset
 * file with details necessary to register the script module under with an
 * automatically generated module ID. It returns unprocessed script module
 * ID otherwise.
 *
 * @since 6.5.0
 *
 * @param array $metadata   Block metadata.
 * @param string $fieldName Field name to pick from metadata.
 * @param int $index      Optional. Index of the script module ID to register when multiple
 *                           items passed. Default 0.
 * @return string|false Script module ID or false on failure.
 */
    public function registerBlockScriptModuleId(array $metadata, string $fieldName, int $index = 0): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds a script handle for the selected block metadata field. It detects
 * when a path to file was provided and optionally finds a corresponding asset
 * file with details necessary to register the script under automatically
 * generated handle name. It returns unprocessed script handle otherwise.
 *
 * @since 5.5.0
 * @since 6.1.0 Added `$index` parameter.
 * @since 6.5.0 The asset file is optional. Added script handle support in the asset file.
 *
 * @param array $metadata   Block metadata.
 * @param string $fieldName Field name to pick from metadata.
 * @param int $index      Optional. Index of the script to register when multiple items passed.
 *                           Default 0.
 * @return string|false Script handle provided directly or created through
 *                      script's registration, or false on failure.
 */
    public function registerBlockScriptHandle(array $metadata, string $fieldName, int $index = 0): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds a style handle for the block metadata field. It detects when a path
 * to file was provided and registers the style under automatically
 * generated handle name. It returns unprocessed style handle otherwise.
 *
 * @since 5.5.0
 * @since 6.1.0 Added `$index` parameter.
 *
 * @param array $metadata   Block metadata.
 * @param string $fieldName Field name to pick from metadata.
 * @param int $index      Optional. Index of the style to register when multiple items passed.
 *                           Default 0.
 * @return string|false Style handle provided directly or created through
 *                      style's registration, or false on failure.
 */
    public function registerBlockStyleHandle(array $metadata, string $fieldName, int $index = 0): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets i18n schema for block's metadata read from `block.json` file.
 *
 * @since 5.9.0
 *
 * @return object The schema for block's metadata.
 */
    public function getBlockMetadataI18nSchema(): object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a block type from the metadata stored in the `block.json` file.
 *
 * @since 5.5.0
 * @since 5.7.0 Added support for `textdomain` field and i18n handling for all translatable fields.
 * @since 5.9.0 Added support for `variations` and `viewScript` fields.
 * @since 6.1.0 Added support for `render` field.
 * @since 6.3.0 Added `selectors` field.
 * @since 6.4.0 Added support for `blockHooks` field.
 * @since 6.5.0 Added support for `allowedBlocks`, `viewScriptModule`, and `viewStyle` fields.
 *
 * @param string $fileOrFolder Path to the JSON file with metadata definition for
 *                               the block or path to the folder where the `block.json` file is located.
 *                               If providing the path to a JSON file, the filename must end with `block.json`.
 * @param array $args           Optional. Array of block type arguments. Accepts any public property
 *                               of `WP_Block_Type`. See WP_Block_Type::__construct() for information
 *                               on accepted arguments. Default empty array.
 * @return \WP_Block_Type|false The registered block type on success, or false on failure.
 */
    public function registerBlockTypeFromMetadata(string $fileOrFolder, array $args = []): \WP_Block_Type|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a block type. The recommended way is to register a block type using
 * the metadata stored in the `block.json` file.
 *
 * @since 5.0.0
 * @since 5.8.0 First parameter now accepts a path to the `block.json` file.
 *
 * @param string|\WP_Block_Type $blockType Block type name including namespace, or alternatively
 *                                         a path to the JSON file with metadata definition for the block,
 *                                         or a path to the folder where the `block.json` file is located,
 *                                         or a complete WP_Block_Type instance.
 *                                         In case a WP_Block_Type is provided, the $args parameter will be ignored.
 * @param array $args       Optional. Array of block type arguments. Accepts any public property
 *                                         of `WP_Block_Type`. See WP_Block_Type::__construct() for information
 *                                         on accepted arguments. Default empty array.
 *
 * @return \WP_Block_Type|false The registered block type on success, or false on failure.
 */
    public function registerBlockType(string|\WP_Block_Type $blockType, array $args = []): \WP_Block_Type|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a block type.
 *
 * @since 5.0.0
 *
 * @param string|\WP_Block_Type $name Block type name including namespace, or alternatively
 *                                   a complete WP_Block_Type instance.
 * @return \WP_Block_Type|false The unregistered block type on success, or false on failure.
 */
    public function unregisterBlockType(string|\WP_Block_Type $name): \WP_Block_Type|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a post or content string has blocks.
 *
 * This test optimizes for performance rather than strict accuracy, detecting
 * the pattern of a block but not validating its structure. For strict accuracy,
 * you should use the block parser on post content.
 *
 * @since 5.0.0
 *
 * @see parse_blocks()
 *
 * @param int|string|\WP_Post|null $post Optional. Post content, post ID, or post object.
 *                                      Defaults to global $post.
 * @return bool Whether the post has blocks.
 */
    public function hasBlocks(int|string|\WP_Post|null $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a $post or a string contains a specific block type.
 *
 * This test optimizes for performance rather than strict accuracy, detecting
 * whether the block type exists but not validating its structure and not checking
 * synced patterns (formerly called reusable blocks). For strict accuracy,
 * you should use the block parser on post content.
 *
 * @since 5.0.0
 *
 * @see parse_blocks()
 *
 * @param string $blockName Full block type to look for.
 * @param int|string|\WP_Post|null $post       Optional. Post content, post ID, or post object.
 *                                            Defaults to global $post.
 * @return bool Whether the post content contains the specified block.
 */
    public function hasBlock(string $blockName, int|string|\WP_Post|null $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of the names of all registered dynamic block types.
 *
 * @since 5.0.0
 *
 * @return string[] Array of dynamic block names.
 */
    public function getDynamicBlockNames(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves block types hooked into the given block, grouped by anchor block type and the relative position.
 *
 * @since 6.4.0
 *
 * @return array[] Array of block types grouped by anchor block type and the relative position.
 */
    public function getHookedBlocks(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Hooks into the REST API response for the core/navigation block and adds the first and last inner blocks.
 *
 * @since 6.6.0
 *
 * @param \WP_REST_Response $response The response object.
 * @param \WP_Post $post     Post object.
 * @return \WP_REST_Response The response object.
 */
    public function insertHookedBlocksIntoRestResponse(\WP_REST_Response $response, \WP_Post $post): \WP_REST_Response
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Given an array of attributes, returns a string in the serialized attributes
 * format prepared for post content.
 *
 * The serialized result is a JSON-encoded string, with unicode escape sequence
 * substitution for characters which might otherwise interfere with embedding
 * the result in an HTML comment.
 *
 * This function must produce output that remains in sync with the output of
 * the serializeAttributes JavaScript function in the block editor in order
 * to ensure consistent operation between PHP and JavaScript.
 *
 * @since 5.3.1
 *
 * @param array $blockAttributes Attributes object.
 * @return string Serialized attributes.
 */
    public function serializeBlockAttributes(array $blockAttributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the block name to use for serialization. This will remove the default
 * "core/" namespace from a block name.
 *
 * @since 5.3.1
 *
 * @param string|null $blockName Optional. Original block name. Null if the block name is unknown,
 *                                e.g. Classic blocks have their name set to null. Default null.
 * @return string Block name to use for serialization.
 */
    public function stripCoreBlockNamespace(string|null $blockName = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the content of a block, including comment delimiters.
 *
 * @since 5.3.1
 *
 * @param string|null $blockName       Block name. Null if the block name is unknown,
 *                                      e.g. Classic blocks have their name set to null.
 * @param array $blockAttributes Block attributes.
 * @param string $blockContent    Block save content.
 * @return string Comment-delimited block content.
 */
    public function getCommentDelimitedBlockContent(string|null $blockName, array $blockAttributes, string $blockContent): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the content of a block, including comment delimiters, serializing all
 * attributes from the given parsed block.
 *
 * This should be used when preparing a block to be saved to post content.
 * Prefer `render_block` when preparing a block for display. Unlike
 * `render_block`, this does not evaluate a block's `render_callback`, and will
 * instead preserve the markup as parsed.
 *
 * @since 5.3.1
 *
 * @param array $block {
 *     A representative array of a single parsed block object. See WP_Block_Parser_Block.
 *
 *     @type string   $blockName    Name of block.
 *     @type array    $attrs        Attributes from block comment delimiters.
 *     @type array[]  $innerBlocks  List of inner blocks. An array of arrays that
 *                                  have the same structure as this one.
 *     @type string   $innerHTML    HTML from inside block comment delimiters.
 *     @type array    $innerContent List of string fragments and null markers where
 *                                  inner blocks were found.
 * }
 * @return string String of rendered HTML.
 */
    public function serializeBlock(array $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a joined string of the aggregate serialization of the given
 * parsed blocks.
 *
 * @since 5.3.1
 *
 * @param array[] $blocks {
 *     Array of block structures.
 *
 *     @type array ...$0 {
 *         A representative array of a single parsed block object. See WP_Block_Parser_Block.
 *
 *         @type string   $blockName    Name of block.
 *         @type array    $attrs        Attributes from block comment delimiters.
 *         @type array[]  $innerBlocks  List of inner blocks. An array of arrays that
 *                                      have the same structure as this one.
 *         @type string   $innerHTML    HTML from inside block comment delimiters.
 *         @type array    $innerContent List of string fragments and null markers where
 *                                      inner blocks were found.
 *     }
 * }
 * @return string String of rendered HTML.
 */
    public function serializeBlocks(array $blocks): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Replaces patterns in a block tree with their content.
 *
 * @since 6.6.0
 *
 * @param array $blocks An array blocks.
 *
 * @return array An array of blocks with patterns replaced by their content.
 */
    public function resolvePatternBlocks(array $blocks): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters and sanitizes block content to remove non-allowable HTML
 * from parsed block attribute values.
 *
 * @since 5.3.1
 *
 * @param string $text              Text that may contain block content.
 * @param array[]|string $allowedHtml      Optional. An array of allowed HTML elements and attributes,
 *                                          or a context name such as 'post'. See wp_kses_allowed_html()
 *                                          for the list of accepted context names. Default 'post'.
 * @param string[] $allowedProtocols Optional. Array of allowed URL protocols.
 *                                          Defaults to the result of wp_allowed_protocols().
 * @return string The filtered and sanitized content result.
 */
    public function filterBlockContent(string $text, array|string $allowedHtml = 'post', array $allowedProtocols = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters and sanitizes a parsed block to remove non-allowable HTML
 * from block attribute values.
 *
 * @since 5.3.1
 *
 * @param \WP_Block_Parser_Block $block             The parsed block object.
 * @param array[]|string $allowedHtml      An array of allowed HTML elements and attributes,
 *                                                 or a context name such as 'post'. See wp_kses_allowed_html()
 *                                                 for the list of accepted context names.
 * @param string[] $allowedProtocols Optional. Array of allowed URL protocols.
 *                                                 Defaults to the result of wp_allowed_protocols().
 * @return array The filtered and sanitized block object result.
 */
    public function filterBlockKses(\WP_Block_Parser_Block $block, array|string $allowedHtml, array $allowedProtocols = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters and sanitizes a parsed block attribute value to remove
 * non-allowable HTML.
 *
 * @since 5.3.1
 * @since 6.5.5 Added the `$block_context` parameter.
 *
 * @param string[]|string $value             The attribute value to filter.
 * @param array[]|string $allowedHtml      An array of allowed HTML elements and attributes,
 *                                           or a context name such as 'post'. See wp_kses_allowed_html()
 *                                           for the list of accepted context names.
 * @param string[] $allowedProtocols Optional. Array of allowed URL protocols.
 *                                           Defaults to the result of wp_allowed_protocols().
 * @param array $blockContext     Optional. The block the attribute belongs to, in parsed block array format.
 * @return string[]|string The filtered and sanitized result.
 */
    public function filterBlockKsesValue(array|string $value, array|string $allowedHtml, array $allowedProtocols = [], array $blockContext = null): array|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes the value of the Template Part block's `tagName` attribute.
 *
 * @since 6.5.5
 *
 * @param string $attributeValue The attribute value to filter.
 * @param string $attributeName  The attribute name.
 * @param array[]|string $allowedHtml    An array of allowed HTML elements and attributes,
 *                                        or a context name such as 'post'. See wp_kses_allowed_html()
 *                                        for the list of accepted context names.
 * @return string The sanitized attribute value.
 */
    public function filterBlockCoreTemplatePartAttributes(string $attributeValue, string $attributeName, array|string $allowedHtml): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses blocks out of a content string, and renders those appropriate for the excerpt.
 *
 * As the excerpt should be a small string of text relevant to the full post content,
 * this function renders the blocks that are most likely to contain such text.
 *
 * @since 5.0.0
 *
 * @param string $content The content to parse.
 * @return string The parsed and filtered content.
 */
    public function excerptRemoveBlocks(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses footnotes markup out of a content string,
 * and renders those appropriate for the excerpt.
 *
 * @since 6.3.0
 *
 * @param string $content The content to parse.
 * @return string The parsed and filtered content.
 */
    public function excerptRemoveFootnotes(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders a single block into a HTML string.
 *
 * @since 5.0.0
 *
 * @global WP_Post $post The post to edit.
 *
 * @param array $parsedBlock {
 *     A representative array of the block being rendered. See WP_Block_Parser_Block.
 *
 *     @type string   $blockName    Name of block.
 *     @type array    $attrs        Attributes from block comment delimiters.
 *     @type array[]  $innerBlocks  List of inner blocks. An array of arrays that
 *                                  have the same structure as this one.
 *     @type string   $innerHTML    HTML from inside block comment delimiters.
 *     @type array    $innerContent List of string fragments and null markers where
 *                                  inner blocks were found.
 * }
 * @return string String of rendered HTML.
 */
    public function renderBlock(array $parsedBlock): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses blocks out of a content string.
 *
 * @since 5.0.0
 *
 * @param string $content Post content.
 * @return array[] {
 *     Array of block structures.
 *
 *     @type array ...$0 {
 *         A representative array of a single parsed block object. See WP_Block_Parser_Block.
 *
 *         @type string   $blockName    Name of block.
 *         @type array    $attrs        Attributes from block comment delimiters.
 *         @type array[]  $innerBlocks  List of inner blocks. An array of arrays that
 *                                      have the same structure as this one.
 *         @type string   $innerHTML    HTML from inside block comment delimiters.
 *         @type array    $innerContent List of string fragments and null markers where
 *                                      inner blocks were found.
 *     }
 * }
 */
    public function parseBlocks(string $content): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses dynamic blocks out of `post_content` and re-renders them.
 *
 * @since 5.0.0
 *
 * @param string $content Post content.
 * @return string Updated post content.
 */
    public function doBlocks(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the current version of the block format that the content string is using.
 *
 * If the string doesn't contain blocks, it returns 0.
 *
 * @since 5.0.0
 *
 * @param string $content Content to test.
 * @return int The block format version is 1 if the content contains one or more blocks, 0 otherwise.
 */
    public function blockVersion(string $content): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a new block style.
 *
 * @since 5.3.0
 * @since 6.6.0 Added support for registering styles for multiple block types.
 *
 * @link https://developer.wordpress.org/block-editor/reference-guides/block-api/block-styles/
 *
 * @param string|string[] $blockName       Block type name including namespace or array of namespaced block type names.
 * @param array $styleProperties Array containing the properties of the style name, label,
 *                                          style_handle (name of the stylesheet to be enqueued),
 *                                          inline_style (string containing the CSS to be added),
 *                                          style_data (theme.json-like array to generate CSS from).
 *                                          See WP_Block_Styles_Registry::register().
 * @return bool True if the block style was registered with success and false otherwise.
 */
    public function registerBlockStyle(string|array $blockName, array $styleProperties): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a block style.
 *
 * @since 5.3.0
 *
 * @param string $blockName       Block type name including namespace.
 * @param string $blockStyleName Block style name.
 * @return bool True if the block style was unregistered with success and false otherwise.
 */
    public function unregisterBlockStyle(string $blockName, string $blockStyleName): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether the current block type supports the feature requested.
 *
 * @since 5.8.0
 * @since 6.4.0 The `$feature` parameter now supports a string.
 *
 * @param \WP_Block_Type $blockType    Block type to check for support.
 * @param string|array $feature       Feature slug, or path to a specific feature to check support for.
 * @param mixed $defaultValue Optional. Fallback value for feature support. Default false.
 * @return bool Whether the feature is supported.
 */
    public function blockHasSupport(\WP_Block_Type $blockType, string|array $feature, mixed $defaultValue = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts typography keys declared under `supports.*` to `supports.typography.*`.
 *
 * Displays a `_doing_it_wrong()` notice when a block using the older format is detected.
 *
 * @since 5.8.0
 *
 * @param array $metadata Metadata for registering a block type.
 * @return array Filtered metadata for registering a block type.
 */
    public function wpMigrateOldTypographyShape(array $metadata): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Helper function that constructs a WP_Query args array from
 * a `Query` block properties.
 *
 * It's used in Query Loop, Query Pagination Numbers and Query Pagination Next blocks.
 *
 * @since 5.8.0
 * @since 6.1.0 Added `query_loop_block_query_vars` filter and `parents` support in query.
 *
 * @param \WP_Block $block Block instance.
 * @param int $page  Current query's page.
 *
 * @return array Returns the constructed WP_Query arguments.
 */
    public function buildQueryVarsFromQueryBlock(\WP_Block $block, int $page): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Helper function that returns the proper pagination arrow HTML for
 * `QueryPaginationNext` and `QueryPaginationPrevious` blocks based
 * on the provided `paginationArrow` from `QueryPagination` context.
 *
 * It's used in QueryPaginationNext and QueryPaginationPrevious blocks.
 *
 * @since 5.9.0
 *
 * @param \WP_Block $block   Block instance.
 * @param bool $isNext Flag for handling `next/previous` blocks.
 * @return string|null The pagination arrow HTML or null if there is none.
 */
    public function getQueryPaginationArrow(\WP_Block $block, bool $isNext): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Helper function that constructs a comment query vars array from the passed
 * block properties.
 *
 * It's used with the Comment Query Loop inner blocks.
 *
 * @since 6.0.0
 *
 * @param \WP_Block $block Block instance.
 * @return array Returns the comment query parameters to use with the
 *               WP_Comment_Query constructor.
 */
    public function buildCommentQueryVarsFromBlock(\WP_Block $block): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Helper function that returns the proper pagination arrow HTML for
 * `CommentsPaginationNext` and `CommentsPaginationPrevious` blocks based on the
 * provided `paginationArrow` from `CommentsPagination` context.
 *
 * It's used in CommentsPaginationNext and CommentsPaginationPrevious blocks.
 *
 * @since 6.0.0
 *
 * @param \WP_Block $block           Block instance.
 * @param string $paginationType Optional. Type of the arrow we will be rendering.
 *                                  Accepts 'next' or 'previous'. Default 'next'.
 * @return string|null The pagination arrow HTML or null if there is none.
 */
    public function getCommentsPaginationArrow(\WP_Block $block, string $paginationType = 'next'): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/archives` block on server.
 *
 * @since 5.0.0
 *
 * @see WP_Widget_Archives
 *
 * @param array $attributes The block attributes.
 *
 * @return string Returns the post content with archives added.
 */
    public function renderBlockCoreArchives(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register archives block.
 *
 * @since 5.0.0
 */
    public function registerBlockCoreArchives(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/avatar` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Return the avatar.
 */
    public function renderBlockCoreAvatar(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates class names and styles to apply the border support styles for
 * the Avatar block.
 *
 * @since 6.3.0
 *
 * @param array $attributes The block attributes.
 * @return array The border-related classnames and styles for the block.
 */
    public function getBlockCoreAvatarBorderAttributes(array $attributes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/avatar` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreAvatar(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/block` block on server.
 *
 * @since 5.0.0
 *
 * @global WP_Embed $wp_embed
 *
 * @param array $attributes The block attributes.
 *
 * @return string Rendered HTML of the referenced block.
 */
    public function renderBlockCoreBlock(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/block` block.
 *
 * @since 5.3.0
 */
    public function registerBlockCoreBlock(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/button` block on the server,
 *
 * @since 6.6.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The block content.
 * @param \WP_Block $block      The block object.
 *
 * @return string The block content.
 */
    public function renderBlockCoreButton(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/button` block on server.
 *
 * @since 6.6.0
 */
    public function registerBlockCoreButton(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/calendar` block on server.
 *
 * @since 5.2.0
 *
 * @global int $monthnum.
 * @global int $year.
 *
 * @param array $attributes The block attributes.
 *
 * @return string Returns the block content.
 */
    public function renderBlockCoreCalendar(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/calendar` block on server.
 *
 * @since 5.2.0
 */
    public function registerBlockCoreCalendar(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether or not there are any published posts.
 *
 * Used to hide the calendar block when there are no published posts.
 * This compensates for a known Core bug: https://core.trac.wordpress.org/ticket/12016
 *
 * @since 5.9.0
 *
 * @return bool Has any published posts or not.
 */
    public function blockCoreCalendarHasPublishedPosts(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Queries the database for any published post and saves
 * a flag whether any published post exists or not.
 *
 * @since 5.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return bool Has any published posts or not.
 */
    public function blockCoreCalendarUpdateHasPublishedPosts(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Handler for updating the has published posts flag when a post is deleted.
     *
     * @since 5.9.0
     *
     * @param int $postId Deleted post ID.
     */
    public function blockCoreCalendarUpdateHasPublishedPostOnDelete(int $postId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Handler for updating the has published posts flag when a post status changes.
     *
     * @since 5.9.0
     *
     * @param string $newStatus The status the post is changing to.
     * @param string $oldStatus The status the post is changing from.
     * @param \WP_Post $post       Post object.
     */
    public function blockCoreCalendarUpdateHasPublishedPostOnTransitionPostStatus(string $newStatus, string $oldStatus, \WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/categories` block on server.
 *
 * @since 5.0.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string Returns the categories list/dropdown markup.
 */
    public function renderBlockCoreCategories(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates the inline script for a categories dropdown field.
 *
 * @since 5.0.0
 *
 * @param string $dropdownId ID of the dropdown field.
 *
 * @return string Returns the dropdown onChange redirection script.
 */
    public function buildDropdownScriptBlockCoreCategories(string $dropdownId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/categories` block on server.
 *
 * @since 5.0.0
 */
    public function registerBlockCoreCategories(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comment-author-name` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Return the post comment's author.
 */
    public function renderBlockCoreCommentAuthorName(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comment-author-name` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentAuthorName(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comment-content` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Return the post comment's content.
 */
    public function renderBlockCoreCommentContent(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comment-content` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentContent(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comment-date` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Return the post comment's date.
 */
    public function renderBlockCoreCommentDate(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comment-date` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentDate(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comment-edit-link` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Return the post comment's date.
 */
    public function renderBlockCoreCommentEditLink(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comment-edit-link` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentEditLink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comment-reply-link` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Return the post comment's reply link.
 */
    public function renderBlockCoreCommentReplyLink(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comment-reply-link` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentReplyLink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Function that recursively renders a list of nested comments.
 *
 * @since 6.3.0 Changed render_block_context priority to `1`.
 *
 * @global int $comment_depth
 *
 * @param WP_Comment[] $comments        The array of comments.
 * @param \WP_Block $block           Block instance.
 * @return string
 */
    public function blockCoreCommentTemplateRenderComments(array $comments, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comment-template` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the HTML representing the comments using the layout
 * defined by the block's inner blocks.
 */
    public function renderBlockCoreCommentTemplate(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comment-template` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentTemplate(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comments-pagination-next` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the next comments link for the query pagination.
 */
    public function renderBlockCoreCommentsPaginationNext(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comments-pagination-next` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentsPaginationNext(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comments-pagination-numbers` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the pagination numbers for the comments.
 */
    public function renderBlockCoreCommentsPaginationNumbers(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comments-pagination-numbers` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentsPaginationNumbers(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comments-pagination-previous` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the previous posts link for the comments pagination.
 */
    public function renderBlockCoreCommentsPaginationPrevious(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comments-pagination-previous` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentsPaginationPrevious(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comments-pagination` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 *
 * @return string Returns the wrapper for the Comments pagination.
 */
    public function renderBlockCoreCommentsPagination(array $attributes, string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comments-pagination` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentsPagination(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comments-title` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 *
 * @return string Return the post comments title.
 */
    public function renderBlockCoreCommentsTitle(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comments-title` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCommentsTitle(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/comments` block on the server.
 *
 * This render callback is mainly for rendering a dynamic, legacy version of
 * this block (the old `core/post-comments`). It uses the `comments_template()`
 * function to generate the output, in the same way as classic PHP themes.
 *
 * As this callback will always run during SSR, first we need to check whether
 * the block is in legacy mode. If not, the HTML generated in the editor is
 * returned instead.
 *
 * @since 6.1.0
 *
 * @global WP_Post $post Global post object.
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Returns the filtered post comments for the current post wrapped inside "p" tags.
 */
    public function renderBlockCoreComments(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/comments` block on the server.
 *
 * @since 6.1.0
 */
    public function registerBlockCoreComments(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Use the button block classes for the form-submit button.
 *
 * @since 6.1.0
 *
 * @param array $fields The default comment form arguments.
 *
 * @return array Returns the modified fields.
 */
    public function commentsBlockFormDefaults(array $fields): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues styles from the legacy `core/post-comments` block. These styles are
 * required only by the block's fallback.
 *
 * @since 6.1.0
 *
 * @param string $blockName Name of the new block type.
 */
    public function enqueueLegacyPostCommentsBlockStyles(string $blockName): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Ensures backwards compatibility for any users running the Gutenberg plugin
 * who have used Post Comments before it was merged into Comments Query Loop.
 *
 * The same approach was followed when core/query-loop was renamed to
 * core/post-template.
 *
 * @since 6.1.0
 *
 * @see https://github.com/WordPress/gutenberg/pull/41807
 * @see https://github.com/WordPress/gutenberg/pull/32514
 */
    public function registerLegacyPostCommentsBlock(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/cover` block on server.
 *
 * @since 6.0.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The block rendered content.
 *
 * @return string Returns the cover block markup, if useFeaturedImage is true.
 */
    public function renderBlockCoreCover(array $attributes, string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/cover` block renderer on server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreCover(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * When the `core/file` block is rendering, check if we need to enqueue the `wp-block-file-view` script.
 *
 * @since 5.8.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The block content.
 * @param \WP_Block $block      The parsed block.
 *
 * @return string Returns the block content.
 */
    public function renderBlockCoreFile(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/file` block on server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreFile(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/footnotes` block on the server.
 *
 * @since 6.3.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the HTML representing the footnotes.
 */
    public function renderBlockCoreFootnotes(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/footnotes` block on the server.
 *
 * @since 6.3.0
 */
    public function registerBlockCoreFootnotes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the footnotes meta field required for footnotes to work.
 *
 * @since 6.5.0
 */
    public function registerBlockCoreFootnotesPostMeta(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the footnotes field to the revisions display.
 *
 * @since 6.3.0
 *
 * @param array $fields The revision fields.
 * @return array The revision fields.
 */
    public function wpAddFootnotesToRevision(array $fields): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the footnotes field from the revision for the revisions screen.
 *
 * @since 6.3.0
 *
 * @param string $revisionField The field value, but $revision->$field
 *                               (footnotes) does not exist.
 * @param string $field          The field name, in this case "footnotes".
 * @param object $revision       The revision object to compare against.
 * @return string The field value.
 */
    public function wpGetFootnotesFromRevision(string $revisionField, string $field, object $revision): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles backwards compatibility for Gallery Blocks,
 * whose images feature a `data-id` attribute.
 *
 * Now that the Gallery Block contains inner Image Blocks,
 * we add a custom `data-id` attribute before rendering the gallery
 * so that the Image Block can pick it up in its render_callback.
 *
 * @since 5.9.0
 *
 * @param array $parsedBlock The block being rendered.
 * @return array The migrated block object.
 */
    public function blockCoreGalleryDataIdBackcompatibility(array $parsedBlock): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/gallery` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Attributes of the block being rendered.
 * @param string $content Content of the block being rendered.
 * @return string The content of the block being rendered.
 */
    public function blockCoreGalleryRender(array $attributes, string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/gallery` block on server.
 *
 * @since 5.9.0
 */
    public function registerBlockCoreGallery(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a wp-block-heading class to the heading block content.
 *
 * For example, the following block content:
 *  <h2 class="align-left">Hello World</h2>
 *
 * Would be transformed to:
 *  <h2 class="align-left wp-block-heading">Hello World</h2>
 *
 * @since 6.2.0
 *
 * @param array $attributes Attributes of the block being rendered.
 * @param string $content Content of the block being rendered.
 *
 * @return string The content of the block being rendered.
 */
    public function blockCoreHeadingRender(array $attributes, string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/heading` block on server.
 *
 * @since 6.2.0
 */
    public function registerBlockCoreHeading(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Build an array with CSS classes and inline styles defining the colors
 * which will be applied to the home link markup in the front-end.
 *
 * @since 6.0.0
 *
 * @param array $context home link block context.
 * @return array Colors CSS classes and inline styles.
 */
    public function blockCoreHomeLinkBuildCssColors(array $context): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Build an array with CSS classes and inline styles defining the font sizes
 * which will be applied to the home link markup in the front-end.
 *
 * @since 6.0.0
 *
 * @param array $context Home link block context.
 * @return array Font size CSS classes and inline styles.
 */
    public function blockCoreHomeLinkBuildCssFontSizes(array $context): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds an array with classes and style for the li wrapper
 *
 * @since 6.0.0
 *
 * @param array $context    Home link block context.
 * @return string The li wrapper attributes.
 */
    public function blockCoreHomeLinkBuildLiWrapperAttributes(array $context): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/home-link` block.
 *
 * @since 6.0.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The saved content.
 * @param \WP_Block $block      The parsed block.
 *
 * @return string Returns the post content with the home url added.
 */
    public function renderBlockCoreHomeLink(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register the home block
 *
 * @since 6.0.0
 *
 * @uses render_block_core_home_link()
 * @throws WP_Error An WP_Error exception parsing the block definition.
 */
    public function registerBlockCoreHomeLink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/image` block on the server,
 * adding a data-id attribute to the element if core/gallery has added on pre-render.
 *
 * @since 5.9.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The block content.
 * @param \WP_Block $block      The block object.
 *
 * @return string The block content with the data-id attribute added.
 */
    public function renderBlockCoreImage(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the lightboxEnabled flag to the block data.
 *
 * This is used to determine whether the lightbox should be rendered or not.
 *
 * @since 6.4.0
 *
 * @param array $block Block data.
 *
 * @return array Filtered block data.
 */
    public function blockCoreImageGetLightboxSettings(array $block): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the directives and layout needed for the lightbox behavior.
 *
 * @since 6.4.0
 *
 * @param string $blockContent Rendered block content.
 * @param array $block         Block object.
 *
 * @return string Filtered block content.
 */
    public function blockCoreImageRenderLightbox(string $blockContent, array $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * @since 6.5.0
 */
    public function blockCoreImagePrintLightboxOverlay(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/image` block on server.
 *
 * @since 5.9.0
 */
    public function registerBlockCoreImage(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers core block style handles.
 *
 * While {@see register_block_style_handle()} is typically used for that, the way it is
 * implemented is inefficient for core block styles. Registering those style handles here
 * avoids unnecessary logic and filesystem lookups in the other function.
 *
 * @since 6.3.0
 *
 * @global string $wp_version The WordPress version string.
 */
    public function registerCoreBlockStyleHandles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers core block types using metadata files.
 * Dynamic core blocks are registered separately.
 *
 * @since 5.5.0
 */
    public function registerCoreBlockTypesFromMetadata(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get the post title.
 *
 * The post title is fetched and if it is blank then a default string is
 * returned.
 *
 * Copied from `wp-admin/includes/template.php`, but we can't include that
 * file because:
 *
 * 1. It causes bugs with test fixture generation and strange Docker 255 error
 *    codes.
 * 2. It's in the admin; ideally we *shouldn't* be including files from the
 *    admin for a block's output. It's a very small/simple function as well,
 *    so duplicating it isn't too terrible.
 *
 * @since 3.3.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return string The post title if set; "(no title)" if no title is set.
 */
    public function wpLatestCommentsDraftOrPostTitle(int|\WP_Post $post = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/latest-comments` block on server.
 *
 * @since 5.1.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string Returns the post content with latest comments added.
 */
    public function renderBlockCoreLatestComments(array $attributes = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/latest-comments` block.
 *
 * @since 5.3.0
 */
    public function registerBlockCoreLatestComments(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Callback for the excerpt_length filter used by
 * the Latest Posts block at render time.
 *
 * @since 5.4.0
 *
 * @return int Returns the global $block_core_latest_posts_excerpt_length variable
 *             to allow the excerpt_length filter respect the Latest Block setting.
 */
    public function blockCoreLatestPostsGetExcerptLength(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/latest-posts` block on server.
 *
 * @since 5.0.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string Returns the post content with latest posts added.
 */
    public function renderBlockCoreLatestPosts(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/latest-posts` block on server.
 *
 * @since 5.0.0
 */
    public function registerBlockCoreLatestPosts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles outdated versions of the `core/latest-posts` block by converting
 * attribute `categories` from a numeric string to an array with key `id`.
 *
 * This is done to accommodate the changes introduced in #20781 that sought to
 * add support for multiple categories to the block. However, given that this
 * block is dynamic, the usual provisions for block migration are insufficient,
 * as they only act when a block is loaded in the editor.
 *
 * TODO: Remove when and if the bottom client-side deprecation for this block
 * is removed.
 *
 * @since 5.5.0
 *
 * @param array $block A single parsed block object.
 *
 * @return array The migrated block object.
 */
    public function blockCoreLatestPostsMigrateCategories(array $block): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the 'core/legacy-widget' block.
 *
 * @since 5.8.0
 *
 * @global int $wp_widget_factory.
 *
 * @param array $attributes The block attributes.
 *
 * @return string Rendered block.
 */
    public function renderBlockCoreLegacyWidget(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the 'core/legacy-widget' block.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreLegacyWidget(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Intercepts any request with legacy-widget-preview in the query param and, if
 * set, renders a page containing a preview of the requested Legacy Widget
 * block.
 *
 * @since 5.8.0
 */
    public function handleLegacyWidgetPreviewIframe(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the wp-block-list class to the rendered list block.
 * Ensures that pre-existing list blocks use the class name on the front.
 * For example, <ol> is transformed to <ol class="wp-block-list">.
 *
 * @since 6.6.0
 *
 * @see https://github.com/WordPress/gutenberg/issues/12420
 *
 * @param array $attributes Attributes of the block being rendered.
 * @param string $content Content of the block being rendered.
 *
 * @return string The content of the block being rendered.
 */
    public function blockCoreListRender(array $attributes, string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/list` block on server.
 *
 * @since 6.6.0
 */
    public function registerBlockCoreList(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/loginout` block on server.
 *
 * @since 5.8.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string Returns the login-out link or form.
 */
    public function renderBlockCoreLoginout(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/loginout` block on server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreLoginout(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/media-text` block on server.
 *
 * @since 6.6.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The block rendered content.
 *
 * @return string Returns the Media & Text block markup, if useFeaturedImage is true.
 */
    public function renderBlockCoreMediaText(array $attributes, string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/media-text` block renderer on server.
 *
 * @since 6.6.0
 */
    public function registerBlockCoreMediaText(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Build an array with CSS classes and inline styles defining the colors
 * which will be applied to the navigation markup in the front-end.
 *
 * @since 5.9.0
 *
 * @param array $context     Navigation block context.
 * @param array $attributes  Block attributes.
 * @param bool $isSubMenu Whether the link is part of a sub-menu.
 * @return array Colors CSS classes and inline styles.
 */
    public function blockCoreNavigationLinkBuildCssColors(array $context, array $attributes, bool $isSubMenu = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Build an array with CSS classes and inline styles defining the font sizes
 * which will be applied to the navigation markup in the front-end.
 *
 * @since 5.9.0
 *
 * @param array $context Navigation block context.
 * @return array Font size CSS classes and inline styles.
 */
    public function blockCoreNavigationLinkBuildCssFontSizes(array $context): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the top-level submenu SVG chevron icon.
 *
 * @since 5.9.0
 *
 * @return string
 */
    public function blockCoreNavigationLinkRenderSubmenuIcon(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Decodes a url if it's encoded, returning the same url if not.
 *
 * @since 6.2.0
 *
 * @param string $url The url to decode.
 *
 * @return string $url Returns the decoded url.
 */
    public function blockCoreNavigationLinkMaybeUrldecode(string $url): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/navigation-link` block.
 *
 * @since 5.9.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The saved content.
 * @param \WP_Block $block      The parsed block.
 *
 * @return string Returns the post content with the legacy widget added.
 */
    public function renderBlockCoreNavigationLink(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a navigation link variation
 *
 * @since 5.9.0
 *
 * @param \WP_Taxonomy|\WP_Post_Type $entity post type or taxonomy entity.
 * @param string $kind string of value 'taxonomy' or 'post-type'.
 *
 * @return array
 */
    public function buildVariationForNavigationLink(\WP_Taxonomy|\WP_Post_Type $entity, string $kind): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the registered variations for a block type.
 * Returns the dynamically built variations for all post-types and taxonomies.
 *
 * @since 6.5.0
 *
 * @param array $variations Array of registered variations for a block type.
 * @param \WP_Block_Type $blockType The full block type object.
 */
    public function blockCoreNavigationLinkFilterVariations(array $variations, \WP_Block_Type $blockType): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of variations for the navigation link block.
 *
 * @since 6.5.0
 *
 * @return array
 */
    public function blockCoreNavigationLinkBuildVariations(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the navigation link block.
 *
 * @since 5.9.0
 *
 * @uses render_block_core_navigation_link()
 * @throws WP_Error An WP_Error exception parsing the block definition.
 */
    public function registerBlockCoreNavigationLink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Build an array with CSS classes and inline styles defining the font sizes
 * which will be applied to the navigation markup in the front-end.
 *
 * @since 5.9.0
 *
 * @param array $context Navigation block context.
 * @return array Font size CSS classes and inline styles.
 */
    public function blockCoreNavigationSubmenuBuildCssFontSizes(array $context): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the top-level submenu SVG chevron icon.
 *
 * @since 5.9.0
 *
 * @return string
 */
    public function blockCoreNavigationSubmenuRenderSubmenuIcon(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/navigation-submenu` block.
 *
 * @since 5.9.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The saved content.
 * @param \WP_Block $block      The parsed block.
 *
 * @return string Returns the post content with the legacy widget added.
 */
    public function renderBlockCoreNavigationSubmenu(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register the navigation submenu block.
 *
 * @since 5.9.0
 *
 * @uses render_block_core_navigation_submenu()
 * @throws WP_Error An WP_Error exception parsing the block definition.
 */
    public function registerBlockCoreNavigationSubmenu(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Returns the menu items for a WordPress menu location.
     *
     * @since 5.9.0
     *
     * @param string $location The menu location.
     * @return array Menu items for the location.
     */
    public function blockCoreNavigationGetMenuItemsAtLocation(string $location): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Sorts a standard array of menu items into a nested structure keyed by the
     * id of the parent menu.
     *
     * @since 5.9.0
     *
     * @param array $menuItems Menu items to sort.
     * @return array An array keyed by the id of the parent menu where each element
     *               is an array of menu items that belong to that parent.
     */
    public function blockCoreNavigationSortMenuItemsByParentId(array $menuItems): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Gets the inner blocks for the navigation block from the unstable location attribute.
     *
     * @since 6.5.0
     *
     * @param array $attributes The block attributes.
     * @return \WP_Block_List Returns the inner blocks for the navigation block.
     */
    public function blockCoreNavigationGetInnerBlocksFromUnstableLocation(array $attributes): \WP_Block_List
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Add Interactivity API directives to the navigation-submenu and page-list
 * blocks markup using the Tag Processor.
 *
 * @since 6.3.0
 *
 * @param \WP_HTML_Tag_Processor $tags             Markup of the navigation block.
 * @param array $blockAttributes Block attributes.
 *
 * @return string Submenu markup with the directives injected.
 */
    public function blockCoreNavigationAddDirectivesToSubmenu(\WP_HTML_Tag_Processor $tags, array $blockAttributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Build an array with CSS classes and inline styles defining the colors
 * which will be applied to the navigation markup in the front-end.
 *
 * @since 5.9.0
 *
 * @param array $attributes Navigation block attributes.
 *
 * @return array Colors CSS classes and inline styles.
 */
    public function blockCoreNavigationBuildCssColors(array $attributes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Build an array with CSS classes and inline styles defining the font sizes
 * which will be applied to the navigation markup in the front-end.
 *
 * @since 5.9.0
 *
 * @param array $attributes Navigation block attributes.
 *
 * @return array Font size CSS classes and inline styles.
 */
    public function blockCoreNavigationBuildCssFontSizes(array $attributes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the top-level submenu SVG chevron icon.
 *
 * @since 5.9.0
 *
 * @return string
 */
    public function blockCoreNavigationRenderSubmenuIcon(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filter out empty "null" blocks from the block list.
 * 'parse_blocks' includes a null block with '\n\n' as the content when
 * it encounters whitespace. This is not a bug but rather how the parser
 * is designed.
 *
 * @since 5.9.0
 *
 * @param array $parsedBlocks the parsed blocks to be normalized.
 * @return array the normalized parsed blocks.
 */
    public function blockCoreNavigationFilterOutEmptyBlocks(array $parsedBlocks): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns true if the navigation block contains a nested navigation block.
 *
 * @since 6.2.0
 *
 * @param \WP_Block_List $innerBlocks Inner block instance to be normalized.
 * @return bool true if the navigation block contains a nested navigation block.
 */
    public function blockCoreNavigationBlockContainsCoreNavigation(\WP_Block_List $innerBlocks): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the appropriate fallback to be used on the front of the
 * site when there is no menu assigned to the Nav block.
 *
 * This aims to mirror how the fallback mechanic for wp_nav_menu works.
 * See https://developer.wordpress.org/reference/functions/wp_nav_menu/#more-information.
 *
 * @since 5.9.0
 *
 * @return array the array of blocks to be used as a fallback.
 */
    public function blockCoreNavigationGetFallbackBlocks(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Iterate through all inner blocks recursively and get navigation link block's post IDs.
 *
 * @since 6.0.0
 *
 * @param \WP_Block_List $innerBlocks Block list class instance.
 *
 * @return array Array of post IDs.
 */
    public function blockCoreNavigationGetPostIds(\WP_Block_List $innerBlocks): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get post IDs from a navigation link block instance.
 *
 * @since 6.0.0
 *
 * @param \WP_Block $block Instance of a block.
 *
 * @return array Array of post IDs.
 */
    public function blockCoreNavigationFromBlockGetPostIds(\WP_Block $block): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/navigation` block on server.
 *
 * @since 5.9.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The saved content.
 * @param \WP_Block $block      The parsed block.
 *
 * @return string Returns the navigation block markup.
 */
    public function renderBlockCoreNavigation(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register the navigation block.
 *
 * @since 5.9.0
 *
 * @uses render_block_core_navigation()
 * @throws WP_Error An WP_Error exception parsing the block definition.
 */
    public function registerBlockCoreNavigation(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filter that changes the parsed attribute values of navigation blocks contain typographic presets to contain the values directly.
 *
 * @since 5.9.0
 *
 * @param array $parsedBlock The block being rendered.
 *
 * @return array The block being rendered without typographic presets.
 */
    public function blockCoreNavigationTypographicPresetsBackcompatibility(array $parsedBlock): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Accepts the serialized markup of a block and its inner blocks, and returns serialized markup of the inner blocks.
 *
 * @since 6.5.0
 *
 * @param string $serializedBlock The serialized markup of a block and its inner blocks.
 * @return string
 */
    public function blockCoreNavigationRemoveSerializedParentBlock(string $serializedBlock): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Mock a parsed block for the Navigation block given its inner blocks and the `wp_navigation` post object.
 * The `wp_navigation` post's `_wp_ignored_hooked_blocks` meta is queried to add the `metadata.ignoredHookedBlocks` attribute.
 *
 * @since 6.5.0
 *
 * @param array $innerBlocks Parsed inner blocks of a Navigation block.
 * @param \WP_Post $post         `wp_navigation` post object corresponding to the block.
 *
 * @return array the normalized parsed blocks.
 */
    public function blockCoreNavigationMockParsedBlock(array $innerBlocks, \WP_Post $post): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Insert hooked blocks into a Navigation block.
 *
 * Given a Navigation block's inner blocks and its corresponding `wp_navigation` post object,
 * this function inserts hooked blocks into it, and returns the serialized inner blocks in a
 * mock Navigation block wrapper.
 *
 * If there are any hooked blocks that need to be inserted as the Navigation block's first or last
 * children, the `wp_navigation` post's `_wp_ignored_hooked_blocks` meta is checked to see if any
 * of those hooked blocks should be exempted from insertion.
 *
 * @since 6.5.0
 *
 * @param array $innerBlocks Parsed inner blocks of a Navigation block.
 * @param \WP_Post $post         `wp_navigation` post object corresponding to the block.
 * @return string Serialized inner blocks in mock Navigation block wrapper, with hooked blocks inserted, if any.
 */
    public function blockCoreNavigationInsertHookedBlocks(array $innerBlocks, \WP_Post $post): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Insert ignoredHookedBlocks meta into the Navigation block and its inner blocks.
 *
 * Given a Navigation block's inner blocks and its corresponding `wp_navigation` post object,
 * this function inserts ignoredHookedBlocks meta into it, and returns the serialized inner blocks in a
 * mock Navigation block wrapper.
 *
 * @since 6.5.0
 *
 * @param array $innerBlocks Parsed inner blocks of a Navigation block.
 * @param \WP_Post $post         `wp_navigation` post object corresponding to the block.
 * @return string Serialized inner blocks in mock Navigation block wrapper, with hooked blocks inserted, if any.
 */
    public function blockCoreNavigationSetIgnoredHookedBlocksMetadata(array $innerBlocks, \WP_Post $post): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Hooks into the REST API response for the core/navigation block and adds the first and last inner blocks.
 *
 * @since 6.5.0
 *
 * @param \WP_REST_Response $response The response object.
 * @param \WP_Post $post     Post object.
 * @return \WP_REST_Response The response object.
 */
    public function blockCoreNavigationInsertHookedBlocksIntoRestResponse(\WP_REST_Response $response, \WP_Post $post): \WP_REST_Response
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/page-list-item` block on server.
 *
 * @since 6.3.0
 */
    public function registerBlockCorePageListItem(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Build an array with CSS classes and inline styles defining the colors
 * which will be applied to the pages markup in the front-end when it is a descendant of navigation.
 *
 * @since 5.8.0
 *
 * @param array $attributes Block attributes.
 * @param array $context    Navigation block context.
 * @return array Colors CSS classes and inline styles.
 */
    public function blockCorePageListBuildCssColors(array $attributes, array $context): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Build an array with CSS classes and inline styles defining the font sizes
 * which will be applied to the pages markup in the front-end when it is a descendant of navigation.
 *
 * @since 5.8.0
 *
 * @param array $context Navigation block context.
 * @return array Font size CSS classes and inline styles.
 */
    public function blockCorePageListBuildCssFontSizes(array $context): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs Page list markup from an array of pages with nested children.
 *
 * @since 5.8.0
 *
 * @param boolean $openSubmenusOnClick Whether to open submenus on click instead of hover.
 * @param boolean $showSubmenuIcons Whether to show submenu indicator icons.
 * @param boolean $isNavigationChild If block is a child of Navigation block.
 * @param array $nestedPages The array of nested pages.
 * @param boolean $isNested Whether the submenu is nested or not.
 * @param array $activePageAncestorIds An array of ancestor ids for active page.
 * @param array $colors Color information for overlay styles.
 * @param integer $depth The nesting depth.
 *
 * @return string List markup.
 */
    public function blockCorePageListRenderNestedPageList(bool $openSubmenusOnClick, bool $showSubmenuIcons, bool $isNavigationChild, array $nestedPages, bool $isNested, array $activePageAncestorIds = [], array $colors = [], int $depth = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs nested array of pages
 *
 * @since 5.8.0
 *
 * @param array $currentLevel The level being iterated through.
 * @param array $children The children grouped by parent post ID.
 *
 * @return array The nested array of pages.
 */
    public function blockCorePageListNestPages(array $currentLevel, array $children): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/page-list` block on server.
 *
 * @since 5.8.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The saved content.
 * @param \WP_Block $block      The parsed block.
 *
 * @return string Returns the page list markup.
 */
    public function renderBlockCorePageList(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/pages` block on server.
 *
 * @since 5.8.0
 */
    public function registerBlockCorePageList(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 *  Registers the `core/pattern` block on the server.
 *
 * @since 5.9.0
 */
    public function registerBlockCorePattern(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/pattern` block on the server.
 *
 * @since 6.3.0 Backwards compatibility: blocks with no `syncStatus` attribute do not receive block wrapper.
 *
 * @global WP_Embed $wp_embed Used to process embedded content within patterns
 *
 * @param array $attributes Block attributes.
 *
 * @return string Returns the output of the pattern.
 */
    public function renderBlockCorePattern(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-author-biography` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Returns the rendered post author biography block.
 */
    public function renderBlockCorePostAuthorBiography(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-author-biography` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCorePostAuthorBiography(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-author-name` block on the server.
 *
 * @since 6.2.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Returns the rendered post author name block.
 */
    public function renderBlockCorePostAuthorName(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-author-name` block on the server.
 *
 * @since 6.2.0
 */
    public function registerBlockCorePostAuthorName(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-author` block on the server.
 *
 * @since 5.9.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Returns the rendered author block.
 */
    public function renderBlockCorePostAuthor(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-author` block on the server.
 *
 * @since 5.9.0
 */
    public function registerBlockCorePostAuthor(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-comments-form` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Returns the filtered post comments form for the current post.
 */
    public function renderBlockCorePostCommentsForm(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-comments-form` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCorePostCommentsForm(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Use the button block classes for the form-submit button.
 *
 * @since 6.0.0
 *
 * @param array $fields The default comment form arguments.
 *
 * @return array Returns the modified fields.
 */
    public function postCommentsFormBlockFormDefaults(array $fields): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-content` block on the server.
 *
 * @since 5.8.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Returns the filtered post content of the current post.
 */
    public function renderBlockCorePostContent(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-content` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCorePostContent(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-date` block on the server.
 *
 * @since 5.8.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Returns the filtered post date for the current post wrapped inside "time" tags.
 */
    public function renderBlockCorePostDate(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-date` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCorePostDate(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-excerpt` block on the server.
 *
 * @since 5.8.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Returns the filtered post excerpt for the current post wrapped inside "p" tags.
 */
    public function renderBlockCorePostExcerpt(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-excerpt` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCorePostExcerpt(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-featured-image` block on the server.
 *
 * @since 5.8.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Returns the featured image for the current post.
 */
    public function renderBlockCorePostFeaturedImage(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generate markup for the HTML element that will be used for the overlay.
 *
 * @since 6.1.0
 *
 * @param array $attributes Block attributes.
 *
 * @return string HTML markup in string format.
 */
    public function getBlockCorePostFeaturedImageOverlayElementMarkup(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates class names and styles to apply the border support styles for
 * the Post Featured Image block.
 *
 * @since 6.1.0
 *
 * @param array $attributes The block attributes.
 * @return array The border-related classnames and styles for the block.
 */
    public function getBlockCorePostFeaturedImageBorderAttributes(array $attributes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-featured-image` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCorePostFeaturedImage(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-navigation-link` block on the server.
 *
 * @since 5.9.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 *
 * @return string Returns the next or previous post link that is adjacent to the current post.
 */
    public function renderBlockCorePostNavigationLink(array $attributes, string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-navigation-link` block on the server.
 *
 * @since 5.9.0
 */
    public function registerBlockCorePostNavigationLink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a block list contains a block that uses the featured image.
 *
 * @since 6.0.0
 *
 * @param \WP_Block_List $innerBlocks Inner block instance.
 *
 * @return bool Whether the block list contains a block that uses the featured image.
 */
    public function blockCorePostTemplateUsesFeaturedImage(\WP_Block_List $innerBlocks): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-template` block on the server.
 *
 * @since 6.3.0 Changed render_block_context priority to `1`.
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the output of the query, structured using the layout defined by the block's inner blocks.
 */
    public function renderBlockCorePostTemplate(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-template` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCorePostTemplate(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-terms` block on the server.
 *
 * @since 5.8.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string Returns the filtered post terms for the current post wrapped inside "a" tags.
 */
    public function renderBlockCorePostTerms(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the available variations for the `core/post-terms` block.
 *
 * @since 6.5.0
 *
 * @return array The available variations for the block.
 */
    public function blockCorePostTermsBuildVariations(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-terms` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCorePostTerms(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/post-title` block on the server.
 *
 * @since 6.3.0 Omitting the $post argument from the `get_the_title`.
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the filtered post title for the current post wrapped inside "h1" tags.
 */
    public function renderBlockCorePostTitle(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/post-title` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCorePostTitle(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/query-no-results` block on the server.
 *
 * @since 6.0.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the wrapper for the no results block.
 */
    public function renderBlockCoreQueryNoResults(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/query-no-results` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreQueryNoResults(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/query-pagination-next` block on the server.
 *
 * @since 5.8.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the next posts link for the query pagination.
 */
    public function renderBlockCoreQueryPaginationNext(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/query-pagination-next` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreQueryPaginationNext(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/query-pagination-numbers` block on the server.
 *
 * @since 5.8.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the pagination numbers for the Query.
 */
    public function renderBlockCoreQueryPaginationNumbers(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/query-pagination-numbers` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreQueryPaginationNumbers(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/query-pagination-previous` block on the server.
 *
 * @since 5.8.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 *
 * @return string Returns the previous posts link for the query.
 */
    public function renderBlockCoreQueryPaginationPrevious(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/query-pagination-previous` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreQueryPaginationPrevious(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/query-pagination` block on the server.
 *
 * @since 5.9.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 *
 * @return string Returns the wrapper for the Query pagination.
 */
    public function renderBlockCoreQueryPagination(array $attributes, string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/query-pagination` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreQueryPagination(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/query-title` block on the server.
 * For now it only supports Archive title,
 * using queried object information
 *
 * @since 5.8.0
 *
 * @param array $attributes Block attributes.
 *
 * @return string Returns the query title based on the queried object.
 */
    public function renderBlockCoreQueryTitle(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/query-title` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreQueryTitle(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Modifies the static `core/query` block on the server.
 *
 * @since 6.4.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      The block instance.
 *
 * @return string Returns the modified output of the query block.
 */
    public function renderBlockCoreQuery(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/query` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreQuery(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Traverse the tree of blocks looking for any plugin block (i.e., a block from
 * an installed plugin) inside a Query block with the enhanced pagination
 * enabled. If at least one is found, the enhanced pagination is effectively
 * disabled to prevent any potential incompatibilities.
 *
 * @since 6.4.0
 *
 * @param array $parsedBlock The block being rendered.
 * @return string Returns the parsed block, unmodified.
 */
    public function blockCoreQueryDisableEnhancedPagination(array $parsedBlock): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/read-more` block on the server.
 *
 * @since 6.0.0
 *
 * @param array $attributes Block attributes.
 * @param string $content    Block default content.
 * @param \WP_Block $block      Block instance.
 * @return string  Returns the post link.
 */
    public function renderBlockCoreReadMore(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/read-more` block on the server.
 *
 * @since 6.0.0
 */
    public function registerBlockCoreReadMore(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/rss` block on server.
 *
 * @since 5.2.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string Returns the block content with received rss items.
 */
    public function renderBlockCoreRss(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/rss` block on server.
 *
 * @since 5.2.0
 */
    public function registerBlockCoreRss(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Dynamically renders the `core/search` block.
 *
 * @since 6.3.0 Using block.json `viewScript` to register script, and update `view_script_handles()` only when needed.
 *
 * @param array $attributes The block attributes.
 * @param string $content    The saved content.
 * @param \WP_Block $block      The parsed block.
 *
 * @return string The search block markup.
 */
    public function renderBlockCoreSearch(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/search` block on the server.
 *
 * @since 5.2.0
 */
    public function registerBlockCoreSearch(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds the correct top level classnames for the 'core/search' block.
 *
 * @since 5.6.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string The classnames used in the block.
 */
    public function classnamesForBlockCoreSearch(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * This generates a CSS rule for the given border property and side if provided.
 * Based on whether the Search block is configured to display the button inside
 * or not, the generated rule is injected into the appropriate collection of
 * styles for later application in the block's markup.
 *
 * @since 6.1.0
 *
 * @param array $attributes     The block attributes.
 * @param string $property       Border property to generate rule for e.g. width or color.
 * @param string $side           Optional side border. The dictates the value retrieved and final CSS property.
 * @param array $wrapperStyles Current collection of wrapper styles.
 * @param array $buttonStyles  Current collection of button styles.
 * @param array $inputStyles   Current collection of input styles.
 */
    public function applyBlockCoreSearchBorderStyle(array $attributes, string $property, string $side, array $wrapperStyles, array $buttonStyles, array $inputStyles): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * This adds CSS rules for a given border property e.g. width or color. It
 * injects rules into the provided wrapper, button and input style arrays for
 * uniform "flat" borders or those with individual sides configured.
 *
 * @since 6.1.0
 *
 * @param array $attributes     The block attributes.
 * @param string $property       Border property to generate rule for e.g. width or color.
 * @param array $wrapperStyles Current collection of wrapper styles.
 * @param array $buttonStyles  Current collection of button styles.
 * @param array $inputStyles   Current collection of input styles.
 */
    public function applyBlockCoreSearchBorderStyles(array $attributes, string $property, array $wrapperStyles, array $buttonStyles, array $inputStyles): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds an array of inline styles for the search block.
 *
 * The result will contain one entry for shared styles such as those for the
 * inner input or button and a second for the inner wrapper should the block
 * be positioning the button "inside".
 *
 * @since 5.8.0
 *
 * @param array $attributes The block attributes.
 *
 * @return array Style HTML attribute.
 */
    public function stylesForBlockCoreSearch(array $attributes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns typography classnames depending on whether there are named font sizes/families.
 *
 * @since 6.1.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string The typography color classnames to be applied to the block elements.
 */
    public function getTypographyClassesForBlockCoreSearch(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns typography styles to be included in an HTML style tag.
 * This excludes text-decoration, which is applied only to the label and button elements of the search block.
 *
 * @since 6.1.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string A string of typography CSS declarations.
 */
    public function getTypographyStylesForBlockCoreSearch(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns border color classnames depending on whether there are named or custom border colors.
 *
 * @since 5.9.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string The border color classnames to be applied to the block elements.
 */
    public function getBorderColorClassesForBlockCoreSearch(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns color classnames depending on whether there are named or custom text and background colors.
 *
 * @since 5.9.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string The color classnames to be applied to the block elements.
 */
    public function getColorClassesForBlockCoreSearch(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs wpautop() on the shortcode block content.
 *
 * @since 5.0.0
 *
 * @param array $attributes The block attributes.
 * @param string $content    The block content.
 *
 * @return string Returns the block content.
 */
    public function renderBlockCoreShortcode(array $attributes, string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/shortcode` block on server.
 *
 * @since 5.0.0
 */
    public function registerBlockCoreShortcode(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/site-logo` block on the server.
 *
 * @since 5.8.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string The render.
 */
    public function renderBlockCoreSiteLogo(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register a core site setting for a site logo
 *
 * @since 5.8.0
 */
    public function registerBlockCoreSiteLogoSetting(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register a core site setting for a site icon
 *
 * @since 5.9.0
 */
    public function registerBlockCoreSiteIconSetting(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/site-logo` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreSiteLogo(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/site-tagline` block on the server.
 *
 * @since 5.8.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string The render.
 */
    public function renderBlockCoreSiteTagline(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/site-tagline` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreSiteTagline(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/site-title` block on the server.
 *
 * @since 5.8.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string The render.
 */
    public function renderBlockCoreSiteTitle(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/site-title` block on the server.
 *
 * @since 5.8.0
 */
    public function registerBlockCoreSiteTitle(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/social-link` block on server.
 *
 * @since 5.4.0
 *
 * @param Array $attributes The block attributes.
 * @param String $content    InnerBlocks content of the Block.
 * @param \WP_Block $block      Block object.
 *
 * @return string Rendered HTML of the referenced block.
 */
    public function renderBlockCoreSocialLink(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/social-link` blocks.
 *
 * @since 5.4.0
 */
    public function registerBlockCoreSocialLink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the SVG for social link.
 *
 * @since 5.4.0
 *
 * @param string $service The service icon.
 *
 * @return string SVG Element for service icon.
 */
    public function blockCoreSocialLinkGetIcon(string $service): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the brand name for social link.
 *
 * @since 5.4.0
 *
 * @param string $service The service icon.
 *
 * @return string Brand label.
 */
    public function blockCoreSocialLinkGetName(string $service): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the SVG for social link.
 *
 * @since 5.4.0
 *
 * @param string $service The service slug to extract data from.
 * @param string $field The field ('name', 'icon', etc) to extract for a service.
 *
 * @return array|string
 */
    public function blockCoreSocialLinkServices(string $service = '', string $field = ''): array|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns CSS styles for icon and icon background colors.
 *
 * @since 5.7.0
 *
 * @param array $context Block context passed to Social Link.
 *
 * @return string Inline CSS styles for link's icon and background colors.
 */
    public function blockCoreSocialLinkGetColorStyles(array $context): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns CSS classes for icon and icon background colors.
 *
 * @since 6.3.0
 *
 * @param array $context Block context passed to Social Sharing Link.
 *
 * @return string CSS classes for link's icon and background colors.
 */
    public function blockCoreSocialLinkGetColorClasses(array $context): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/tag-cloud` block on server.
 *
 * @since 5.2.0
 *
 * @param array $attributes The block attributes.
 *
 * @return string Returns the tag cloud for selected taxonomy.
 */
    public function renderBlockCoreTagCloud(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/tag-cloud` block on server.
 *
 * @since 5.2.0
 */
    public function registerBlockCoreTagCloud(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/template-part` block on the server.
 *
 * @since 5.9.0
 *
 * @global WP_Embed $wp_embed WordPress Embed object.
 *
 * @param array $attributes The block attributes.
 *
 * @return string The render.
 */
    public function renderBlockCoreTemplatePart(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of area variation objects for the template part block.
 *
 * @since 6.1.0
 *
 * @param array $instanceVariations The variations for instances.
 *
 * @return array Array containing the block variation objects.
 */
    public function buildTemplatePartBlockAreaVariations(array $instanceVariations): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of instance variation objects for the template part block
 *
 * @since 6.1.0
 *
 * @return array Array containing the block variation objects.
 */
    public function buildTemplatePartBlockInstanceVariations(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of all template part block variations.
 *
 * @since 5.9.0
 *
 * @return array Array containing the block variation objects.
 */
    public function buildTemplatePartBlockVariations(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/template-part` block on the server.
 *
 * @since 5.9.0
 */
    public function registerBlockCoreTemplatePart(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the `core/term-description` block on the server.
 *
 * @since 5.9.0
 *
 * @param array $attributes Block attributes.
 *
 * @return string Returns the description of the current taxonomy term, if available
 */
    public function renderBlockCoreTermDescription(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the `core/term-description` block on the server.
 *
 * @since 5.9.0
 */
    public function registerBlockCoreTermDescription(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the 'core/widget-group' block.
 *
 * @since 5.9.0
 *
 * @global array      $wp_registered_sidebars
 * @global int|string $_sidebar_being_rendered
 *
 * @param array $attributes The block attributes.
 * @param string $content The block content.
 * @param \WP_Block $block The block.
 *
 * @return string Rendered block.
 */
    public function renderBlockCoreWidgetGroup(array $attributes, string $content, \WP_Block $block): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the 'core/widget-group' block.
 *
 * @since 5.9.0
 */
    public function registerBlockCoreWidgetGroup(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Make a note of the sidebar being rendered before WordPress starts rendering
 * it. This lets us get to the current sidebar in
 * render_block_core_widget_group().
 *
 * @since 5.9.0
 *
 * @global int|string $_sidebar_being_rendered
 *
 * @param int|string $index       Index, name, or ID of the dynamic sidebar.
 */
    public function noteSidebarBeingRendered(int|string $index): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Clear whatever we set in note_sidebar_being_rendered() after WordPress
 * finishes rendering a sidebar.
 *
 * @since 5.9.0
 *
 * @global int|string $_sidebar_being_rendered
 */
    public function discardSidebarBeingRendered(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves or echoes all of the bookmarks.
 *
 * List of default arguments are as follows:
 *
 * These options define how the Category name will appear before the category
 * links are displayed, if 'categorize' is 1. If 'categorize' is 0, then it will
 * display for only the 'title_li' string and only if 'title_li' is not empty.
 *
 * @since 2.1.0
 *
 * @see _walk_bookmarks()
 *
 * @param string|array $args {
 *     Optional. String or array of arguments to list bookmarks.
 *
 *     @type string       $orderby          How to order the links by. Accepts post fields. Default 'name'.
 *     @type string       $order            Whether to order bookmarks in ascending or descending order.
 *                                          Accepts 'ASC' (ascending) or 'DESC' (descending). Default 'ASC'.
 *     @type int          $limit            Amount of bookmarks to display. Accepts 1+ or -1 for all.
 *                                          Default -1.
 *     @type string       $category         Comma-separated list of category IDs to include links from.
 *                                          Default empty.
 *     @type string       $category_name    Category to retrieve links for by name. Default empty.
 *     @type int|bool     $hide_invisible   Whether to show or hide links marked as 'invisible'. Accepts
 *                                          1|true or 0|false. Default 1|true.
 *     @type int|bool     $show_updated     Whether to display the time the bookmark was last updated.
 *                                          Accepts 1|true or 0|false. Default 0|false.
 *     @type int|bool     $echo             Whether to echo or return the formatted bookmarks. Accepts
 *                                          1|true (echo) or 0|false (return). Default 1|true.
 *     @type int|bool     $categorize       Whether to show links listed by category or in a single column.
 *                                          Accepts 1|true (by category) or 0|false (one column). Default 1|true.
 *     @type int|bool     $show_description Whether to show the bookmark descriptions. Accepts 1|true or 0|false.
 *                                          Default 0|false.
 *     @type string       $title_li         What to show before the links appear. Default 'Bookmarks'.
 *     @type string       $title_before     The HTML or text to prepend to the $title_li string. Default '<h2>'.
 *     @type string       $title_after      The HTML or text to append to the $title_li string. Default '</h2>'.
 *     @type string|array $class            The CSS class or an array of classes to use for the $title_li.
 *                                          Default 'linkcat'.
 *     @type string       $category_before  The HTML or text to prepend to $title_before if $categorize is true.
 *                                          String must contain '%id' and '%class' to inherit the category ID and
 *                                          the $class argument used for formatting in themes.
 *                                          Default '<li id="%id" class="%class">'.
 *     @type string       $category_after   The HTML or text to append to $title_after if $categorize is true.
 *                                          Default '</li>'.
 *     @type string       $category_orderby How to order the bookmark category based on term scheme if $categorize
 *                                          is true. Default 'name'.
 *     @type string       $category_order   Whether to order categories in ascending or descending order if
 *                                          $categorize is true. Accepts 'ASC' (ascending) or 'DESC' (descending).
 *                                          Default 'ASC'.
 * }
 * @return void|string Void if 'echo' argument is true, HTML list of bookmarks if 'echo' is false.
 */
    public function wpListBookmarks(string|array $args = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves bookmark data.
 *
 * @since 2.1.0
 *
 * @global object $link Current link object.
 * @global wpdb   $wpdb WordPress database abstraction object.
 *
 * @param int|\stdClass $bookmark
 * @param string $output   Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                               correspond to an stdClass object, an associative array, or a numeric array,
 *                               respectively. Default OBJECT.
 * @param string $filter   Optional. How to sanitize bookmark fields. Default 'raw'.
 * @return array|object|null Type returned depends on $output value.
 */
    public function getBookmark(int|\stdClass $bookmark, string $output = OBJECT, string $filter = 'raw'): array|object|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves single bookmark data item or field.
 *
 * @since 2.3.0
 *
 * @param string $field    The name of the data field to return.
 * @param int $bookmark The bookmark ID to get field.
 * @param string $context  Optional. The context of how the field will be used. Default 'display'.
 * @return string|\WP_Error
 */
    public function getBookmarkField(string $field, int $bookmark, string $context = 'display'): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the list of bookmarks.
 *
 * Attempts to retrieve from the cache first based on MD5 hash of arguments. If
 * that fails, then the query will be built from the arguments and executed. The
 * results will be stored to the cache.
 *
 * @since 2.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string|array $args {
 *     Optional. String or array of arguments to retrieve bookmarks.
 *
 *     @type string   $orderby        How to order the links by. Accepts 'id', 'link_id', 'name', 'link_name',
 *                                    'url', 'link_url', 'visible', 'link_visible', 'rating', 'link_rating',
 *                                    'owner', 'link_owner', 'updated', 'link_updated', 'notes', 'link_notes',
 *                                    'description', 'link_description', 'length' and 'rand'.
 *                                    When `$orderby` is 'length', orders by the character length of
 *                                    'link_name'. Default 'name'.
 *     @type string   $order          Whether to order bookmarks in ascending or descending order.
 *                                    Accepts 'ASC' (ascending) or 'DESC' (descending). Default 'ASC'.
 *     @type int      $limit          Amount of bookmarks to display. Accepts any positive number or
 *                                    -1 for all.  Default -1.
 *     @type string   $category       Comma-separated list of category IDs to include links from.
 *                                    Default empty.
 *     @type string   $category_name  Category to retrieve links for by name. Default empty.
 *     @type int|bool $hide_invisible Whether to show or hide links marked as 'invisible'. Accepts
 *                                    1|true or 0|false. Default 1|true.
 *     @type int|bool $show_updated   Whether to display the time the bookmark was last updated.
 *                                    Accepts 1|true or 0|false. Default 0|false.
 *     @type string   $include        Comma-separated list of bookmark IDs to include. Default empty.
 *     @type string   $exclude        Comma-separated list of bookmark IDs to exclude. Default empty.
 *     @type string   $search         Search terms. Will be SQL-formatted with wildcards before and after
 *                                    and searched in 'link_url', 'link_name' and 'link_description'.
 *                                    Default empty.
 * }
 * @return object[] List of bookmark row objects.
 */
    public function getBookmarks(string|array $args = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes all bookmark fields.
 *
 * @since 2.3.0
 *
 * @param \stdClass|array $bookmark Bookmark row.
 * @param string $context  Optional. How to filter the fields. Default 'display'.
 * @return \stdClass|array Same type as $bookmark but with fields sanitized.
 */
    public function sanitizeBookmark(\stdClass|array $bookmark, string $context = 'display'): \stdClass|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a bookmark field.
 *
 * Sanitizes the bookmark fields based on what the field name is. If the field
 * has a strict value set, then it will be tested for that, else a more generic
 * filtering is applied. After the more strict filter is applied, if the `$context`
 * is 'raw' then the value is immediately return.
 *
 * Hooks exist for the more generic cases. With the 'edit' context, the {@see 'edit_$field'}
 * filter will be called and passed the `$value` and `$bookmark_id` respectively.
 *
 * With the 'db' context, the {@see 'pre_$field'} filter is called and passed the value.
 * The 'display' context is the final context and has the `$field` has the filter name
 * and is passed the `$value`, `$bookmark_id`, and `$context`, respectively.
 *
 * @since 2.3.0
 *
 * @param string $field       The bookmark field.
 * @param mixed $value       The bookmark field value.
 * @param int $bookmarkId Bookmark ID.
 * @param string $context     How to filter the field value. Accepts 'raw', 'edit', 'db',
 *                            'display', 'attribute', or 'js'. Default 'display'.
 * @return mixed The filtered value.
 */
    public function sanitizeBookmarkField(string $field, mixed $value, int $bookmarkId, string $context): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes the bookmark cache.
 *
 * @since 2.7.0
 *
 * @param int $bookmarkId Bookmark ID.
 */
    public function cleanBookmarkCache(int $bookmarkId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets up Object Cache Global and assigns it.
 *
 * @since 2.0.0
 *
 * @global WP_Object_Cache $wp_object_cache
 */
    public function wpCacheInit(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds data to the cache, if the cache key doesn't already exist.
 *
 * @since 2.0.0
 *
 * @see WP_Object_Cache::add()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param int|string $key    The cache key to use for retrieval later.
 * @param mixed $data   The data to add to the cache.
 * @param string $group  Optional. The group to add the cache to. Enables the same key
 *                           to be used across groups. Default empty.
 * @param int $expire Optional. When the cache data should expire, in seconds.
 *                           Default 0 (no expiration).
 * @return bool True on success, false if cache key and group already exist.
 */
    public function wpCacheAdd(int|string $key, mixed $data, string $group = '', int $expire = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds multiple values to the cache in one call.
 *
 * @since 6.0.0
 *
 * @see WP_Object_Cache::add_multiple()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param array $data   Array of keys and values to be set.
 * @param string $group  Optional. Where the cache contents are grouped. Default empty.
 * @param int $expire Optional. When to expire the cache contents, in seconds.
 *                       Default 0 (no expiration).
 * @return bool[] Array of return values, grouped by key. Each value is either
 *                true on success, or false if cache key and group already exist.
 */
    public function wpCacheAddMultiple(array $data, string $group = '', int $expire = 0): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Replaces the contents of the cache with new data.
 *
 * @since 2.0.0
 *
 * @see WP_Object_Cache::replace()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param int|string $key    The key for the cache data that should be replaced.
 * @param mixed $data   The new data to store in the cache.
 * @param string $group  Optional. The group for the cache data that should be replaced.
 *                           Default empty.
 * @param int $expire Optional. When to expire the cache contents, in seconds.
 *                           Default 0 (no expiration).
 * @return bool True if contents were replaced, false if original value does not exist.
 */
    public function wpCacheReplace(int|string $key, mixed $data, string $group = '', int $expire = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves the data to the cache.
 *
 * Differs from wp_cache_add() and wp_cache_replace() in that it will always write data.
 *
 * @since 2.0.0
 *
 * @see WP_Object_Cache::set()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param int|string $key    The cache key to use for retrieval later.
 * @param mixed $data   The contents to store in the cache.
 * @param string $group  Optional. Where to group the cache contents. Enables the same key
 *                           to be used across groups. Default empty.
 * @param int $expire Optional. When to expire the cache contents, in seconds.
 *                           Default 0 (no expiration).
 * @return bool True on success, false on failure.
 */
    public function wpCacheSet(int|string $key, mixed $data, string $group = '', int $expire = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets multiple values to the cache in one call.
 *
 * @since 6.0.0
 *
 * @see WP_Object_Cache::set_multiple()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param array $data   Array of keys and values to be set.
 * @param string $group  Optional. Where the cache contents are grouped. Default empty.
 * @param int $expire Optional. When to expire the cache contents, in seconds.
 *                       Default 0 (no expiration).
 * @return bool[] Array of return values, grouped by key. Each value is either
 *                true on success, or false on failure.
 */
    public function wpCacheSetMultiple(array $data, string $group = '', int $expire = 0): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the cache contents from the cache by key and group.
 *
 * @since 2.0.0
 *
 * @see WP_Object_Cache::get()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param int|string $key   The key under which the cache contents are stored.
 * @param string $group Optional. Where the cache contents are grouped. Default empty.
 * @param bool $force Optional. Whether to force an update of the local cache
 *                          from the persistent cache. Default false.
 * @param bool $found Optional. Whether the key was found in the cache (passed by reference).
 *                          Disambiguates a return of false, a storable value. Default null.
 * @return mixed|false The cache contents on success, false on failure to retrieve contents.
 */
    public function wpCacheGet(int|string $key, string $group = '', bool $force = false, bool $found = null): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves multiple values from the cache in one call.
 *
 * @since 5.5.0
 *
 * @see WP_Object_Cache::get_multiple()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param array $keys  Array of keys under which the cache contents are stored.
 * @param string $group Optional. Where the cache contents are grouped. Default empty.
 * @param bool $force Optional. Whether to force an update of the local cache
 *                      from the persistent cache. Default false.
 * @return array Array of return values, grouped by key. Each value is either
 *               the cache contents on success, or false on failure.
 */
    public function wpCacheGetMultiple(array $keys, string $group = '', bool $force = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes the cache contents matching key and group.
 *
 * @since 2.0.0
 *
 * @see WP_Object_Cache::delete()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param int|string $key   What the contents in the cache are called.
 * @param string $group Optional. Where the cache contents are grouped. Default empty.
 * @return bool True on successful removal, false on failure.
 */
    public function wpCacheDelete(int|string $key, string $group = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes multiple values from the cache in one call.
 *
 * @since 6.0.0
 *
 * @see WP_Object_Cache::delete_multiple()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param array $keys  Array of keys under which the cache to deleted.
 * @param string $group Optional. Where the cache contents are grouped. Default empty.
 * @return bool[] Array of return values, grouped by key. Each value is either
 *                true on success, or false if the contents were not deleted.
 */
    public function wpCacheDeleteMultiple(array $keys, string $group = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Increments numeric cache item's value.
 *
 * @since 3.3.0
 *
 * @see WP_Object_Cache::incr()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param int|string $key    The key for the cache contents that should be incremented.
 * @param int $offset Optional. The amount by which to increment the item's value.
 *                           Default 1.
 * @param string $group  Optional. The group the key is in. Default empty.
 * @return int|false The item's new value on success, false on failure.
 */
    public function wpCacheIncr(int|string $key, int $offset = 1, string $group = ''): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Decrements numeric cache item's value.
 *
 * @since 3.3.0
 *
 * @see WP_Object_Cache::decr()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param int|string $key    The cache key to decrement.
 * @param int $offset Optional. The amount by which to decrement the item's value.
 *                           Default 1.
 * @param string $group  Optional. The group the key is in. Default empty.
 * @return int|false The item's new value on success, false on failure.
 */
    public function wpCacheDecr(int|string $key, int $offset = 1, string $group = ''): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all cache items.
 *
 * @since 2.0.0
 *
 * @see WP_Object_Cache::flush()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @return bool True on success, false on failure.
 */
    public function wpCacheFlush(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all cache items from the in-memory runtime cache.
 *
 * @since 6.0.0
 *
 * @see WP_Object_Cache::flush()
 *
 * @return bool True on success, false on failure.
 */
    public function wpCacheFlushRuntime(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all cache items in a group, if the object cache implementation supports it.
 *
 * Before calling this function, always check for group flushing support using the
 * `wp_cache_supports( 'flush_group' )` function.
 *
 * @since 6.1.0
 *
 * @see WP_Object_Cache::flush_group()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param string $group Name of group to remove from cache.
 * @return bool True if group was flushed, false otherwise.
 */
    public function wpCacheFlushGroup(string $group): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the object cache implementation supports a particular feature.
 *
 * @since 6.1.0
 *
 * @param string $feature Name of the feature to check for. Possible values include:
 *                        'add_multiple', 'set_multiple', 'get_multiple', 'delete_multiple',
 *                        'flush_runtime', 'flush_group'.
 * @return bool True if the feature is supported, false otherwise.
 */
    public function wpCacheSupports(string $feature): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Closes the cache.
 *
 * This function has ceased to do anything since WordPress 2.5. The
 * functionality was removed along with the rest of the persistent cache.
 *
 * This does not mean that plugins can't implement this function when they need
 * to make sure that the cache is cleaned up after WordPress no longer needs it.
 *
 * @since 2.0.0
 *
 * @return true Always returns true.
 */
    public function wpCacheClose(): true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a group or set of groups to the list of global groups.
 *
 * @since 2.6.0
 *
 * @see WP_Object_Cache::add_global_groups()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param string|string[] $groups A group or an array of groups to add.
 */
    public function wpCacheAddGlobalGroups(string|array $groups): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a group or set of groups to the list of non-persistent groups.
 *
 * @since 2.6.0
 *
 * @param string|string[] $groups A group or an array of groups to add.
 */
    public function wpCacheAddNonPersistentGroups(string|array $groups): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Switches the internal blog ID.
 *
 * This changes the blog id used to create keys in blog specific groups.
 *
 * @since 3.5.0
 *
 * @see WP_Object_Cache::switch_to_blog()
 * @global WP_Object_Cache $wp_object_cache Object cache global instance.
 *
 * @param int $blogId Site ID.
 */
    public function wpCacheSwitchToBlog(int $blogId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Redirects incoming links to the proper URL based on the site url.
 *
 * Search engines consider www.somedomain.com and somedomain.com to be two
 * different URLs when they both go to the same location. This SEO enhancement
 * prevents penalty for duplicate content by redirecting all incoming links to
 * one or the other.
 *
 * Prevents redirection for feeds, trackbacks, searches, and
 * admin URLs. Does not redirect on non-pretty-permalink-supporting IIS 7+,
 * page/post previews, WP admin, Trackbacks, robots.txt, favicon.ico, searches,
 * or on POST requests.
 *
 * Will also attempt to find the correct link when a user enters a URL that does
 * not exist based on exact WordPress query. Will instead try to parse the URL
 * or query in an attempt to figure the correct page to go to.
 *
 * @since 2.3.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 * @global bool       $is_IIS
 * @global WP_Query   $wp_query   WordPress Query object.
 * @global wpdb       $wpdb       WordPress database abstraction object.
 * @global WP         $wp         Current WordPress environment instance.
 *
 * @param string $requestedUrl Optional. The URL that was requested, used to
 *                              figure if redirect is needed.
 * @param bool $doRedirect   Optional. Redirect to the new URL.
 * @return string|void The string of the URL, if redirect needed.
 */
    public function redirectCanonical(string $requestedUrl = null, bool $doRedirect = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Strips the #fragment from a URL, if one is present.
 *
 * @since 4.4.0
 *
 * @param string $url The URL to strip.
 * @return string The altered URL.
 */
    public function stripFragmentFromUrl(string $url): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Attempts to guess the correct URL for a 404 request based on query vars.
 *
 * @since 2.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return string|false The correct URL if one is found. False on failure.
 */
    public function redirectGuess404Permalink(): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Redirects a variety of shorthand URLs to the admin.
 *
 * If a user visits example.com/admin, they'll be redirected to /wp-admin.
 * Visiting /login redirects to /wp-login.php, and so on.
 *
 * @since 3.4.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 */
    public function wpRedirectAdminLocations(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Maps a capability to the primitive capabilities required of the given user to
 * satisfy the capability being checked.
 *
 * This function also accepts an ID of an object to map against if the capability is a meta capability. Meta
 * capabilities such as `edit_post` and `edit_user` are capabilities used by this function to map to primitive
 * capabilities that a user or role requires, such as `edit_posts` and `edit_others_posts`.
 *
 * Example usage:
 *
 *     map_meta_cap( 'edit_posts', $user->ID );
 *     map_meta_cap( 'edit_post', $user->ID, $post->ID );
 *     map_meta_cap( 'edit_post_meta', $user->ID, $post->ID, $meta_key );
 *
 * This function does not check whether the user has the required capabilities,
 * it just returns what the required capabilities are.
 *
 * @since 2.0.0
 * @since 4.9.6 Added the `export_others_personal_data`, `erase_others_personal_data`,
 *              and `manage_privacy_options` capabilities.
 * @since 5.1.0 Added the `update_php` capability.
 * @since 5.2.0 Added the `resume_plugin` and `resume_theme` capabilities.
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 * @since 5.7.0 Added the `create_app_password`, `list_app_passwords`, `read_app_password`,
 *              `edit_app_password`, `delete_app_passwords`, `delete_app_password`,
 *              and `update_https` capabilities.
 *
 * @global array $post_type_meta_caps Used to get post type meta capabilities.
 *
 * @param string $cap     Capability being checked.
 * @param int $userId User ID.
 * @param mixed  ...$args Optional further parameters, typically starting with an object ID.
 * @return string[] Primitive capabilities required of the user.
 */
    public function mapMetaCap(string $cap, int $userId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether the current user has the specified capability.
 *
 * This function also accepts an ID of an object to check against if the capability is a meta capability. Meta
 * capabilities such as `edit_post` and `edit_user` are capabilities used by the `map_meta_cap()` function to
 * map to primitive capabilities that a user or role has, such as `edit_posts` and `edit_others_posts`.
 *
 * Example usage:
 *
 *     current_user_can( 'edit_posts' );
 *     current_user_can( 'edit_post', $post->ID );
 *     current_user_can( 'edit_post_meta', $post->ID, $meta_key );
 *
 * While checking against particular roles in place of a capability is supported
 * in part, this practice is discouraged as it may produce unreliable results.
 *
 * Note: Will always return true if the current user is a super admin, unless specifically denied.
 *
 * @since 2.0.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 * @since 5.8.0 Converted to wrapper for the user_can() function.
 *
 * @see WP_User::has_cap()
 * @see map_meta_cap()
 *
 * @param string $capability Capability name.
 * @param mixed  ...$args    Optional further parameters, typically starting with an object ID.
 * @return bool Whether the current user has the given capability. If `$capability` is a meta cap and `$object_id` is
 *              passed, whether the current user has the given meta capability for the given object.
 */
    public function currentUserCan(string $capability): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether the current user has the specified capability for a given site.
 *
 * This function also accepts an ID of an object to check against if the capability is a meta capability. Meta
 * capabilities such as `edit_post` and `edit_user` are capabilities used by the `map_meta_cap()` function to
 * map to primitive capabilities that a user or role has, such as `edit_posts` and `edit_others_posts`.
 *
 * Example usage:
 *
 *     current_user_can_for_blog( $blog_id, 'edit_posts' );
 *     current_user_can_for_blog( $blog_id, 'edit_post', $post->ID );
 *     current_user_can_for_blog( $blog_id, 'edit_post_meta', $post->ID, $meta_key );
 *
 * @since 3.0.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 * @since 5.8.0 Wraps current_user_can() after switching to blog.
 *
 * @param int $blogId    Site ID.
 * @param string $capability Capability name.
 * @param mixed  ...$args    Optional further parameters, typically starting with an object ID.
 * @return bool Whether the user has the given capability.
 */
    public function currentUserCanForBlog(int $blogId, string $capability): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether the author of the supplied post has the specified capability.
 *
 * This function also accepts an ID of an object to check against if the capability is a meta capability. Meta
 * capabilities such as `edit_post` and `edit_user` are capabilities used by the `map_meta_cap()` function to
 * map to primitive capabilities that a user or role has, such as `edit_posts` and `edit_others_posts`.
 *
 * Example usage:
 *
 *     author_can( $post, 'edit_posts' );
 *     author_can( $post, 'edit_post', $post->ID );
 *     author_can( $post, 'edit_post_meta', $post->ID, $meta_key );
 *
 * @since 2.9.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @param int|\WP_Post $post       Post ID or post object.
 * @param string $capability Capability name.
 * @param mixed       ...$args    Optional further parameters, typically starting with an object ID.
 * @return bool Whether the post author has the given capability.
 */
    public function authorCan(int|\WP_Post $post, string $capability): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether a particular user has the specified capability.
 *
 * This function also accepts an ID of an object to check against if the capability is a meta capability. Meta
 * capabilities such as `edit_post` and `edit_user` are capabilities used by the `map_meta_cap()` function to
 * map to primitive capabilities that a user or role has, such as `edit_posts` and `edit_others_posts`.
 *
 * Example usage:
 *
 *     user_can( $user->ID, 'edit_posts' );
 *     user_can( $user->ID, 'edit_post', $post->ID );
 *     user_can( $user->ID, 'edit_post_meta', $post->ID, $meta_key );
 *
 * @since 3.1.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @param int|\WP_User $user       User ID or object.
 * @param string $capability Capability name.
 * @param mixed       ...$args    Optional further parameters, typically starting with an object ID.
 * @return bool Whether the user has the given capability.
 */
    public function userCan(int|\WP_User $user, string $capability): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the global WP_Roles instance and instantiates it if necessary.
 *
 * @since 4.3.0
 *
 * @global WP_Roles $wp_roles WordPress role management object.
 *
 * @return \WP_Roles WP_Roles global instance if not already instantiated.
 */
    public function wpRoles(): \WP_Roles
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves role object.
 *
 * @since 2.0.0
 *
 * @param string $role Role name.
 * @return \WP_Role|null WP_Role object if found, null if the role does not exist.
 */
    public function getRole(string $role): \WP_Role|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a role, if it does not exist.
 *
 * @since 2.0.0
 *
 * @param string $role         Role name.
 * @param string $displayName Display name for role.
 * @param bool[] $capabilities List of capabilities keyed by the capability name,
 *                             e.g. array( 'edit_posts' => true, 'delete_posts' => false ).
 * @return \WP_Role|void WP_Role object, if the role is added.
 */
    public function addRole(string $role, string $displayName, array $capabilities = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a role, if it exists.
 *
 * @since 2.0.0
 *
 * @param string $role Role name.
 */
    public function removeRole(string $role): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of super admins.
 *
 * @since 3.0.0
 *
 * @global array $super_admins
 *
 * @return string[] List of super admin logins.
 */
    public function getSuperAdmins(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether user is a site admin.
 *
 * @since 3.0.0
 *
 * @param int|false $userId Optional. The ID of a user. Defaults to false, to check the current user.
 * @return bool Whether the user is a site admin.
 */
    public function isSuperAdmin(int|false $userId = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Grants Super Admin privileges.
 *
 * @since 3.0.0
 *
 * @global array $super_admins
 *
 * @param int $userId ID of the user to be granted Super Admin privileges.
 * @return bool True on success, false on failure. This can fail when the user is
 *              already a super admin or when the `$super_admins` global is defined.
 */
    public function grantSuperAdmin(int $userId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Revokes Super Admin privileges.
 *
 * @since 3.0.0
 *
 * @global array $super_admins
 *
 * @param int $userId ID of the user Super Admin privileges to be revoked from.
 * @return bool True on success, false on failure. This can fail when the user's email
 *              is the network admin email or when the `$super_admins` global is defined.
 */
    public function revokeSuperAdmin(int $userId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the user capabilities to grant the 'install_languages' capability as necessary.
 *
 * A user must have at least one out of the 'update_core', 'install_plugins', and
 * 'install_themes' capabilities to qualify for 'install_languages'.
 *
 * @since 4.9.0
 *
 * @param bool[] $allcaps An array of all the user's capabilities.
 * @return bool[] Filtered array of the user's capabilities.
 */
    public function wpMaybeGrantInstallLanguagesCap(array $allcaps): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the user capabilities to grant the 'resume_plugins' and 'resume_themes' capabilities as necessary.
 *
 * @since 5.2.0
 *
 * @param bool[] $allcaps An array of all the user's capabilities.
 * @return bool[] Filtered array of the user's capabilities.
 */
    public function wpMaybeGrantResumeExtensionsCaps(array $allcaps): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the user capabilities to grant the 'view_site_health_checks' capabilities as necessary.
 *
 * @since 5.2.2
 *
 * @param bool[] $allcaps An array of all the user's capabilities.
 * @param string[] $caps    Required primitive capabilities for the requested capability.
 * @param array $args {
 *     Arguments that accompany the requested capability check.
 *
 *     @type string    $0 Requested capability.
 *     @type int       $1 Concerned user ID.
 *     @type mixed  ...$2 Optional second and further parameters, typically object ID.
 * }
 * @param \WP_User $user    The user object.
 * @return bool[] Filtered array of the user's capabilities.
 */
    public function wpMaybeGrantSiteHealthCaps(array $allcaps, array $caps, array $args, \WP_User $user): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves category link URL.
 *
 * @since 1.0.0
 *
 * @see get_term_link()
 *
 * @param int|object $category Category ID or object.
 * @return string Link on success, empty string if category does not exist.
 */
    public function getCategoryLink(int|object $category): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves category parents with separator.
 *
 * @since 1.2.0
 * @since 4.8.0 The `$visited` parameter was deprecated and renamed to `$deprecated`.
 *
 * @param int $categoryId Category ID.
 * @param bool $link        Optional. Whether to format with link. Default false.
 * @param string $separator   Optional. How to separate categories. Default '/'.
 * @param bool $nicename    Optional. Whether to use nice name for display. Default false.
 * @param array $deprecated  Not used.
 * @return string|\WP_Error A list of category parents on success, WP_Error on failure.
 */
    public function getCategoryParents(int $categoryId, bool $link = false, string $separator = '/', bool $nicename = false, array $deprecated = []): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves post categories.
 *
 * This tag may be used outside The Loop by passing a post ID as the parameter.
 *
 * Note: This function only returns results from the default "category" taxonomy.
 * For custom taxonomies use get_the_terms().
 *
 * @since 0.71
 *
 * @param int $postId Optional. The post ID. Defaults to current post ID.
 * @return WP_Term[] Array of WP_Term objects, one for each category assigned to the post.
 */
    public function getTheCategory(int|false $postId = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves category name based on category ID.
 *
 * @since 0.71
 *
 * @param int $catId Category ID.
 * @return string|\WP_Error Category name on success, WP_Error on failure.
 */
    public function getTheCategoryByID(int $catId): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves category list for a post in either HTML list or custom format.
 *
 * Generally used for quick, delimited (e.g. comma-separated) lists of categories,
 * as part of a post entry meta.
 *
 * For a more powerful, list-based function, see wp_list_categories().
 *
 * @since 1.5.1
 *
 * @see wp_list_categories()
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $separator Optional. Separator between the categories. By default, the links are placed
 *                          in an unordered list. An empty string will result in the default behavior.
 * @param string $parents   Optional. How to display the parents. Accepts 'multiple', 'single', or empty.
 *                          Default empty string.
 * @param int $postId   Optional. ID of the post to retrieve categories for. Defaults to the current post.
 * @return string Category list for a post.
 */
    public function getTheCategoryList(string $separator = '', string $parents = '', int|false $postId = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if the current post is within any of the given categories.
 *
 * The given categories are checked against the post's categories' term_ids, names and slugs.
 * Categories given as integers will only be checked against the post's categories' term_ids.
 *
 * Prior to v2.5 of WordPress, category names were not supported.
 * Prior to v2.7, category slugs were not supported.
 * Prior to v2.7, only one category could be compared: in_category( $single_category ).
 * Prior to v2.7, this function could only be used in the WordPress Loop.
 * As of 2.7, the function can be used anywhere if it is provided a post ID or post object.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.2.0
 * @since 2.7.0 The `$post` parameter was added.
 *
 * @param int|string|int[]|string[] $category Category ID, name, slug, or array of such
 *                                            to check against.
 * @param int|\WP_Post $post     Optional. Post to check. Defaults to the current post.
 * @return bool True if the current post is in any of the given categories.
 */
    public function inCategory(int|string|array $category, int|\WP_Post $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays category list for a post in either HTML list or custom format.
 *
 * @since 0.71
 *
 * @param string $separator Optional. Separator between the categories. By default, the links are placed
 *                          in an unordered list. An empty string will result in the default behavior.
 * @param string $parents   Optional. How to display the parents. Accepts 'multiple', 'single', or empty.
 *                          Default empty string.
 * @param int $postId   Optional. ID of the post to retrieve categories for. Defaults to the current post.
 */
    public function theCategory(string $separator = '', string $parents = '', int|false $postId = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves category description.
 *
 * @since 1.0.0
 *
 * @param int $category Optional. Category ID. Defaults to the current category ID.
 * @return string Category description, if available.
 */
    public function categoryDescription(int $category = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves the HTML dropdown list of categories.
 *
 * The 'hierarchical' argument, which is disabled by default, will override the
 * depth argument, unless it is true. When the argument is false, it will
 * display all of the categories. When it is enabled it will use the value in
 * the 'depth' argument.
 *
 * @since 2.1.0
 * @since 4.2.0 Introduced the `value_field` argument.
 * @since 4.6.0 Introduced the `required` argument.
 * @since 6.1.0 Introduced the `aria_describedby` argument.
 *
 * @param array|string $args {
 *     Optional. Array or string of arguments to generate a categories drop-down element. See WP_Term_Query::__construct()
 *     for information on additional accepted arguments.
 *
 *     @type string       $show_option_all   Text to display for showing all categories. Default empty.
 *     @type string       $show_option_none  Text to display for showing no categories. Default empty.
 *     @type string       $option_none_value Value to use when no category is selected. Default empty.
 *     @type string       $orderby           Which column to use for ordering categories. See get_terms() for a list
 *                                           of accepted values. Default 'id' (term_id).
 *     @type bool         $pad_counts        See get_terms() for an argument description. Default false.
 *     @type bool|int     $show_count        Whether to include post counts. Accepts 0, 1, or their bool equivalents.
 *                                           Default 0.
 *     @type bool|int     $echo              Whether to echo or return the generated markup. Accepts 0, 1, or their
 *                                           bool equivalents. Default 1.
 *     @type bool|int     $hierarchical      Whether to traverse the taxonomy hierarchy. Accepts 0, 1, or their bool
 *                                           equivalents. Default 0.
 *     @type int          $depth             Maximum depth. Default 0.
 *     @type int          $tab_index         Tab index for the select element. Default 0 (no tabindex).
 *     @type string       $name              Value for the 'name' attribute of the select element. Default 'cat'.
 *     @type string       $id                Value for the 'id' attribute of the select element. Defaults to the value
 *                                           of `$name`.
 *     @type string       $class             Value for the 'class' attribute of the select element. Default 'postform'.
 *     @type int|string   $selected          Value of the option that should be selected. Default 0.
 *     @type string       $value_field       Term field that should be used to populate the 'value' attribute
 *                                           of the option elements. Accepts any valid term field: 'term_id', 'name',
 *                                           'slug', 'term_group', 'term_taxonomy_id', 'taxonomy', 'description',
 *                                           'parent', 'count'. Default 'term_id'.
 *     @type string|array $taxonomy          Name of the taxonomy or taxonomies to retrieve. Default 'category'.
 *     @type bool         $hide_if_empty     True to skip generating markup if no categories are found.
 *                                           Default false (create select element even if no categories are found).
 *     @type bool         $required          Whether the `<select>` element should have the HTML5 'required' attribute.
 *                                           Default false.
 *     @type Walker       $walker            Walker object to use to build the output. Default empty which results in a
 *                                           Walker_CategoryDropdown instance being used.
 *     @type string       $aria_describedby  The 'id' of an element that contains descriptive text for the select.
 *                                           Default empty string.
 * }
 * @return string HTML dropdown list of categories.
 */
    public function wpDropdownCategories(array|string $args = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves the HTML list of categories.
 *
 * @since 2.1.0
 * @since 4.4.0 Introduced the `hide_title_if_empty` and `separator` arguments.
 * @since 4.4.0 The `current_category` argument was modified to optionally accept an array of values.
 * @since 6.1.0 Default value of the 'use_desc_for_title' argument was changed from 1 to 0.
 *
 * @param array|string $args {
 *     Array of optional arguments. See get_categories(), get_terms(), and WP_Term_Query::__construct()
 *     for information on additional accepted arguments.
 *
 *     @type int|int[]    $current_category      ID of category, or array of IDs of categories, that should get the
 *                                               'current-cat' class. Default 0.
 *     @type int          $depth                 Category depth. Used for tab indentation. Default 0.
 *     @type bool|int     $echo                  Whether to echo or return the generated markup. Accepts 0, 1, or their
 *                                               bool equivalents. Default 1.
 *     @type int[]|string $exclude               Array or comma/space-separated string of term IDs to exclude.
 *                                               If `$hierarchical` is true, descendants of `$exclude` terms will also
 *                                               be excluded; see `$exclude_tree`. See get_terms().
 *                                               Default empty string.
 *     @type int[]|string $exclude_tree          Array or comma/space-separated string of term IDs to exclude, along
 *                                               with their descendants. See get_terms(). Default empty string.
 *     @type string       $feed                  Text to use for the feed link. Default 'Feed for all posts filed
 *                                               under [cat name]'.
 *     @type string       $feed_image            URL of an image to use for the feed link. Default empty string.
 *     @type string       $feed_type             Feed type. Used to build feed link. See get_term_feed_link().
 *                                               Default empty string (default feed).
 *     @type bool         $hide_title_if_empty   Whether to hide the `$title_li` element if there are no terms in
 *                                               the list. Default false (title will always be shown).
 *     @type string       $separator             Separator between links. Default '<br />'.
 *     @type bool|int     $show_count            Whether to include post counts. Accepts 0, 1, or their bool equivalents.
 *                                               Default 0.
 *     @type string       $show_option_all       Text to display for showing all categories. Default empty string.
 *     @type string       $show_option_none      Text to display for the 'no categories' option.
 *                                               Default 'No categories'.
 *     @type string       $style                 The style used to display the categories list. If 'list', categories
 *                                               will be output as an unordered list. If left empty or another value,
 *                                               categories will be output separated by `<br>` tags. Default 'list'.
 *     @type string       $taxonomy              Name of the taxonomy to retrieve. Default 'category'.
 *     @type string       $title_li              Text to use for the list title `<li>` element. Pass an empty string
 *                                               to disable. Default 'Categories'.
 *     @type bool|int     $use_desc_for_title    Whether to use the category description as the title attribute.
 *                                               Accepts 0, 1, or their bool equivalents. Default 0.
 *     @type Walker       $walker                Walker object to use to build the output. Default empty which results
 *                                               in a Walker_Category instance being used.
 * }
 * @return void|string|false Void if 'echo' argument is true, HTML list of categories if 'echo' is false.
 *                           False if the taxonomy does not exist.
 */
    public function wpListCategories(array|string $args = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a tag cloud.
 *
 * Outputs a list of tags in what is called a 'tag cloud', where the size of each tag
 * is determined by how many times that particular tag has been assigned to posts.
 *
 * @since 2.3.0
 * @since 2.8.0 Added the `taxonomy` argument.
 * @since 4.8.0 Added the `show_count` argument.
 *
 * @param array|string $args {
 *     Optional. Array or string of arguments for displaying a tag cloud. See wp_generate_tag_cloud()
 *     and get_terms() for the full lists of arguments that can be passed in `$args`.
 *
 *     @type int    $number    The number of tags to display. Accepts any positive integer
 *                             or zero to return all. Default 45.
 *     @type string $link      Whether to display term editing links or term permalinks.
 *                             Accepts 'edit' and 'view'. Default 'view'.
 *     @type string $post_type The post type. Used to highlight the proper post type menu
 *                             on the linked edit page. Defaults to the first post type
 *                             associated with the taxonomy.
 *     @type bool   $echo      Whether or not to echo the return value. Default true.
 * }
 * @return void|string|string[] Void if 'echo' argument is true, or on failure. Otherwise, tag cloud
 *                              as a string or an array, depending on 'format' argument.
 */
    public function wpTagCloud(array|string $args = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Default topic count scaling for tag links.
 *
 * @since 2.9.0
 *
 * @param int $count Number of posts with that tag.
 * @return int Scaled count.
 */
    public function defaultTopicCountScale(int $count): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates a tag cloud (heatmap) from provided data.
 *
 * @todo Complete functionality.
 * @since 2.3.0
 * @since 4.8.0 Added the `show_count` argument.
 *
 * @param WP_Term[] $tags Array of WP_Term objects to generate the tag cloud for.
 * @param string|array $args {
 *     Optional. Array or string of arguments for generating a tag cloud.
 *
 *     @type int      $smallest                   Smallest font size used to display tags. Paired
 *                                                with the value of `$unit`, to determine CSS text
 *                                                size unit. Default 8 (pt).
 *     @type int      $largest                    Largest font size used to display tags. Paired
 *                                                with the value of `$unit`, to determine CSS text
 *                                                size unit. Default 22 (pt).
 *     @type string   $unit                       CSS text size unit to use with the `$smallest`
 *                                                and `$largest` values. Accepts any valid CSS text
 *                                                size unit. Default 'pt'.
 *     @type int      $number                     The number of tags to return. Accepts any
 *                                                positive integer or zero to return all.
 *                                                Default 0.
 *     @type string   $format                     Format to display the tag cloud in. Accepts 'flat'
 *                                                (tags separated with spaces), 'list' (tags displayed
 *                                                in an unordered list), or 'array' (returns an array).
 *                                                Default 'flat'.
 *     @type string   $separator                  HTML or text to separate the tags. Default "\n" (newline).
 *     @type string   $orderby                    Value to order tags by. Accepts 'name' or 'count'.
 *                                                Default 'name'. The {@see 'tag_cloud_sort'} filter
 *                                                can also affect how tags are sorted.
 *     @type string   $order                      How to order the tags. Accepts 'ASC' (ascending),
 *                                                'DESC' (descending), or 'RAND' (random). Default 'ASC'.
 *     @type int|bool $filter                     Whether to enable filtering of the final output
 *                                                via {@see 'wp_generate_tag_cloud'}. Default 1.
 *     @type array    $topic_count_text           Nooped plural text from _n_noop() to supply to
 *                                                tag counts. Default null.
 *     @type callable $topic_count_text_callback  Callback used to generate nooped plural text for
 *                                                tag counts based on the count. Default null.
 *     @type callable $topic_count_scale_callback Callback used to determine the tag count scaling
 *                                                value. Default default_topic_count_scale().
 *     @type bool|int $show_count                 Whether to display the tag counts. Default 0. Accepts
 *                                                0, 1, or their bool equivalents.
 * }
 * @return string|string[] Tag cloud as a string or an array, depending on 'format' argument.
 */
    public function wpGenerateTagCloud(array $tags, string|array $args = ''): string|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML list content for category list.
 *
 * @since 2.1.0
 * @since 5.3.0 Formalized the existing `...$args` parameter by adding it
 *              to the function signature.
 *
 * @uses Walker_Category to create HTML list content.
 * @see Walker::walk() for parameters and return description.
 *
 * @param mixed ...$args Elements array, maximum hierarchical depth and optional additional arguments.
 * @return string
 */
    public function walkCategoryTree(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML dropdown (select) content for category list.
 *
 * @since 2.1.0
 * @since 5.3.0 Formalized the existing `...$args` parameter by adding it
 *              to the function signature.
 *
 * @uses Walker_CategoryDropdown to create HTML dropdown content.
 * @see Walker::walk() for parameters and return description.
 *
 * @param mixed ...$args Elements array, maximum hierarchical depth and optional additional arguments.
 * @return string
 */
    public function walkCategoryDropdownTree(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the link to the tag.
 *
 * @since 2.3.0
 *
 * @see get_term_link()
 *
 * @param int|object $tag Tag ID or object.
 * @return string Link on success, empty string if tag does not exist.
 */
    public function getTagLink(int|object $tag): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the tags for a post.
 *
 * @since 2.3.0
 *
 * @param int|\WP_Post $post Post ID or object.
 * @return WP_Term[]|false|WP_Error Array of WP_Term objects on success, false if there are no terms
 *                                  or the post does not exist, WP_Error on failure.
 */
    public function getTheTags(int|\WP_Post $post = 0): array|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the tags for a post formatted as a string.
 *
 * @since 2.3.0
 *
 * @param string $before  Optional. String to use before the tags. Default empty.
 * @param string $sep     Optional. String to use between the tags. Default empty.
 * @param string $after   Optional. String to use after the tags. Default empty.
 * @param int $postId Optional. Post ID. Defaults to the current post ID.
 * @return string|false|\WP_Error A list of tags on success, false if there are no terms,
 *                               WP_Error on failure.
 */
    public function getTheTagList(string $before = '', string $sep = '', string $after = '', int $postId = 0): string|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the tags for a post.
 *
 * @since 2.3.0
 *
 * @param string $before Optional. String to use before the tags. Defaults to 'Tags:'.
 * @param string $sep    Optional. String to use between the tags. Default ', '.
 * @param string $after  Optional. String to use after the tags. Default empty.
 */
    public function theTags(string $before = null, string $sep = ', ', string $after = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves tag description.
 *
 * @since 2.8.0
 *
 * @param int $tag Optional. Tag ID. Defaults to the current tag ID.
 * @return string Tag description, if available.
 */
    public function tagDescription(int $tag = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves term description.
 *
 * @since 2.8.0
 * @since 4.9.2 The `$taxonomy` parameter was deprecated.
 *
 * @param int $term       Optional. Term ID. Defaults to the current term ID.
 * @param null $deprecated Deprecated. Not used.
 * @return string Term description, if available.
 */
    public function termDescription(int $term = 0, null $deprecated = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the terms of the taxonomy that are attached to the post.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Post $post     Post ID or object.
 * @param string $taxonomy Taxonomy name.
 * @return WP_Term[]|false|WP_Error Array of WP_Term objects on success, false if there are no terms
 *                                  or the post does not exist, WP_Error on failure.
 */
    public function getTheTerms(int|\WP_Post $post, string $taxonomy): array|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a post's terms as a list with specified format.
 *
 * Terms are linked to their respective term listing pages.
 *
 * @since 2.5.0
 *
 * @param int $postId  Post ID.
 * @param string $taxonomy Taxonomy name.
 * @param string $before   Optional. String to use before the terms. Default empty.
 * @param string $sep      Optional. String to use between the terms. Default empty.
 * @param string $after    Optional. String to use after the terms. Default empty.
 * @return string|false|\WP_Error A list of terms on success, false if there are no terms,
 *                               WP_Error on failure.
 */
    public function getTheTermList(int $postId, string $taxonomy, string $before = '', string $sep = '', string $after = ''): string|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves term parents with separator.
 *
 * @since 4.8.0
 *
 * @param int $termId  Term ID.
 * @param string $taxonomy Taxonomy name.
 * @param string|array $args {
 *     Array of optional arguments.
 *
 *     @type string $format    Use term names or slugs for display. Accepts 'name' or 'slug'.
 *                             Default 'name'.
 *     @type string $separator Separator for between the terms. Default '/'.
 *     @type bool   $link      Whether to format as a link. Default true.
 *     @type bool   $inclusive Include the term to get the parents for. Default true.
 * }
 * @return string|\WP_Error A list of term parents on success, WP_Error or empty string on failure.
 */
    public function getTermParentsList(int $termId, string $taxonomy, string|array $args = []): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the terms for a post in a list.
 *
 * @since 2.5.0
 *
 * @param int $postId  Post ID.
 * @param string $taxonomy Taxonomy name.
 * @param string $before   Optional. String to use before the terms. Default empty.
 * @param string $sep      Optional. String to use between the terms. Default ', '.
 * @param string $after    Optional. String to use after the terms. Default empty.
 * @return void|false Void on success, false on failure.
 */
    public function theTerms(int $postId, string $taxonomy, string $before = '', string $sep = ', ', string $after = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if the current post has any of given category.
 *
 * The given categories are checked against the post's categories' term_ids, names and slugs.
 * Categories given as integers will only be checked against the post's categories' term_ids.
 *
 * If no categories are given, determines if post has any categories.
 *
 * @since 3.1.0
 *
 * @param string|int|array $category Optional. The category name/term_id/slug,
 *                                   or an array of them to check for. Default empty.
 * @param int|\WP_Post $post     Optional. Post to check. Defaults to the current post.
 * @return bool True if the current post has any of the given categories
 *              (or any category, if no category specified). False otherwise.
 */
    public function hasCategory(string|int|array $category = '', int|\WP_Post $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if the current post has any of given tags.
 *
 * The given tags are checked against the post's tags' term_ids, names and slugs.
 * Tags given as integers will only be checked against the post's tags' term_ids.
 *
 * If no tags are given, determines if post has any tags.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.6.0
 * @since 2.7.0 Tags given as integers are only checked against
 *              the post's tags' term_ids, not names or slugs.
 * @since 2.7.0 Can be used outside of the WordPress Loop if `$post` is provided.
 *
 * @param string|int|array $tag  Optional. The tag name/term_id/slug,
 *                               or an array of them to check for. Default empty.
 * @param int|\WP_Post $post Optional. Post to check. Defaults to the current post.
 * @return bool True if the current post has any of the given tags
 *              (or any tag, if no tag specified). False otherwise.
 */
    public function hasTag(string|int|array $tag = '', int|\WP_Post $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if the current post has any of given terms.
 *
 * The given terms are checked against the post's terms' term_ids, names and slugs.
 * Terms given as integers will only be checked against the post's terms' term_ids.
 *
 * If no terms are given, determines if post has any terms.
 *
 * @since 3.1.0
 *
 * @param string|int|array $term     Optional. The term name/term_id/slug,
 *                                   or an array of them to check for. Default empty.
 * @param string $taxonomy Optional. Taxonomy name. Default empty.
 * @param int|\WP_Post $post     Optional. Post to check. Defaults to the current post.
 * @return bool True if the current post has any of the given terms
 *              (or any term, if no term specified). False otherwise.
 */
    public function hasTerm(string|int|array $term = '', string $taxonomy = '', int|\WP_Post $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of category objects.
 *
 * If you set the 'taxonomy' argument to 'link_category', the link categories
 * will be returned instead.
 *
 * @since 2.1.0
 *
 * @see get_terms() Type of arguments that can be changed.
 *
 * @param string|array $args {
 *     Optional. Arguments to retrieve categories. See get_terms() for additional options.
 *
 *     @type string $taxonomy Taxonomy to retrieve terms for. Default 'category'.
 * }
 * @return array List of category objects.
 */
    public function getCategories(string|array $args = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves category data given a category ID or category object.
 *
 * If you pass the $category parameter an object, which is assumed to be the
 * category row object retrieved the database. It will cache the category data.
 *
 * If you pass $category an integer of the category ID, then that category will
 * be retrieved from the database, if it isn't already cached, and pass it back.
 *
 * If you look at get_term(), then both types will be passed through several
 * filters and finally sanitized based on the $filter parameter value.
 *
 * @since 1.5.1
 *
 * @param int|object $category Category ID or category row object.
 * @param string $output   Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                             correspond to a WP_Term object, an associative array, or a numeric array,
 *                             respectively. Default OBJECT.
 * @param string $filter   Optional. How to sanitize category fields. Default 'raw'.
 * @return object|array|WP_Error|null Category data in type defined by $output parameter.
 *                                    WP_Error if $category is empty, null if it does not exist.
 */
    public function getCategory(int|object $category, string $output = OBJECT, string $filter = 'raw'): array|null|object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a category based on URL containing the category slug.
 *
 * Breaks the $category_path parameter up to get the category slug.
 *
 * Tries to find the child path and will return it. If it doesn't find a
 * match, then it will return the first category matching slug, if $full_match,
 * is set to false. If it does not, then it will return null.
 *
 * It is also possible that it will return a WP_Error object on failure. Check
 * for it when using this function.
 *
 * @since 2.1.0
 *
 * @param string $categoryPath URL containing category slugs.
 * @param bool $fullMatch    Optional. Whether full path should be matched.
 * @param string $output        Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                              correspond to a WP_Term object, an associative array, or a numeric array,
 *                              respectively. Default OBJECT.
 * @return \WP_Term|array|\WP_Error|null Type is based on $output value.
 */
    public function getCategoryByPath(string $categoryPath, bool $fullMatch = true, string $output = OBJECT): \WP_Term|array|\WP_Error|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a category object by category slug.
 *
 * @since 2.3.0
 *
 * @param string $slug The category slug.
 * @return object|false Category data object on success, false if not found.
 */
    public function getCategoryBySlug(string $slug): object|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the ID of a category from its name.
 *
 * @since 1.0.0
 *
 * @param string $catName Category name.
 * @return int Category ID on success, 0 if the category doesn't exist.
 */
    public function getCatID(string $catName): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the name of a category from its ID.
 *
 * @since 1.0.0
 *
 * @param int $catId Category ID.
 * @return string Category name, or an empty string if the category doesn't exist.
 */
    public function getCatName(int $catId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if a category is an ancestor of another category.
 *
 * You can use either an ID or the category object for both parameters.
 * If you use an integer, the category will be retrieved.
 *
 * @since 2.1.0
 *
 * @param int|object $cat1 ID or object to check if this is the parent category.
 * @param int|object $cat2 The child category.
 * @return bool Whether $cat2 is child of $cat1.
 */
    public function catIsAncestorOf(int|object $cat1, int|object $cat2): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes category data based on context.
 *
 * @since 2.3.0
 *
 * @param object|array $category Category data.
 * @param string $context  Optional. Default 'display'.
 * @return object|array Same type as $category with sanitized data for safe use.
 */
    public function sanitizeCategory(object|array $category, string $context = 'display'): object|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes data in single category key field.
 *
 * @since 2.3.0
 *
 * @param string $field   Category key to sanitize.
 * @param mixed $value   Category value to sanitize.
 * @param int $catId  Category ID.
 * @param string $context What filter to use, 'raw', 'display', etc.
 * @return mixed Value after $value has been sanitized.
 */
    public function sanitizeCategoryField(string $field, mixed $value, int $catId, string $context): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all post tags.
 *
 * @since 2.3.0
 *
 * @param string|array $args {
 *     Optional. Arguments to retrieve tags. See get_terms() for additional options.
 *
 *     @type string $taxonomy Taxonomy to retrieve terms for. Default 'post_tag'.
 * }
 * @return WP_Term[]|int|WP_Error Array of 'post_tag' term objects, a count thereof,
 *                                or WP_Error if any of the taxonomies do not exist.
 */
    public function getTags(string|array $args = ''): array|int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a post tag by tag ID or tag object.
 *
 * If you pass the $tag parameter an object, which is assumed to be the tag row
 * object retrieved from the database, it will cache the tag data.
 *
 * If you pass $tag an integer of the tag ID, then that tag will be retrieved
 * from the database, if it isn't already cached, and passed back.
 *
 * If you look at get_term(), both types will be passed through several filters
 * and finally sanitized based on the $filter parameter value.
 *
 * @since 2.3.0
 *
 * @param int|WP_Term|object $tag    A tag ID or object.
 * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                                   correspond to a WP_Term object, an associative array, or a numeric array,
 *                                   respectively. Default OBJECT.
 * @param string $filter Optional. How to sanitize tag fields. Default 'raw'.
 * @return \WP_Term|array|\WP_Error|null Tag data in type defined by $output parameter.
 *                                     WP_Error if $tag is empty, null if it does not exist.
 */
    public function getTag(int|object $tag, string $output = OBJECT, string $filter = 'raw'): \WP_Term|array|\WP_Error|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes the category cache data based on ID.
 *
 * @since 2.1.0
 *
 * @param int $id Category ID
 */
    public function cleanCategoryCache(int $id): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * WordPress autoloader for SimplePie.
 *
 * @since 3.5.0
 *
 * @param string $class Class name.
 */
    public function wpSimplepieAutoload(string $class): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a new pattern category.
 *
 * @since 5.5.0
 *
 * @param string $categoryName       Pattern category name including namespace.
 * @param array $categoryProperties List of properties for the block pattern.
 *                                    See WP_Block_Pattern_Categories_Registry::register() for
 *                                    accepted arguments.
 * @return bool True if the pattern category was registered with success and false otherwise.
 */
    public function registerBlockPatternCategory(string $categoryName, array $categoryProperties): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a pattern category.
 *
 * @since 5.5.0
 *
 * @param string $categoryName Pattern category name including namespace.
 * @return bool True if the pattern category was unregistered with success and false otherwise.
 */
    public function unregisterBlockPatternCategory(string $categoryName): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a new block pattern.
 *
 * @since 5.5.0
 *
 * @param string $patternName       Block pattern name including namespace.
 * @param array $patternProperties List of properties for the block pattern.
 *                                   See WP_Block_Patterns_Registry::register() for accepted arguments.
 * @return bool True if the pattern was registered with success and false otherwise.
 */
    public function registerBlockPattern(string $patternName, array $patternProperties): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a block pattern.
 *
 * @since 5.5.0
 *
 * @param string $patternName Block pattern name including namespace.
 * @return bool True if the pattern was unregistered with success and false otherwise.
 */
    public function unregisterBlockPattern(string $patternName): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates a string of attributes by applying to the current block being
 * rendered all of the features that the block supports.
 *
 * @since 5.6.0
 *
 * @param string[] $extraAttributes Optional. Array of extra attributes to render on the block wrapper.
 * @return string String of HTML attributes.
 */
    public function getBlockWrapperAttributes(array $extraAttributes = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the author of the current comment.
 *
 * If the comment has an empty comment_author field, then 'Anonymous' person is
 * assumed.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or the ID of the comment for which to retrieve the author.
 *                                   Default current comment.
 * @return string The comment author
 */
    public function getCommentAuthor(int|\WP_Comment $commentId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the author of the current comment.
 *
 * @since 0.71
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or the ID of the comment for which to print the author.
 *                                   Default current comment.
 */
    public function commentAuthor(int|\WP_Comment $commentId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the email of the author of the current comment.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or the ID of the comment for which to get the author's email.
 *                                   Default current comment.
 * @return string The current comment author's email
 */
    public function getCommentAuthorEmail(int|\WP_Comment $commentId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the email of the author of the current global $comment.
 *
 * Care should be taken to protect the email address and assure that email
 * harvesters do not capture your commenter's email address. Most assume that
 * their email address will not appear in raw form on the site. Doing so will
 * enable anyone, including those that people don't want to get the email
 * address and use it for their own means good and bad.
 *
 * @since 0.71
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or the ID of the comment for which to print the author's email.
 *                                   Default current comment.
 */
    public function commentAuthorEmail(int|\WP_Comment $commentId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the HTML email link to the author of the current comment.
 *
 * Care should be taken to protect the email address and assure that email
 * harvesters do not capture your commenter's email address. Most assume that
 * their email address will not appear in raw form on the site. Doing so will
 * enable anyone, including those that people don't want to get the email
 * address and use it for their own means good and bad.
 *
 * @since 0.71
 * @since 4.6.0 Added the `$comment` parameter.
 *
 * @param string $linkText Optional. Text to display instead of the comment author's email address.
 *                                  Default empty.
 * @param string $before    Optional. Text or HTML to display before the email link. Default empty.
 * @param string $after     Optional. Text or HTML to display after the email link. Default empty.
 * @param int|\WP_Comment $comment   Optional. Comment ID or WP_Comment object. Default is the current comment.
 */
    public function commentAuthorEmailLink(string $linkText = '', string $before = '', string $after = '', int|\WP_Comment $comment = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the HTML email link to the author of the current comment.
 *
 * Care should be taken to protect the email address and assure that email
 * harvesters do not capture your commenter's email address. Most assume that
 * their email address will not appear in raw form on the site. Doing so will
 * enable anyone, including those that people don't want to get the email
 * address and use it for their own means good and bad.
 *
 * @since 2.7.0
 * @since 4.6.0 Added the `$comment` parameter.
 *
 * @param string $linkText Optional. Text to display instead of the comment author's email address.
 *                                  Default empty.
 * @param string $before    Optional. Text or HTML to display before the email link. Default empty.
 * @param string $after     Optional. Text or HTML to display after the email link. Default empty.
 * @param int|\WP_Comment $comment   Optional. Comment ID or WP_Comment object. Default is the current comment.
 * @return string HTML markup for the comment author email link. By default, the email address is obfuscated
 *                via the {@see 'comment_email'} filter with antispambot().
 */
    public function getCommentAuthorEmailLink(string $linkText = '', string $before = '', string $after = '', int|\WP_Comment $comment = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the HTML link to the URL of the author of the current comment.
 *
 * Both get_comment_author_url() and get_comment_author() rely on get_comment(),
 * which falls back to the global comment variable if the $comment_id argument is empty.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or the ID of the comment for which to get the author's link.
 *                                   Default current comment.
 * @return string The comment author name or HTML link for author's URL.
 */
    public function getCommentAuthorLink(int|\WP_Comment $commentId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the HTML link to the URL of the author of the current comment.
 *
 * @since 0.71
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or the ID of the comment for which to print the author's link.
 *                                   Default current comment.
 */
    public function commentAuthorLink(int|\WP_Comment $commentId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the IP address of the author of the current comment.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or the ID of the comment for which to get the author's IP address.
 *                                   Default current comment.
 * @return string Comment author's IP address, or an empty string if it's not available.
 */
    public function getCommentAuthorIP(int|\WP_Comment $commentId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the IP address of the author of the current comment.
 *
 * @since 0.71
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or the ID of the comment for which to print the author's IP address.
 *                                   Default current comment.
 */
    public function commentAuthorIP(int|\WP_Comment $commentId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL of the author of the current comment, not linked.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or the ID of the comment for which to get the author's URL.
 *                                   Default current comment.
 * @return string Comment author URL, if provided, an empty string otherwise.
 */
    public function getCommentAuthorUrl(int|\WP_Comment $commentId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the URL of the author of the current comment, not linked.
 *
 * @since 0.71
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or the ID of the comment for which to print the author's URL.
 *                                   Default current comment.
 */
    public function commentAuthorUrl(int|\WP_Comment $commentId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the HTML link of the URL of the author of the current comment.
 *
 * $link_text parameter is only used if the URL does not exist for the comment
 * author. If the URL does exist then the URL will be used and the $link_text
 * will be ignored.
 *
 * Encapsulate the HTML link between the $before and $after. So it will appear
 * in the order of $before, link, and finally $after.
 *
 * @since 1.5.0
 * @since 4.6.0 Added the `$comment` parameter.
 *
 * @param string $linkText Optional. The text to display instead of the comment
 *                                  author's email address. Default empty.
 * @param string $before    Optional. The text or HTML to display before the email link.
 *                                  Default empty.
 * @param string $after     Optional. The text or HTML to display after the email link.
 *                                  Default empty.
 * @param int|\WP_Comment $comment   Optional. Comment ID or WP_Comment object.
 *                                  Default is the current comment.
 * @return string The HTML link between the $before and $after parameters.
 */
    public function getCommentAuthorUrlLink(string $linkText = '', string $before = '', string $after = '', int|\WP_Comment $comment = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the HTML link of the URL of the author of the current comment.
 *
 * @since 0.71
 * @since 4.6.0 Added the `$comment` parameter.
 *
 * @param string $linkText Optional. Text to display instead of the comment author's
 *                                  email address. Default empty.
 * @param string $before    Optional. Text or HTML to display before the email link.
 *                                  Default empty.
 * @param string $after     Optional. Text or HTML to display after the email link.
 *                                  Default empty.
 * @param int|\WP_Comment $comment   Optional. Comment ID or WP_Comment object.
 *                                  Default is the current comment.
 */
    public function commentAuthorUrlLink(string $linkText = '', string $before = '', string $after = '', int|\WP_Comment $comment = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates semantic classes for each comment element.
 *
 * @since 2.7.0
 * @since 4.4.0 Added the ability for `$comment` to also accept a WP_Comment object.
 *
 * @param string|string[] $cssClass Optional. One or more classes to add to the class list.
 *                                   Default empty.
 * @param int|\WP_Comment $comment   Optional. Comment ID or WP_Comment object. Default current comment.
 * @param int|\WP_Post $post      Optional. Post ID or WP_Post object. Default current post.
 * @param bool $display   Optional. Whether to print or return the output.
 *                                   Default true.
 * @return void|string Void if `$display` argument is true, comment classes if `$display` is false.
 */
    public function commentClass(string|array $cssClass = '', int|\WP_Comment $comment = null, int|\WP_Post $post = null, bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the classes for the comment div as an array.
 *
 * @since 2.7.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @global int $comment_alt
 * @global int $comment_depth
 * @global int $comment_thread_alt
 *
 * @param string|string[] $cssClass  Optional. One or more classes to add to the class list.
 *                                    Default empty.
 * @param int|\WP_Comment $commentId Optional. Comment ID or WP_Comment object. Default current comment.
 * @param int|\WP_Post $post       Optional. Post ID or WP_Post object. Default current post.
 * @return string[] An array of classes.
 */
    public function getCommentClass(string|array $cssClass = '', int|\WP_Comment $commentId = null, int|\WP_Post $post = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the comment date of the current comment.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param string $format     Optional. PHP date format. Defaults to the 'date_format' option.
 * @param int|\WP_Comment $commentId Optional. WP_Comment or ID of the comment for which to get the date.
 *                                   Default current comment.
 * @return string The comment's date.
 */
    public function getCommentDate(string $format = '', int|\WP_Comment $commentId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the comment date of the current comment.
 *
 * @since 0.71
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param string $format     Optional. PHP date format. Defaults to the 'date_format' option.
 * @param int|\WP_Comment $commentId WP_Comment or ID of the comment for which to print the date.
 *                                   Default current comment.
 */
    public function commentDate(string $format = '', int|\WP_Comment $commentId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the excerpt of the given comment.
 *
 * Returns a maximum of 20 words with an ellipsis appended if necessary.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or ID of the comment for which to get the excerpt.
 *                                   Default current comment.
 * @return string The possibly truncated comment excerpt.
 */
    public function getCommentExcerpt(int|\WP_Comment $commentId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the excerpt of the current comment.
 *
 * @since 1.2.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or ID of the comment for which to print the excerpt.
 *                                   Default current comment.
 */
    public function commentExcerpt(int|\WP_Comment $commentId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the comment ID of the current comment.
 *
 * @since 1.5.0
 *
 * @return string The comment ID as a numeric string.
 */
    public function getCommentID(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the comment ID of the current comment.
 *
 * @since 0.71
 */
    public function commentID(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the link to a given comment.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability for `$comment` to also accept a WP_Comment object. Added `$cpage` argument.
 *
 * @see get_page_of_comment()
 *
 * @global WP_Rewrite $wp_rewrite      WordPress rewrite component.
 * @global bool       $in_comment_loop
 *
 * @param \WP_Comment|int|null $comment Optional. Comment to retrieve. Default current comment.
 * @param array $args {
 *     An array of optional arguments to override the defaults.
 *
 *     @type string     $type      Passed to get_page_of_comment().
 *     @type int        $page      Current page of comments, for calculating comment pagination.
 *     @type int        $per_page  Per-page value for comment pagination.
 *     @type int        $max_depth Passed to get_page_of_comment().
 *     @type int|string $cpage     Value to use for the comment's "comment-page" or "cpage" value.
 *                                 If provided, this value overrides any value calculated from `$page`
 *                                 and `$per_page`.
 * }
 * @return string The permalink to the given comment.
 */
    public function getCommentLink(\WP_Comment|int|null $comment = null, array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the link to the current post comments.
 *
 * @since 1.5.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return string The link to the comments.
 */
    public function getCommentsLink(int|\WP_Post $post = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the link to the current post comments.
 *
 * @since 0.71
 *
 * @param string $deprecated   Not Used.
 * @param string $deprecated2 Not Used.
 */
    public function commentsLink(string $deprecated = '', string $deprecated2 = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the amount of comments a post has.
 *
 * @since 1.5.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is the global `$post`.
 * @return string|int If the post exists, a numeric string representing the number of comments
 *                    the post has, otherwise 0.
 */
    public function getCommentsNumber(int|\WP_Post $post = 0): string|int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the language string for the number of comments the current post has.
 *
 * @since 0.71
 * @since 5.4.0 The `$deprecated` parameter was changed to `$post`.
 *
 * @param string|false $zero Optional. Text for no comments. Default false.
 * @param string|false $one  Optional. Text for one comment. Default false.
 * @param string|false $more Optional. Text for more than one comment. Default false.
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is the global `$post`.
 */
    public function commentsNumber(string|false $zero = false, string|false $one = false, string|false $more = false, int|\WP_Post $post = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the language string for the number of comments the current post has.
 *
 * @since 4.0.0
 * @since 5.4.0 Added the `$post` parameter to allow using the function outside of the loop.
 *
 * @param string $zero Optional. Text for no comments. Default false.
 * @param string $one  Optional. Text for one comment. Default false.
 * @param string $more Optional. Text for more than one comment. Default false.
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is the global `$post`.
 * @return string Language string for the number of comments a post has.
 */
    public function getCommentsNumberText(string|false $zero = false, string|false $one = false, string|false $more = false, int|\WP_Post $post = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the text of the current comment.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 * @since 5.4.0 Added 'In reply to %s.' prefix to child comments in comments feed.
 *
 * @see Walker_Comment::comment()
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or ID of the comment for which to get the text.
 *                                   Default current comment.
 * @param array $args       Optional. An array of arguments. Default empty array.
 * @return string The comment content.
 */
    public function getCommentText(int|\WP_Comment $commentId = 0, array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the text of the current comment.
 *
 * @since 0.71
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @see Walker_Comment::comment()
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or ID of the comment for which to print the text.
 *                                   Default current comment.
 * @param array $args       Optional. An array of arguments. Default empty array.
 */
    public function commentText(int|\WP_Comment $commentId = 0, array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the comment time of the current comment.
 *
 * @since 1.5.0
 * @since 6.2.0 Added the `$comment_id` parameter.
 *
 * @param string $format     Optional. PHP date format. Defaults to the 'time_format' option.
 * @param bool $gmt        Optional. Whether to use the GMT date. Default false.
 * @param bool $translate  Optional. Whether to translate the time (for use in feeds).
 *                                   Default true.
 * @param int|\WP_Comment $commentId Optional. WP_Comment or ID of the comment for which to get the time.
 *                                   Default current comment.
 * @return string The formatted time.
 */
    public function getCommentTime(string $format = '', bool $gmt = false, bool $translate = true, int|\WP_Comment $commentId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the comment time of the current comment.
 *
 * @since 0.71
 * @since 6.2.0 Added the `$comment_id` parameter.
 *
 * @param string $format     Optional. PHP time format. Defaults to the 'time_format' option.
 * @param int|\WP_Comment $commentId Optional. WP_Comment or ID of the comment for which to print the time.
 *                                   Default current comment.
 */
    public function commentTime(string $format = '', int|\WP_Comment $commentId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the comment type of the current comment.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability for `$comment_id` to also accept a WP_Comment object.
 *
 * @param int|\WP_Comment $commentId Optional. WP_Comment or ID of the comment for which to get the type.
 *                                   Default current comment.
 * @return string The comment type.
 */
    public function getCommentType(int|\WP_Comment $commentId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the comment type of the current comment.
 *
 * @since 0.71
 *
 * @param string|false $commenttxt   Optional. String to display for comment type. Default false.
 * @param string|false $trackbacktxt Optional. String to display for trackback type. Default false.
 * @param string|false $pingbacktxt  Optional. String to display for pingback type. Default false.
 */
    public function commentType(string|false $commenttxt = false, string|false $trackbacktxt = false, string|false $pingbacktxt = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current post's trackback URL.
 *
 * There is a check to see if permalink's have been enabled and if so, will
 * retrieve the pretty path. If permalinks weren't enabled, the ID of the
 * current post is used and appended to the correct page to go to.
 *
 * @since 1.5.0
 *
 * @return string The trackback URL after being filtered.
 */
    public function getTrackbackUrl(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the current post's trackback URL.
 *
 * @since 0.71
 *
 * @param bool $deprecatedEcho Not used.
 * @return void|string Should only be used to echo the trackback URL, use get_trackback_url()
 *                     for the result instead.
 */
    public function trackbackUrl(bool $deprecatedEcho = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates and displays the RDF for the trackback information of current post.
 *
 * Deprecated in 3.0.0, and restored in 3.0.1.
 *
 * @since 0.71
 *
 * @param int|string $deprecated Not used (Was $timezone = 0).
 */
    public function trackbackRdf(int|string $deprecated = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current post is open for comments.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default current post.
 * @return bool True if the comments are open.
 */
    public function commentsOpen(int|\WP_Post $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current post is open for pings.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default current post.
 * @return bool True if pings are accepted
 */
    public function pingsOpen(int|\WP_Post $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays form token for unfiltered comments.
 *
 * Will only display nonce token if the current user has permissions for
 * unfiltered html. Won't display the token for other users.
 *
 * The function was backported to 2.0.10 and was added to versions 2.1.3 and
 * above. Does not exist in versions prior to 2.0.10 in the 2.0 branch and in
 * the 2.1 branch, prior to 2.1.3. Technically added in 2.2.0.
 *
 * Backported to 2.0.10.
 *
 * @since 2.1.3
 */
    public function wpCommentFormUnfilteredHtmlNonce(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the comment template specified in $file.
 *
 * Will not display the comments template if not on single post or page, or if
 * the post does not have comments.
 *
 * Uses the WordPress database object to query for the comments. The comments
 * are passed through the {@see 'comments_array'} filter hook with the list of comments
 * and the post ID respectively.
 *
 * The `$file` path is passed through a filter hook called {@see 'comments_template'},
 * which includes the template directory and $file combined. Tries the $filtered path
 * first and if it fails it will require the default comment template from the
 * default theme. If either does not exist, then the WordPress process will be
 * halted. It is advised for that reason, that the default theme is not deleted.
 *
 * Will not try to get the comments if the post has none.
 *
 * @since 1.5.0
 *
 * @global WP_Query   $wp_query           WordPress Query object.
 * @global WP_Post    $post               Global post object.
 * @global wpdb       $wpdb               WordPress database abstraction object.
 * @global int        $id
 * @global WP_Comment $comment            Global comment object.
 * @global string     $user_login
 * @global string     $user_identity
 * @global bool       $overridden_cpage
 * @global bool       $withcomments
 * @global string     $wp_stylesheet_path Path to current theme's stylesheet directory.
 * @global string     $wp_template_path   Path to current theme's template directory.
 *
 * @param string $file              Optional. The file to load. Default '/comments.php'.
 * @param bool $separateComments Optional. Whether to separate the comments by comment type.
 *                                  Default false.
 */
    public function commentsTemplate(string $file = '/comments.php', bool $separateComments = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the link to the comments for the current post ID.
 *
 * @since 0.71
 *
 * @param false|string $zero      Optional. String to display when no comments. Default false.
 * @param false|string $one       Optional. String to display when only one comment is available. Default false.
 * @param false|string $more      Optional. String to display when there are more than one comment. Default false.
 * @param string $cssClass Optional. CSS class to use for comments. Default empty.
 * @param false|string $none      Optional. String to display when comments have been turned off. Default false.
 */
    public function commentsPopupLink(false|string $zero = false, false|string $one = false, false|string $more = false, string $cssClass = '', false|string $none = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML content for reply to comment link.
 *
 * @since 2.7.0
 * @since 4.4.0 Added the ability for `$comment` to also accept a WP_Comment object.
 *
 * @param array $args {
 *     Optional. Override default arguments.
 *
 *     @type string $add_below  The first part of the selector used to identify the comment to respond below.
 *                              The resulting value is passed as the first parameter to addComment.moveForm(),
 *                              concatenated as $add_below-$comment->comment_ID. Default 'comment'.
 *     @type string $respond_id The selector identifying the responding comment. Passed as the third parameter
 *                              to addComment.moveForm(), and appended to the link URL as a hash value.
 *                              Default 'respond'.
 *     @type string $reply_text The text of the Reply link. Default 'Reply'.
 *     @type string $login_text The text of the link to reply if logged out. Default 'Log in to Reply'.
 *     @type int    $max_depth  The max depth of the comment tree. Default 0.
 *     @type int    $depth      The depth of the new comment. Must be greater than 0 and less than the value
 *                              of the 'thread_comments_depth' option set in Settings > Discussion. Default 0.
 *     @type string $before     The text or HTML to add before the reply link. Default empty.
 *     @type string $after      The text or HTML to add after the reply link. Default empty.
 * }
 * @param int|\WP_Comment $comment Optional. Comment being replied to. Default current comment.
 * @param int|\WP_Post $post    Optional. Post ID or WP_Post object the comment is going to be displayed on.
 *                                Default current post.
 * @return string|false|null Link to show comment form, if successful. False, if comments are closed.
 */
    public function getCommentReplyLink(array $args = [], int|\WP_Comment $comment = null, int|\WP_Post $post = null): string|false|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the HTML content for reply to comment link.
 *
 * @since 2.7.0
 *
 * @see get_comment_reply_link()
 *
 * @param array $args    Optional. Override default options. Default empty array.
 * @param int|\WP_Comment $comment Optional. Comment being replied to. Default current comment.
 * @param int|\WP_Post $post    Optional. Post ID or WP_Post object the comment is going to be displayed on.
 *                                Default current post.
 */
    public function commentReplyLink(array $args = [], int|\WP_Comment $comment = null, int|\WP_Post $post = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML content for reply to post link.
 *
 * @since 2.7.0
 *
 * @param array $args {
 *     Optional. Override default arguments.
 *
 *     @type string $add_below  The first part of the selector used to identify the comment to respond below.
 *                              The resulting value is passed as the first parameter to addComment.moveForm(),
 *                              concatenated as $add_below-$comment->comment_ID. Default is 'post'.
 *     @type string $respond_id The selector identifying the responding comment. Passed as the third parameter
 *                              to addComment.moveForm(), and appended to the link URL as a hash value.
 *                              Default 'respond'.
 *     @type string $reply_text Text of the Reply link. Default is 'Leave a Comment'.
 *     @type string $login_text Text of the link to reply if logged out. Default is 'Log in to leave a Comment'.
 *     @type string $before     Text or HTML to add before the reply link. Default empty.
 *     @type string $after      Text or HTML to add after the reply link. Default empty.
 * }
 * @param int|\WP_Post $post    Optional. Post ID or WP_Post object the comment is going to be displayed on.
 *                             Default current post.
 * @return string|false|null Link to show comment form, if successful. False, if comments are closed.
 */
    public function getPostReplyLink(array $args = [], int|\WP_Post $post = null): string|false|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the HTML content for reply to post link.
 *
 * @since 2.7.0
 *
 * @see get_post_reply_link()
 *
 * @param array $args Optional. Override default options. Default empty array.
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object the comment is going to be displayed on.
 *                          Default current post.
 */
    public function postReplyLink(array $args = [], int|\WP_Post $post = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML content for cancel comment reply link.
 *
 * @since 2.7.0
 * @since 6.2.0 Added the `$post` parameter.
 *
 * @param string $linkText Optional. Text to display for cancel reply link. If empty,
 *                                    defaults to 'Click here to cancel reply'. Default empty.
 * @param int|\WP_Post|null $post      Optional. The post the comment thread is being
 *                                    displayed for. Defaults to the current global post.
 * @return string
 */
    public function getCancelCommentReplyLink(string $linkText = '', int|\WP_Post|null $post = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays HTML content for cancel comment reply link.
 *
 * @since 2.7.0
 *
 * @param string $linkText Optional. Text to display for cancel reply link. If empty,
 *                     defaults to 'Click here to cancel reply'. Default empty.
 */
    public function cancelCommentReplyLink(string $linkText = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves hidden input HTML for replying to comments.
 *
 * @since 3.0.0
 * @since 6.2.0 Renamed `$post_id` to `$post` and added WP_Post support.
 *
 * @param int|\WP_Post|null $post Optional. The post the comment is being displayed for.
 *                               Defaults to the current global post.
 * @return string Hidden input HTML for replying to comments.
 */
    public function getCommentIdFields(int|\WP_Post|null $post = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs hidden input HTML for replying to comments.
 *
 * Adds two hidden inputs to the comment form to identify the `comment_post_ID`
 * and `comment_parent` values for threaded comments.
 *
 * This tag must be within the `<form>` section of the `comments.php` template.
 *
 * @since 2.7.0
 * @since 6.2.0 Renamed `$post_id` to `$post` and added WP_Post support.
 *
 * @see get_comment_id_fields()
 *
 * @param int|\WP_Post|null $post Optional. The post the comment is being displayed for.
 *                               Defaults to the current global post.
 */
    public function commentIdFields(int|\WP_Post|null $post = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays text based on comment reply status.
 *
 * Only affects users with JavaScript disabled.
 *
 * @internal The $comment global must be present to allow template tags access to the current
 *           comment. See https://core.trac.wordpress.org/changeset/36512.
 *
 * @since 2.7.0
 * @since 6.2.0 Added the `$post` parameter.
 *
 * @global WP_Comment $comment Global comment object.
 *
 * @param string|false $noReplyText  Optional. Text to display when not replying to a comment.
 *                                          Default false.
 * @param string|false $replyText     Optional. Text to display when replying to a comment.
 *                                          Default false. Accepts "%s" for the author of the comment
 *                                          being replied to.
 * @param bool $linkToParent Optional. Boolean to control making the author's name a link
 *                                          to their comment. Default true.
 * @param int|\WP_Post|null $post           Optional. The post that the comment form is being displayed for.
 *                                          Defaults to the current global post.
 */
    public function commentFormTitle(string|false $noReplyText = false, string|false $replyText = false, bool $linkToParent = true, int|\WP_Post|null $post = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a list of comments.
 *
 * Used in the comments.php template to list comments for a particular post.
 *
 * @since 2.7.0
 *
 * @see WP_Query::$comments
 *
 * @global WP_Query $wp_query           WordPress Query object.
 * @global int      $comment_alt
 * @global int      $comment_depth
 * @global int      $comment_thread_alt
 * @global bool     $overridden_cpage
 * @global bool     $in_comment_loop
 *
 * @param string|array $args {
 *     Optional. Formatting options.
 *
 *     @type object   $walker            Instance of a Walker class to list comments. Default null.
 *     @type int      $max_depth         The maximum comments depth. Default empty.
 *     @type string   $style             The style of list ordering. Accepts 'ul', 'ol', or 'div'.
 *                                       'div' will result in no additional list markup. Default 'ul'.
 *     @type callable $callback          Callback function to use. Default null.
 *     @type callable $end-callback      Callback function to use at the end. Default null.
 *     @type string   $type              Type of comments to list. Accepts 'all', 'comment',
 *                                       'pingback', 'trackback', 'pings'. Default 'all'.
 *     @type int      $page              Page ID to list comments for. Default empty.
 *     @type int      $per_page          Number of comments to list per page. Default empty.
 *     @type int      $avatar_size       Height and width dimensions of the avatar size. Default 32.
 *     @type bool     $reverse_top_level Ordering of the listed comments. If true, will display
 *                                       newest comments first. Default null.
 *     @type bool     $reverse_children  Whether to reverse child comments in the list. Default null.
 *     @type string   $format            How to format the comments list. Accepts 'html5', 'xhtml'.
 *                                       Default 'html5' if the theme supports it.
 *     @type bool     $short_ping        Whether to output short pings. Default false.
 *     @type bool     $echo              Whether to echo the output or return it. Default true.
 * }
 * @param WP_Comment[] $comments Optional. Array of WP_Comment objects. Default null.
 * @return void|string Void if 'echo' argument is true, or no comments to list.
 *                     Otherwise, HTML list of comments.
 */
    public function wpListComments(string|array $args = [], array $comments = null): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs a complete commenting form for use within a template.
 *
 * Most strings and form fields may be controlled through the `$args` array passed
 * into the function, while you may also choose to use the {@see 'comment_form_default_fields'}
 * filter to modify the array of default fields if you'd just like to add a new
 * one or remove a single field. All fields are also individually passed through
 * a filter of the {@see 'comment_form_field_$name'} where `$name` is the key used
 * in the array of fields.
 *
 * @since 3.0.0
 * @since 4.1.0 Introduced the 'class_submit' argument.
 * @since 4.2.0 Introduced the 'submit_button' and 'submit_fields' arguments.
 * @since 4.4.0 Introduced the 'class_form', 'title_reply_before', 'title_reply_after',
 *              'cancel_reply_before', and 'cancel_reply_after' arguments.
 * @since 4.5.0 The 'author', 'email', and 'url' form fields are limited to 245, 100,
 *              and 200 characters, respectively.
 * @since 4.6.0 Introduced the 'action' argument.
 * @since 4.9.6 Introduced the 'cookies' default comment field.
 * @since 5.5.0 Introduced the 'class_container' argument.
 *
 * @param array $args {
 *     Optional. Default arguments and form fields to override.
 *
 *     @type array $fields {
 *         Default comment fields, filterable by default via the {@see 'comment_form_default_fields'} hook.
 *
 *         @type string $author  Comment author field HTML.
 *         @type string $email   Comment author email field HTML.
 *         @type string $url     Comment author URL field HTML.
 *         @type string $cookies Comment cookie opt-in field HTML.
 *     }
 *     @type string $comment_field        The comment textarea field HTML.
 *     @type string $must_log_in          HTML element for a 'must be logged in to comment' message.
 *     @type string $logged_in_as         The HTML for the 'logged in as [user]' message, the Edit profile link,
 *                                        and the Log out link.
 *     @type string $comment_notes_before HTML element for a message displayed before the comment fields
 *                                        if the user is not logged in.
 *                                        Default 'Your email address will not be published.'.
 *     @type string $comment_notes_after  HTML element for a message displayed after the textarea field.
 *     @type string $action               The comment form element action attribute. Default '/wp-comments-post.php'.
 *     @type string $id_form              The comment form element id attribute. Default 'commentform'.
 *     @type string $id_submit            The comment submit element id attribute. Default 'submit'.
 *     @type string $class_container      The comment form container class attribute. Default 'comment-respond'.
 *     @type string $class_form           The comment form element class attribute. Default 'comment-form'.
 *     @type string $class_submit         The comment submit element class attribute. Default 'submit'.
 *     @type string $name_submit          The comment submit element name attribute. Default 'submit'.
 *     @type string $title_reply          The translatable 'reply' button label. Default 'Leave a Reply'.
 *     @type string $title_reply_to       The translatable 'reply-to' button label. Default 'Leave a Reply to %s',
 *                                        where %s is the author of the comment being replied to.
 *     @type string $title_reply_before   HTML displayed before the comment form title.
 *                                        Default: '<h3 id="reply-title" class="comment-reply-title">'.
 *     @type string $title_reply_after    HTML displayed after the comment form title.
 *                                        Default: '</h3>'.
 *     @type string $cancel_reply_before  HTML displayed before the cancel reply link.
 *     @type string $cancel_reply_after   HTML displayed after the cancel reply link.
 *     @type string $cancel_reply_link    The translatable 'cancel reply' button label. Default 'Cancel reply'.
 *     @type string $label_submit         The translatable 'submit' button label. Default 'Post a comment'.
 *     @type string $submit_button        HTML format for the Submit button.
 *                                        Default: '<input name="%1$s" type="submit" id="%2$s" class="%3$s" value="%4$s" />'.
 *     @type string $submit_field         HTML format for the markup surrounding the Submit button and comment hidden
 *                                        fields. Default: '<p class="form-submit">%1$s %2$s</p>', where %1$s is the
 *                                        submit button markup and %2$s is the comment hidden fields.
 *     @type string $format               The comment form format. Default 'xhtml'. Accepts 'xhtml', 'html5'.
 * }
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object to generate the form for. Default current post.
 */
    public function commentForm(array $args = [], int|\WP_Post $post = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a comment passes internal checks to be allowed to add.
 *
 * If manual comment moderation is set in the administration, then all checks,
 * regardless of their type and substance, will fail and the function will
 * return false.
 *
 * If the number of links exceeds the amount in the administration, then the
 * check fails. If any of the parameter contents contain any disallowed words,
 * then the check fails.
 *
 * If the comment author was approved before, then the comment is automatically
 * approved.
 *
 * If all checks pass, the function will return true.
 *
 * @since 1.2.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $author       Comment author name.
 * @param string $email        Comment author email.
 * @param string $url          Comment author URL.
 * @param string $comment      Content of the comment.
 * @param string $userIp      Comment author IP address.
 * @param string $userAgent   Comment author User-Agent.
 * @param string $commentType Comment type, either user-submitted comment,
 *                             trackback, or pingback.
 * @return bool If all checks pass, true, otherwise false.
 */
    public function checkComment(string $author, string $email, string $url, string $comment, string $userIp, string $userAgent, string $commentType): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the approved comments for a post.
 *
 * @since 2.0.0
 * @since 4.1.0 Refactored to leverage WP_Comment_Query over a direct query.
 *
 * @param int $postId The ID of the post.
 * @param array $args    {
 *     Optional. See WP_Comment_Query::__construct() for information on accepted arguments.
 *
 *     @type int    $status  Comment status to limit results by. Defaults to approved comments.
 *     @type int    $post_id Limit results to those affiliated with a given post ID.
 *     @type string $order   How to order retrieved comments. Default 'ASC'.
 * }
 * @return WP_Comment[]|int[]|int The approved comments, or number of comments if `$count`
 *                                argument is true.
 */
    public function getApprovedComments(int $postId, array $args = []): array|int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves comment data given a comment ID or comment object.
 *
 * If an object is passed then the comment data will be cached and then returned
 * after being passed through a filter. If the comment is empty, then the global
 * comment variable will be used, if it is set.
 *
 * @since 2.0.0
 *
 * @global WP_Comment $comment Global comment object.
 *
 * @param \WP_Comment|string|int $comment Comment to retrieve.
 * @param string $output  Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                                       correspond to a WP_Comment object, an associative array, or a numeric array,
 *                                       respectively. Default OBJECT.
 * @return \WP_Comment|array|null Depends on $output value.
 */
    public function getComment(\WP_Comment|string|int $comment = null, string $output = OBJECT): \WP_Comment|array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of comments.
 *
 * The comment list can be for the blog as a whole or for an individual post.
 *
 * @since 2.7.0
 *
 * @param string|array $args Optional. Array or string of arguments. See WP_Comment_Query::__construct()
 *                           for information on accepted arguments. Default empty string.
 * @return WP_Comment[]|int[]|int List of comments or number of found comments if `$count` argument is true.
 */
    public function getComments(string|array $args = ''): array|int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all of the WordPress supported comment statuses.
 *
 * Comments have a limited set of valid status values, this provides the comment
 * status values and descriptions.
 *
 * @since 2.7.0
 *
 * @return string[] List of comment status labels keyed by status.
 */
    public function getCommentStatuses(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the default comment status for a post type.
 *
 * @since 4.3.0
 *
 * @param string $postType    Optional. Post type. Default 'post'.
 * @param string $commentType Optional. Comment type. Default 'comment'.
 * @return string Either 'open' or 'closed'.
 */
    public function getDefaultCommentStatus(string $postType = 'post', string $commentType = 'comment'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the date the last comment was modified.
 *
 * @since 1.5.0
 * @since 4.7.0 Replaced caching the modified date in a local static variable
 *              with the Object Cache API.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $timezone Which timezone to use in reference to 'gmt', 'blog', or 'server' locations.
 * @return string|false Last comment modified date on success, false on failure.
 */
    public function getLastcommentmodified(string $timezone = 'server'): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the total comment counts for the whole site or a single post.
 *
 * @since 2.0.0
 *
 * @param int $postId Optional. Restrict the comment counts to the given post. Default 0, which indicates that
 *                     comment counts for the whole site will be retrieved.
 * @return int[] {
 *     The number of comments keyed by their status.
 *
 *     @type int $approved            The number of approved comments.
 *     @type int $awaiting_moderation The number of comments awaiting moderation (a.k.a. pending).
 *     @type int $spam                The number of spam comments.
 *     @type int $trash               The number of trashed comments.
 *     @type int $post-trashed        The number of comments for posts that are in the trash.
 *     @type int $total_comments      The total number of non-trashed comments, including spam.
 *     @type int $all                 The total number of pending or approved comments.
 * }
 */
    public function getCommentCount(int $postId = 0): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds meta data field to a comment.
 *
 * @since 2.9.0
 *
 * @link https://developer.wordpress.org/reference/functions/add_comment_meta/
 *
 * @param int $commentId Comment ID.
 * @param string $metaKey   Metadata name.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param bool $unique     Optional. Whether the same key should not be added.
 *                           Default false.
 * @return int|false Meta ID on success, false on failure.
 */
    public function addCommentMeta(int $commentId, string $metaKey, mixed $metaValue, bool $unique = false): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes metadata matching criteria from a comment.
 *
 * You can match based on the key, or key and value. Removing based on key and
 * value, will keep from removing duplicate metadata with the same key. It also
 * allows removing all metadata matching key, if needed.
 *
 * @since 2.9.0
 *
 * @link https://developer.wordpress.org/reference/functions/delete_comment_meta/
 *
 * @param int $commentId Comment ID.
 * @param string $metaKey   Metadata name.
 * @param mixed $metaValue Optional. Metadata value. If provided,
 *                           rows will only be removed that match the value.
 *                           Must be serializable if non-scalar. Default empty string.
 * @return bool True on success, false on failure.
 */
    public function deleteCommentMeta(int $commentId, string $metaKey, mixed $metaValue = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves comment meta field for a comment.
 *
 * @since 2.9.0
 *
 * @link https://developer.wordpress.org/reference/functions/get_comment_meta/
 *
 * @param int $commentId Comment ID.
 * @param string $key        Optional. The meta key to retrieve. By default,
 *                           returns data for all keys. Default empty string.
 * @param bool $single     Optional. Whether to return a single value.
 *                           This parameter has no effect if `$key` is not specified.
 *                           Default false.
 * @return mixed An array of values if `$single` is false.
 *               The value of meta data field if `$single` is true.
 *               False for an invalid `$comment_id` (non-numeric, zero, or negative value).
 *               An empty string if a valid but non-existing comment ID is passed.
 */
    public function getCommentMeta(int $commentId, string $key = '', bool $single = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Queue comment meta for lazy-loading.
 *
 * @since 6.3.0
 *
 * @param array $commentIds List of comment IDs.
 */
    public function wpLazyloadCommentMeta(array $commentIds): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates comment meta field based on comment ID.
 *
 * Use the $prev_value parameter to differentiate between meta fields with the
 * same key and comment ID.
 *
 * If the meta field for the comment does not exist, it will be added.
 *
 * @since 2.9.0
 *
 * @link https://developer.wordpress.org/reference/functions/update_comment_meta/
 *
 * @param int $commentId Comment ID.
 * @param string $metaKey   Metadata key.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param mixed $prevValue Optional. Previous value to check before updating.
 *                           If specified, only update existing metadata entries with
 *                           this value. Otherwise, update all entries. Default empty string.
 * @return int|bool Meta ID if the key didn't exist, true on successful update,
 *                  false on failure or if the value passed to the function
 *                  is the same as the one that is already in the database.
 */
    public function updateCommentMeta(int $commentId, string $metaKey, mixed $metaValue, mixed $prevValue = ''): int|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the cookies used to store an unauthenticated commentator's identity. Typically used
 * to recall previous comments by this commentator that are still held in moderation.
 *
 * @since 3.4.0
 * @since 4.9.6 The `$cookies_consent` parameter was added.
 *
 * @param \WP_Comment $comment         Comment object.
 * @param \WP_User $user            Comment author's user object. The user may not exist.
 * @param bool $cookiesConsent Optional. Comment author's consent to store cookies. Default true.
 */
    public function wpSetCommentCookies(\WP_Comment $comment, \WP_User $user, bool $cookiesConsent = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes the cookies sent to the user already.
 *
 * Will only do anything if the cookies have already been created for the user.
 * Mostly used after cookies had been sent to use elsewhere.
 *
 * @since 2.0.4
 */
    public function sanitizeCommentCookies(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates whether this comment is allowed to be made.
 *
 * @since 2.0.0
 * @since 4.7.0 The `$avoid_die` parameter was added, allowing the function
 *              to return a WP_Error object instead of dying.
 * @since 5.5.0 The `$avoid_die` parameter was renamed to `$wp_error`.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array $commentdata Contains information on the comment.
 * @param bool $wpError    When true, a disallowed comment will result in the function
 *                           returning a WP_Error object, rather than executing wp_die().
 *                           Default false.
 * @return int|string|\WP_Error Allowed comments return the approval status (0|1|'spam'|'trash').
 *                             If `$wp_error` is true, disallowed comments return a WP_Error.
 */
    public function wpAllowComment(array $commentdata, bool $wpError = false): int|string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Hooks WP's native database-based comment-flood check.
 *
 * This wrapper maintains backward compatibility with plugins that expect to
 * be able to unhook the legacy check_comment_flood_db() function from
 * 'check_comment_flood' using remove_action().
 *
 * @since 2.3.0
 * @since 4.7.0 Converted to be an add_filter() wrapper.
 */
    public function checkCommentFloodDb(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether comment flooding is occurring.
 *
 * Won't run, if current user can manage options, so to not block
 * administrators.
 *
 * @since 4.7.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param bool $isFlood  Is a comment flooding occurring?
 * @param string $ip        Comment author's IP address.
 * @param string $email     Comment author's email address.
 * @param string $date      MySQL time string.
 * @param bool $avoidDie When true, a disallowed comment will result in the function
 *                          returning without executing wp_die() or die(). Default false.
 * @return bool Whether comment flooding is occurring.
 */
    public function wpCheckCommentFlood(bool $isFlood, string $ip, string $email, string $date, bool $avoidDie = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Separates an array of comments into an array keyed by comment_type.
 *
 * @since 2.7.0
 *
 * @param WP_Comment[] $comments Array of comments
 * @return WP_Comment[] Array of comments keyed by comment_type.
 */
    public function separateComments(array $comments): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calculates the total number of comment pages.
 *
 * @since 2.7.0
 *
 * @uses Walker_Comment
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param WP_Comment[] $comments Optional. Array of WP_Comment objects. Defaults to `$wp_query->comments`.
 * @param int $perPage Optional. Comments per page. Defaults to the value of `comments_per_page`
 *                               query var, option of the same name, or 1 (in that order).
 * @param bool $threaded Optional. Control over flat or threaded comments. Defaults to the value
 *                               of `thread_comments` option.
 * @return int Number of comment pages.
 */
    public function getCommentPagesCount(array $comments = null, int $perPage = null, bool $threaded = null): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calculates what page number a comment will appear on for comment paging.
 *
 * @since 2.7.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $commentId Comment ID.
 * @param array $args {
 *     Array of optional arguments.
 *
 *     @type string     $type      Limit paginated comments to those matching a given type.
 *                                 Accepts 'comment', 'trackback', 'pingback', 'pings'
 *                                 (trackbacks and pingbacks), or 'all'. Default 'all'.
 *     @type int        $per_page  Per-page count to use when calculating pagination.
 *                                 Defaults to the value of the 'comments_per_page' option.
 *     @type int|string $max_depth If greater than 1, comment page will be determined
 *                                 for the top-level parent `$comment_id`.
 *                                 Defaults to the value of the 'thread_comments_depth' option.
 * }
 * @return int|null Comment page number or null on error.
 */
    public function getPageOfComment(int $commentId, array $args = []): int|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the maximum character lengths for the comment form fields.
 *
 * @since 4.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return int[] Array of maximum lengths keyed by field name.
 */
    public function wpGetCommentFieldsMaxLengths(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Compares the lengths of comment data against the maximum character limits.
 *
 * @since 4.7.0
 *
 * @param array $commentData Array of arguments for inserting a comment.
 * @return \WP_Error|true WP_Error when a comment field exceeds the limit,
 *                       otherwise true.
 */
    public function wpCheckCommentDataMaxLengths(array $commentData): \WP_Error|true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if a comment contains disallowed characters or words.
 *
 * @since 5.5.0
 *
 * @param string $author The author of the comment
 * @param string $email The email of the comment
 * @param string $url The url used in the comment
 * @param string $comment The comment content
 * @param string $userIp The comment author's IP address
 * @param string $userAgent The author's browser user agent
 * @return bool True if comment contains disallowed content, false if comment does not
 */
    public function wpCheckCommentDisallowedList(string $author, string $email, string $url, string $comment, string $userIp, string $userAgent): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the total comment counts for the whole site or a single post.
 *
 * The comment stats are cached and then retrieved, if they already exist in the
 * cache.
 *
 * @see get_comment_count() Which handles fetching the live comment counts.
 *
 * @since 2.5.0
 *
 * @param int $postId Optional. Restrict the comment counts to the given post. Default 0, which indicates that
 *                     comment counts for the whole site will be retrieved.
 * @return \stdClass {
 *     The number of comments keyed by their status.
 *
 *     @type int $approved       The number of approved comments.
 *     @type int $moderated      The number of comments awaiting moderation (a.k.a. pending).
 *     @type int $spam           The number of spam comments.
 *     @type int $trash          The number of trashed comments.
 *     @type int $post-trashed   The number of comments for posts that are in the trash.
 *     @type int $total_comments The total number of non-trashed comments, including spam.
 *     @type int $all            The total number of pending or approved comments.
 * }
 */
    public function wpCountComments(int $postId = 0): \stdClass
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Trashes or deletes a comment.
 *
 * The comment is moved to Trash instead of permanently deleted unless Trash is
 * disabled, item is already in the Trash, or $force_delete is true.
 *
 * The post comment count will be updated if the comment was approved and has a
 * post ID available.
 *
 * @since 2.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|\WP_Comment $commentId   Comment ID or WP_Comment object.
 * @param bool $forceDelete Whether to bypass Trash and force deletion. Default false.
 * @return bool True on success, false on failure.
 */
    public function wpDeleteComment(int|\WP_Comment $commentId, bool $forceDelete = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Moves a comment to the Trash
 *
 * If Trash is disabled, comment is permanently deleted.
 *
 * @since 2.9.0
 *
 * @param int|\WP_Comment $commentId Comment ID or WP_Comment object.
 * @return bool True on success, false on failure.
 */
    public function wpTrashComment(int|\WP_Comment $commentId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a comment from the Trash
 *
 * @since 2.9.0
 *
 * @param int|\WP_Comment $commentId Comment ID or WP_Comment object.
 * @return bool True on success, false on failure.
 */
    public function wpUntrashComment(int|\WP_Comment $commentId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Marks a comment as Spam.
 *
 * @since 2.9.0
 *
 * @param int|\WP_Comment $commentId Comment ID or WP_Comment object.
 * @return bool True on success, false on failure.
 */
    public function wpSpamComment(int|\WP_Comment $commentId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a comment from the Spam.
 *
 * @since 2.9.0
 *
 * @param int|\WP_Comment $commentId Comment ID or WP_Comment object.
 * @return bool True on success, false on failure.
 */
    public function wpUnspamComment(int|\WP_Comment $commentId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the status of a comment by comment ID.
 *
 * @since 1.0.0
 *
 * @param int|\WP_Comment $commentId Comment ID or WP_Comment object
 * @return string|false Status might be 'trash', 'approved', 'unapproved', 'spam'. False on failure.
 */
    public function wpGetCommentStatus(int|\WP_Comment $commentId): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calls hooks for when a comment status transition occurs.
 *
 * Calls hooks for comment status transitions. If the new comment status is not the same
 * as the previous comment status, then two hooks will be ran, the first is
 * {@see 'transition_comment_status'} with new status, old status, and comment data.
 * The next action called is {@see 'comment_$old_status_to_$new_status'}. It has
 * the comment data.
 *
 * The final action will run whether or not the comment statuses are the same.
 * The action is named {@see 'comment_$new_status_$comment->comment_type'}.
 *
 * @since 2.7.0
 *
 * @param string $newStatus New comment status.
 * @param string $oldStatus Previous comment status.
 * @param \WP_Comment $comment    Comment object.
 */
    public function wpTransitionCommentStatus(string $newStatus, string $oldStatus, \WP_Comment $comment): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets current commenter's name, email, and URL.
 *
 * Expects cookies content to already be sanitized. User of this function might
 * wish to recheck the returned array for validity.
 *
 * @see sanitize_comment_cookies() Use to sanitize cookies
 *
 * @since 2.0.4
 *
 * @return array {
 *     An array of current commenter variables.
 *
 *     @type string $comment_author       The name of the current commenter, or an empty string.
 *     @type string $comment_author_email The email address of the current commenter, or an empty string.
 *     @type string $comment_author_url   The URL address of the current commenter, or an empty string.
 * }
 */
    public function wpGetCurrentCommenter(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets unapproved comment author's email.
 *
 * Used to allow the commenter to see their pending comment.
 *
 * @since 5.1.0
 * @since 5.7.0 The window within which the author email for an unapproved comment
 *              can be retrieved was extended to 10 minutes.
 *
 * @return string The unapproved comment author's email (when supplied).
 */
    public function wpGetUnapprovedCommentAuthorEmail(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Inserts a comment into the database.
 *
 * @since 2.0.0
 * @since 4.4.0 Introduced the `$comment_meta` argument.
 * @since 5.5.0 Default value for `$comment_type` argument changed to `comment`.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array $commentdata {
 *     Array of arguments for inserting a new comment.
 *
 *     @type string     $comment_agent        The HTTP user agent of the `$comment_author` when
 *                                            the comment was submitted. Default empty.
 *     @type int|string $comment_approved     Whether the comment has been approved. Default 1.
 *     @type string     $comment_author       The name of the author of the comment. Default empty.
 *     @type string     $comment_author_email The email address of the `$comment_author`. Default empty.
 *     @type string     $comment_author_IP    The IP address of the `$comment_author`. Default empty.
 *     @type string     $comment_author_url   The URL address of the `$comment_author`. Default empty.
 *     @type string     $comment_content      The content of the comment. Default empty.
 *     @type string     $comment_date         The date the comment was submitted. To set the date
 *                                            manually, `$comment_date_gmt` must also be specified.
 *                                            Default is the current time.
 *     @type string     $comment_date_gmt     The date the comment was submitted in the GMT timezone.
 *                                            Default is `$comment_date` in the site's GMT timezone.
 *     @type int        $comment_karma        The karma of the comment. Default 0.
 *     @type int        $comment_parent       ID of this comment's parent, if any. Default 0.
 *     @type int        $comment_post_ID      ID of the post that relates to the comment, if any.
 *                                            Default 0.
 *     @type string     $comment_type         Comment type. Default 'comment'.
 *     @type array      $comment_meta         Optional. Array of key/value pairs to be stored in commentmeta for the
 *                                            new comment.
 *     @type int        $user_id              ID of the user who submitted the comment. Default 0.
 * }
 * @return int|false The new comment's ID on success, false on failure.
 */
    public function wpInsertComment(array $commentdata): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters and sanitizes comment data.
 *
 * Sets the comment data 'filtered' field to true when finished. This can be
 * checked as to whether the comment should be filtered and to keep from
 * filtering the same comment more than once.
 *
 * @since 2.0.0
 *
 * @param array $commentdata Contains information on the comment.
 * @return array Parsed comment information.
 */
    public function wpFilterComment(array $commentdata): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a comment should be blocked because of comment flood.
 *
 * @since 2.1.0
 *
 * @param bool $block            Whether plugin has already blocked comment.
 * @param int $timeLastcomment Timestamp for last comment.
 * @param int $timeNewcomment  Timestamp for new comment.
 * @return bool Whether comment should be blocked.
 */
    public function wpThrottleCommentFlood(bool $block, int $timeLastcomment, int $timeNewcomment): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new comment to the database.
 *
 * Filters new comment to ensure that the fields are sanitized and valid before
 * inserting comment into database. Calls {@see 'comment_post'} action with comment ID
 * and whether comment is approved by WordPress. Also has {@see 'preprocess_comment'}
 * filter for processing the comment data before the function handles it.
 *
 * We use `REMOTE_ADDR` here directly. If you are behind a proxy, you should ensure
 * that it is properly set, such as in wp-config.php, for your environment.
 *
 * See {@link https://core.trac.wordpress.org/ticket/9235}
 *
 * @since 1.5.0
 * @since 4.3.0 Introduced the `comment_agent` and `comment_author_IP` arguments.
 * @since 4.7.0 The `$avoid_die` parameter was added, allowing the function
 *              to return a WP_Error object instead of dying.
 * @since 5.5.0 The `$avoid_die` parameter was renamed to `$wp_error`.
 * @since 5.5.0 Introduced the `comment_type` argument.
 *
 * @see wp_insert_comment()
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array $commentdata {
 *     Comment data.
 *
 *     @type string $comment_author       The name of the comment author.
 *     @type string $comment_author_email The comment author email address.
 *     @type string $comment_author_url   The comment author URL.
 *     @type string $comment_content      The content of the comment.
 *     @type string $comment_date         The date the comment was submitted. Default is the current time.
 *     @type string $comment_date_gmt     The date the comment was submitted in the GMT timezone.
 *                                        Default is `$comment_date` in the GMT timezone.
 *     @type string $comment_type         Comment type. Default 'comment'.
 *     @type int    $comment_parent       The ID of this comment's parent, if any. Default 0.
 *     @type int    $comment_post_ID      The ID of the post that relates to the comment.
 *     @type int    $user_id              The ID of the user who submitted the comment. Default 0.
 *     @type int    $user_ID              Kept for backward-compatibility. Use `$user_id` instead.
 *     @type string $comment_agent        Comment author user agent. Default is the value of 'HTTP_USER_AGENT'
 *                                        in the `$_SERVER` superglobal sent in the original request.
 *     @type string $comment_author_IP    Comment author IP address in IPv4 format. Default is the value of
 *                                        'REMOTE_ADDR' in the `$_SERVER` superglobal sent in the original request.
 * }
 * @param bool $wpError Should errors be returned as WP_Error objects instead of
 *                        executing wp_die()? Default false.
 * @return int|false|\WP_Error The ID of the comment on success, false or WP_Error on failure.
 */
    public function wpNewComment(array $commentdata, bool $wpError = false): int|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a comment moderation notification to the comment moderator.
 *
 * @since 4.4.0
 *
 * @param int $commentId ID of the comment.
 * @return bool True on success, false on failure.
 */
    public function wpNewCommentNotifyModerator(int $commentId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a notification of a new comment to the post author.
 *
 * @since 4.4.0
 *
 * Uses the {@see 'notify_post_author'} filter to determine whether the post author
 * should be notified when a new comment is added, overriding site setting.
 *
 * @param int $commentId Comment ID.
 * @return bool True on success, false on failure.
 */
    public function wpNewCommentNotifyPostauthor(int $commentId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the status of a comment.
 *
 * The {@see 'wp_set_comment_status'} action is called after the comment is handled.
 * If the comment status is not in the list, then false is returned.
 *
 * @since 1.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|\WP_Comment $commentId     Comment ID or WP_Comment object.
 * @param string $commentStatus New comment status, either 'hold', 'approve', 'spam', or 'trash'.
 * @param bool $wpError       Whether to return a WP_Error object if there is a failure. Default false.
 * @return bool|\WP_Error True on success, false or WP_Error on failure.
 */
    public function wpSetCommentStatus(int|\WP_Comment $commentId, string $commentStatus, bool $wpError = false): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates an existing comment in the database.
 *
 * Filters the comment and makes sure certain fields are valid before updating.
 *
 * @since 2.0.0
 * @since 4.9.0 Add updating comment meta during comment update.
 * @since 5.5.0 The `$wp_error` parameter was added.
 * @since 5.5.0 The return values for an invalid comment or post ID
 *              were changed to false instead of 0.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array $commentarr Contains information on the comment.
 * @param bool $wpError   Optional. Whether to return a WP_Error on failure. Default false.
 * @return int|false|\WP_Error The value 1 if the comment was updated, 0 if not updated.
 *                            False or a WP_Error object on failure.
 */
    public function wpUpdateComment(array $commentarr, bool $wpError = false): int|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether to defer comment counting.
 *
 * When setting $defer to true, all post comment counts will not be updated
 * until $defer is set to false. When $defer is set to false, then all
 * previously deferred updated post comment counts will then be automatically
 * updated without having to call wp_update_comment_count() after.
 *
 * @since 2.5.0
 *
 * @param bool $defer
 * @return bool
 */
    public function wpDeferCommentCounting(bool $defer = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the comment count for post(s).
 *
 * When $do_deferred is false (is by default) and the comments have been set to
 * be deferred, the post_id will be added to a queue, which will be updated at a
 * later date and only updated once per post ID.
 *
 * If the comments have not be set up to be deferred, then the post will be
 * updated. When $do_deferred is set to true, then all previous deferred post
 * IDs will be updated along with the current $post_id.
 *
 * @since 2.1.0
 *
 * @see wp_update_comment_count_now() For what could cause a false return value
 *
 * @param int|null $postId     Post ID.
 * @param bool $doDeferred Optional. Whether to process previously deferred
 *                              post comment counts. Default false.
 * @return bool|void True on success, false on failure or if post with ID does
 *                   not exist.
 */
    public function wpUpdateCommentCount(int|null $postId, bool $doDeferred = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the comment count for the post.
 *
 * @since 2.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $postId Post ID
 * @return bool True on success, false if the post does not exist.
 */
    public function wpUpdateCommentCountNow(int $postId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds a pingback server URI based on the given URL.
 *
 * Checks the HTML for the rel="pingback" link and X-Pingback headers. It does
 * a check for the X-Pingback headers first and returns that, if available.
 * The check for the rel="pingback" has more overhead than just the header.
 *
 * @since 1.5.0
 *
 * @param string $url        URL to ping.
 * @param string $deprecated Not Used.
 * @return string|false String containing URI on success, false on failure.
 */
    public function discoverPingbackServerUri(string $url, string $deprecated = ''): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs all pingbacks, enclosures, trackbacks, and sends to pingback services.
 *
 * @since 2.1.0
 * @since 5.6.0 Introduced `do_all_pings` action hook for individual services.
 */
    public function doAllPings(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs all pingbacks.
 *
 * @since 5.6.0
 */
    public function doAllPingbacks(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs all enclosures.
 *
 * @since 5.6.0
 */
    public function doAllEnclosures(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs all trackbacks.
 *
 * @since 5.6.0
 */
    public function doAllTrackbacks(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs trackbacks.
 *
 * @since 1.5.0
 * @since 4.7.0 `$post` can be a WP_Post object.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|\WP_Post $post Post ID or object to do trackbacks on.
 * @return void|false Returns false on failure.
 */
    public function doTrackbacks(int|\WP_Post $post): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends pings to all of the ping site services.
 *
 * @since 1.2.0
 *
 * @param int $postId Post ID.
 * @return int Same post ID as provided.
 */
    public function genericPing(int $postId = 0): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Pings back the links found in a post.
 *
 * @since 0.71
 * @since 4.7.0 `$post` can be a WP_Post object.
 *
 * @param string $content Post content to check for links. If empty will retrieve from post.
 * @param int|\WP_Post $post    Post ID or object.
 */
    public function pingback(string $content, int|\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether blog is public before returning sites.
 *
 * @since 2.1.0
 *
 * @param mixed $sites Will return if blog is public, will not return if not public.
 * @return mixed Empty string if blog is not public, returns $sites, if site is public.
 */
    public function privacyPingFilter(mixed $sites): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a Trackback.
 *
 * Updates database when sending trackback to prevent duplicates.
 *
 * @since 0.71
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $trackbackUrl URL to send trackbacks.
 * @param string $title         Title of post.
 * @param string $excerpt       Excerpt of post.
 * @param int $postId       Post ID.
 * @return int|false|void Database query from update.
 */
    public function trackback(string $trackbackUrl, string $title, string $excerpt, int $postId): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a pingback.
 *
 * @since 1.2.0
 *
 * @param string $server Host of blog to connect to.
 * @param string $path Path to send the ping.
 */
    public function weblogPing(string $server = '', string $path = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Default filter attached to pingback_ping_source_uri to validate the pingback's Source URI.
 *
 * @since 3.5.1
 *
 * @see wp_http_validate_url()
 *
 * @param string $sourceUri
 * @return string
 */
    public function pingbackPingSourceUri(string $sourceUri): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Default filter attached to xmlrpc_pingback_error.
 *
 * Returns a generic pingback error code unless the error code is 48,
 * which reports that the pingback is already registered.
 *
 * @since 3.5.1
 *
 * @link https://www.hixie.ch/specs/pingback/pingback#TOC3
 *
 * @param \IXR_Error $ixrError
 * @return \IXR_Error
 */
    public function xmlrpcPingbackError(\IXR_Error $ixrError): \IXR_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a comment from the object cache.
 *
 * @since 2.3.0
 *
 * @param int|array $ids Comment ID or an array of comment IDs to remove from cache.
 */
    public function cleanCommentCache(int|array $ids): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the comment cache of given comments.
 *
 * Will add the comments in $comments to the cache. If comment ID already exists
 * in the comment cache then it will not be updated. The comment is added to the
 * cache using the comment group with the key using the ID of the comments.
 *
 * @since 2.3.0
 * @since 4.4.0 Introduced the `$update_meta_cache` parameter.
 *
 * @param WP_Comment[] $comments          Array of comment objects
 * @param bool $updateMetaCache Whether to update commentmeta cache. Default true.
 */
    public function updateCommentCache(array $comments, bool $updateMetaCache = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles the submission of a comment, usually posted to wp-comments-post.php via a comment form.
 *
 * This function expects unslashed data, as opposed to functions such as `wp_new_comment()` which
 * expect slashed data.
 *
 * @since 4.4.0
 *
 * @param array $commentData {
 *     Comment data.
 *
 *     @type string|int $comment_post_ID             The ID of the post that relates to the comment.
 *     @type string     $author                      The name of the comment author.
 *     @type string     $email                       The comment author email address.
 *     @type string     $url                         The comment author URL.
 *     @type string     $comment                     The content of the comment.
 *     @type string|int $comment_parent              The ID of this comment's parent, if any. Default 0.
 *     @type string     $_wp_unfiltered_html_comment The nonce value for allowing unfiltered HTML.
 * }
 * @return \WP_Comment|\WP_Error A WP_Comment object on success, a WP_Error object on failure.
 */
    public function wpHandleCommentSubmission(array $commentData): \WP_Comment|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the personal data exporter for comments.
 *
 * @since 4.9.6
 *
 * @param array[] $exporters An array of personal data exporters.
 * @return array[] An array of personal data exporters.
 */
    public function wpRegisterCommentPersonalDataExporter(array $exporters): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds and exports personal data associated with an email address from the comments table.
 *
 * @since 4.9.6
 *
 * @param string $emailAddress The comment author email address.
 * @param int $page          Comment page number.
 * @return array {
 *     An array of personal data.
 *
 *     @type array[] $data An array of personal data arrays.
 *     @type bool    $done Whether the exporter is finished.
 * }
 */
    public function wpCommentsPersonalDataExporter(string $emailAddress, int $page = 1): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the personal data eraser for comments.
 *
 * @since 4.9.6
 *
 * @param array $erasers An array of personal data erasers.
 * @return array An array of personal data erasers.
 */
    public function wpRegisterCommentPersonalDataEraser(array $erasers): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Erases personal data associated with an email address from the comments table.
 *
 * @since 4.9.6
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $emailAddress The comment author email address.
 * @param int $page          Comment page number.
 * @return array {
 *     Data removal results.
 *
 *     @type bool     $items_removed  Whether items were actually removed.
 *     @type bool     $items_retained Whether items were retained.
 *     @type string[] $messages       An array of messages to add to the personal data export file.
 *     @type bool     $done           Whether the eraser is finished.
 * }
 */
    public function wpCommentsPersonalDataEraser(string $emailAddress, int $page = 1): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the last changed time for the 'comment' cache group.
 *
 * @since 5.0.0
 */
    public function wpCacheSetCommentsLastChanged(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Schedules an event to run only once.
 *
 * Schedules a hook which will be triggered by WordPress at the specified UTC time.
 * The action will trigger when someone visits your WordPress site if the scheduled
 * time has passed.
 *
 * Note that scheduling an event to occur within 10 minutes of an existing event
 * with the same action hook will be ignored unless you pass unique `$args` values
 * for each scheduled event.
 *
 * Use wp_next_scheduled() to prevent duplicate events.
 *
 * Use wp_schedule_event() to schedule a recurring event.
 *
 * @since 2.1.0
 * @since 5.1.0 Return value modified to boolean indicating success or failure,
 *              {@see 'pre_schedule_event'} filter added to short-circuit the function.
 * @since 5.7.0 The `$wp_error` parameter was added.
 *
 * @link https://developer.wordpress.org/reference/functions/wp_schedule_single_event/
 *
 * @param int $timestamp  Unix timestamp (UTC) for when to next run the event.
 * @param string $hook       Action hook to execute when the event is run.
 * @param array $args       Optional. Array containing arguments to pass to the
 *                           hook's callback function. Each value in the array
 *                           is passed to the callback as an individual parameter.
 *                           The array keys are ignored. Default empty array.
 * @param bool $wpError   Optional. Whether to return a WP_Error on failure. Default false.
 * @return bool|\WP_Error True if event successfully scheduled. False or WP_Error on failure.
 */
    public function wpScheduleSingleEvent(int $timestamp, string $hook, array $args = [], bool $wpError = false): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Schedules a recurring event.
 *
 * Schedules a hook which will be triggered by WordPress at the specified interval.
 * The action will trigger when someone visits your WordPress site if the scheduled
 * time has passed.
 *
 * Valid values for the recurrence are 'hourly', 'twicedaily', 'daily', and 'weekly'.
 * These can be extended using the {@see 'cron_schedules'} filter in wp_get_schedules().
 *
 * Use wp_next_scheduled() to prevent duplicate events.
 *
 * Use wp_schedule_single_event() to schedule a non-recurring event.
 *
 * @since 2.1.0
 * @since 5.1.0 Return value modified to boolean indicating success or failure,
 *              {@see 'pre_schedule_event'} filter added to short-circuit the function.
 * @since 5.7.0 The `$wp_error` parameter was added.
 *
 * @link https://developer.wordpress.org/reference/functions/wp_schedule_event/
 *
 * @param int $timestamp  Unix timestamp (UTC) for when to next run the event.
 * @param string $recurrence How often the event should subsequently recur.
 *                           See wp_get_schedules() for accepted values.
 * @param string $hook       Action hook to execute when the event is run.
 * @param array $args       Optional. Array containing arguments to pass to the
 *                           hook's callback function. Each value in the array
 *                           is passed to the callback as an individual parameter.
 *                           The array keys are ignored. Default empty array.
 * @param bool $wpError   Optional. Whether to return a WP_Error on failure. Default false.
 * @return bool|\WP_Error True if event successfully scheduled. False or WP_Error on failure.
 */
    public function wpScheduleEvent(int $timestamp, string $recurrence, string $hook, array $args = [], bool $wpError = false): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Reschedules a recurring event.
 *
 * Mainly for internal use, this takes the UTC timestamp of a previously run
 * recurring event and reschedules it for its next run.
 *
 * To change upcoming scheduled events, use wp_schedule_event() to
 * change the recurrence frequency.
 *
 * @since 2.1.0
 * @since 5.1.0 Return value modified to boolean indicating success or failure,
 *              {@see 'pre_reschedule_event'} filter added to short-circuit the function.
 * @since 5.7.0 The `$wp_error` parameter was added.
 *
 * @param int $timestamp  Unix timestamp (UTC) for when the event was scheduled.
 * @param string $recurrence How often the event should subsequently recur.
 *                           See wp_get_schedules() for accepted values.
 * @param string $hook       Action hook to execute when the event is run.
 * @param array $args       Optional. Array containing arguments to pass to the
 *                           hook's callback function. Each value in the array
 *                           is passed to the callback as an individual parameter.
 *                           The array keys are ignored. Default empty array.
 * @param bool $wpError   Optional. Whether to return a WP_Error on failure. Default false.
 * @return bool|\WP_Error True if event successfully rescheduled. False or WP_Error on failure.
 */
    public function wpRescheduleEvent(int $timestamp, string $recurrence, string $hook, array $args = [], bool $wpError = false): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unschedules a previously scheduled event.
 *
 * The `$timestamp` and `$hook` parameters are required so that the event can be
 * identified.
 *
 * @since 2.1.0
 * @since 5.1.0 Return value modified to boolean indicating success or failure,
 *              {@see 'pre_unschedule_event'} filter added to short-circuit the function.
 * @since 5.7.0 The `$wp_error` parameter was added.
 *
 * @param int $timestamp Unix timestamp (UTC) of the event.
 * @param string $hook      Action hook of the event.
 * @param array $args      Optional. Array containing each separate argument to pass to the hook's callback function.
 *                          Although not passed to a callback, these arguments are used to uniquely identify the
 *                          event, so they should be the same as those used when originally scheduling the event.
 *                          Default empty array.
 * @param bool $wpError  Optional. Whether to return a WP_Error on failure. Default false.
 * @return bool|\WP_Error True if event successfully unscheduled. False or WP_Error on failure.
 */
    public function wpUnscheduleEvent(int $timestamp, string $hook, array $args = [], bool $wpError = false): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unschedules all events attached to the hook with the specified arguments.
 *
 * Warning: This function may return boolean false, but may also return a non-boolean
 * value which evaluates to false. For information about casting to booleans see the
 * {@link https://www.php.net/manual/en/language.types.boolean.php PHP documentation}. Use
 * the `===` operator for testing the return value of this function.
 *
 * @since 2.1.0
 * @since 5.1.0 Return value modified to indicate success or failure,
 *              {@see 'pre_clear_scheduled_hook'} filter added to short-circuit the function.
 * @since 5.7.0 The `$wp_error` parameter was added.
 *
 * @param string $hook     Action hook, the execution of which will be unscheduled.
 * @param array $args     Optional. Array containing each separate argument to pass to the hook's callback function.
 *                         Although not passed to a callback, these arguments are used to uniquely identify the
 *                         event, so they should be the same as those used when originally scheduling the event.
 *                         Default empty array.
 * @param bool $wpError Optional. Whether to return a WP_Error on failure. Default false.
 * @return int|false|\WP_Error On success an integer indicating number of events unscheduled (0 indicates no
 *                            events were registered with the hook and arguments combination), false or WP_Error
 *                            if unscheduling one or more events fail.
 */
    public function wpClearScheduledHook(string $hook, array $args = [], bool $wpError = false): int|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unschedules all events attached to the hook.
 *
 * Can be useful for plugins when deactivating to clean up the cron queue.
 *
 * Warning: This function may return boolean false, but may also return a non-boolean
 * value which evaluates to false. For information about casting to booleans see the
 * {@link https://www.php.net/manual/en/language.types.boolean.php PHP documentation}. Use
 * the `===` operator for testing the return value of this function.
 *
 * @since 4.9.0
 * @since 5.1.0 Return value added to indicate success or failure.
 * @since 5.7.0 The `$wp_error` parameter was added.
 *
 * @param string $hook     Action hook, the execution of which will be unscheduled.
 * @param bool $wpError Optional. Whether to return a WP_Error on failure. Default false.
 * @return int|false|\WP_Error On success an integer indicating number of events unscheduled (0 indicates no
 *                            events were registered on the hook), false or WP_Error if unscheduling fails.
 */
    public function wpUnscheduleHook(string $hook, bool $wpError = false): int|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a scheduled event.
 *
 * Retrieves the full event object for a given event, if no timestamp is specified the next
 * scheduled event is returned.
 *
 * @since 5.1.0
 *
 * @param string $hook      Action hook of the event.
 * @param array $args      Optional. Array containing each separate argument to pass to the hook's callback function.
 *                            Although not passed to a callback, these arguments are used to uniquely identify the
 *                            event, so they should be the same as those used when originally scheduling the event.
 *                            Default empty array.
 * @param int|null $timestamp Optional. Unix timestamp (UTC) of the event. If not specified, the next scheduled event
 *                            is returned. Default null.
 * @return object|false {
 *     The event object. False if the event does not exist.
 *
 *     @type string       $hook      Action hook to execute when the event is run.
 *     @type int          $timestamp Unix timestamp (UTC) for when to next run the event.
 *     @type string|false $schedule  How often the event should subsequently recur.
 *     @type array        $args      Array containing each separate argument to pass to the hook's callback function.
 *     @type int          $interval  Optional. The interval time in seconds for the schedule. Only present for recurring events.
 * }
 */
    public function wpGetScheduledEvent(string $hook, array $args = [], int|null $timestamp = null): object|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the next timestamp for an event.
 *
 * @since 2.1.0
 *
 * @param string $hook Action hook of the event.
 * @param array $args Optional. Array containing each separate argument to pass to the hook's callback function.
 *                     Although not passed to a callback, these arguments are used to uniquely identify the
 *                     event, so they should be the same as those used when originally scheduling the event.
 *                     Default empty array.
 * @return int|false The Unix timestamp of the next time the event will occur. False if the event doesn't exist.
 */
    public function wpNextScheduled(string $hook, array $args = []): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a request to run cron through HTTP request that doesn't halt page loading.
 *
 * @since 2.1.0
 * @since 5.1.0 Return values added.
 *
 * @param int $gmtTime Optional. Unix timestamp (UTC). Default 0 (current time is used).
 * @return bool True if spawned, false if no events spawned.
 */
    public function spawnCron(int $gmtTime = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers _wp_cron() to run on the {@see 'wp_loaded'} action.
 *
 * If the {@see 'wp_loaded'} action has already fired, this function calls
 * _wp_cron() directly.
 *
 * Warning: This function may return Boolean FALSE, but may also return a non-Boolean
 * value which evaluates to FALSE. For information about casting to booleans see the
 * {@link https://www.php.net/manual/en/language.types.boolean.php PHP documentation}. Use
 * the `===` operator for testing the return value of this function.
 *
 * @since 2.1.0
 * @since 5.1.0 Return value added to indicate success or failure.
 * @since 5.7.0 Functionality moved to _wp_cron() to which this becomes a wrapper.
 *
 * @return false|int|void On success an integer indicating number of events spawned (0 indicates no
 *                        events needed to be spawned), false if spawning fails for one or more events or
 *                        void if the function registered _wp_cron() to run on the action.
 */
    public function wpCron(): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves supported event recurrence schedules.
 *
 * The default supported recurrences are 'hourly', 'twicedaily', 'daily', and 'weekly'.
 * A plugin may add more by hooking into the {@see 'cron_schedules'} filter.
 * The filter accepts an array of arrays. The outer array has a key that is the name
 * of the schedule, for example 'monthly'. The value is an array with two keys,
 * one is 'interval' and the other is 'display'.
 *
 * The 'interval' is a number in seconds of when the cron job should run.
 * So for 'hourly' the time is `HOUR_IN_SECONDS` (`60 * 60` or `3600`). For 'monthly',
 * the value would be `MONTH_IN_SECONDS` (`30 * 24 * 60 * 60` or `2592000`).
 *
 * The 'display' is the description. For the 'monthly' key, the 'display'
 * would be `__( 'Once Monthly' )`.
 *
 * For your plugin, you will be passed an array. You can add your
 * schedule by doing the following:
 *
 *     // Filter parameter variable name is 'array'.
 *     $array['monthly'] = array(
 *         'interval' => MONTH_IN_SECONDS,
 *         'display'  => __( 'Once Monthly' )
 *     );
 *
 * @since 2.1.0
 * @since 5.4.0 The 'weekly' schedule was added.
 *
 * @return array {
 *     The array of cron schedules keyed by the schedule name.
 *
 *     @type array ...$0 {
 *         Cron schedule information.
 *
 *         @type int    $interval The schedule interval in seconds.
 *         @type string $display  The schedule display name.
 *     }
 * }
 */
    public function wpGetSchedules(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the name of the recurrence schedule for an event.
 *
 * @see wp_get_schedules() for available schedules.
 *
 * @since 2.1.0
 * @since 5.1.0 {@see 'get_schedule'} filter added.
 *
 * @param string $hook Action hook to identify the event.
 * @param array $args Optional. Arguments passed to the event's callback function.
 *                     Default empty array.
 * @return string|false Schedule name on success, false if no schedule.
 */
    public function wpGetSchedule(string $hook, array $args = []): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves cron jobs ready to be run.
 *
 * Returns the results of _get_cron_array() limited to events ready to be run,
 * ie, with a timestamp in the past.
 *
 * @since 5.1.0
 *
 * @return array[] Array of cron job arrays ready to be run.
 */
    public function wpGetReadyCronJobs(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines initial WordPress constants.
 *
 * @see wp_debug_mode()
 *
 * @since 3.0.0
 *
 * @global int    $blog_id    The current site ID.
 * @global string $wp_version The WordPress version string.
 */
    public function wpInitialConstants(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines plugin directory WordPress constants.
 *
 * Defines must-use plugin directory constants, which may be overridden in the sunrise.php drop-in.
 *
 * @since 3.0.0
 */
    public function wpPluginDirectoryConstants(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines cookie-related WordPress constants.
 *
 * Defines constants after multisite is loaded.
 *
 * @since 3.0.0
 */
    public function wpCookieConstants(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines SSL-related WordPress constants.
 *
 * @since 3.0.0
 */
    public function wpSslConstants(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines functionality-related WordPress constants.
 *
 * @since 3.0.0
 */
    public function wpFunctionalityConstants(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines templating-related WordPress constants.
 *
 * @since 3.0.0
 */
    public function wpTemplatingConstants(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers an embed handler.
 *
 * Should probably only be used for sites that do not support oEmbed.
 *
 * @since 2.9.0
 *
 * @global WP_Embed $wp_embed WordPress Embed object.
 *
 * @param string $id       An internal ID/name for the handler. Needs to be unique.
 * @param string $regex    The regex that will be used to see if this handler should be used for a URL.
 * @param callable $callback The callback function that will be called if the regex is matched.
 * @param int $priority Optional. Used to specify the order in which the registered handlers will
 *                           be tested. Default 10.
 */
    public function wpEmbedRegisterHandler(string $id, string $regex, callable $callback, int $priority = 10): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a previously-registered embed handler.
 *
 * @since 2.9.0
 *
 * @global WP_Embed $wp_embed WordPress Embed object.
 *
 * @param string $id       The handler ID that should be removed.
 * @param int $priority Optional. The priority of the handler to be removed. Default 10.
 */
    public function wpEmbedUnregisterHandler(string $id, int $priority = 10): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates default array of embed parameters.
 *
 * The width defaults to the content width as specified by the theme. If the
 * theme does not specify a content width, then 500px is used.
 *
 * The default height is 1.5 times the width, or 1000px, whichever is smaller.
 *
 * The {@see 'embed_defaults'} filter can be used to adjust either of these values.
 *
 * @since 2.9.0
 *
 * @global int $content_width
 *
 * @param string $url Optional. The URL that should be embedded. Default empty.
 * @return int[] {
 *     Indexed array of the embed width and height in pixels.
 *
 *     @type int $0 The embed width.
 *     @type int $1 The embed height.
 * }
 */
    public function wpEmbedDefaults(string $url = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Attempts to fetch the embed HTML for a provided URL using oEmbed.
 *
 * @since 2.9.0
 *
 * @see WP_oEmbed
 *
 * @param string $url  The URL that should be embedded.
 * @param array|string $args {
 *     Optional. Additional arguments for retrieving embed HTML. Default empty.
 *
 *     @type int|string $width    Optional. The `maxwidth` value passed to the provider URL.
 *     @type int|string $height   Optional. The `maxheight` value passed to the provider URL.
 *     @type bool       $discover Optional. Determines whether to attempt to discover link tags
 *                                at the given URL for an oEmbed provider when the provider URL
 *                                is not found in the built-in providers list. Default true.
 * }
 * @return string|false The embed HTML on success, false on failure.
 */
    public function wpOembedGet(string $url, array|string $args = ''): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a URL format and oEmbed provider URL pair.
 *
 * @since 2.9.0
 *
 * @see WP_oEmbed
 *
 * @param string $format   The format of URL that this provider can handle. You can use asterisks
 *                         as wildcards.
 * @param string $provider The URL to the oEmbed provider.
 * @param bool $regex    Optional. Whether the `$format` parameter is in a RegEx format. Default false.
 */
    public function wpOembedAddProvider(string $format, string $provider, bool $regex = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes an oEmbed provider.
 *
 * @since 3.5.0
 *
 * @see WP_oEmbed
 *
 * @param string $format The URL format for the oEmbed provider to remove.
 * @return bool Was the provider removed successfully?
 */
    public function wpOembedRemoveProvider(string $format): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if default embed handlers should be loaded.
 *
 * Checks to make sure that the embeds library hasn't already been loaded. If
 * it hasn't, then it will load the embeds library.
 *
 * @since 2.9.0
 *
 * @see wp_embed_register_handler()
 */
    public function wpMaybeLoadEmbeds(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * YouTube iframe embed handler callback.
 *
 * Catches YouTube iframe embed URLs that are not parsable by oEmbed but can be translated into a URL that is.
 *
 * @since 4.0.0
 *
 * @global WP_Embed $wp_embed WordPress Embed object.
 *
 * @param array $matches The RegEx matches from the provided regex when calling
 *                        wp_embed_register_handler().
 * @param array $attr    Embed attributes.
 * @param string $url     The original URL that was matched by the regex.
 * @param array $rawattr The original unmodified attributes.
 * @return string The embed HTML.
 */
    public function wpEmbedHandlerYoutube(array $matches, array $attr, string $url, array $rawattr): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Audio embed handler callback.
 *
 * @since 3.6.0
 *
 * @param array $matches The RegEx matches from the provided regex when calling wp_embed_register_handler().
 * @param array $attr Embed attributes.
 * @param string $url The original URL that was matched by the regex.
 * @param array $rawattr The original unmodified attributes.
 * @return string The embed HTML.
 */
    public function wpEmbedHandlerAudio(array $matches, array $attr, string $url, array $rawattr): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Video embed handler callback.
 *
 * @since 3.6.0
 *
 * @param array $matches The RegEx matches from the provided regex when calling wp_embed_register_handler().
 * @param array $attr    Embed attributes.
 * @param string $url     The original URL that was matched by the regex.
 * @param array $rawattr The original unmodified attributes.
 * @return string The embed HTML.
 */
    public function wpEmbedHandlerVideo(array $matches, array $attr, string $url, array $rawattr): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the oEmbed REST API route.
 *
 * @since 4.4.0
 */
    public function wpOembedRegisterRoute(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds oEmbed discovery links in the head element of the website.
 *
 * @since 4.4.0
 */
    public function wpOembedAddDiscoveryLinks(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueue the wp-embed script if the provided oEmbed HTML contains a post embed.
 *
 * In order to only enqueue the wp-embed script on pages that actually contain post embeds, this function checks if the
 * provided HTML contains post embed markup and if so enqueues the script so that it will get printed in the footer.
 *
 * @since 5.9.0
 *
 * @param string $html Embed markup.
 * @return string Embed markup (without modifications).
 */
    public function wpMaybeEnqueueOembedHostJs(string $html): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to embed a specific post in an iframe.
 *
 * @since 4.4.0
 *
 * @param int|\WP_Post $post Optional. Post ID or object. Defaults to the current post.
 * @return string|false The post embed URL on success, false if the post doesn't exist.
 */
    public function getPostEmbedUrl(int|\WP_Post $post = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the oEmbed endpoint URL for a given permalink.
 *
 * Pass an empty string as the first argument to get the endpoint base URL.
 *
 * @since 4.4.0
 *
 * @param string $permalink Optional. The permalink used for the `url` query arg. Default empty.
 * @param string $format    Optional. The requested response format. Default 'json'.
 * @return string The oEmbed endpoint URL.
 */
    public function getOembedEndpointUrl(string $permalink = '', string $format = 'json'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the embed code for a specific post.
 *
 * @since 4.4.0
 *
 * @param int $width  The width for the response.
 * @param int $height The height for the response.
 * @param int|\WP_Post $post   Optional. Post ID or object. Default is global `$post`.
 * @return string|false Embed code on success, false if post doesn't exist.
 */
    public function getPostEmbedHtml(int $width, int $height, int|\WP_Post $post = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the oEmbed response data for a given post.
 *
 * @since 4.4.0
 *
 * @param \WP_Post|int $post  Post ID or post object.
 * @param int $width The requested width.
 * @return array|false Response data on success, false if post doesn't exist
 *                     or is not publicly viewable.
 */
    public function getOembedResponseData(\WP_Post|int $post, int $width): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the oEmbed response data for a given URL.
 *
 * @since 5.0.0
 *
 * @param string $url  The URL that should be inspected for discovery `<link>` tags.
 * @param array $args oEmbed remote get arguments.
 * @return object|false oEmbed response data if the URL does belong to the current site. False otherwise.
 */
    public function getOembedResponseDataForUrl(string $url, array $args): object|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the oEmbed response data to return an iframe embed code.
 *
 * @since 4.4.0
 *
 * @param array $data   The response data.
 * @param \WP_Post $post   The post object.
 * @param int $width  The requested width.
 * @param int $height The calculated height.
 * @return array The modified response data.
 */
    public function getOembedResponseDataRich(array $data, \WP_Post $post, int $width, int $height): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Ensures that the specified format is either 'json' or 'xml'.
 *
 * @since 4.4.0
 *
 * @param string $format The oEmbed response format. Accepts 'json' or 'xml'.
 * @return string The format, either 'xml' or 'json'. Default 'json'.
 */
    public function wpOembedEnsureFormat(string $format): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the given oEmbed HTML to make sure iframes have a title attribute.
 *
 * @since 5.2.0
 *
 * @param string $result The oEmbed HTML result.
 * @param object $data   A data object result from an oEmbed provider.
 * @param string $url    The URL of the content to be embedded.
 * @return string The filtered oEmbed result.
 */
    public function wpFilterOembedIframeTitleAttribute(string $result, object $data, string $url): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the given oEmbed HTML.
 *
 * If the `$url` isn't on the trusted providers list,
 * we need to filter the HTML heavily for security.
 *
 * Only filters 'rich' and 'video' response types.
 *
 * @since 4.4.0
 *
 * @param string $result The oEmbed HTML result.
 * @param object $data   A data object result from an oEmbed provider.
 * @param string $url    The URL of the content to be embedded.
 * @return string The filtered and sanitized oEmbed result.
 */
    public function wpFilterOembedResult(string $result, object $data, string $url): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the string in the 'more' link displayed after a trimmed excerpt.
 *
 * Replaces '[...]' (appended to automatically generated excerpts) with an
 * ellipsis and a "Continue reading" link in the embed template.
 *
 * @since 4.4.0
 *
 * @param string $moreString Default 'more' string.
 * @return string 'Continue reading' link prepended with an ellipsis.
 */
    public function wpEmbedExcerptMore(string $moreString): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post excerpt for the embed template.
 *
 * Intended to be used in 'The Loop'.
 *
 * @since 4.4.0
 */
    public function theExcerptEmbed(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the post excerpt for the embed template.
 *
 * Shows players for video and audio attachments.
 *
 * @since 4.4.0
 *
 * @param string $content The current post excerpt.
 * @return string The modified post excerpt.
 */
    public function wpEmbedExcerptAttachment(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues embed iframe default CSS and JS.
 *
 * Enqueue PNG fallback CSS for embed iframe for legacy versions of IE.
 *
 * Allows plugins to queue scripts for the embed iframe end using wp_enqueue_script().
 * Runs first in oembed_head().
 *
 * @since 4.4.0
 */
    public function enqueueEmbedScripts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues the CSS in the embed iframe header.
 *
 * @since 6.4.0
 */
    public function wpEnqueueEmbedStyles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the JavaScript in the embed iframe header.
 *
 * @since 4.4.0
 */
    public function printEmbedScripts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the necessary markup for the embed comments button.
 *
 * @since 4.4.0
 */
    public function printEmbedCommentsButton(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the necessary markup for the embed sharing button.
 *
 * @since 4.4.0
 */
    public function printEmbedSharingButton(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the necessary markup for the embed sharing dialog.
 *
 * @since 4.4.0
 */
    public function printEmbedSharingDialog(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the necessary markup for the site title in an embed template.
 *
 * @since 4.5.0
 */
    public function theEmbedSiteTitle(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the oEmbed result before any HTTP requests are made.
 *
 * If the URL belongs to the current site, the result is fetched directly instead of
 * going through the oEmbed discovery process.
 *
 * @since 4.5.3
 *
 * @param null|string $result The UNSANITIZED (and potentially unsafe) HTML that should be used to embed. Default null.
 * @param string $url    The URL that should be inspected for discovery `<link>` tags.
 * @param array $args   oEmbed remote get arguments.
 * @return null|string The UNSANITIZED (and potentially unsafe) HTML that should be used to embed.
 *                     Null if the URL does not belong to the current site.
 */
    public function wpFilterPreOembedResult(null|string $result, string $url, array $args): null|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get the instance for storing paused plugins.
 *
 * @return \WP_Paused_Extensions_Storage
 */
    public function wpPausedPlugins(): \WP_Paused_Extensions_Storage
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get the instance for storing paused extensions.
 *
 * @return \WP_Paused_Extensions_Storage
 */
    public function wpPausedThemes(): \WP_Paused_Extensions_Storage
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get a human readable description of an extension's error.
 *
 * @since 5.2.0
 *
 * @param array $error Error details from `error_get_last()`.
 * @return string Formatted error description.
 */
    public function wpGetExtensionErrorDescription(array $error): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the shutdown handler for fatal errors.
 *
 * The handler will only be registered if {@see wp_is_fatal_error_handler_enabled()} returns true.
 *
 * @since 5.2.0
 */
    public function wpRegisterFatalErrorHandler(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether the fatal error handler is enabled.
 *
 * A constant `WP_DISABLE_FATAL_ERROR_HANDLER` can be set in `wp-config.php` to disable it, or alternatively the
 * {@see 'wp_fatal_error_handler_enabled'} filter can be used to modify the return value.
 *
 * @since 5.2.0
 *
 * @return bool True if the fatal error handler is enabled, false otherwise.
 */
    public function wpIsFatalErrorHandlerEnabled(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Access the WordPress Recovery Mode instance.
 *
 * @since 5.2.0
 *
 * @return \WP_Recovery_Mode
 */
    public function wpRecoveryMode(): \WP_Recovery_Mode
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves RSS container for the bloginfo function.
 *
 * You can retrieve anything that you can using the get_bloginfo() function.
 * Everything will be stripped of tags and characters converted, when the values
 * are retrieved for use in the feeds.
 *
 * @since 1.5.1
 *
 * @see get_bloginfo() For the list of possible values to display.
 *
 * @param string $show See get_bloginfo() for possible values.
 * @return string
 */
    public function getBloginfoRss(string $show = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays RSS container for the bloginfo function.
 *
 * You can retrieve anything that you can using the get_bloginfo() function.
 * Everything will be stripped of tags and characters converted, when the values
 * are retrieved for use in the feeds.
 *
 * @since 0.71
 *
 * @see get_bloginfo() For the list of possible values to display.
 *
 * @param string $show See get_bloginfo() for possible values.
 */
    public function bloginfoRss(string $show = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the default feed.
 *
 * The default feed is 'rss2', unless a plugin changes it through the
 * {@see 'default_feed'} filter.
 *
 * @since 2.5.0
 *
 * @return string Default feed, or for example 'rss2', 'atom', etc.
 */
    public function getDefaultFeed(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the blog title for the feed title.
 *
 * @since 2.2.0
 * @since 4.4.0 The optional `$sep` parameter was deprecated and renamed to `$deprecated`.
 *
 * @param string $deprecated Unused.
 * @return string The document title.
 */
    public function getWpTitleRss(string $deprecated = '&#8211;'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the blog title for display of the feed title.
 *
 * @since 2.2.0
 * @since 4.4.0 The optional `$sep` parameter was deprecated and renamed to `$deprecated`.
 *
 * @param string $deprecated Unused.
 */
    public function wpTitleRss(string $deprecated = '&#8211;'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current post title for the feed.
 *
 * @since 2.0.0
 * @since 6.6.0 Added the `$post` parameter.
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return string Current post title.
 */
    public function getTheTitleRss(int|\WP_Post $post = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post title in the feed.
 *
 * @since 0.71
 */
    public function theTitleRss(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post content for feeds.
 *
 * @since 2.9.0
 *
 * @see get_the_content()
 *
 * @param string $feedType The type of feed. rss2 | atom | rss | rdf
 * @return string The filtered content.
 */
    public function getTheContentFeed(string $feedType = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post content for feeds.
 *
 * @since 2.9.0
 *
 * @param string $feedType The type of feed. rss2 | atom | rss | rdf
 */
    public function theContentFeed(string $feedType = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post excerpt for the feed.
 *
 * @since 0.71
 */
    public function theExcerptRss(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the permalink to the post for use in feeds.
 *
 * @since 2.3.0
 */
    public function thePermalinkRss(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the link to the comments for the current post in an XML safe way.
 *
 * @since 3.0.0
 */
    public function commentsLinkFeed(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the feed GUID for the current comment.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Comment $commentId Optional comment object or ID. Defaults to global comment object.
 */
    public function commentGuid(int|\WP_Comment $commentId = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the feed GUID for the current comment.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Comment $commentId Optional comment object or ID. Defaults to global comment object.
 * @return string|false GUID for comment on success, false on failure.
 */
    public function getCommentGuid(int|\WP_Comment $commentId = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the link to the comments.
 *
 * @since 1.5.0
 * @since 4.4.0 Introduced the `$comment` argument.
 *
 * @param int|\WP_Comment $comment Optional. Comment object or ID. Defaults to global comment object.
 */
    public function commentLink(int|\WP_Comment $comment = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current comment author for use in the feeds.
 *
 * @since 2.0.0
 *
 * @return string Comment Author.
 */
    public function getCommentAuthorRss(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the current comment author in the feed.
 *
 * @since 1.0.0
 */
    public function commentAuthorRss(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the current comment content for use in the feeds.
 *
 * @since 1.0.0
 */
    public function commentTextRss(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all of the post categories, formatted for use in feeds.
 *
 * All of the categories for the current post in the feed loop, will be
 * retrieved and have feed markup added, so that they can easily be added to the
 * RSS2, Atom, or RSS1 and RSS0.91 RDF feeds.
 *
 * @since 2.1.0
 *
 * @param string $type Optional, default is the type returned by get_default_feed().
 * @return string All of the post categories for displaying in the feed.
 */
    public function getTheCategoryRss(string $type = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post categories in the feed.
 *
 * @since 0.71
 *
 * @see get_the_category_rss() For better explanation.
 *
 * @param string $type Optional, default is the type returned by get_default_feed().
 */
    public function theCategoryRss(string $type = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the HTML type based on the blog setting.
 *
 * The two possible values are either 'xhtml' or 'html'.
 *
 * @since 2.2.0
 */
    public function htmlTypeRss(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the rss enclosure for the current post.
 *
 * Uses the global $post to check whether the post requires a password and if
 * the user has the password for the post. If not then it will return before
 * displaying.
 *
 * Also uses the function get_post_custom() to get the post's 'enclosure'
 * metadata field and parses the value to display the enclosure(s). The
 * enclosure(s) consist of enclosure HTML tag(s) with a URI and other
 * attributes.
 *
 * @since 1.5.0
 */
    public function rssEnclosure(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the atom enclosure for the current post.
 *
 * Uses the global $post to check whether the post requires a password and if
 * the user has the password for the post. If not then it will return before
 * displaying.
 *
 * Also uses the function get_post_custom() to get the post's 'enclosure'
 * metadata field and parses the value to display the enclosure(s). The
 * enclosure(s) consist of link HTML tag(s) with a URI and other attributes.
 *
 * @since 2.2.0
 */
    public function atomEnclosure(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines the type of a string of data with the data formatted.
 *
 * Tell whether the type is text, HTML, or XHTML, per RFC 4287 section 3.1.
 *
 * In the case of WordPress, text is defined as containing no markup,
 * XHTML is defined as "well formed", and HTML as tag soup (i.e., the rest).
 *
 * Container div tags are added to XHTML values, per section 3.1.1.3.
 *
 * @link http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rfc.section.3.1
 *
 * @since 2.5.0
 *
 * @param string $data Input string.
 * @return array array(type, value)
 */
    public function prepAtomTextConstruct(string $data): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays Site Icon in atom feeds.
 *
 * @since 4.3.0
 *
 * @see get_site_icon_url()
 */
    public function atomSiteIcon(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays Site Icon in RSS2.
 *
 * @since 4.3.0
 */
    public function rss2SiteIcon(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the link for the currently displayed feed.
 *
 * @since 5.3.0
 *
 * @return string Correct link for the atom:self element.
 */
    public function getSelfLink(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the link for the currently displayed feed in a XSS safe way.
 *
 * Generate a correct link for the atom:self element.
 *
 * @since 2.5.0
 */
    public function selfLink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the UTC time of the most recently modified post from WP_Query.
 *
 * If viewing a comment feed, the time of the most recently modified
 * comment will be returned.
 *
 * @since 5.2.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string $format Date format string to return the time in.
 * @return string|false The time in requested format, or false on failure.
 */
    public function getFeedBuildDate(string $format): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the content type for specified feed type.
 *
 * @since 2.8.0
 *
 * @param string $type Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'.
 * @return string Content type for specified feed type.
 */
    public function feedContentType(string $type = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds SimplePie object based on RSS or Atom feed from URL.
 *
 * @since 2.8.0
 *
 * @param string|string[] $url URL of feed to retrieve. If an array of URLs, the feeds are merged
 *                             using SimplePie's multifeed feature.
 *                             See also {@link http://simplepie.org/wiki/faq/typical_multifeed_gotchas}
 * @return \SimplePie|\WP_Error SimplePie object on success or WP_Error object on failure.
 */
    public function fetchFeed(string|array $url): \SimplePie|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates and prints font-face styles for given fonts or theme.json fonts.
 *
 * @since 6.4.0
 *
 * @param array[][] $fonts {
 *     Optional. The font-families and their font faces. Default empty array.
 *
 *     @type array ...$0 {
 *         An indexed or associative (keyed by font-family) array of font variations for this font-family.
 *         Each font face has the following structure.
 *
 *         @type array ...$0 {
 *             The font face properties.
 *
 *             @type string          $font-family             The font-family property.
 *             @type string|string[] $src                     The URL(s) to each resource containing the font data.
 *             @type string          $font-style              Optional. The font-style property. Default 'normal'.
 *             @type string          $font-weight             Optional. The font-weight property. Default '400'.
 *             @type string          $font-display            Optional. The font-display property. Default 'fallback'.
 *             @type string          $ascent-override         Optional. The ascent-override property.
 *             @type string          $descent-override        Optional. The descent-override property.
 *             @type string          $font-stretch            Optional. The font-stretch property.
 *             @type string          $font-variant            Optional. The font-variant property.
 *             @type string          $font-feature-settings   Optional. The font-feature-settings property.
 *             @type string          $font-variation-settings Optional. The font-variation-settings property.
 *             @type string          $line-gap-override       Optional. The line-gap-override property.
 *             @type string          $size-adjust             Optional. The size-adjust property.
 *             @type string          $unicode-range           Optional. The unicode-range property.
 *         }
 *     }
 * }
 */
    public function wpPrintFontFaces(array $fonts = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a new font collection in the font library.
 *
 * See {@link https://schemas.wp.org/trunk/font-collection.json} for the schema
 * the font collection data must adhere to.
 *
 * @since 6.5.0
 *
 * @param string $slug Font collection slug. May only contain alphanumeric characters, dashes,
 *                     and underscores. See sanitize_title().
 * @param array $args {
 *     Font collection data.
 *
 *     @type string       $name          Required. Name of the font collection shown in the Font Library.
 *     @type string       $description   Optional. A short descriptive summary of the font collection. Default empty.
 *     @type array|string $font_families Required. Array of font family definitions that are in the collection,
 *                                       or a string containing the path or URL to a JSON file containing the font collection.
 *     @type array        $categories    Optional. Array of categories, each with a name and slug, that are used by the
 *                                       fonts in the collection. Default empty.
 * }
 * @return \WP_Font_Collection|\WP_Error A font collection if it was registered
 *                                     successfully, or WP_Error object on failure.
 */
    public function wpRegisterFontCollection(string $slug, array $args): \WP_Font_Collection|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a font collection from the Font Library.
 *
 * @since 6.5.0
 *
 * @param string $slug Font collection slug.
 * @return bool True if the font collection was unregistered successfully, else false.
 */
    public function wpUnregisterFontCollection(string $slug): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves font uploads directory information.
 *
 * Same as wp_font_dir() but "light weight" as it doesn't attempt to create the font uploads directory.
 * Intended for use in themes, when only 'basedir' and 'baseurl' are needed, generally in all cases
 * when not uploading files.
 *
 * @since 6.5.0
 *
 * @see wp_font_dir()
 *
 * @return array See wp_font_dir() for description.
 */
    public function wpGetFontDir(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array containing the current fonts upload directory's path and URL.
 *
 * @since 6.5.0
 *
 * @param bool $createDir Optional. Whether to check and create the font uploads directory. Default true.
 * @return array {
 *     Array of information about the font upload directory.
 *
 *     @type string       $path    Base directory and subdirectory or full path to the fonts upload directory.
 *     @type string       $url     Base URL and subdirectory or absolute URL to the fonts upload directory.
 *     @type string       $subdir  Subdirectory
 *     @type string       $basedir Path without subdir.
 *     @type string       $baseurl URL path without subdir.
 *     @type string|false $error   False or error message.
 * }
 */
    public function wpFontDir(bool $createDir = true): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Replaces common plain text characters with formatted entities.
 *
 * Returns given text with transformations of quotes into smart quotes, apostrophes,
 * dashes, ellipses, the trademark symbol, and the multiplication symbol.
 *
 * As an example,
 *
 *     'cause today's effort makes it worth tomorrow's "holiday" ...
 *
 * Becomes:
 *
 *     &#8217;cause today&#8217;s effort makes it worth tomorrow&#8217;s &#8220;holiday&#8221; &#8230;
 *
 * Code within certain HTML blocks are skipped.
 *
 * Do not use this function before the {@see 'init'} action hook; everything will break.
 *
 * @since 0.71
 *
 * @global array $wp_cockneyreplace Array of formatted entities for certain common phrases.
 * @global array $shortcode_tags
 *
 * @param string $text  The text to be formatted.
 * @param bool $reset Set to true for unit testing. Translated patterns will reset.
 * @return string The string replaced with HTML entities.
 */
    public function wptexturize(string $text, bool $reset = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Implements a logic tree to determine whether or not "7'." represents seven feet,
 * then converts the special char into either a prime char or a closing quote char.
 *
 * @since 4.3.0
 *
 * @param string $haystack    The plain text to be searched.
 * @param string $needle      The character to search for such as ' or ".
 * @param string $prime       The prime char to use for replacement.
 * @param string $openQuote  The opening quote char. Opening quote replacement must be
 *                            accomplished already.
 * @param string $closeQuote The closing quote char to use for replacement.
 * @return string The $haystack value after primes and quotes replacements.
 */
    public function wptexturizePrimes(string $haystack, string $needle, string $prime, string $openQuote, string $closeQuote): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Replaces double line breaks with paragraph elements.
 *
 * A group of regex replaces used to identify text formatted with newlines and
 * replace double line breaks with HTML paragraph tags. The remaining line breaks
 * after conversion become `<br />` tags, unless `$br` is set to '0' or 'false'.
 *
 * @since 0.71
 *
 * @param string $text The text which has to be formatted.
 * @param bool $br   Optional. If set, this will convert all remaining line breaks
 *                     after paragraphing. Line breaks within `<script>`, `<style>`,
 *                     and `<svg>` tags are not affected. Default true.
 * @return string Text which has been converted into correct paragraph tags.
 */
    public function wpautop(string $text, bool $br = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Separates HTML elements and comments from the text.
 *
 * @since 4.2.4
 *
 * @param string $input The text which has to be formatted.
 * @return string[] Array of the formatted text.
 */
    public function wpHtmlSplit(string $input): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the regular expression for an HTML element.
 *
 * @since 4.4.0
 *
 * @return string The regular expression
 */
    public function getHtmlSplitRegex(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Replaces characters or phrases within HTML elements only.
 *
 * @since 4.2.3
 *
 * @param string $haystack      The text which has to be formatted.
 * @param array $replacePairs In the form array('from' => 'to', ...).
 * @return string The formatted text.
 */
    public function wpReplaceInHtmlTags(string $haystack, array $replacePairs): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Don't auto-p wrap shortcodes that stand alone.
 *
 * Ensures that shortcodes are not wrapped in `<p>...</p>`.
 *
 * @since 2.9.0
 *
 * @global array $shortcode_tags
 *
 * @param string $text The content.
 * @return string The filtered content.
 */
    public function shortcodeUnautop(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks to see if a string is utf8 encoded.
 *
 * NOTE: This function checks for 5-Byte sequences, UTF8
 *       has Bytes Sequences with a maximum length of 4.
 *
 * @author bmorel at ssi dot fr (modified)
 * @since 1.2.1
 *
 * @param string $str The string to be checked
 * @return bool True if $str fits a UTF-8 model, false otherwise.
 */
    public function seemsUtf8(string $str): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts a number of HTML entities into their special characters.
 *
 * Specifically deals with: `&`, `<`, `>`, `"`, and `'`.
 *
 * `$quote_style` can be set to ENT_COMPAT to decode `"` entities,
 * or ENT_QUOTES to do both `"` and `'`. Default is ENT_NOQUOTES where no quotes are decoded.
 *
 * @since 2.8.0
 *
 * @param string $text        The text which is to be decoded.
 * @param string|int $quoteStyle Optional. Converts double quotes if set to ENT_COMPAT,
 *                                both single and double if set to ENT_QUOTES or
 *                                none if set to ENT_NOQUOTES.
 *                                Also compatible with old _wp_specialchars() values;
 *                                converting single quotes if set to 'single',
 *                                double if set to 'double' or both if otherwise set.
 *                                Default is ENT_NOQUOTES.
 * @return string The decoded text without HTML entities.
 */
    public function wpSpecialcharsDecode(string $text, string|int $quoteStyle = ENT_NOQUOTES): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks for invalid UTF8 in a string.
 *
 * @since 2.8.0
 *
 * @param string $text   The text which is to be checked.
 * @param bool $strip  Optional. Whether to attempt to strip out invalid UTF8. Default false.
 * @return string The checked text.
 */
    public function wpCheckInvalidUtf8(string $text, bool $strip = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Encodes the Unicode values to be used in the URI.
 *
 * @since 1.5.0
 * @since 5.8.3 Added the `encode_ascii_characters` parameter.
 *
 * @param string $utf8String             String to encode.
 * @param int $length                  Max length of the string
 * @param bool $encodeAsciiCharacters Whether to encode ascii characters such as < " '
 * @return string String with Unicode encoded for URI.
 */
    public function utf8UriEncode(string $utf8String, int $length = 0, bool $encodeAsciiCharacters = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts all accent characters to ASCII characters.
 *
 * If there are no accent characters, then the string given is just returned.
 *
 * **Accent characters converted:**
 *
 * Currency signs:
 *
 * |   Code   | Glyph | Replacement |     Description     |
 * | -------- | ----- | ----------- | ------------------- |
 * | U+00A3   | £     | (empty)     | British Pound sign  |
 * | U+20AC   | €     | E           | Euro sign           |
 *
 * Decompositions for Latin-1 Supplement:
 *
 * |  Code   | Glyph | Replacement |               Description              |
 * | ------- | ----- | ----------- | -------------------------------------- |
 * | U+00AA  | ª     | a           | Feminine ordinal indicator             |
 * | U+00BA  | º     | o           | Masculine ordinal indicator            |
 * | U+00C0  | À     | A           | Latin capital letter A with grave      |
 * | U+00C1  | Á     | A           | Latin capital letter A with acute      |
 * | U+00C2  | Â     | A           | Latin capital letter A with circumflex |
 * | U+00C3  | Ã     | A           | Latin capital letter A with tilde      |
 * | U+00C4  | Ä     | A           | Latin capital letter A with diaeresis  |
 * | U+00C5  | Å     | A           | Latin capital letter A with ring above |
 * | U+00C6  | Æ     | AE          | Latin capital letter AE                |
 * | U+00C7  | Ç     | C           | Latin capital letter C with cedilla    |
 * | U+00C8  | È     | E           | Latin capital letter E with grave      |
 * | U+00C9  | É     | E           | Latin capital letter E with acute      |
 * | U+00CA  | Ê     | E           | Latin capital letter E with circumflex |
 * | U+00CB  | Ë     | E           | Latin capital letter E with diaeresis  |
 * | U+00CC  | Ì     | I           | Latin capital letter I with grave      |
 * | U+00CD  | Í     | I           | Latin capital letter I with acute      |
 * | U+00CE  | Î     | I           | Latin capital letter I with circumflex |
 * | U+00CF  | Ï     | I           | Latin capital letter I with diaeresis  |
 * | U+00D0  | Ð     | D           | Latin capital letter Eth               |
 * | U+00D1  | Ñ     | N           | Latin capital letter N with tilde      |
 * | U+00D2  | Ò     | O           | Latin capital letter O with grave      |
 * | U+00D3  | Ó     | O           | Latin capital letter O with acute      |
 * | U+00D4  | Ô     | O           | Latin capital letter O with circumflex |
 * | U+00D5  | Õ     | O           | Latin capital letter O with tilde      |
 * | U+00D6  | Ö     | O           | Latin capital letter O with diaeresis  |
 * | U+00D8  | Ø     | O           | Latin capital letter O with stroke     |
 * | U+00D9  | Ù     | U           | Latin capital letter U with grave      |
 * | U+00DA  | Ú     | U           | Latin capital letter U with acute      |
 * | U+00DB  | Û     | U           | Latin capital letter U with circumflex |
 * | U+00DC  | Ü     | U           | Latin capital letter U with diaeresis  |
 * | U+00DD  | Ý     | Y           | Latin capital letter Y with acute      |
 * | U+00DE  | Þ     | TH          | Latin capital letter Thorn             |
 * | U+00DF  | ß     | s           | Latin small letter sharp s             |
 * | U+00E0  | à     | a           | Latin small letter a with grave        |
 * | U+00E1  | á     | a           | Latin small letter a with acute        |
 * | U+00E2  | â     | a           | Latin small letter a with circumflex   |
 * | U+00E3  | ã     | a           | Latin small letter a with tilde        |
 * | U+00E4  | ä     | a           | Latin small letter a with diaeresis    |
 * | U+00E5  | å     | a           | Latin small letter a with ring above   |
 * | U+00E6  | æ     | ae          | Latin small letter ae                  |
 * | U+00E7  | ç     | c           | Latin small letter c with cedilla      |
 * | U+00E8  | è     | e           | Latin small letter e with grave        |
 * | U+00E9  | é     | e           | Latin small letter e with acute        |
 * | U+00EA  | ê     | e           | Latin small letter e with circumflex   |
 * | U+00EB  | ë     | e           | Latin small letter e with diaeresis    |
 * | U+00EC  | ì     | i           | Latin small letter i with grave        |
 * | U+00ED  | í     | i           | Latin small letter i with acute        |
 * | U+00EE  | î     | i           | Latin small letter i with circumflex   |
 * | U+00EF  | ï     | i           | Latin small letter i with diaeresis    |
 * | U+00F0  | ð     | d           | Latin small letter Eth                 |
 * | U+00F1  | ñ     | n           | Latin small letter n with tilde        |
 * | U+00F2  | ò     | o           | Latin small letter o with grave        |
 * | U+00F3  | ó     | o           | Latin small letter o with acute        |
 * | U+00F4  | ô     | o           | Latin small letter o with circumflex   |
 * | U+00F5  | õ     | o           | Latin small letter o with tilde        |
 * | U+00F6  | ö     | o           | Latin small letter o with diaeresis    |
 * | U+00F8  | ø     | o           | Latin small letter o with stroke       |
 * | U+00F9  | ù     | u           | Latin small letter u with grave        |
 * | U+00FA  | ú     | u           | Latin small letter u with acute        |
 * | U+00FB  | û     | u           | Latin small letter u with circumflex   |
 * | U+00FC  | ü     | u           | Latin small letter u with diaeresis    |
 * | U+00FD  | ý     | y           | Latin small letter y with acute        |
 * | U+00FE  | þ     | th          | Latin small letter Thorn               |
 * | U+00FF  | ÿ     | y           | Latin small letter y with diaeresis    |
 *
 * Decompositions for Latin Extended-A:
 *
 * |  Code   | Glyph | Replacement |                    Description                    |
 * | ------- | ----- | ----------- | ------------------------------------------------- |
 * | U+0100  | Ā     | A           | Latin capital letter A with macron                |
 * | U+0101  | ā     | a           | Latin small letter a with macron                  |
 * | U+0102  | Ă     | A           | Latin capital letter A with breve                 |
 * | U+0103  | ă     | a           | Latin small letter a with breve                   |
 * | U+0104  | Ą     | A           | Latin capital letter A with ogonek                |
 * | U+0105  | ą     | a           | Latin small letter a with ogonek                  |
 * | U+01006 | Ć     | C           | Latin capital letter C with acute                 |
 * | U+0107  | ć     | c           | Latin small letter c with acute                   |
 * | U+0108  | Ĉ     | C           | Latin capital letter C with circumflex            |
 * | U+0109  | ĉ     | c           | Latin small letter c with circumflex              |
 * | U+010A  | Ċ     | C           | Latin capital letter C with dot above             |
 * | U+010B  | ċ     | c           | Latin small letter c with dot above               |
 * | U+010C  | Č     | C           | Latin capital letter C with caron                 |
 * | U+010D  | č     | c           | Latin small letter c with caron                   |
 * | U+010E  | Ď     | D           | Latin capital letter D with caron                 |
 * | U+010F  | ď     | d           | Latin small letter d with caron                   |
 * | U+0110  | Đ     | D           | Latin capital letter D with stroke                |
 * | U+0111  | đ     | d           | Latin small letter d with stroke                  |
 * | U+0112  | Ē     | E           | Latin capital letter E with macron                |
 * | U+0113  | ē     | e           | Latin small letter e with macron                  |
 * | U+0114  | Ĕ     | E           | Latin capital letter E with breve                 |
 * | U+0115  | ĕ     | e           | Latin small letter e with breve                   |
 * | U+0116  | Ė     | E           | Latin capital letter E with dot above             |
 * | U+0117  | ė     | e           | Latin small letter e with dot above               |
 * | U+0118  | Ę     | E           | Latin capital letter E with ogonek                |
 * | U+0119  | ę     | e           | Latin small letter e with ogonek                  |
 * | U+011A  | Ě     | E           | Latin capital letter E with caron                 |
 * | U+011B  | ě     | e           | Latin small letter e with caron                   |
 * | U+011C  | Ĝ     | G           | Latin capital letter G with circumflex            |
 * | U+011D  | ĝ     | g           | Latin small letter g with circumflex              |
 * | U+011E  | Ğ     | G           | Latin capital letter G with breve                 |
 * | U+011F  | ğ     | g           | Latin small letter g with breve                   |
 * | U+0120  | Ġ     | G           | Latin capital letter G with dot above             |
 * | U+0121  | ġ     | g           | Latin small letter g with dot above               |
 * | U+0122  | Ģ     | G           | Latin capital letter G with cedilla               |
 * | U+0123  | ģ     | g           | Latin small letter g with cedilla                 |
 * | U+0124  | Ĥ     | H           | Latin capital letter H with circumflex            |
 * | U+0125  | ĥ     | h           | Latin small letter h with circumflex              |
 * | U+0126  | Ħ     | H           | Latin capital letter H with stroke                |
 * | U+0127  | ħ     | h           | Latin small letter h with stroke                  |
 * | U+0128  | Ĩ     | I           | Latin capital letter I with tilde                 |
 * | U+0129  | ĩ     | i           | Latin small letter i with tilde                   |
 * | U+012A  | Ī     | I           | Latin capital letter I with macron                |
 * | U+012B  | ī     | i           | Latin small letter i with macron                  |
 * | U+012C  | Ĭ     | I           | Latin capital letter I with breve                 |
 * | U+012D  | ĭ     | i           | Latin small letter i with breve                   |
 * | U+012E  | Į     | I           | Latin capital letter I with ogonek                |
 * | U+012F  | į     | i           | Latin small letter i with ogonek                  |
 * | U+0130  | İ     | I           | Latin capital letter I with dot above             |
 * | U+0131  | ı     | i           | Latin small letter dotless i                      |
 * | U+0132  | Ĳ     | IJ          | Latin capital ligature IJ                         |
 * | U+0133  | ĳ     | ij          | Latin small ligature ij                           |
 * | U+0134  | Ĵ     | J           | Latin capital letter J with circumflex            |
 * | U+0135  | ĵ     | j           | Latin small letter j with circumflex              |
 * | U+0136  | Ķ     | K           | Latin capital letter K with cedilla               |
 * | U+0137  | ķ     | k           | Latin small letter k with cedilla                 |
 * | U+0138  | ĸ     | k           | Latin small letter Kra                            |
 * | U+0139  | Ĺ     | L           | Latin capital letter L with acute                 |
 * | U+013A  | ĺ     | l           | Latin small letter l with acute                   |
 * | U+013B  | Ļ     | L           | Latin capital letter L with cedilla               |
 * | U+013C  | ļ     | l           | Latin small letter l with cedilla                 |
 * | U+013D  | Ľ     | L           | Latin capital letter L with caron                 |
 * | U+013E  | ľ     | l           | Latin small letter l with caron                   |
 * | U+013F  | Ŀ     | L           | Latin capital letter L with middle dot            |
 * | U+0140  | ŀ     | l           | Latin small letter l with middle dot              |
 * | U+0141  | Ł     | L           | Latin capital letter L with stroke                |
 * | U+0142  | ł     | l           | Latin small letter l with stroke                  |
 * | U+0143  | Ń     | N           | Latin capital letter N with acute                 |
 * | U+0144  | ń     | n           | Latin small letter N with acute                   |
 * | U+0145  | Ņ     | N           | Latin capital letter N with cedilla               |
 * | U+0146  | ņ     | n           | Latin small letter n with cedilla                 |
 * | U+0147  | Ň     | N           | Latin capital letter N with caron                 |
 * | U+0148  | ň     | n           | Latin small letter n with caron                   |
 * | U+0149  | ŉ     | n           | Latin small letter n preceded by apostrophe       |
 * | U+014A  | Ŋ     | N           | Latin capital letter Eng                          |
 * | U+014B  | ŋ     | n           | Latin small letter Eng                            |
 * | U+014C  | Ō     | O           | Latin capital letter O with macron                |
 * | U+014D  | ō     | o           | Latin small letter o with macron                  |
 * | U+014E  | Ŏ     | O           | Latin capital letter O with breve                 |
 * | U+014F  | ŏ     | o           | Latin small letter o with breve                   |
 * | U+0150  | Ő     | O           | Latin capital letter O with double acute          |
 * | U+0151  | ő     | o           | Latin small letter o with double acute            |
 * | U+0152  | Œ     | OE          | Latin capital ligature OE                         |
 * | U+0153  | œ     | oe          | Latin small ligature oe                           |
 * | U+0154  | Ŕ     | R           | Latin capital letter R with acute                 |
 * | U+0155  | ŕ     | r           | Latin small letter r with acute                   |
 * | U+0156  | Ŗ     | R           | Latin capital letter R with cedilla               |
 * | U+0157  | ŗ     | r           | Latin small letter r with cedilla                 |
 * | U+0158  | Ř     | R           | Latin capital letter R with caron                 |
 * | U+0159  | ř     | r           | Latin small letter r with caron                   |
 * | U+015A  | Ś     | S           | Latin capital letter S with acute                 |
 * | U+015B  | ś     | s           | Latin small letter s with acute                   |
 * | U+015C  | Ŝ     | S           | Latin capital letter S with circumflex            |
 * | U+015D  | ŝ     | s           | Latin small letter s with circumflex              |
 * | U+015E  | Ş     | S           | Latin capital letter S with cedilla               |
 * | U+015F  | ş     | s           | Latin small letter s with cedilla                 |
 * | U+0160  | Š     | S           | Latin capital letter S with caron                 |
 * | U+0161  | š     | s           | Latin small letter s with caron                   |
 * | U+0162  | Ţ     | T           | Latin capital letter T with cedilla               |
 * | U+0163  | ţ     | t           | Latin small letter t with cedilla                 |
 * | U+0164  | Ť     | T           | Latin capital letter T with caron                 |
 * | U+0165  | ť     | t           | Latin small letter t with caron                   |
 * | U+0166  | Ŧ     | T           | Latin capital letter T with stroke                |
 * | U+0167  | ŧ     | t           | Latin small letter t with stroke                  |
 * | U+0168  | Ũ     | U           | Latin capital letter U with tilde                 |
 * | U+0169  | ũ     | u           | Latin small letter u with tilde                   |
 * | U+016A  | Ū     | U           | Latin capital letter U with macron                |
 * | U+016B  | ū     | u           | Latin small letter u with macron                  |
 * | U+016C  | Ŭ     | U           | Latin capital letter U with breve                 |
 * | U+016D  | ŭ     | u           | Latin small letter u with breve                   |
 * | U+016E  | Ů     | U           | Latin capital letter U with ring above            |
 * | U+016F  | ů     | u           | Latin small letter u with ring above              |
 * | U+0170  | Ű     | U           | Latin capital letter U with double acute          |
 * | U+0171  | ű     | u           | Latin small letter u with double acute            |
 * | U+0172  | Ų     | U           | Latin capital letter U with ogonek                |
 * | U+0173  | ų     | u           | Latin small letter u with ogonek                  |
 * | U+0174  | Ŵ     | W           | Latin capital letter W with circumflex            |
 * | U+0175  | ŵ     | w           | Latin small letter w with circumflex              |
 * | U+0176  | Ŷ     | Y           | Latin capital letter Y with circumflex            |
 * | U+0177  | ŷ     | y           | Latin small letter y with circumflex              |
 * | U+0178  | Ÿ     | Y           | Latin capital letter Y with diaeresis             |
 * | U+0179  | Ź     | Z           | Latin capital letter Z with acute                 |
 * | U+017A  | ź     | z           | Latin small letter z with acute                   |
 * | U+017B  | Ż     | Z           | Latin capital letter Z with dot above             |
 * | U+017C  | ż     | z           | Latin small letter z with dot above               |
 * | U+017D  | Ž     | Z           | Latin capital letter Z with caron                 |
 * | U+017E  | ž     | z           | Latin small letter z with caron                   |
 * | U+017F  | ſ     | s           | Latin small letter long s                         |
 * | U+01A0  | Ơ     | O           | Latin capital letter O with horn                  |
 * | U+01A1  | ơ     | o           | Latin small letter o with horn                    |
 * | U+01AF  | Ư     | U           | Latin capital letter U with horn                  |
 * | U+01B0  | ư     | u           | Latin small letter u with horn                    |
 * | U+01CD  | Ǎ     | A           | Latin capital letter A with caron                 |
 * | U+01CE  | ǎ     | a           | Latin small letter a with caron                   |
 * | U+01CF  | Ǐ     | I           | Latin capital letter I with caron                 |
 * | U+01D0  | ǐ     | i           | Latin small letter i with caron                   |
 * | U+01D1  | Ǒ     | O           | Latin capital letter O with caron                 |
 * | U+01D2  | ǒ     | o           | Latin small letter o with caron                   |
 * | U+01D3  | Ǔ     | U           | Latin capital letter U with caron                 |
 * | U+01D4  | ǔ     | u           | Latin small letter u with caron                   |
 * | U+01D5  | Ǖ     | U           | Latin capital letter U with diaeresis and macron  |
 * | U+01D6  | ǖ     | u           | Latin small letter u with diaeresis and macron    |
 * | U+01D7  | Ǘ     | U           | Latin capital letter U with diaeresis and acute   |
 * | U+01D8  | ǘ     | u           | Latin small letter u with diaeresis and acute     |
 * | U+01D9  | Ǚ     | U           | Latin capital letter U with diaeresis and caron   |
 * | U+01DA  | ǚ     | u           | Latin small letter u with diaeresis and caron     |
 * | U+01DB  | Ǜ     | U           | Latin capital letter U with diaeresis and grave   |
 * | U+01DC  | ǜ     | u           | Latin small letter u with diaeresis and grave     |
 *
 * Decompositions for Latin Extended-B:
 *
 * |   Code   | Glyph | Replacement |                Description                |
 * | -------- | ----- | ----------- | ----------------------------------------- |
 * | U+018F   | Ə     | E           | Latin capital letter Ə                    |
 * | U+0259   | ǝ     | e           | Latin small letter ǝ                      |
 * | U+0218   | Ș     | S           | Latin capital letter S with comma below   |
 * | U+0219   | ș     | s           | Latin small letter s with comma below     |
 * | U+021A   | Ț     | T           | Latin capital letter T with comma below   |
 * | U+021B   | ț     | t           | Latin small letter t with comma below     |
 *
 * Vowels with diacritic (Chinese, Hanyu Pinyin):
 *
 * |   Code   | Glyph | Replacement |                      Description                      |
 * | -------- | ----- | ----------- | ----------------------------------------------------- |
 * | U+0251   | ɑ     | a           | Latin small letter alpha                              |
 * | U+1EA0   | Ạ     | A           | Latin capital letter A with dot below                 |
 * | U+1EA1   | ạ     | a           | Latin small letter a with dot below                   |
 * | U+1EA2   | Ả     | A           | Latin capital letter A with hook above                |
 * | U+1EA3   | ả     | a           | Latin small letter a with hook above                  |
 * | U+1EA4   | Ấ     | A           | Latin capital letter A with circumflex and acute      |
 * | U+1EA5   | ấ     | a           | Latin small letter a with circumflex and acute        |
 * | U+1EA6   | Ầ     | A           | Latin capital letter A with circumflex and grave      |
 * | U+1EA7   | ầ     | a           | Latin small letter a with circumflex and grave        |
 * | U+1EA8   | Ẩ     | A           | Latin capital letter A with circumflex and hook above |
 * | U+1EA9   | ẩ     | a           | Latin small letter a with circumflex and hook above   |
 * | U+1EAA   | Ẫ     | A           | Latin capital letter A with circumflex and tilde      |
 * | U+1EAB   | ẫ     | a           | Latin small letter a with circumflex and tilde        |
 * | U+1EA6   | Ậ     | A           | Latin capital letter A with circumflex and dot below  |
 * | U+1EAD   | ậ     | a           | Latin small letter a with circumflex and dot below    |
 * | U+1EAE   | Ắ     | A           | Latin capital letter A with breve and acute           |
 * | U+1EAF   | ắ     | a           | Latin small letter a with breve and acute             |
 * | U+1EB0   | Ằ     | A           | Latin capital letter A with breve and grave           |
 * | U+1EB1   | ằ     | a           | Latin small letter a with breve and grave             |
 * | U+1EB2   | Ẳ     | A           | Latin capital letter A with breve and hook above      |
 * | U+1EB3   | ẳ     | a           | Latin small letter a with breve and hook above        |
 * | U+1EB4   | Ẵ     | A           | Latin capital letter A with breve and tilde           |
 * | U+1EB5   | ẵ     | a           | Latin small letter a with breve and tilde             |
 * | U+1EB6   | Ặ     | A           | Latin capital letter A with breve and dot below       |
 * | U+1EB7   | ặ     | a           | Latin small letter a with breve and dot below         |
 * | U+1EB8   | Ẹ     | E           | Latin capital letter E with dot below                 |
 * | U+1EB9   | ẹ     | e           | Latin small letter e with dot below                   |
 * | U+1EBA   | Ẻ     | E           | Latin capital letter E with hook above                |
 * | U+1EBB   | ẻ     | e           | Latin small letter e with hook above                  |
 * | U+1EBC   | Ẽ     | E           | Latin capital letter E with tilde                     |
 * | U+1EBD   | ẽ     | e           | Latin small letter e with tilde                       |
 * | U+1EBE   | Ế     | E           | Latin capital letter E with circumflex and acute      |
 * | U+1EBF   | ế     | e           | Latin small letter e with circumflex and acute        |
 * | U+1EC0   | Ề     | E           | Latin capital letter E with circumflex and grave      |
 * | U+1EC1   | ề     | e           | Latin small letter e with circumflex and grave        |
 * | U+1EC2   | Ể     | E           | Latin capital letter E with circumflex and hook above |
 * | U+1EC3   | ể     | e           | Latin small letter e with circumflex and hook above   |
 * | U+1EC4   | Ễ     | E           | Latin capital letter E with circumflex and tilde      |
 * | U+1EC5   | ễ     | e           | Latin small letter e with circumflex and tilde        |
 * | U+1EC6   | Ệ     | E           | Latin capital letter E with circumflex and dot below  |
 * | U+1EC7   | ệ     | e           | Latin small letter e with circumflex and dot below    |
 * | U+1EC8   | Ỉ     | I           | Latin capital letter I with hook above                |
 * | U+1EC9   | ỉ     | i           | Latin small letter i with hook above                  |
 * | U+1ECA   | Ị     | I           | Latin capital letter I with dot below                 |
 * | U+1ECB   | ị     | i           | Latin small letter i with dot below                   |
 * | U+1ECC   | Ọ     | O           | Latin capital letter O with dot below                 |
 * | U+1ECD   | ọ     | o           | Latin small letter o with dot below                   |
 * | U+1ECE   | Ỏ     | O           | Latin capital letter O with hook above                |
 * | U+1ECF   | ỏ     | o           | Latin small letter o with hook above                  |
 * | U+1ED0   | Ố     | O           | Latin capital letter O with circumflex and acute      |
 * | U+1ED1   | ố     | o           | Latin small letter o with circumflex and acute        |
 * | U+1ED2   | Ồ     | O           | Latin capital letter O with circumflex and grave      |
 * | U+1ED3   | ồ     | o           | Latin small letter o with circumflex and grave        |
 * | U+1ED4   | Ổ     | O           | Latin capital letter O with circumflex and hook above |
 * | U+1ED5   | ổ     | o           | Latin small letter o with circumflex and hook above   |
 * | U+1ED6   | Ỗ     | O           | Latin capital letter O with circumflex and tilde      |
 * | U+1ED7   | ỗ     | o           | Latin small letter o with circumflex and tilde        |
 * | U+1ED8   | Ộ     | O           | Latin capital letter O with circumflex and dot below  |
 * | U+1ED9   | ộ     | o           | Latin small letter o with circumflex and dot below    |
 * | U+1EDA   | Ớ     | O           | Latin capital letter O with horn and acute            |
 * | U+1EDB   | ớ     | o           | Latin small letter o with horn and acute              |
 * | U+1EDC   | Ờ     | O           | Latin capital letter O with horn and grave            |
 * | U+1EDD   | ờ     | o           | Latin small letter o with horn and grave              |
 * | U+1EDE   | Ở     | O           | Latin capital letter O with horn and hook above       |
 * | U+1EDF   | ở     | o           | Latin small letter o with horn and hook above         |
 * | U+1EE0   | Ỡ     | O           | Latin capital letter O with horn and tilde            |
 * | U+1EE1   | ỡ     | o           | Latin small letter o with horn and tilde              |
 * | U+1EE2   | Ợ     | O           | Latin capital letter O with horn and dot below        |
 * | U+1EE3   | ợ     | o           | Latin small letter o with horn and dot below          |
 * | U+1EE4   | Ụ     | U           | Latin capital letter U with dot below                 |
 * | U+1EE5   | ụ     | u           | Latin small letter u with dot below                   |
 * | U+1EE6   | Ủ     | U           | Latin capital letter U with hook above                |
 * | U+1EE7   | ủ     | u           | Latin small letter u with hook above                  |
 * | U+1EE8   | Ứ     | U           | Latin capital letter U with horn and acute            |
 * | U+1EE9   | ứ     | u           | Latin small letter u with horn and acute              |
 * | U+1EEA   | Ừ     | U           | Latin capital letter U with horn and grave            |
 * | U+1EEB   | ừ     | u           | Latin small letter u with horn and grave              |
 * | U+1EEC   | Ử     | U           | Latin capital letter U with horn and hook above       |
 * | U+1EED   | ử     | u           | Latin small letter u with horn and hook above         |
 * | U+1EEE   | Ữ     | U           | Latin capital letter U with horn and tilde            |
 * | U+1EEF   | ữ     | u           | Latin small letter u with horn and tilde              |
 * | U+1EF0   | Ự     | U           | Latin capital letter U with horn and dot below        |
 * | U+1EF1   | ự     | u           | Latin small letter u with horn and dot below          |
 * | U+1EF2   | Ỳ     | Y           | Latin capital letter Y with grave                     |
 * | U+1EF3   | ỳ     | y           | Latin small letter y with grave                       |
 * | U+1EF4   | Ỵ     | Y           | Latin capital letter Y with dot below                 |
 * | U+1EF5   | ỵ     | y           | Latin small letter y with dot below                   |
 * | U+1EF6   | Ỷ     | Y           | Latin capital letter Y with hook above                |
 * | U+1EF7   | ỷ     | y           | Latin small letter y with hook above                  |
 * | U+1EF8   | Ỹ     | Y           | Latin capital letter Y with tilde                     |
 * | U+1EF9   | ỹ     | y           | Latin small letter y with tilde                       |
 *
 * German (`de_DE`), German formal (`de_DE_formal`), German (Switzerland) formal (`de_CH`),
 * German (Switzerland) informal (`de_CH_informal`), and German (Austria) (`de_AT`) locales:
 *
 * |   Code   | Glyph | Replacement |               Description               |
 * | -------- | ----- | ----------- | --------------------------------------- |
 * | U+00C4   | Ä     | Ae          | Latin capital letter A with diaeresis   |
 * | U+00E4   | ä     | ae          | Latin small letter a with diaeresis     |
 * | U+00D6   | Ö     | Oe          | Latin capital letter O with diaeresis   |
 * | U+00F6   | ö     | oe          | Latin small letter o with diaeresis     |
 * | U+00DC   | Ü     | Ue          | Latin capital letter U with diaeresis   |
 * | U+00FC   | ü     | ue          | Latin small letter u with diaeresis     |
 * | U+00DF   | ß     | ss          | Latin small letter sharp s              |
 *
 * Danish (`da_DK`) locale:
 *
 * |   Code   | Glyph | Replacement |               Description               |
 * | -------- | ----- | ----------- | --------------------------------------- |
 * | U+00C6   | Æ     | Ae          | Latin capital letter AE                 |
 * | U+00E6   | æ     | ae          | Latin small letter ae                   |
 * | U+00D8   | Ø     | Oe          | Latin capital letter O with stroke      |
 * | U+00F8   | ø     | oe          | Latin small letter o with stroke        |
 * | U+00C5   | Å     | Aa          | Latin capital letter A with ring above  |
 * | U+00E5   | å     | aa          | Latin small letter a with ring above    |
 *
 * Catalan (`ca`) locale:
 *
 * |   Code   | Glyph | Replacement |               Description               |
 * | -------- | ----- | ----------- | --------------------------------------- |
 * | U+00B7   | l·l   | ll          | Flown dot (between two Ls)              |
 *
 * Serbian (`sr_RS`) and Bosnian (`bs_BA`) locales:
 *
 * |   Code   | Glyph | Replacement |               Description               |
 * | -------- | ----- | ----------- | --------------------------------------- |
 * | U+0110   | Đ     | DJ          | Latin capital letter D with stroke      |
 * | U+0111   | đ     | dj          | Latin small letter d with stroke        |
 *
 * @since 1.2.1
 * @since 4.6.0 Added locale support for `de_CH`, `de_CH_informal`, and `ca`.
 * @since 4.7.0 Added locale support for `sr_RS`.
 * @since 4.8.0 Added locale support for `bs_BA`.
 * @since 5.7.0 Added locale support for `de_AT`.
 * @since 6.0.0 Added the `$locale` parameter.
 * @since 6.1.0 Added Unicode NFC encoding normalization support.
 *
 * @param string $text   Text that might have accent characters.
 * @param string $locale Optional. The locale to use for accent removal. Some character
 *                       replacements depend on the locale being used (e.g. 'de_DE').
 *                       Defaults to the current locale.
 * @return string Filtered string with replaced "nice" characters.
 */
    public function removeAccents(string $text, string $locale = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a filename, replacing whitespace with dashes.
 *
 * Removes special characters that are illegal in filenames on certain
 * operating systems and special characters requiring special escaping
 * to manipulate at the command line. Replaces spaces and consecutive
 * dashes with a single dash. Trims period, dash and underscore from beginning
 * and end of filename. It is not guaranteed that this function will return a
 * filename that is allowed to be uploaded.
 *
 * @since 2.1.0
 *
 * @param string $filename The filename to be sanitized.
 * @return string The sanitized filename.
 */
    public function sanitizeFileName(string $filename): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a username, stripping out unsafe characters.
 *
 * Removes tags, percent-encoded characters, HTML entities, and if strict is enabled,
 * will only keep alphanumeric, _, space, ., -, @. After sanitizing, it passes the username,
 * raw username (the username in the parameter), and the value of $strict as parameters
 * for the {@see 'sanitize_user'} filter.
 *
 * @since 2.0.0
 *
 * @param string $username The username to be sanitized.
 * @param bool $strict   Optional. If set to true, limits $username to specific characters.
 *                         Default false.
 * @return string The sanitized username, after passing through filters.
 */
    public function sanitizeUser(string $username, bool $strict = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a string key.
 *
 * Keys are used as internal identifiers. Lowercase alphanumeric characters,
 * dashes, and underscores are allowed.
 *
 * @since 3.0.0
 *
 * @param string $key String key.
 * @return string Sanitized key.
 */
    public function sanitizeKey(string $key): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a string into a slug, which can be used in URLs or HTML attributes.
 *
 * By default, converts accent characters to ASCII characters and further
 * limits the output to alphanumeric characters, underscore (_) and dash (-)
 * through the {@see 'sanitize_title'} filter.
 *
 * If `$title` is empty and `$fallback_title` is set, the latter will be used.
 *
 * @since 1.0.0
 *
 * @param string $title          The string to be sanitized.
 * @param string $fallbackTitle Optional. A title to use if $title is empty. Default empty.
 * @param string $context        Optional. The operation for which the string is sanitized.
 *                               When set to 'save', the string runs through remove_accents().
 *                               Default 'save'.
 * @return string The sanitized string.
 */
    public function sanitizeTitle(string $title, string $fallbackTitle = '', string $context = 'save'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a title with the 'query' context.
 *
 * Used for querying the database for a value from URL.
 *
 * @since 3.1.0
 *
 * @param string $title The string to be sanitized.
 * @return string The sanitized string.
 */
    public function sanitizeTitleForQuery(string $title): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a title, replacing whitespace and a few other characters with dashes.
 *
 * Limits the output to alphanumeric characters, underscore (_) and dash (-).
 * Whitespace becomes a dash.
 *
 * @since 1.2.0
 *
 * @param string $title     The title to be sanitized.
 * @param string $rawTitle Optional. Not used. Default empty.
 * @param string $context   Optional. The operation for which the string is sanitized.
 *                          When set to 'save', additional entities are converted to hyphens
 *                          or stripped entirely. Default 'display'.
 * @return string The sanitized title.
 */
    public function sanitizeTitleWithDashes(string $title, string $rawTitle = '', string $context = 'display'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Ensures a string is a valid SQL 'order by' clause.
 *
 * Accepts one or more columns, with or without a sort order (ASC / DESC).
 * e.g. 'column_1', 'column_1, column_2', 'column_1 ASC, column_2 DESC' etc.
 *
 * Also accepts 'RAND()'.
 *
 * @since 2.5.1
 *
 * @param string $orderby Order by clause to be validated.
 * @return string|false Returns $orderby if valid, false otherwise.
 */
    public function sanitizeSqlOrderby(string $orderby): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes an HTML classname to ensure it only contains valid characters.
 *
 * Strips the string down to A-Z,a-z,0-9,_,-. If this results in an empty
 * string then it will return the alternative value supplied.
 *
 * @todo Expand to support the full range of CDATA that a class attribute can contain.
 *
 * @since 2.8.0
 *
 * @param string $classname The classname to be sanitized.
 * @param string $fallback  Optional. The value to return if the sanitization ends up as an empty string.
 *                          Default empty string.
 * @return string The sanitized value.
 */
    public function sanitizeHtmlClass(string $classname, string $fallback = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Strips out all characters not allowed in a locale name.
 *
 * @since 6.2.1
 *
 * @param string $localeName The locale name to be sanitized.
 * @return string The sanitized value.
 */
    public function sanitizeLocaleName(string $localeName): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts lone & characters into `&#038;` (a.k.a. `&amp;`)
 *
 * @since 0.71
 *
 * @param string $content    String of characters to be converted.
 * @param string $deprecated Not used.
 * @return string Converted string.
 */
    public function convertChars(string $content, string $deprecated = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts invalid Unicode references range to valid range.
 *
 * @since 4.3.0
 *
 * @param string $content String with entities that need converting.
 * @return string Converted string.
 */
    public function convertInvalidEntities(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Balances tags if forced to, or if the 'use_balanceTags' option is set to true.
 *
 * @since 0.71
 *
 * @param string $text  Text to be balanced
 * @param bool $force If true, forces balancing, ignoring the value of the option. Default false.
 * @return string Balanced text
 */
    public function balanceTags(string $text, bool $force = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Balances tags of string using a modified stack.
 *
 * @since 2.0.4
 * @since 5.3.0 Improve accuracy and add support for custom element tags.
 *
 * @author Leonard Lin <leonard@acm.org>
 * @license GPL
 * @copyright November 4, 2001
 * @version 1.1
 * @todo Make better - change loop condition to $text in 1.2
 * @internal Modified by Scott Reilly (coffee2code) 02 Aug 2004
 *      1.1  Fixed handling of append/stack pop order of end text
 *           Added Cleaning Hooks
 *      1.0  First Version
 *
 * @param string $text Text to be balanced.
 * @return string Balanced text.
 */
    public function forceBalanceTags(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Acts on text which is about to be edited.
 *
 * The $content is run through esc_textarea(), which uses htmlspecialchars()
 * to convert special characters to HTML entities. If `$richedit` is set to true,
 * it is simply a holder for the {@see 'format_to_edit'} filter.
 *
 * @since 0.71
 * @since 4.4.0 The `$richedit` parameter was renamed to `$rich_text` for clarity.
 *
 * @param string $content   The text about to be edited.
 * @param bool $richText Optional. Whether `$content` should be considered rich text,
 *                          in which case it would not be passed through esc_textarea().
 *                          Default false.
 * @return string The text after the filter (and possibly htmlspecialchars()) has been run.
 */
    public function formatToEdit(string $content, bool $richText = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Add leading zeros when necessary.
 *
 * If you set the threshold to '4' and the number is '10', then you will get
 * back '0010'. If you set the threshold to '4' and the number is '5000', then you
 * will get back '5000'.
 *
 * Uses sprintf to append the amount of zeros based on the $threshold parameter
 * and the size of the number. If the number is large enough, then no zeros will
 * be appended.
 *
 * @since 0.71
 *
 * @param int $number     Number to append zeros to if not greater than threshold.
 * @param int $threshold  Digit places number needs to be to not have zeros added.
 * @return string Adds leading zeros to number if needed.
 */
    public function zeroise(int $number, int $threshold): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds backslashes before letters and before a number at the start of a string.
 *
 * @since 0.71
 *
 * @param string $value Value to which backslashes will be added.
 * @return string String with backslashes inserted.
 */
    public function backslashit(string $value): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Appends a trailing slash.
 *
 * Will remove trailing forward and backslashes if it exists already before adding
 * a trailing forward slash. This prevents double slashing a string or path.
 *
 * The primary use of this is for paths and thus should be used for paths. It is
 * not restricted to paths and offers no specific path support.
 *
 * @since 1.2.0
 *
 * @param string $value Value to which trailing slash will be added.
 * @return string String with trailing slash added.
 */
    public function trailingslashit(string $value): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes trailing forward slashes and backslashes if they exist.
 *
 * The primary use of this is for paths and thus should be used for paths. It is
 * not restricted to paths and offers no specific path support.
 *
 * @since 2.2.0
 *
 * @param string $text Value from which trailing slashes will be removed.
 * @return string String without the trailing slashes.
 */
    public function untrailingslashit(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds slashes to a string or recursively adds slashes to strings within an array.
 *
 * @since 0.71
 *
 * @param string|array $gpc String or array of data to slash.
 * @return string|array Slashed `$gpc`.
 */
    public function addslashesGpc(string|array $gpc): string|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Navigates through an array, object, or scalar, and removes slashes from the values.
 *
 * @since 2.0.0
 *
 * @param mixed $value The value to be stripped.
 * @return mixed Stripped value.
 */
    public function stripslashesDeep(mixed $value): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Callback function for `stripslashes_deep()` which strips slashes from strings.
 *
 * @since 4.4.0
 *
 * @param mixed $value The array or string to be stripped.
 * @return mixed The stripped value.
 */
    public function stripslashesFromStringsOnly(mixed $value): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Navigates through an array, object, or scalar, and encodes the values to be used in a URL.
 *
 * @since 2.2.0
 *
 * @param mixed $value The array or string to be encoded.
 * @return mixed The encoded value.
 */
    public function urlencodeDeep(mixed $value): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL.
 *
 * @since 3.4.0
 *
 * @param mixed $value The array or string to be encoded.
 * @return mixed The encoded value.
 */
    public function rawurlencodeDeep(mixed $value): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Navigates through an array, object, or scalar, and decodes URL-encoded values
 *
 * @since 4.4.0
 *
 * @param mixed $value The array or string to be decoded.
 * @return mixed The decoded value.
 */
    public function urldecodeDeep(mixed $value): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts email addresses characters to HTML entities to block spam bots.
 *
 * @since 0.71
 *
 * @param string $emailAddress Email address.
 * @param int $hexEncoding  Optional. Set to 1 to enable hex encoding.
 * @return string Converted email address.
 */
    public function antispambot(string $emailAddress, int $hexEncoding = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts plaintext URI to HTML links.
 *
 * Converts URI, www and ftp, and email addresses. Finishes by fixing links
 * within links.
 *
 * @since 0.71
 *
 * @param string $text Content to convert URIs.
 * @return string Content with converted URIs.
 */
    public function makeClickable(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Callback to add a rel attribute to HTML A element.
 *
 * Will remove already existing string before adding to prevent invalidating (X)HTML.
 *
 * @since 5.3.0
 *
 * @param array $matches Single match.
 * @param string $rel     The rel attribute to add.
 * @return string HTML A element with the added rel attribute.
 */
    public function wpRelCallback(array $matches, string $rel): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `rel="nofollow"` string to all HTML A elements in content.
 *
 * @since 1.5.0
 *
 * @param string $text Content that may contain HTML A elements.
 * @return string Converted content.
 */
    public function wpRelNofollow(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `rel="nofollow ugc"` string to all HTML A elements in content.
 *
 * @since 5.3.0
 *
 * @param string $text Content that may contain HTML A elements.
 * @return string Converted content.
 */
    public function wpRelUgc(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `rel="noopener"` to all HTML A elements that have a target.
 *
 * @since 5.1.0
 * @since 5.6.0 Removed 'noreferrer' relationship.
 *
 * @param string $text Content that may contain HTML A elements.
 * @return string Converted content.
 */
    public function wpTargetedLinkRel(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Callback to add `rel="noopener"` string to HTML A element.
 *
 * Will not duplicate an existing 'noopener' value to avoid invalidating the HTML.
 *
 * @since 5.1.0
 * @since 5.6.0 Removed 'noreferrer' relationship.
 *
 * @param array $matches Single match.
 * @return string HTML A Element with `rel="noopener"` in addition to any existing values.
 */
    public function wpTargetedLinkRelCallback(array $matches): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds all filters modifying the rel attribute of targeted links.
 *
 * @since 5.1.0
 */
    public function wpInitTargetedLinkRelFilters(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all filters modifying the rel attribute of targeted links.
 *
 * @since 5.1.0
 */
    public function wpRemoveTargetedLinkRelFilters(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts one smiley code to the icon graphic file equivalent.
 *
 * Callback handler for convert_smilies().
 *
 * Looks up one smiley code in the $wpsmiliestrans global array and returns an
 * `<img>` string for that smiley.
 *
 * @since 2.8.0
 *
 * @global array $wpsmiliestrans
 *
 * @param array $matches Single match. Smiley code to convert to image.
 * @return string Image string for smiley.
 */
    public function translateSmiley(array $matches): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts text equivalent of smilies to images.
 *
 * Will only convert smilies if the option 'use_smilies' is true and the global
 * used in the function isn't empty.
 *
 * @since 0.71
 *
 * @global string|array $wp_smiliessearch
 *
 * @param string $text Content to convert smilies from text.
 * @return string Converted content with text smilies replaced with images.
 */
    public function convertSmilies(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Verifies that an email is valid.
 *
 * Does not grok i18n domains. Not RFC compliant.
 *
 * @since 0.71
 *
 * @param string $email      Email address to verify.
 * @param bool $deprecated Deprecated.
 * @return string|false Valid email address on success, false on failure.
 */
    public function isEmail(string $email, bool $deprecated = false): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts to ASCII from email subjects.
 *
 * @since 1.2.0
 *
 * @param string $subject Subject line.
 * @return string Converted string to ASCII.
 */
    public function wpIsoDescrambler(string $subject): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Given a date in the timezone of the site, returns that date in UTC.
 *
 * Requires and returns a date in the Y-m-d H:i:s format.
 * Return format can be overridden using the $format parameter.
 *
 * @since 1.2.0
 *
 * @param string $dateString The date to be converted, in the timezone of the site.
 * @param string $format      The format string for the returned date. Default 'Y-m-d H:i:s'.
 * @return string Formatted version of the date, in UTC.
 */
    public function getGmtFromDate(string $dateString, string $format = 'Y-m-d H:i:s'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Given a date in UTC or GMT timezone, returns that date in the timezone of the site.
 *
 * Requires a date in the Y-m-d H:i:s format.
 * Default return format of 'Y-m-d H:i:s' can be overridden using the `$format` parameter.
 *
 * @since 1.2.0
 *
 * @param string $dateString The date to be converted, in UTC or GMT timezone.
 * @param string $format      The format string for the returned date. Default 'Y-m-d H:i:s'.
 * @return string Formatted version of the date, in the site's timezone.
 */
    public function getDateFromGmt(string $dateString, string $format = 'Y-m-d H:i:s'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Given an ISO 8601 timezone, returns its UTC offset in seconds.
 *
 * @since 1.5.0
 *
 * @param string $timezone Either 'Z' for 0 offset or '±hhmm'.
 * @return int|float The offset in seconds.
 */
    public function iso8601TimezoneToOffset(string $timezone): int|float
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Given an ISO 8601 (Ymd\TH:i:sO) date, returns a MySQL DateTime (Y-m-d H:i:s) format used by post_date[_gmt].
 *
 * @since 1.5.0
 *
 * @param string $dateString Date and time in ISO 8601 format {@link https://en.wikipedia.org/wiki/ISO_8601}.
 * @param string $timezone    Optional. If set to 'gmt' returns the result in UTC. Default 'user'.
 * @return string|false The date and time in MySQL DateTime format - Y-m-d H:i:s, or false on failure.
 */
    public function iso8601ToDatetime(string $dateString, string $timezone = 'user'): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Strips out all characters that are not allowable in an email.
 *
 * @since 1.5.0
 *
 * @param string $email Email address to filter.
 * @return string Filtered email address.
 */
    public function sanitizeEmail(string $email): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines the difference between two timestamps.
 *
 * The difference is returned in a human-readable format such as "1 hour",
 * "5 mins", "2 days".
 *
 * @since 1.5.0
 * @since 5.3.0 Added support for showing a difference in seconds.
 *
 * @param int $from Unix timestamp from which the difference begins.
 * @param int $to   Optional. Unix timestamp to end the time difference. Default becomes time() if not set.
 * @return string Human-readable time difference.
 */
    public function humanTimeDiff(int $from, int $to = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates an excerpt from the content, if needed.
 *
 * Returns a maximum of 55 words with an ellipsis appended if necessary.
 *
 * The 55-word limit can be modified by plugins/themes using the {@see 'excerpt_length'} filter
 * The ' [&hellip;]' string can be modified by plugins/themes using the {@see 'excerpt_more'} filter
 *
 * @since 1.5.0
 * @since 5.2.0 Added the `$post` parameter.
 * @since 6.3.0 Removes footnotes markup from the excerpt content.
 *
 * @param string $text Optional. The excerpt. If set to empty, an excerpt is generated.
 * @param WP_Post|object|int $post Optional. WP_Post instance or Post ID/object. Default null.
 * @return string The excerpt.
 */
    public function wpTrimExcerpt(string $text = '', int|object $post = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Trims text to a certain number of words.
 *
 * This function is localized. For languages that count 'words' by the individual
 * character (such as East Asian languages), the $num_words argument will apply
 * to the number of individual characters.
 *
 * @since 3.3.0
 *
 * @param string $text      Text to trim.
 * @param int $numWords Number of words. Default 55.
 * @param string $more      Optional. What to append if $text needs to be trimmed. Default '&hellip;'.
 * @return string Trimmed text.
 */
    public function wpTrimWords(string $text, int $numWords = 55, string $more = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts named entities into numbered entities.
 *
 * @since 1.5.1
 *
 * @param string $text The text within which entities will be converted.
 * @return string Text with converted entities.
 */
    public function ent2ncr(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Formats text for the editor.
 *
 * Generally the browsers treat everything inside a textarea as text, but
 * it is still a good idea to HTML entity encode `<`, `>` and `&` in the content.
 *
 * The filter {@see 'format_for_editor'} is applied here. If `$text` is empty the
 * filter will be applied to an empty string.
 *
 * @since 4.3.0
 *
 * @see _WP_Editors::editor()
 *
 * @param string $text           The text to be formatted.
 * @param string $defaultEditor The default editor for the current user.
 *                               It is usually either 'html' or 'tinymce'.
 * @return string The formatted text after filter is applied.
 */
    public function formatForEditor(string $text, string $defaultEditor = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Escapes data for use in a MySQL query.
 *
 * Usually you should prepare queries using wpdb::prepare().
 * Sometimes, spot-escaping is required or useful. One example
 * is preparing an array for use in an IN clause.
 *
 * NOTE: Since 4.8.3, '%' characters will be replaced with a placeholder string,
 * this prevents certain SQLi attacks from taking place. This change in behavior
 * may cause issues for code that expects the return value of esc_sql() to be usable
 * for other purposes.
 *
 * @since 2.8.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string|array $data Unescaped data.
 * @return string|array Escaped data, in the same type as supplied.
 */
    public function escSql(string|array $data): string|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks and cleans a URL.
 *
 * A number of characters are removed from the URL. If the URL is for displaying
 * (the default behavior) ampersands are also replaced. The {@see 'clean_url'} filter
 * is applied to the returned cleaned URL.
 *
 * @since 2.8.0
 *
 * @param string $url       The URL to be cleaned.
 * @param string[] $protocols Optional. An array of acceptable protocols.
 *                            Defaults to return value of wp_allowed_protocols().
 * @param string $context  Private. Use sanitize_url() for database usage.
 * @return string The cleaned URL after the {@see 'clean_url'} filter is applied.
 *                An empty string is returned if `$url` specifies a protocol other than
 *                those in `$protocols`, or if `$url` contains an empty string.
 */
    public function escUrl(string $url, array $protocols = null, string $context = 'display'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a URL for database or redirect usage.
 *
 * This function is an alias for sanitize_url().
 *
 * @since 2.8.0
 * @since 6.1.0 Turned into an alias for sanitize_url().
 *
 * @see sanitize_url()
 *
 * @param string $url       The URL to be cleaned.
 * @param string[] $protocols Optional. An array of acceptable protocols.
 *                            Defaults to return value of wp_allowed_protocols().
 * @return string The cleaned URL after sanitize_url() is run.
 */
    public function escUrlRaw(string $url, array $protocols = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a URL for database or redirect usage.
 *
 * @since 2.3.1
 * @since 2.8.0 Deprecated in favor of esc_url_raw().
 * @since 5.9.0 Restored (un-deprecated).
 *
 * @see esc_url()
 *
 * @param string $url       The URL to be cleaned.
 * @param string[] $protocols Optional. An array of acceptable protocols.
 *                            Defaults to return value of wp_allowed_protocols().
 * @return string The cleaned URL after esc_url() is run with the 'db' context.
 */
    public function sanitizeUrl(string $url, array $protocols = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts entities, while preserving already-encoded entities.
 *
 * @link https://www.php.net/htmlentities Borrowed from the PHP Manual user notes.
 *
 * @since 1.2.2
 *
 * @param string $text The text to be converted.
 * @return string Converted text.
 */
    public function htmlentities2(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Escapes single quotes, `"`, `<`, `>`, `&`, and fixes line endings.
 *
 * Escapes text strings for echoing in JS. It is intended to be used for inline JS
 * (in a tag attribute, for example `onclick="..."`). Note that the strings have to
 * be in single quotes. The {@see 'js_escape'} filter is also applied here.
 *
 * @since 2.8.0
 *
 * @param string $text The text to be escaped.
 * @return string Escaped text.
 */
    public function escJs(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Escaping for HTML blocks.
 *
 * @since 2.8.0
 *
 * @param string $text
 * @return string
 */
    public function escHtml(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Escaping for HTML attributes.
 *
 * @since 2.8.0
 *
 * @param string $text
 * @return string
 */
    public function escAttr(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Escaping for textarea values.
 *
 * @since 3.1.0
 *
 * @param string $text
 * @return string
 */
    public function escTextarea(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Escaping for XML blocks.
 *
 * @since 5.5.0
 *
 * @param string $text Text to escape.
 * @return string Escaped text.
 */
    public function escXml(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Escapes an HTML tag name.
 *
 * @since 2.5.0
 * @since 6.5.5 Allow hyphens in tag names (i.e. custom elements).
 *
 * @param string $tagName
 * @return string
 */
    public function tagEscape(string $tagName): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts full URL paths to absolute paths.
 *
 * Removes the http or https protocols and the domain. Keeps the path '/' at the
 * beginning, so it isn't a true relative link, but from the web root base.
 *
 * @since 2.1.0
 * @since 4.1.0 Support was added for relative URLs.
 *
 * @param string $link Full URL path.
 * @return string Absolute path.
 */
    public function wpMakeLinkRelative(string $link): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes various option values based on the nature of the option.
 *
 * This is basically a switch statement which will pass $value through a number
 * of functions depending on the $option.
 *
 * @since 2.0.5
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $option The name of the option.
 * @param mixed $value  The unsanitized value.
 * @return mixed Sanitized value.
 */
    public function sanitizeOption(string $option, mixed $value): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Maps a function to all non-iterable elements of an array or an object.
 *
 * This is similar to `array_walk_recursive()` but acts upon objects too.
 *
 * @since 4.4.0
 *
 * @param mixed $value    The array, object, or scalar.
 * @param callable $callback The function to map onto $value.
 * @return mixed The value with the callback applied to all non-arrays and non-objects inside it.
 */
    public function mapDeep(mixed $value, callable $callback): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses a string into variables to be stored in an array.
 *
 * @since 2.2.1
 *
 * @param string $inputString The string to be parsed.
 * @param array $result       Variables will be stored in this array.
 */
    public function wpParseStr(string $inputString, array $result): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts lone less than signs.
 *
 * KSES already converts lone greater than signs.
 *
 * @since 2.3.0
 *
 * @param string $content Text to be converted.
 * @return string Converted text.
 */
    public function wpPreKsesLessThan(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Callback function used by preg_replace.
 *
 * @since 2.3.0
 *
 * @param string[] $matches Populated by matches to preg_replace.
 * @return string The text returned after esc_html if needed.
 */
    public function wpPreKsesLessThanCallback(array $matches): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes non-allowable HTML from parsed block attribute values when filtering
 * in the post context.
 *
 * @since 5.3.1
 *
 * @param string $content           Content to be run through KSES.
 * @param array[]|string $allowedHtml      An array of allowed HTML elements
 *                                          and attributes, or a context name
 *                                          such as 'post'.
 * @param string[] $allowedProtocols Array of allowed URL protocols.
 * @return string Filtered text to run through KSES.
 */
    public function wpPreKsesBlockAttributes(string $content, array|string $allowedHtml, array $allowedProtocols): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * WordPress' implementation of PHP sprintf() with filters.
 *
 * @since 2.5.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @link https://www.php.net/sprintf
 *
 * @param string $pattern The string which formatted args are inserted.
 * @param mixed  ...$args Arguments to be formatted into the $pattern string.
 * @return string The formatted string.
 */
    public function wpSprintf(string $pattern): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Localizes list items before the rest of the content.
 *
 * The '%l' must be at the first characters can then contain the rest of the
 * content. The list items will have ', ', ', and', and ' and ' added depending
 * on the amount of list items in the $args parameter.
 *
 * @since 2.5.0
 *
 * @param string $pattern Content containing '%l' at the beginning.
 * @param array $args    List items to prepend to the content and replace '%l'.
 * @return string Localized list items and rest of the content.
 */
    public function wpSprintfL(string $pattern, array $args): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Safely extracts not more than the first $count characters from HTML string.
 *
 * UTF-8, tags and entities safe prefix extraction. Entities inside will *NOT*
 * be counted as one character. For example &amp; will be counted as 4, &lt; as
 * 3, etc.
 *
 * @since 2.5.0
 *
 * @param string $str   String to get the excerpt from.
 * @param int $count Maximum number of characters to take.
 * @param string $more  Optional. What to append if $str needs to be trimmed. Defaults to empty string.
 * @return string The excerpt.
 */
    public function wpHtmlExcerpt(string $str, int $count, string $more = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a base URL to relative links in passed content.
 *
 * By default, this function supports the 'src' and 'href' attributes.
 * However, this can be modified via the `$attrs` parameter.
 *
 * @since 2.7.0
 *
 * @global string $_links_add_base
 *
 * @param string $content String to search for links in.
 * @param string $base    The base URL to prefix to links.
 * @param array $attrs   The attributes which should be processed.
 * @return string The processed content.
 */
    public function linksAddBaseUrl(string $content, string $base, array $attrs = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a target attribute to all links in passed content.
 *
 * By default, this function only applies to `<a>` tags.
 * However, this can be modified via the `$tags` parameter.
 *
 * *NOTE:* Any current target attribute will be stripped and replaced.
 *
 * @since 2.7.0
 *
 * @global string $_links_add_target
 *
 * @param string $content String to search for links in.
 * @param string $target  The target to add to the links.
 * @param string[] $tags    An array of tags to apply to.
 * @return string The processed content.
 */
    public function linksAddTarget(string $content, string $target = '_blank', array $tags = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Normalizes EOL characters and strips duplicate whitespace.
 *
 * @since 2.7.0
 *
 * @param string $str The string to normalize.
 * @return string The normalized string.
 */
    public function normalizeWhitespace(string $str): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Properly strips all HTML tags including script and style
 *
 * This differs from strip_tags() because it removes the contents of
 * the `<script>` and `<style>` tags. E.g. `strip_tags( '<script>something</script>' )`
 * will return 'something'. wp_strip_all_tags will return ''
 *
 * @since 2.9.0
 *
 * @param string $text          String containing HTML tags
 * @param bool $removeBreaks Optional. Whether to remove left over line breaks and white space chars
 * @return string The processed string.
 */
    public function wpStripAllTags(string $text, bool $removeBreaks = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a string from user input or from the database.
 *
 * - Checks for invalid UTF-8,
 * - Converts single `<` characters to entities
 * - Strips all tags
 * - Removes line breaks, tabs, and extra whitespace
 * - Strips percent-encoded characters
 *
 * @since 2.9.0
 *
 * @see sanitize_textarea_field()
 * @see wp_check_invalid_utf8()
 * @see wp_strip_all_tags()
 *
 * @param string $str String to sanitize.
 * @return string Sanitized string.
 */
    public function sanitizeTextField(string $str): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a multiline string from user input or from the database.
 *
 * The function is like sanitize_text_field(), but preserves
 * new lines (\n) and other whitespace, which are legitimate
 * input in textarea elements.
 *
 * @see sanitize_text_field()
 *
 * @since 4.7.0
 *
 * @param string $str String to sanitize.
 * @return string Sanitized string.
 */
    public function sanitizeTextareaField(string $str): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * i18n-friendly version of basename().
 *
 * @since 3.1.0
 *
 * @param string $path   A path.
 * @param string $suffix If the filename ends in suffix this will also be cut off.
 * @return string
 */
    public function wpBasename(string $path, string $suffix = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Forever eliminate "Wordpress" from the planet (or at least the little bit we can influence).
 *
 * Violating our coding standards for a good function name.
 *
 * @since 3.0.0
 *
 * @param string $text The text to be modified.
 * @return string The modified text.
 */
    public function capitalPDangit(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a mime type
 *
 * @since 3.1.3
 *
 * @param string $mimeType Mime type.
 * @return string Sanitized mime type.
 */
    public function sanitizeMimeType(string $mimeType): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes space or carriage return separated URLs that are used to send trackbacks.
 *
 * @since 3.4.0
 *
 * @param string $toPing Space or carriage return separated URLs
 * @return string URLs starting with the http or https protocol, separated by a carriage return.
 */
    public function sanitizeTrackbackUrls(string $toPing): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds slashes to a string or recursively adds slashes to strings within an array.
 *
 * This should be used when preparing data for core API that expects slashed data.
 * This should not be used to escape data going directly into an SQL query.
 *
 * @since 3.6.0
 * @since 5.5.0 Non-string values are left untouched.
 *
 * @param string|array $value String or array of data to slash.
 * @return string|array Slashed `$value`, in the same type as supplied.
 */
    public function wpSlash(string|array $value): string|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes slashes from a string or recursively removes slashes from strings within an array.
 *
 * This should be used to remove slashes from data passed to core API that
 * expects data to be unslashed.
 *
 * @since 3.6.0
 *
 * @param string|array $value String or array of data to unslash.
 * @return string|array Unslashed `$value`, in the same type as supplied.
 */
    public function wpUnslash(string|array $value): string|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Extracts and returns the first URL from passed content.
 *
 * @since 3.6.0
 *
 * @param string $content A string which might contain a URL.
 * @return string|false The found URL.
 */
    public function getUrlInContent(string $content): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the regexp for common whitespace characters.
 *
 * By default, spaces include new lines, tabs, nbsp entities, and the UTF-8 nbsp.
 * This is designed to replace the PCRE \s sequence. In ticket #22692, that
 * sequence was found to be unreliable due to random inclusion of the A0 byte.
 *
 * @since 4.0.0
 *
 * @return string The spaces regexp.
 */
    public function wpSpacesRegexp(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues the important emoji-related styles.
 *
 * @since 6.4.0
 */
    public function wpEnqueueEmojiStyles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the inline Emoji detection script if it is not already printed.
 *
 * @since 4.2.0
 */
    public function printEmojiDetectionScript(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts emoji characters to their equivalent HTML entity.
 *
 * This allows us to store emoji in a DB using the utf8 character set.
 *
 * @since 4.2.0
 *
 * @param string $content The content to encode.
 * @return string The encoded content.
 */
    public function wpEncodeEmoji(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts emoji to a static img element.
 *
 * @since 4.2.0
 *
 * @param string $text The content to encode.
 * @return string The encoded content.
 */
    public function wpStaticizeEmoji(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts emoji in emails into static images.
 *
 * @since 4.2.0
 *
 * @param array $mail The email data array.
 * @return array The email data array, with emoji in the message staticized.
 */
    public function wpStaticizeEmojiForEmail(array $mail): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Shortens a URL, to be used as link text.
 *
 * @since 1.2.0
 * @since 4.4.0 Moved to wp-includes/formatting.php from wp-admin/includes/misc.php and added $length param.
 *
 * @param string $url    URL to shorten.
 * @param int $length Optional. Maximum length of the shortened URL. Default 35 characters.
 * @return string Shortened URL.
 */
    public function urlShorten(string $url, int $length = 35): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a hex color.
 *
 * Returns either '', a 3 or 6 digit hex color (with #), or nothing.
 * For sanitizing values without a #, see sanitize_hex_color_no_hash().
 *
 * @since 3.4.0
 *
 * @param string $color
 * @return string|void
 */
    public function sanitizeHexColor(string $color): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible.
 *
 * Saving hex colors without a hash puts the burden of adding the hash on the
 * UI, which makes it difficult to use or upgrade to other color types such as
 * rgba, hsl, rgb, and HTML color names.
 *
 * Returns either '', a 3 or 6 digit hex color (without a #), or null.
 *
 * @since 3.4.0
 *
 * @param string $color
 * @return string|null
 */
    public function sanitizeHexColorNoHash(string $color): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Ensures that any hex color is properly hashed.
 * Otherwise, returns value untouched.
 *
 * This method should only be necessary if using sanitize_hex_color_no_hash().
 *
 * @since 3.4.0
 *
 * @param string $color
 * @return string
 */
    public function maybeHashHexColor(string $color): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts given MySQL date string into a different format.
 *
 *  - `$format` should be a PHP date format string.
 *  - 'U' and 'G' formats will return an integer sum of timestamp with timezone offset.
 *  - `$date` is expected to be local time in MySQL format (`Y-m-d H:i:s`).
 *
 * Historically UTC time could be passed to the function to produce Unix timestamp.
 *
 * If `$translate` is true then the given date and format string will
 * be passed to `wp_date()` for translation.
 *
 * @since 0.71
 *
 * @param string $format    Format of the date to return.
 * @param string $date      Date string to convert.
 * @param bool $translate Whether the return date should be translated. Default true.
 * @return string|int|false Integer if `$format` is 'U' or 'G', string otherwise.
 *                          False on failure.
 */
    public function mysql2date(string $format, string $date, bool $translate = true): string|int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current time based on specified type.
 *
 *  - The 'mysql' type will return the time in the format for MySQL DATETIME field.
 *  - The 'timestamp' or 'U' types will return the current timestamp or a sum of timestamp
 *    and timezone offset, depending on `$gmt`.
 *  - Other strings will be interpreted as PHP date formats (e.g. 'Y-m-d').
 *
 * If `$gmt` is a truthy value then both types will use GMT time, otherwise the
 * output is adjusted with the GMT offset for the site.
 *
 * @since 1.0.0
 * @since 5.3.0 Now returns an integer if `$type` is 'U'. Previously a string was returned.
 *
 * @param string $type Type of time to retrieve. Accepts 'mysql', 'timestamp', 'U',
 *                       or PHP date format string (e.g. 'Y-m-d').
 * @param int|bool $gmt  Optional. Whether to use GMT timezone. Default false.
 * @return int|string Integer if `$type` is 'timestamp' or 'U', string otherwise.
 */
    public function currentTime(string $type, int|bool $gmt = 0): int|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current time as an object using the site's timezone.
 *
 * @since 5.3.0
 *
 * @return \DateTimeImmutable Date and time object.
 */
    public function currentDatetime(): \DateTimeImmutable
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the timezone of the site as a string.
 *
 * Uses the `timezone_string` option to get a proper timezone name if available,
 * otherwise falls back to a manual UTC ± offset.
 *
 * Example return values:
 *
 *  - 'Europe/Rome'
 *  - 'America/North_Dakota/New_Salem'
 *  - 'UTC'
 *  - '-06:30'
 *  - '+00:00'
 *  - '+08:45'
 *
 * @since 5.3.0
 *
 * @return string PHP timezone name or a ±HH:MM offset.
 */
    public function wpTimezoneString(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the timezone of the site as a `DateTimeZone` object.
 *
 * Timezone can be based on a PHP timezone string or a ±HH:MM offset.
 *
 * @since 5.3.0
 *
 * @return \DateTimeZone Timezone object.
 */
    public function wpTimezone(): \DateTimeZone
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the date in localized format, based on a sum of Unix timestamp and
 * timezone offset in seconds.
 *
 * If the locale specifies the locale month and weekday, then the locale will
 * take over the format for the date. If it isn't, then the date format string
 * will be used instead.
 *
 * Note that due to the way WP typically generates a sum of timestamp and offset
 * with `strtotime()`, it implies offset added at a _current_ time, not at the time
 * the timestamp represents. Storing such timestamps or calculating them differently
 * will lead to invalid output.
 *
 * @since 0.71
 * @since 5.3.0 Converted into a wrapper for wp_date().
 *
 * @param string $format                Format to display the date.
 * @param int|bool $timestampWithOffset Optional. A sum of Unix timestamp and timezone offset
 *                                        in seconds. Default false.
 * @param bool $gmt                   Optional. Whether to use GMT timezone. Only applies
 *                                        if timestamp is not provided. Default false.
 * @return string The date, translated if locale specifies it.
 */
    public function dateI18n(string $format, int|bool $timestampWithOffset = false, bool $gmt = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the date, in localized format.
 *
 * This is a newer function, intended to replace `date_i18n()` without legacy quirks in it.
 *
 * Note that, unlike `date_i18n()`, this function accepts a true Unix timestamp, not summed
 * with timezone offset.
 *
 * @since 5.3.0
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @param string $format    PHP date format.
 * @param int $timestamp Optional. Unix timestamp. Defaults to current time.
 * @param \DateTimeZone $timezone  Optional. Timezone to output result in. Defaults to timezone
 *                                from site settings.
 * @return string|false The date, translated if locale specifies it. False on invalid timestamp input.
 */
    public function wpDate(string $format, int $timestamp = null, \DateTimeZone $timezone = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if the date should be declined.
 *
 * If the locale specifies that month names require a genitive case in certain
 * formats (like 'j F Y'), the month name will be replaced with a correct form.
 *
 * @since 4.4.0
 * @since 5.4.0 The `$format` parameter was added.
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @param string $date   Formatted date string.
 * @param string $format Optional. Date format to check. Default empty string.
 * @return string The date, declined if locale specifies it.
 */
    public function wpMaybeDeclineDate(string $date, string $format = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts float number to format based on the locale.
 *
 * @since 2.3.0
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @param float $number   The number to convert based on locale.
 * @param int $decimals Optional. Precision of the number of decimal places. Default 0.
 * @return string Converted number in string format.
 */
    public function numberFormatI18n(float $number, int $decimals = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts a number of bytes to the largest unit the bytes will fit into.
 *
 * It is easier to read 1 KB than 1024 bytes and 1 MB than 1048576 bytes. Converts
 * number of bytes to human readable number by taking the number of that unit
 * that the bytes will go into it. Supports YB value.
 *
 * Please note that integers in PHP are limited to 32 bits, unless they are on
 * 64 bit architecture, then they have 64 bit size. If you need to place the
 * larger size then what PHP integer type will hold, then use a string. It will
 * be converted to a double, which should always have 64 bit length.
 *
 * Technically the correct unit names for powers of 1024 are KiB, MiB etc.
 *
 * @since 2.3.0
 * @since 6.0.0 Support for PB, EB, ZB, and YB was added.
 *
 * @param int|string $bytes    Number of bytes. Note max integer size for integers.
 * @param int $decimals Optional. Precision of number of decimal places. Default 0.
 * @return string|false Number string on success, false on failure.
 */
    public function sizeFormat(int|string $bytes, int $decimals = 0): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts a duration to human readable format.
 *
 * @since 5.1.0
 *
 * @param string $duration Duration will be in string format (HH:ii:ss) OR (ii:ss),
 *                         with a possible prepended negative sign (-).
 * @return string|false A human readable duration string, false on failure.
 */
    public function humanReadableDuration(string $duration = ''): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the week start and end from the datetime or date string from MySQL.
 *
 * @since 0.71
 *
 * @param string $mysqlstring   Date or datetime field type from MySQL.
 * @param int|string $startOfWeek Optional. Start of the week as an integer. Default empty string.
 * @return int[] {
 *     Week start and end dates as Unix timestamps.
 *
 *     @type int $start The week start date as a Unix timestamp.
 *     @type int $end   The week end date as a Unix timestamp.
 * }
 */
    public function getWeekstartend(string $mysqlstring, int|string $startOfWeek = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Serializes data, if needed.
 *
 * @since 2.0.5
 *
 * @param string|array|object $data Data that might be serialized.
 * @return mixed A scalar data.
 */
    public function maybeSerialize(string|array|object $data): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unserializes data only if it was serialized.
 *
 * @since 2.0.0
 *
 * @param string $data Data that might be unserialized.
 * @return mixed Unserialized data can be any type.
 */
    public function maybeUnserialize(string $data): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks value to find if it was serialized.
 *
 * If $data is not a string, then returned value will always be false.
 * Serialized data is always a string.
 *
 * @since 2.0.5
 * @since 6.1.0 Added Enum support.
 *
 * @param string $data   Value to check to see if was serialized.
 * @param bool $strict Optional. Whether to be strict about the end of the string. Default true.
 * @return bool False if not serialized and true if it was.
 */
    public function isSerialized(string $data, bool $strict = true): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether serialized data is of string type.
 *
 * @since 2.0.5
 *
 * @param string $data Serialized data.
 * @return bool False if not a serialized string, true if it is.
 */
    public function isSerializedString(string $data): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves post title from XMLRPC XML.
 *
 * If the title element is not part of the XML, then the default post title from
 * the $post_default_title will be used instead.
 *
 * @since 0.71
 *
 * @global string $post_default_title Default XML-RPC post title.
 *
 * @param string $content XMLRPC XML Request content
 * @return string Post title
 */
    public function xmlrpcGetposttitle(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post category or categories from XMLRPC XML.
 *
 * If the category element is not found, then the default post category will be
 * used. The return type then would be what $post_default_category. If the
 * category is found, then it will always be an array.
 *
 * @since 0.71
 *
 * @global string $post_default_category Default XML-RPC post category.
 *
 * @param string $content XMLRPC XML Request content
 * @return string|array List of categories or category name.
 */
    public function xmlrpcGetpostcategory(string $content): string|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * XMLRPC XML content without title and category elements.
 *
 * @since 0.71
 *
 * @param string $content XML-RPC XML Request content.
 * @return string XMLRPC XML Request content without title and category elements.
 */
    public function xmlrpcRemovepostdata(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Uses RegEx to extract URLs from arbitrary content.
 *
 * @since 3.7.0
 * @since 6.0.0 Fixes support for HTML entities (Trac 30580).
 *
 * @param string $content Content to extract URLs from.
 * @return string[] Array of URLs found in passed string.
 */
    public function wpExtractUrls(string $content): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks content for video and audio links to add as enclosures.
 *
 * Will not add enclosures that have already been added and will
 * remove enclosures that are no longer in the post. This is called as
 * pingbacks and trackbacks.
 *
 * @since 1.5.0
 * @since 5.3.0 The `$content` parameter was made optional, and the `$post` parameter was
 *              updated to accept a post ID or a WP_Post object.
 * @since 5.6.0 The `$content` parameter is no longer optional, but passing `null` to skip it
 *              is still supported.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string|null $content Post content. If `null`, the `post_content` field from `$post` is used.
 * @param int|\WP_Post $post    Post ID or post object.
 * @return void|false Void on success, false if the post is not found.
 */
    public function doEnclose(string|null $content, int|\WP_Post $post): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTTP Headers from URL.
 *
 * @since 1.5.1
 *
 * @param string $url        URL to retrieve HTTP headers from.
 * @param bool $deprecated Not Used.
 * @return \WpOrg\Requests\Utility\CaseInsensitiveDictionary|false Headers on success, false on failure.
 */
    public function wpGetHttpHeaders(string $url, bool $deprecated = false): \WpOrg\Requests\Utility\CaseInsensitiveDictionary|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the publish date of the current post in the loop is different
 * from the publish date of the previous post in the loop.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 0.71
 *
 * @global string $currentday  The day of the current post in the loop.
 * @global string $previousday The day of the previous post in the loop.
 *
 * @return int 1 when new day, 0 if not a new day.
 */
    public function isNewDay(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds URL query based on an associative and, or indexed array.
 *
 * This is a convenient function for easily building url queries. It sets the
 * separator to '&' and uses _http_build_query() function.
 *
 * @since 2.3.0
 *
 * @see _http_build_query() Used to build the query
 * @link https://www.php.net/manual/en/function.http-build-query.php for more on what
 *       http_build_query() does.
 *
 * @param array $data URL-encode key/value pairs.
 * @return string URL-encoded string.
 */
    public function buildQuery(array $data): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a modified URL query string.
 *
 * You can rebuild the URL and append query variables to the URL query by using this function.
 * There are two ways to use this function; either a single key and value, or an associative array.
 *
 * Using a single key and value:
 *
 *     add_query_arg( 'key', 'value', 'http://example.com' );
 *
 * Using an associative array:
 *
 *     add_query_arg( array(
 *         'key1' => 'value1',
 *         'key2' => 'value2',
 *     ), 'http://example.com' );
 *
 * Omitting the URL from either use results in the current URL being used
 * (the value of `$_SERVER['REQUEST_URI']`).
 *
 * Values are expected to be encoded appropriately with urlencode() or rawurlencode().
 *
 * Setting any query variable's value to boolean false removes the key (see remove_query_arg()).
 *
 * Important: The return value of add_query_arg() is not escaped by default. Output should be
 * late-escaped with esc_url() or similar to help prevent vulnerability to cross-site scripting
 * (XSS) attacks.
 *
 * @since 1.5.0
 * @since 5.3.0 Formalized the existing and already documented parameters
 *              by adding `...$args` to the function signature.
 *
 * @param string|array $key   Either a query variable key, or an associative array of query variables.
 * @param string $value Optional. Either a query variable value, or a URL to act upon.
 * @param string $url   Optional. A URL to act upon.
 * @return string New URL query string (unescaped).
 */
    public function addQueryArg(string|array $key, string $value, string $url): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes an item or items from a query string.
 *
 * Important: The return value of remove_query_arg() is not escaped by default. Output should be
 * late-escaped with esc_url() or similar to help prevent vulnerability to cross-site scripting
 * (XSS) attacks.
 *
 * @since 1.5.0
 *
 * @param string|string[] $key   Query key or keys to remove.
 * @param false|string $query Optional. When false uses the current URL. Default false.
 * @return string New URL query string.
 */
    public function removeQueryArg(string|array $key, false|string $query = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of single-use query variable names that can be removed from a URL.
 *
 * @since 4.4.0
 *
 * @return string[] An array of query variable names to remove from the URL.
 */
    public function wpRemovableQueryArgs(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Walks the array while sanitizing the contents.
 *
 * @since 0.71
 * @since 5.5.0 Non-string values are left untouched.
 *
 * @param array $inputArray Array to walk while sanitizing contents.
 * @return array Sanitized $input_array.
 */
    public function addMagicQuotes(array $inputArray): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * HTTP request for URI to retrieve content.
 *
 * @since 1.5.1
 *
 * @see wp_safe_remote_get()
 *
 * @param string $uri URI/URL of web page to retrieve.
 * @return string|false HTTP content. False on failure.
 */
    public function wpRemoteFopen(string $uri): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets up the WordPress query.
 *
 * @since 2.0.0
 *
 * @global WP       $wp           Current WordPress environment instance.
 * @global WP_Query $wp_query     WordPress Query object.
 * @global WP_Query $wp_the_query Copy of the WordPress Query object.
 *
 * @param string|array $queryVars Default WP_Query arguments.
 */
    public function wp(string|array $queryVars = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the description for the HTTP status.
 *
 * @since 2.3.0
 * @since 3.9.0 Added status codes 418, 428, 429, 431, and 511.
 * @since 4.5.0 Added status codes 308, 421, and 451.
 * @since 5.1.0 Added status code 103.
 * @since 6.6.0 Added status code 425.
 *
 * @global array $wp_header_to_desc
 *
 * @param int $code HTTP status code.
 * @return string Status description if found, an empty string otherwise.
 */
    public function getStatusHeaderDesc(int $code): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets HTTP status header.
 *
 * @since 2.0.0
 * @since 4.4.0 Added the `$description` parameter.
 *
 * @see get_status_header_desc()
 *
 * @param int $code        HTTP status code.
 * @param string $description Optional. A custom description for the HTTP status.
 *                            Defaults to the result of get_status_header_desc() for the given code.
 */
    public function statusHeader(int $code, string $description = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the HTTP header information to prevent caching.
 *
 * The several different headers cover the different ways cache prevention
 * is handled by different browsers.
 *
 * @since 2.8.0
 * @since 6.3.0 The `Cache-Control` header for logged in users now includes the
 *              `no-store` and `private` directives.
 *
 * @return array The associative array of header names and field values.
 */
    public function wpGetNocacheHeaders(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the HTTP headers to prevent caching for the different browsers.
 *
 * Different browsers support different nocache headers, so several
 * headers must be sent so that all of them get the point that no
 * caching should occur.
 *
 * @since 2.0.0
 *
 * @see wp_get_nocache_headers()
 */
    public function nocacheHeaders(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the HTTP headers for caching for 10 days with JavaScript content type.
 *
 * @since 2.1.0
 */
    public function cacheJavascriptHeaders(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the number of database queries during the WordPress execution.
 *
 * @since 2.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return int Number of database queries.
 */
    public function getNumQueries(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether input is yes or no.
 *
 * Must be 'y' to be true.
 *
 * @since 1.0.0
 *
 * @param string $yn Character string containing either 'y' (yes) or 'n' (no).
 * @return bool True if 'y', false on anything else.
 */
    public function boolFromYn(string $yn): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the feed template from the use of an action hook.
 *
 * If the feed action does not have a hook, then the function will die with a
 * message telling the visitor that the feed is not valid.
 *
 * It is better to only have one hook for each feed.
 *
 * @since 2.1.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 */
    public function doFeed(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the RDF RSS 0.91 Feed template.
 *
 * @since 2.1.0
 *
 * @see load_template()
 */
    public function doFeedRdf(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the RSS 1.0 Feed Template.
 *
 * @since 2.1.0
 *
 * @see load_template()
 */
    public function doFeedRss(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads either the RSS2 comment feed or the RSS2 posts feed.
 *
 * @since 2.1.0
 *
 * @see load_template()
 *
 * @param bool $forComments True for the comment feed, false for normal feed.
 */
    public function doFeedRss2(bool $forComments): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads either Atom comment feed or Atom posts feed.
 *
 * @since 2.1.0
 *
 * @see load_template()
 *
 * @param bool $forComments True for the comment feed, false for normal feed.
 */
    public function doFeedAtom(bool $forComments): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the default robots.txt file content.
 *
 * @since 2.1.0
 * @since 5.3.0 Remove the "Disallow: /" output if search engine visibility is
 *              discouraged in favor of robots meta HTML tag via wp_robots_no_robots()
 *              filter callback.
 */
    public function doRobots(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the favicon.ico file content.
 *
 * @since 5.4.0
 */
    public function doFavicon(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether WordPress is already installed.
 *
 * The cache will be checked first. If you have a cache plugin, which saves
 * the cache values, then this will work. If you use the default WordPress
 * cache, and the database goes away, then you might have problems.
 *
 * Checks for the 'siteurl' option for whether WordPress is installed.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return bool Whether the site is already installed.
 */
    public function isBlogInstalled(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves URL with nonce added to URL query.
 *
 * @since 2.0.4
 *
 * @param string $actionurl URL to add nonce action.
 * @param int|string $action    Optional. Nonce action name. Default -1.
 * @param string $name      Optional. Nonce name. Default '_wpnonce'.
 * @return string Escaped URL with nonce action added.
 */
    public function wpNonceUrl(string $actionurl, int|string $action, string $name = '_wpnonce'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves or display nonce hidden field for forms.
 *
 * The nonce field is used to validate that the contents of the form came from
 * the location on the current site and not somewhere else. The nonce does not
 * offer absolute protection, but should protect against most cases. It is very
 * important to use nonce field in forms.
 *
 * The $action and $name are optional, but if you want to have better security,
 * it is strongly suggested to set those two parameters. It is easier to just
 * call the function without any parameters, because validation of the nonce
 * doesn't require any parameters, but since crackers know what the default is
 * it won't be difficult for them to find a way around your nonce and cause
 * damage.
 *
 * The input name will be whatever $name value you gave. The input value will be
 * the nonce creation value.
 *
 * @since 2.0.4
 *
 * @param int|string $action  Optional. Action name. Default -1.
 * @param string $name    Optional. Nonce name. Default '_wpnonce'.
 * @param bool $referer Optional. Whether to set the referer field for validation. Default true.
 * @param bool $display Optional. Whether to display or return hidden form field. Default true.
 * @return string Nonce field HTML markup.
 */
    public function wpNonceField(int|string $action, string $name = '_wpnonce', bool $referer = true, bool $display = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves or displays referer hidden field for forms.
 *
 * The referer link is the current Request URI from the server super global. The
 * input name is '_wp_http_referer', in case you wanted to check manually.
 *
 * @since 2.0.4
 *
 * @param bool $display Optional. Whether to echo or return the referer field. Default true.
 * @return string Referer field HTML markup.
 */
    public function wpRefererField(bool $display = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves or displays original referer hidden field for forms.
 *
 * The input name is '_wp_original_http_referer' and will be either the same
 * value of wp_referer_field(), if that was posted already or it will be the
 * current page, if it doesn't exist.
 *
 * @since 2.0.4
 *
 * @param bool $display      Optional. Whether to echo the original http referer. Default true.
 * @param string $jumpBackTo Optional. Can be 'previous' or page you want to jump back to.
 *                             Default 'current'.
 * @return string Original referer field.
 */
    public function wpOriginalRefererField(bool $display = true, string $jumpBackTo = 'current'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves referer from '_wp_http_referer' or HTTP referer.
 *
 * If it's the same as the current request URL, will return false.
 *
 * @since 2.0.4
 *
 * @return string|false Referer URL on success, false on failure.
 */
    public function wpGetReferer(): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves unvalidated referer from the '_wp_http_referer' URL query variable or the HTTP referer.
 *
 * If the value of the '_wp_http_referer' URL query variable is not a string then it will be ignored.
 *
 * Do not use for redirects, use wp_get_referer() instead.
 *
 * @since 4.5.0
 *
 * @return string|false Referer URL on success, false on failure.
 */
    public function wpGetRawReferer(): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves original referer that was posted, if it exists.
 *
 * @since 2.0.4
 *
 * @return string|false Original referer URL on success, false on failure.
 */
    public function wpGetOriginalReferer(): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Recursive directory creation based on full path.
 *
 * Will attempt to set permissions on folders.
 *
 * @since 2.0.1
 *
 * @param string $target Full path to attempt to create.
 * @return bool Whether the path was created. True if path already exists.
 */
    public function wpMkdirP(string $target): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Tests if a given filesystem path is absolute.
 *
 * For example, '/foo/bar', or 'c:\windows'.
 *
 * @since 2.5.0
 *
 * @param string $path File path.
 * @return bool True if path is absolute, false is not absolute.
 */
    public function pathIsAbsolute(string $path): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Joins two filesystem paths together.
 *
 * For example, 'give me $path relative to $base'. If the $path is absolute,
 * then it the full path is returned.
 *
 * @since 2.5.0
 *
 * @param string $base Base path.
 * @param string $path Path relative to $base.
 * @return string The path with the base or absolute path.
 */
    public function pathJoin(string $base, string $path): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Normalizes a filesystem path.
 *
 * On windows systems, replaces backslashes with forward slashes
 * and forces upper-case drive letters.
 * Allows for two leading slashes for Windows network shares, but
 * ensures that all other duplicate slashes are reduced to a single.
 *
 * @since 3.9.0
 * @since 4.4.0 Ensures upper-case drive letters on Windows systems.
 * @since 4.5.0 Allows for Windows network shares.
 * @since 4.9.7 Allows for PHP file wrappers.
 *
 * @param string $path Path to normalize.
 * @return string Normalized path.
 */
    public function wpNormalizePath(string $path): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines a writable directory for temporary files.
 *
 * Function's preference is the return value of sys_get_temp_dir(),
 * followed by your PHP temporary upload directory, followed by WP_CONTENT_DIR,
 * before finally defaulting to /tmp/
 *
 * In the event that this function does not find a writable location,
 * It may be overridden by the WP_TEMP_DIR constant in your wp-config.php file.
 *
 * @since 2.5.0
 *
 * @return string Writable temporary directory.
 */
    public function getTempDir(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if a directory is writable.
 *
 * This function is used to work around certain ACL issues in PHP primarily
 * affecting Windows Servers.
 *
 * @since 3.6.0
 *
 * @see win_is_writable()
 *
 * @param string $path Path to check for write-ability.
 * @return bool Whether the path is writable.
 */
    public function wpIsWritable(string $path): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Workaround for Windows bug in is_writable() function
 *
 * PHP has issues with Windows ACL's for determine if a
 * directory is writable or not, this works around them by
 * checking the ability to open files rather than relying
 * upon PHP to interpret the OS ACL.
 *
 * @since 2.8.0
 *
 * @see https://bugs.php.net/bug.php?id=27609
 * @see https://bugs.php.net/bug.php?id=30931
 *
 * @param string $path Windows path to check for write-ability.
 * @return bool Whether the path is writable.
 */
    public function winIsWritable(string $path): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves uploads directory information.
 *
 * Same as wp_upload_dir() but "light weight" as it doesn't attempt to create the uploads directory.
 * Intended for use in themes, when only 'basedir' and 'baseurl' are needed, generally in all cases
 * when not uploading files.
 *
 * @since 4.5.0
 *
 * @see wp_upload_dir()
 *
 * @return array See wp_upload_dir() for description.
 */
    public function wpGetUploadDir(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array containing the current upload directory's path and URL.
 *
 * Checks the 'upload_path' option, which should be from the web root folder,
 * and if it isn't empty it will be used. If it is empty, then the path will be
 * 'WP_CONTENT_DIR/uploads'. If the 'UPLOADS' constant is defined, then it will
 * override the 'upload_path' option and 'WP_CONTENT_DIR/uploads' path.
 *
 * The upload URL path is set either by the 'upload_url_path' option or by using
 * the 'WP_CONTENT_URL' constant and appending '/uploads' to the path.
 *
 * If the 'uploads_use_yearmonth_folders' is set to true (checkbox if checked in
 * the administration settings panel), then the time will be used. The format
 * will be year first and then month.
 *
 * If the path couldn't be created, then an error will be returned with the key
 * 'error' containing the error message. The error suggests that the parent
 * directory is not writable by the server.
 *
 * @since 2.0.0
 * @uses _wp_upload_dir()
 *
 * @param string|null $time          Optional. Time formatted in 'yyyy/mm'. Default null.
 * @param bool $createDir    Optional. Whether to check and create the uploads directory.
 *                                   Default true for backward compatibility.
 * @param bool $refreshCache Optional. Whether to refresh the cache. Default false.
 * @return array {
 *     Array of information about the upload directory.
 *
 *     @type string       $path    Base directory and subdirectory or full path to upload directory.
 *     @type string       $url     Base URL and subdirectory or absolute URL to upload directory.
 *     @type string       $subdir  Subdirectory if uploads use year/month folders option is on.
 *     @type string       $basedir Path without subdir.
 *     @type string       $baseurl URL path without subdir.
 *     @type string|false $error   False or error message.
 * }
 */
    public function wpUploadDir(string|null $time = null, bool $createDir = true, bool $refreshCache = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a filename that is sanitized and unique for the given directory.
 *
 * If the filename is not unique, then a number will be added to the filename
 * before the extension, and will continue adding numbers until the filename
 * is unique.
 *
 * The callback function allows the caller to use their own method to create
 * unique file names. If defined, the callback should take three arguments:
 * - directory, base filename, and extension - and return a unique filename.
 *
 * @since 2.5.0
 *
 * @param string $dir                      Directory.
 * @param string $filename                 File name.
 * @param callable $uniqueFilenameCallback Callback. Default null.
 * @return string New filename, if given wasn't unique.
 */
    public function wpUniqueFilename(string $dir, string $filename, callable $uniqueFilenameCallback = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates a file in the upload folder with given content.
 *
 * If there is an error, then the key 'error' will exist with the error message.
 * If success, then the key 'file' will have the unique file path, the 'url' key
 * will have the link to the new file. and the 'error' key will be set to false.
 *
 * This function will not move an uploaded file to the upload folder. It will
 * create a new file with the content in $bits parameter. If you move the upload
 * file, read the content of the uploaded file, and then you can give the
 * filename and content to this function, which will add it to the upload
 * folder.
 *
 * The permissions will be set on the new file automatically by this function.
 *
 * @since 2.0.0
 *
 * @param string $name       Filename.
 * @param null|string $deprecated Never used. Set to null.
 * @param string $bits       File content
 * @param string|null $time       Optional. Time formatted in 'yyyy/mm'. Default null.
 * @return array {
 *     Information about the newly-uploaded file.
 *
 *     @type string       $file  Filename of the newly-uploaded file.
 *     @type string       $url   URL of the uploaded file.
 *     @type string       $type  File type.
 *     @type string|false $error Error message, if there has been an error.
 * }
 */
    public function wpUploadBits(string $name, null|string $deprecated, string $bits, string|null $time = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the file type based on the extension name.
 *
 * @since 2.5.0
 *
 * @param string $ext The extension to search.
 * @return string|void The file type, example: audio, video, document, spreadsheet, etc.
 */
    public function wpExt2type(string $ext): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns first matched extension for the mime-type,
 * as mapped from wp_get_mime_types().
 *
 * @since 5.8.1
 *
 * @param string $mimeType
 *
 * @return string|false
 */
    public function wpGetDefaultExtensionForMimeType(string $mimeType): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the file type from the file name.
 *
 * You can optionally define the mime array, if needed.
 *
 * @since 2.0.4
 *
 * @param string $filename File name or path.
 * @param string[]|null $mimes    Optional. Array of allowed mime types keyed by their file extension regex.
 *                                Defaults to the result of get_allowed_mime_types().
 * @return array {
 *     Values for the extension and mime type.
 *
 *     @type string|false $ext  File extension, or false if the file doesn't match a mime type.
 *     @type string|false $type File mime type, or false if the file doesn't match a mime type.
 * }
 */
    public function wpCheckFiletype(string $filename, array|null $mimes = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Attempts to determine the real file type of a file.
 *
 * If unable to, the file name extension will be used to determine type.
 *
 * If it's determined that the extension does not match the file's real type,
 * then the "proper_filename" value will be set with a proper filename and extension.
 *
 * Currently this function only supports renaming images validated via wp_get_image_mime().
 *
 * @since 3.0.0
 *
 * @param string $file     Full path to the file.
 * @param string $filename The name of the file (may differ from $file due to $file being
 *                                in a tmp directory).
 * @param string[]|null $mimes    Optional. Array of allowed mime types keyed by their file extension regex.
 *                                Defaults to the result of get_allowed_mime_types().
 * @return array {
 *     Values for the extension, mime type, and corrected filename.
 *
 *     @type string|false $ext             File extension, or false if the file doesn't match a mime type.
 *     @type string|false $type            File mime type, or false if the file doesn't match a mime type.
 *     @type string|false $proper_filename File name with its correct extension, or false if it cannot be determined.
 * }
 */
    public function wpCheckFiletypeAndExt(string $file, string $filename, array|null $mimes = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the real mime type of an image file.
 *
 * This depends on exif_imagetype() or getimagesize() to determine real mime types.
 *
 * @since 4.7.1
 * @since 5.8.0 Added support for WebP images.
 * @since 6.5.0 Added support for AVIF images.
 *
 * @param string $file Full path to the file.
 * @return string|false The actual mime type or false if the type cannot be determined.
 */
    public function wpGetImageMime(string $file): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the list of mime types and file extensions.
 *
 * @since 3.5.0
 * @since 4.2.0 Support was added for GIMP (.xcf) files.
 * @since 4.9.2 Support was added for Flac (.flac) files.
 * @since 4.9.6 Support was added for AAC (.aac) files.
 *
 * @return string[] Array of mime types keyed by the file extension regex corresponding to those types.
 */
    public function wpGetMimeTypes(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the list of common file extensions and their types.
 *
 * @since 4.6.0
 *
 * @return array[] Multi-dimensional array of file extensions types keyed by the type of file.
 */
    public function wpGetExtTypes(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Wrapper for PHP filesize with filters and casting the result as an integer.
 *
 * @since 6.0.0
 *
 * @link https://www.php.net/manual/en/function.filesize.php
 *
 * @param string $path Path to the file.
 * @return int The size of the file in bytes, or 0 in the event of an error.
 */
    public function wpFilesize(string $path): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the list of allowed mime types and file extensions.
 *
 * @since 2.8.6
 *
 * @param int|\WP_User $user Optional. User to check. Defaults to current user.
 * @return string[] Array of mime types keyed by the file extension regex corresponding
 *                  to those types.
 */
    public function getAllowedMimeTypes(int|\WP_User $user = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays "Are You Sure" message to confirm the action being taken.
 *
 * If the action has the nonce explain message, then it will be displayed
 * along with the "Are you sure?" message.
 *
 * @since 2.0.4
 *
 * @param string $action The nonce action.
 */
    public function wpNonceAys(string $action): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Kills WordPress execution and displays HTML page with an error message.
 *
 * This function complements the `die()` PHP function. The difference is that
 * HTML will be displayed to the user. It is recommended to use this function
 * only when the execution should not continue any further. It is not recommended
 * to call this function very often, and try to handle as many errors as possible
 * silently or more gracefully.
 *
 * As a shorthand, the desired HTTP response code may be passed as an integer to
 * the `$title` parameter (the default title would apply) or the `$args` parameter.
 *
 * @since 2.0.4
 * @since 4.1.0 The `$title` and `$args` parameters were changed to optionally accept
 *              an integer to be used as the response code.
 * @since 5.1.0 The `$link_url`, `$link_text`, and `$exit` arguments were added.
 * @since 5.3.0 The `$charset` argument was added.
 * @since 5.5.0 The `$text_direction` argument has a priority over get_language_attributes()
 *              in the default handler.
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string|\WP_Error $message Optional. Error message. If this is a WP_Error object,
 *                                  and not an Ajax or XML-RPC request, the error's messages are used.
 *                                  Default empty string.
 * @param string|int $title   Optional. Error title. If `$message` is a `WP_Error` object,
 *                                  error data with the key 'title' may be used to specify the title.
 *                                  If `$title` is an integer, then it is treated as the response code.
 *                                  Default empty string.
 * @param string|array|int $args {
 *     Optional. Arguments to control behavior. If `$args` is an integer, then it is treated
 *     as the response code. Default empty array.
 *
 *     @type int    $response       The HTTP response code. Default 200 for Ajax requests, 500 otherwise.
 *     @type string $link_url       A URL to include a link to. Only works in combination with $link_text.
 *                                  Default empty string.
 *     @type string $link_text      A label for the link to include. Only works in combination with $link_url.
 *                                  Default empty string.
 *     @type bool   $back_link      Whether to include a link to go back. Default false.
 *     @type string $text_direction The text direction. This is only useful internally, when WordPress is still
 *                                  loading and the site's locale is not set up yet. Accepts 'rtl' and 'ltr'.
 *                                  Default is the value of is_rtl().
 *     @type string $charset        Character set of the HTML output. Default 'utf-8'.
 *     @type string $code           Error code to use. Default is 'wp_die', or the main error code if $message
 *                                  is a WP_Error.
 *     @type bool   $exit           Whether to exit the process after completion. Default true.
 * }
 */
    public function wpDie(string|\WP_Error $message = '', string|int $title = '', string|array|int $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Encodes a variable into JSON, with some confidence checks.
 *
 * @since 4.1.0
 * @since 5.3.0 No longer handles support for PHP < 5.6.
 * @since 6.5.0 The `$data` parameter has been renamed to `$value` and
 *              the `$options` parameter to `$flags` for parity with PHP.
 *
 * @param mixed $value Variable (usually an array or object) to encode as JSON.
 * @param int $flags Optional. Options to be passed to json_encode(). Default 0.
 * @param int $depth Optional. Maximum depth to walk through $value. Must be
 *                     greater than 0. Default 512.
 * @return string|false The JSON encoded string, or false if it cannot be encoded.
 */
    public function wpJsonEncode(mixed $value, int $flags = 0, int $depth = 512): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a JSON response back to an Ajax request.
 *
 * @since 3.5.0
 * @since 4.7.0 The `$status_code` parameter was added.
 * @since 5.6.0 The `$flags` parameter was added.
 *
 * @param mixed $response    Variable (usually an array or object) to encode as JSON,
 *                           then print and die.
 * @param int $statusCode Optional. The HTTP status code to output. Default null.
 * @param int $flags       Optional. Options to be passed to json_encode(). Default 0.
 */
    public function wpSendJson(mixed $response, int $statusCode = null, int $flags = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a JSON response back to an Ajax request, indicating success.
 *
 * @since 3.5.0
 * @since 4.7.0 The `$status_code` parameter was added.
 * @since 5.6.0 The `$flags` parameter was added.
 *
 * @param mixed $value       Optional. Data to encode as JSON, then print and die. Default null.
 * @param int $statusCode Optional. The HTTP status code to output. Default null.
 * @param int $flags       Optional. Options to be passed to json_encode(). Default 0.
 */
    public function wpSendJsonSuccess(mixed $value = null, int $statusCode = null, int $flags = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a JSON response back to an Ajax request, indicating failure.
 *
 * If the `$value` parameter is a WP_Error object, the errors
 * within the object are processed and output as an array of error
 * codes and corresponding messages. All other types are output
 * without further processing.
 *
 * @since 3.5.0
 * @since 4.1.0 The `$value` parameter is now processed if a WP_Error object is passed in.
 * @since 4.7.0 The `$status_code` parameter was added.
 * @since 5.6.0 The `$flags` parameter was added.
 *
 * @param mixed $value       Optional. Data to encode as JSON, then print and die. Default null.
 * @param int $statusCode Optional. The HTTP status code to output. Default null.
 * @param int $flags       Optional. Options to be passed to json_encode(). Default 0.
 */
    public function wpSendJsonError(mixed $value = null, int $statusCode = null, int $flags = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks that a JSONP callback is a valid JavaScript callback name.
 *
 * Only allows alphanumeric characters and the dot character in callback
 * function names. This helps to mitigate XSS attacks caused by directly
 * outputting user input.
 *
 * @since 4.6.0
 *
 * @param string $callback Supplied JSONP callback function name.
 * @return bool Whether the callback function name is valid.
 */
    public function wpCheckJsonpCallback(string $callback): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Reads and decodes a JSON file.
 *
 * @since 5.9.0
 *
 * @param string $filename Path to the JSON file.
 * @param array $options  {
 *     Optional. Options to be used with `json_decode()`.
 *
 *     @type bool $associative Optional. When `true`, JSON objects will be returned as associative arrays.
 *                             When `false`, JSON objects will be returned as objects. Default false.
 * }
 *
 * @return mixed Returns the value encoded in JSON in appropriate PHP type.
 *               `null` is returned if the file is not found, or its content can't be decoded.
 */
    public function wpJsonFileDecode(string $filename, array $options = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether WordPress is currently serving a REST API request.
 *
 * The function relies on the 'REST_REQUEST' global. As such, it only returns true when an actual REST _request_ is
 * being made. It does not return true when a REST endpoint is hit as part of another request, e.g. for preloading a
 * REST response. See {@see wp_is_rest_endpoint()} for that purpose.
 *
 * This function should not be called until the {@see 'parse_request'} action, as the constant is only defined then,
 * even for an actual REST request.
 *
 * @since 6.5.0
 *
 * @return bool True if it's a WordPress REST API request, false otherwise.
 */
    public function wpIsServingRestRequest(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts smiley code to the icon graphic file equivalent.
 *
 * You can turn off smilies, by going to the write setting screen and unchecking
 * the box, or by setting 'use_smilies' option to false or removing the option.
 *
 * Plugins may override the default smiley list by setting the $wpsmiliestrans
 * to an array, with the key the code the blogger types in and the value the
 * image file.
 *
 * The $wp_smiliessearch global is for the regular expression and is set each
 * time the function is called.
 *
 * The full list of smilies can be found in the function and won't be listed in
 * the description. Probably should create a Codex page for it, so that it is
 * available.
 *
 * @since 2.2.0
 *
 * @global array $wpsmiliestrans
 * @global array $wp_smiliessearch
 */
    public function smiliesInit(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Merges user defined arguments into defaults array.
 *
 * This function is used throughout WordPress to allow for both string or array
 * to be merged into another array.
 *
 * @since 2.2.0
 * @since 2.3.0 `$args` can now also be an object.
 *
 * @param string|array|object $args     Value to merge with $defaults.
 * @param array $defaults Optional. Array that serves as the defaults.
 *                                      Default empty array.
 * @return array Merged user defined values with defaults.
 */
    public function wpParseArgs(string|array|object $args, array $defaults = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts a comma- or space-separated list of scalar values to an array.
 *
 * @since 5.1.0
 *
 * @param array|string $inputList List of values.
 * @return array Array of values.
 */
    public function wpParseList(array|string $inputList): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleans up an array, comma- or space-separated list of IDs.
 *
 * @since 3.0.0
 * @since 5.1.0 Refactored to use wp_parse_list().
 *
 * @param array|string $inputList List of IDs.
 * @return int[] Sanitized array of IDs.
 */
    public function wpParseIdList(array|string $inputList): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleans up an array, comma- or space-separated list of slugs.
 *
 * @since 4.7.0
 * @since 5.1.0 Refactored to use wp_parse_list().
 *
 * @param array|string $inputList List of slugs.
 * @return string[] Sanitized array of slugs.
 */
    public function wpParseSlugList(array|string $inputList): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Extracts a slice of an array, given a list of keys.
 *
 * @since 3.1.0
 *
 * @param array $inputArray The original array.
 * @param array $keys        The list of keys.
 * @return array The array slice.
 */
    public function wpArraySliceAssoc(array $inputArray, array $keys): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sorts the keys of an array alphabetically.
 *
 * The array is passed by reference so it doesn't get returned
 * which mimics the behavior of `ksort()`.
 *
 * @since 6.0.0
 *
 * @param array $inputArray The array to sort, passed by reference.
 */
    public function wpRecursiveKsort(array $inputArray): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if the variable is a numeric-indexed array.
 *
 * @since 4.4.0
 *
 * @param mixed $data Variable to check.
 * @return bool Whether the variable is a list.
 */
    public function wpIsNumericArray(mixed $data): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters a list of objects, based on a set of key => value arguments.
 *
 * Retrieves the objects from the list that match the given arguments.
 * Key represents property name, and value represents property value.
 *
 * If an object has more properties than those specified in arguments,
 * that will not disqualify it. When using the 'AND' operator,
 * any missing properties will disqualify it.
 *
 * When using the `$field` argument, this function can also retrieve
 * a particular field from all matching objects, whereas wp_list_filter()
 * only does the filtering.
 *
 * @since 3.0.0
 * @since 4.7.0 Uses `WP_List_Util` class.
 *
 * @param array $inputList An array of objects to filter.
 * @param array $args       Optional. An array of key => value arguments to match
 *                                against each object. Default empty array.
 * @param string $operator   Optional. The logical operation to perform. 'AND' means
 *                                all elements from the array must match. 'OR' means only
 *                                one element needs to match. 'NOT' means no elements may
 *                                match. Default 'AND'.
 * @param bool|string $field      Optional. A field from the object to place instead
 *                                of the entire object. Default false.
 * @return array A list of objects or object fields.
 */
    public function wpFilterObjectList(array $inputList, array $args = [], string $operator = 'and', bool|string $field = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters a list of objects, based on a set of key => value arguments.
 *
 * Retrieves the objects from the list that match the given arguments.
 * Key represents property name, and value represents property value.
 *
 * If an object has more properties than those specified in arguments,
 * that will not disqualify it. When using the 'AND' operator,
 * any missing properties will disqualify it.
 *
 * If you want to retrieve a particular field from all matching objects,
 * use wp_filter_object_list() instead.
 *
 * @since 3.1.0
 * @since 4.7.0 Uses `WP_List_Util` class.
 * @since 5.9.0 Converted into a wrapper for `wp_filter_object_list()`.
 *
 * @param array $inputList An array of objects to filter.
 * @param array $args       Optional. An array of key => value arguments to match
 *                           against each object. Default empty array.
 * @param string $operator   Optional. The logical operation to perform. 'AND' means
 *                           all elements from the array must match. 'OR' means only
 *                           one element needs to match. 'NOT' means no elements may
 *                           match. Default 'AND'.
 * @return array Array of found values.
 */
    public function wpListFilter(array $inputList, array $args = [], string $operator = 'AND'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Plucks a certain field out of each object or array in an array.
 *
 * This has the same functionality and prototype of
 * array_column() (PHP 5.5) but also supports objects.
 *
 * @since 3.1.0
 * @since 4.0.0 $index_key parameter added.
 * @since 4.7.0 Uses `WP_List_Util` class.
 *
 * @param array $inputList List of objects or arrays.
 * @param int|string $field      Field from the object to place instead of the entire object.
 * @param int|string $indexKey  Optional. Field from the object to use as keys for the new array.
 *                               Default null.
 * @return array Array of found values. If `$index_key` is set, an array of found values with keys
 *               corresponding to `$index_key`. If `$index_key` is null, array keys from the original
 *               `$input_list` will be preserved in the results.
 */
    public function wpListPluck(array $inputList, int|string $field, int|string $indexKey = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sorts an array of objects or arrays based on one or more orderby arguments.
 *
 * @since 4.7.0
 *
 * @param array $inputList    An array of objects or arrays to sort.
 * @param string|array $orderby       Optional. Either the field name to order by or an array
 *                                    of multiple orderby fields as `$orderby => $order`.
 *                                    Default empty array.
 * @param string $order         Optional. Either 'ASC' or 'DESC'. Only used if `$orderby`
 *                                    is a string. Default 'ASC'.
 * @param bool $preserveKeys Optional. Whether to preserve keys. Default false.
 * @return array The sorted array.
 */
    public function wpListSort(array $inputList, string|array $orderby = [], string $order = 'ASC', bool $preserveKeys = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if Widgets library should be loaded.
 *
 * Checks to make sure that the widgets library hasn't already been loaded.
 * If it hasn't, then it will load the widgets library and run an action hook.
 *
 * @since 2.2.0
 */
    public function wpMaybeLoadWidgets(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Appends the Widgets menu to the themes main menu.
 *
 * @since 2.2.0
 * @since 5.9.3 Don't specify menu order when the active theme is a block theme.
 *
 * @global array $submenu
 */
    public function wpWidgetsAddMenu(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Flushes all output buffers for PHP 5.2.
 *
 * Make sure all output buffers are flushed before our singletons are destroyed.
 *
 * @since 2.2.0
 */
    public function wpObEndFlushAll(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads custom DB error or display WordPress DB error.
 *
 * If a file exists in the wp-content directory named db-error.php, then it will
 * be loaded instead of displaying the WordPress DB error. If it is not found,
 * then the WordPress DB error will be displayed instead.
 *
 * The WordPress DB error sets the HTTP status header to 500 to try to prevent
 * search engines from caching the message. Custom DB messages should do the
 * same.
 *
 * This function was backported to WordPress 2.3.2, but originally was added
 * in WordPress 2.5.0.
 *
 * @since 2.3.2
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 */
    public function deadDb(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts a value to non-negative integer.
 *
 * @since 2.5.0
 *
 * @param mixed $maybeint Data you wish to have converted to a non-negative integer.
 * @return int A non-negative integer.
 */
    public function absint(mixed $maybeint): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates a user-level error/warning/notice/deprecation message.
 *
 * Generates the message when `WP_DEBUG` is true.
 *
 * @since 6.4.0
 *
 * @param string $functionName The function that triggered the error.
 * @param string $message       The message explaining the error.
 *                              The message can contain allowed HTML 'a' (with href), 'code',
 *                              'br', 'em', and 'strong' tags and http or https protocols.
 *                              If it contains other HTML tags or protocols, the message should be escaped
 *                              before passing to this function to avoid being stripped {@see wp_kses()}.
 * @param int $errorLevel   Optional. The designated error type for this error.
 *                              Only works with E_USER family of constants. Default E_USER_NOTICE.
 */
    public function wpTriggerError(string $functionName, string $message, int $errorLevel = E_USER_NOTICE): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the server is running an earlier than 1.5.0 version of lighttpd.
 *
 * @since 2.5.0
 *
 * @return bool Whether the server is running lighttpd < 1.5.0.
 */
    public function isLighttpdBefore150(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the specified module exist in the Apache config.
 *
 * @since 2.5.0
 *
 * @global bool $is_apache
 *
 * @param string $mod           The module, e.g. mod_rewrite.
 * @param bool $defaultValue Optional. The default return value if the module is not found. Default false.
 * @return bool Whether the specified module is loaded.
 */
    public function apacheModLoaded(string $mod, bool $defaultValue = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if IIS 7+ supports pretty permalinks.
 *
 * @since 2.8.0
 *
 * @global bool $is_iis7
 *
 * @return bool Whether IIS7 supports permalinks.
 */
    public function iis7SupportsPermalinks(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates a file name and path against an allowed set of rules.
 *
 * A return value of `1` means the file path contains directory traversal.
 *
 * A return value of `2` means the file path contains a Windows drive path.
 *
 * A return value of `3` means the file is not in the allowed files list.
 *
 * @since 1.2.0
 *
 * @param string $file          File path.
 * @param string[] $allowedFiles Optional. Array of allowed files. Default empty array.
 * @return int 0 means nothing is wrong, greater than 0 means something was wrong.
 */
    public function validateFile(string $file, array $allowedFiles = []): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether to force SSL used for the Administration Screens.
 *
 * @since 2.6.0
 *
 * @param string|bool $force Optional. Whether to force SSL in admin screens. Default null.
 * @return bool True if forced, false if not forced.
 */
    public function forceSslAdmin(string|bool $force = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Guesses the URL for the site.
 *
 * Will remove wp-admin links to retrieve only return URLs not in the wp-admin
 * directory.
 *
 * @since 2.6.0
 *
 * @return string The guessed URL.
 */
    public function wpGuessUrl(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Temporarily suspends cache additions.
 *
 * Stops more data being added to the cache, but still allows cache retrieval.
 * This is useful for actions, such as imports, when a lot of data would otherwise
 * be almost uselessly added to the cache.
 *
 * Suspension lasts for a single page load at most. Remember to call this
 * function again if you wish to re-enable cache adds earlier.
 *
 * @since 3.3.0
 *
 * @param bool $suspend Optional. Suspends additions if true, re-enables them if false.
 *                      Defaults to not changing the current setting.
 * @return bool The current suspend setting.
 */
    public function wpSuspendCacheAddition(bool $suspend = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Suspends cache invalidation.
 *
 * Turns cache invalidation on and off. Useful during imports where you don't want to do
 * invalidations every time a post is inserted. Callers must be sure that what they are
 * doing won't lead to an inconsistent cache when invalidation is suspended.
 *
 * @since 2.7.0
 *
 * @global bool $_wp_suspend_cache_invalidation
 *
 * @param bool $suspend Optional. Whether to suspend or enable cache invalidation. Default true.
 * @return bool The current suspend setting.
 */
    public function wpSuspendCacheInvalidation(bool $suspend = true): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a site is the main site of the current network.
 *
 * @since 3.0.0
 * @since 4.9.0 The `$network_id` parameter was added.
 *
 * @param int $siteId    Optional. Site ID to test. Defaults to current site.
 * @param int $networkId Optional. Network ID of the network to check for.
 *                        Defaults to current network.
 * @return bool True if $site_id is the main site of the network, or if not
 *              running Multisite.
 */
    public function isMainSite(int $siteId = null, int $networkId = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the main site ID.
 *
 * @since 4.9.0
 *
 * @param int $networkId Optional. The ID of the network for which to get the main site.
 *                        Defaults to the current network.
 * @return int The ID of the main site.
 */
    public function getMainSiteId(int $networkId = null): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a network is the main network of the Multisite installation.
 *
 * @since 3.7.0
 *
 * @param int $networkId Optional. Network ID to test. Defaults to current network.
 * @return bool True if $network_id is the main network, or if not running Multisite.
 */
    public function isMainNetwork(int $networkId = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the main network ID.
 *
 * @since 4.3.0
 *
 * @return int The ID of the main network.
 */
    public function getMainNetworkId(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether site meta is enabled.
 *
 * This function checks whether the 'blogmeta' database table exists. The result is saved as
 * a setting for the main network, making it essentially a global setting. Subsequent requests
 * will refer to this setting instead of running the query.
 *
 * @since 5.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return bool True if site meta is supported, false otherwise.
 */
    public function isSiteMetaSupported(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Modifies gmt_offset for smart timezone handling.
 *
 * Overrides the gmt_offset option if we have a timezone_string available.
 *
 * @since 2.8.0
 *
 * @return float|false Timezone GMT offset, false otherwise.
 */
    public function wpTimezoneOverrideOffset(): float|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gives a nicely-formatted list of timezone strings.
 *
 * @since 2.9.0
 * @since 4.7.0 Added the `$locale` parameter.
 *
 * @param string $selectedZone Selected timezone.
 * @param string $locale        Optional. Locale to load the timezones in. Default current site locale.
 * @return string
 */
    public function wpTimezoneChoice(string $selectedZone, string $locale = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Permanently deletes comments or posts of any type that have held a status
 * of 'trash' for the number of days defined in EMPTY_TRASH_DAYS.
 *
 * The default value of `EMPTY_TRASH_DAYS` is 30 (days).
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 */
    public function wpScheduledDelete(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves metadata from a file.
 *
 * Searches for metadata in the first 8 KB of a file, such as a plugin or theme.
 * Each piece of metadata must be on its own line. Fields can not span multiple
 * lines, the value will get cut at the end of the first line.
 *
 * If the file data is not within that first 8 KB, then the author should correct
 * their plugin file and move the data headers to the top.
 *
 * @link https://codex.wordpress.org/File_Header
 *
 * @since 2.9.0
 *
 * @param string $file            Absolute path to the file.
 * @param array $defaultHeaders List of headers, in the format `array( 'HeaderKey' => 'Header Name' )`.
 * @param string $context         Optional. If specified adds filter hook {@see 'extra_$context_headers'}.
 *                                Default empty string.
 * @return string[] Array of file header values keyed by header name.
 */
    public function getFileData(string $file, array $defaultHeaders, string $context = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a HTTP header to disable content type sniffing in browsers which support it.
 *
 * @since 3.0.0
 *
 * @see https://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx
 * @see https://src.chromium.org/viewvc/chrome?view=rev&revision=6985
 */
    public function sendNosniffHeader(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a HTTP header to limit rendering of pages to same origin iframes.
 *
 * @since 3.1.3
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
 */
    public function sendFrameOptionsHeader(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of protocols to allow in HTML attributes.
 *
 * @since 3.3.0
 * @since 4.3.0 Added 'webcal' to the protocols array.
 * @since 4.7.0 Added 'urn' to the protocols array.
 * @since 5.3.0 Added 'sms' to the protocols array.
 * @since 5.6.0 Added 'irc6' and 'ircs' to the protocols array.
 *
 * @see wp_kses()
 * @see esc_url()
 *
 * @return string[] Array of allowed protocols. Defaults to an array containing 'http', 'https',
 *                  'ftp', 'ftps', 'mailto', 'news', 'irc', 'irc6', 'ircs', 'gopher', 'nntp', 'feed',
 *                  'telnet', 'mms', 'rtsp', 'sms', 'svn', 'tel', 'fax', 'xmpp', 'webcal', and 'urn'.
 *                  This covers all common link protocols, except for 'javascript' which should not
 *                  be allowed for untrusted users.
 */
    public function wpAllowedProtocols(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a comma-separated string or array of functions that have been called to get
 * to the current point in code.
 *
 * @since 3.4.0
 *
 * @see https://core.trac.wordpress.org/ticket/19589
 *
 * @param string $ignoreClass Optional. A class to ignore all function calls within - useful
 *                             when you want to just give info about the callee. Default null.
 * @param int $skipFrames  Optional. A number of stack frames to skip - useful for unwinding
 *                             back to the source of the issue. Default 0.
 * @param bool $pretty       Optional. Whether you want a comma separated string instead of
 *                             the raw array returned. Default true.
 * @return string|array Either a string containing a reversed comma separated trace or an array
 *                      of individual calls.
 */
    public function wpDebugBacktraceSummary(string $ignoreClass = null, int $skipFrames = 0, bool $pretty = true): string|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Tests if a given path is a stream URL
 *
 * @since 3.5.0
 *
 * @param string $path The resource path or URL.
 * @return bool True if the path is a stream URL.
 */
    public function wpIsStream(string $path): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Tests if the supplied date is valid for the Gregorian calendar.
 *
 * @since 3.5.0
 *
 * @link https://www.php.net/manual/en/function.checkdate.php
 *
 * @param int $month       Month number.
 * @param int $day         Day number.
 * @param int $year        Year number.
 * @param string $sourceDate The date to filter.
 * @return bool True if valid date, false if not valid date.
 */
    public function wpCheckdate(int $month, int $day, int $year, string $sourceDate): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the auth check for monitoring whether the user is still logged in.
 *
 * Can be disabled with remove_action( 'admin_enqueue_scripts', 'wp_auth_check_load' );
 *
 * This is disabled for certain screens where a login screen could cause an
 * inconvenient interruption. A filter called {@see 'wp_auth_check_load'} can be used
 * for fine-grained control.
 *
 * @since 3.6.0
 */
    public function wpAuthCheckLoad(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the HTML that shows the wp-login dialog when the user is no longer logged in.
 *
 * @since 3.6.0
 */
    public function wpAuthCheckHtml(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a user is still logged in, for the heartbeat.
 *
 * Send a result that shows a log-in box if the user is no longer logged in,
 * or if their cookie is within the grace period.
 *
 * @since 3.6.0
 *
 * @global int $login_grace_period
 *
 * @param array $response  The Heartbeat response.
 * @return array The Heartbeat response with 'wp-auth-check' value set.
 */
    public function wpAuthCheck(array $response): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns RegEx body to liberally match an opening HTML tag.
 *
 * Matches an opening HTML tag that:
 * 1. Is self-closing or
 * 2. Has no body but has a closing tag of the same name or
 * 3. Contains a body and a closing tag of the same name
 *
 * Note: this RegEx does not balance inner tags and does not attempt
 * to produce valid HTML
 *
 * @since 3.6.0
 *
 * @param string $tag An HTML tag name. Example: 'video'.
 * @return string Tag RegEx.
 */
    public function getTagRegex(string $tag): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Indicates if a given slug for a character set represents the UTF-8
 * text encoding. If not provided, examines the current blog's charset.
 *
 * A charset is considered to represent UTF-8 if it is a case-insensitive
 * match of "UTF-8" with or without the hyphen.
 *
 * Example:
 *
 *     true  === is_utf8_charset( 'UTF-8' );
 *     true  === is_utf8_charset( 'utf8' );
 *     false === is_utf8_charset( 'latin1' );
 *     false === is_utf8_charset( 'UTF 8' );
 *
 *     // Only strings match.
 *     false === is_utf8_charset( [ 'charset' => 'utf-8' ] );
 *
 *     // Without a given charset, it depends on the site option "blog_charset".
 *     $is_utf8 = is_utf8_charset();
 *
 * @since 6.6.0
 * @since 6.6.1 A wrapper for _is_utf8_charset
 *
 * @see _is_utf8_charset
 *
 * @param string|null $blogCharset Optional. Slug representing a text character encoding, or "charset".
 *                                  E.g. "UTF-8", "Windows-1252", "ISO-8859-1", "SJIS".
 *                                  Default value is to infer from "blog_charset" option.
 * @return bool Whether the slug represents the UTF-8 encoding.
 */
    public function isUtf8Charset(string|null $blogCharset = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the mbstring internal encoding to a binary safe encoding when func_overload
 * is enabled.
 *
 * When mbstring.func_overload is in use for multi-byte encodings, the results from
 * strlen() and similar functions respect the utf8 characters, causing binary data
 * to return incorrect lengths.
 *
 * This function overrides the mbstring encoding to a binary-safe encoding, and
 * resets it to the users expected encoding afterwards through the
 * `reset_mbstring_encoding` function.
 *
 * It is safe to recursively call this function, however each
 * `mbstring_binary_safe_encoding()` call must be followed up with an equal number
 * of `reset_mbstring_encoding()` calls.
 *
 * @since 3.7.0
 *
 * @see reset_mbstring_encoding()
 *
 * @param bool $reset Optional. Whether to reset the encoding back to a previously-set encoding.
 *                    Default false.
 */
    public function mbstringBinarySafeEncoding(bool $reset = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Resets the mbstring internal encoding to a users previously set encoding.
 *
 * @see mbstring_binary_safe_encoding()
 *
 * @since 3.7.0
 */
    public function resetMbstringEncoding(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters/validates a variable as a boolean.
 *
 * Alternative to `filter_var( $value, FILTER_VALIDATE_BOOLEAN )`.
 *
 * @since 4.0.0
 *
 * @param mixed $value Boolean value to validate.
 * @return bool Whether the value is validated.
 */
    public function wpValidateBoolean(mixed $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a file.
 *
 * @since 4.2.0
 *
 * @param string $file The path to the file to delete.
 */
    public function wpDeleteFile(string $file): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a file if its path is within the given directory.
 *
 * @since 4.9.7
 *
 * @param string $file      Absolute path to the file to delete.
 * @param string $directory Absolute path to a directory.
 * @return bool True on success, false on failure.
 */
    public function wpDeleteFileFromDirectory(string $file, string $directory): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs a small JS snippet on preview tabs/windows to remove `window.name` when a user is navigating to another page.
 *
 * This prevents reusing the same tab for a preview when the user has navigated away.
 *
 * @since 4.3.0
 *
 * @global WP_Post $post Global post object.
 */
    public function wpPostPreviewJs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601 (Y-m-d\TH:i:s).
 *
 * Explicitly strips timezones, as datetimes are not saved with any timezone
 * information. Including any information on the offset could be misleading.
 *
 * Despite historical function name, the output does not conform to RFC3339 format,
 * which must contain timezone.
 *
 * @since 4.4.0
 *
 * @param string $dateString Date string to parse and format.
 * @return string Date formatted for ISO8601 without time zone.
 */
    public function mysqlToRfc3339(string $dateString): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Attempts to raise the PHP memory limit for memory intensive processes.
 *
 * Only allows raising the existing limit and prevents lowering it.
 *
 * @since 4.6.0
 *
 * @param string $context Optional. Context in which the function is called. Accepts either 'admin',
 *                        'image', 'cron', or an arbitrary other context. If an arbitrary context is passed,
 *                        the similarly arbitrary {@see '$context_memory_limit'} filter will be
 *                        invoked. Default 'admin'.
 * @return int|string|false The limit that was set or false on failure.
 */
    public function wpRaiseMemoryLimit(string $context = 'admin'): int|string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates a random UUID (version 4).
 *
 * @since 4.7.0
 *
 * @return string UUID.
 */
    public function wpGenerateUuid4(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates that a UUID is valid.
 *
 * @since 4.9.0
 *
 * @param mixed $uuid    UUID to check.
 * @param int $version Specify which version of UUID to check against. Default is none,
 *                       to accept any UUID version. Otherwise, only version allowed is `4`.
 * @return bool The string is a valid UUID or false on failure.
 */
    public function wpIsUuid(mixed $uuid, int $version = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets unique ID.
 *
 * This is a PHP implementation of Underscore's uniqueId method. A static variable
 * contains an integer that is incremented with each call. This number is returned
 * with the optional prefix. As such the returned value is not universally unique,
 * but it is unique across the life of the PHP process.
 *
 * @since 5.0.3
 *
 * @param string $prefix Prefix for the returned ID.
 * @return string Unique ID.
 */
    public function wpUniqueId(string $prefix = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates an incremental ID that is independent per each different prefix.
 *
 * It is similar to `wp_unique_id`, but each prefix has its own internal ID
 * counter to make each prefix independent from each other. The ID starts at 1
 * and increments on each call. The returned value is not universally unique,
 * but it is unique across the life of the PHP process and it's stable per
 * prefix.
 *
 * @since 6.4.0
 *
 * @param string $prefix Optional. Prefix for the returned ID. Default empty string.
 * @return string Incremental ID per prefix.
 */
    public function wpUniquePrefixedId(string $prefix = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets last changed date for the specified cache group.
 *
 * @since 4.7.0
 *
 * @param string $group Where the cache contents are grouped.
 * @return string UNIX timestamp with microseconds representing when the group was last changed.
 */
    public function wpCacheGetLastChanged(string $group): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets last changed date for the specified cache group to now.
 *
 * @since 6.3.0
 *
 * @param string $group Where the cache contents are grouped.
 * @return string UNIX timestamp when the group was last changed.
 */
    public function wpCacheSetLastChanged(string $group): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends an email to the old site admin email address when the site admin email address changes.
 *
 * @since 4.9.0
 *
 * @param string $oldEmail   The old site admin email address.
 * @param string $newEmail   The new site admin email address.
 * @param string $optionName The relevant database option name.
 */
    public function wpSiteAdminEmailChangeNotification(string $oldEmail, string $newEmail, string $optionName): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an anonymized IPv4 or IPv6 address.
 *
 * @since 4.9.6 Abstracted from `WP_Community_Events::get_unsafe_client_ip()`.
 *
 * @param string $ipAddr       The IPv4 or IPv6 address to be anonymized.
 * @param bool $ipv6Fallback Optional. Whether to return the original IPv6 address if the needed functions
 *                              to anonymize it are not present. Default false, return `::` (unspecified address).
 * @return string  The anonymized IP address.
 */
    public function wpPrivacyAnonymizeIp(string $ipAddr, bool $ipv6Fallback = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns uniform "anonymous" data by type.
 *
 * @since 4.9.6
 *
 * @param string $type The type of data to be anonymized.
 * @param string $data Optional. The data to be anonymized. Default empty string.
 * @return string The anonymous data for the requested type.
 */
    public function wpPrivacyAnonymizeData(string $type, string $data = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the directory used to store personal data export files.
 *
 * @since 4.9.6
 *
 * @see wp_privacy_exports_url
 *
 * @return string Exports directory.
 */
    public function wpPrivacyExportsDir(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the URL of the directory used to store personal data export files.
 *
 * @since 4.9.6
 *
 * @see wp_privacy_exports_dir
 *
 * @return string Exports directory URL.
 */
    public function wpPrivacyExportsUrl(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Schedules a `WP_Cron` job to delete expired export files.
 *
 * @since 4.9.6
 */
    public function wpScheduleDeleteOldPrivacyExportFiles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleans up export files older than three days old.
 *
 * The export files are stored in `wp-content/uploads`, and are therefore publicly
 * accessible. A CSPRN is appended to the filename to mitigate the risk of an
 * unauthorized person downloading the file, but it is still possible. Deleting
 * the file after the data subject has had a chance to delete it adds an additional
 * layer of protection.
 *
 * @since 4.9.6
 */
    public function wpPrivacyDeleteOldExportFiles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the URL to learn more about updating the PHP version the site is running on.
 *
 * This URL can be overridden by specifying an environment variable `WP_UPDATE_PHP_URL` or by using the
 * {@see 'wp_update_php_url'} filter. Providing an empty string is not allowed and will result in the
 * default URL being used. Furthermore the page the URL links to should preferably be localized in the
 * site language.
 *
 * @since 5.1.0
 *
 * @return string URL to learn more about updating PHP.
 */
    public function wpGetUpdatePhpUrl(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the default annotation for the web host altering the "Update PHP" page URL.
 *
 * This function is to be used after {@see wp_get_update_php_url()} to display a consistent
 * annotation if the web host has altered the default "Update PHP" page URL.
 *
 * @since 5.1.0
 * @since 5.2.0 Added the `$before` and `$after` parameters.
 * @since 6.4.0 Added the `$display` parameter.
 *
 * @param string $before  Markup to output before the annotation. Default `<p class="description">`.
 * @param string $after   Markup to output after the annotation. Default `</p>`.
 * @param bool $display Whether to echo or return the markup. Default `true` for echo.
 *
 * @return string|void
 */
    public function wpUpdatePhpAnnotation(string $before = '<p class="description">', string $after = '</p>', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the default annotation for the web hosting altering the "Update PHP" page URL.
 *
 * This function is to be used after {@see wp_get_update_php_url()} to return a consistent
 * annotation if the web host has altered the default "Update PHP" page URL.
 *
 * @since 5.2.0
 *
 * @return string Update PHP page annotation. An empty string if no custom URLs are provided.
 */
    public function wpGetUpdatePhpAnnotation(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the URL for directly updating the PHP version the site is running on.
 *
 * A URL will only be returned if the `WP_DIRECT_UPDATE_PHP_URL` environment variable is specified or
 * by using the {@see 'wp_direct_php_update_url'} filter. This allows hosts to send users directly to
 * the page where they can update PHP to a newer version.
 *
 * @since 5.1.1
 *
 * @return string URL for directly updating PHP or empty string.
 */
    public function wpGetDirectPhpUpdateUrl(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a button directly linking to a PHP update process.
 *
 * This provides hosts with a way for users to be sent directly to their PHP update process.
 *
 * The button is only displayed if a URL is returned by `wp_get_direct_php_update_url()`.
 *
 * @since 5.1.1
 */
    public function wpDirectPhpUpdateButton(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the URL to learn more about updating the site to use HTTPS.
 *
 * This URL can be overridden by specifying an environment variable `WP_UPDATE_HTTPS_URL` or by using the
 * {@see 'wp_update_https_url'} filter. Providing an empty string is not allowed and will result in the
 * default URL being used. Furthermore the page the URL links to should preferably be localized in the
 * site language.
 *
 * @since 5.7.0
 *
 * @return string URL to learn more about updating to HTTPS.
 */
    public function wpGetUpdateHttpsUrl(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the URL for directly updating the site to use HTTPS.
 *
 * A URL will only be returned if the `WP_DIRECT_UPDATE_HTTPS_URL` environment variable is specified or
 * by using the {@see 'wp_direct_update_https_url'} filter. This allows hosts to send users directly to
 * the page where they can update their site to use HTTPS.
 *
 * @since 5.7.0
 *
 * @return string URL for directly updating to HTTPS or empty string.
 */
    public function wpGetDirectUpdateHttpsUrl(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the size of a directory.
 *
 * A helper function that is used primarily to check whether
 * a blog has exceeded its allowed upload space.
 *
 * @since MU (3.0.0)
 * @since 5.2.0 $max_execution_time parameter added.
 *
 * @param string $directory Full path of a directory.
 * @param int $maxExecutionTime Maximum time to run before giving up. In seconds.
 *                                   The timeout is global and is measured from the moment WordPress started to load.
 * @return int|false|null Size in bytes if a valid directory. False if not. Null if timeout.
 */
    public function getDirsize(string $directory, int $maxExecutionTime = null): int|false|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the size of a directory recursively.
 *
 * Used by get_dirsize() to get a directory size when it contains other directories.
 *
 * @since MU (3.0.0)
 * @since 4.3.0 The `$exclude` parameter was added.
 * @since 5.2.0 The `$max_execution_time` parameter was added.
 * @since 5.6.0 The `$directory_cache` parameter was added.
 *
 * @param string $directory          Full path of a directory.
 * @param string|string[] $exclude            Optional. Full path of a subdirectory to exclude from the total,
 *                                            or array of paths. Expected without trailing slash(es).
 *                                            Default null.
 * @param int $maxExecutionTime Optional. Maximum time to run before giving up. In seconds.
 *                                            The timeout is global and is measured from the moment
 *                                            WordPress started to load. Defaults to the value of
 *                                            `max_execution_time` PHP setting.
 * @param array $directoryCache    Optional. Array of cached directory paths.
 *                                            Defaults to the value of `dirsize_cache` transient.
 * @return int|false|null Size in bytes if a valid directory. False if not. Null if timeout.
 */
    public function recurseDirsize(string $directory, string|array $exclude = null, int $maxExecutionTime = null, array $directoryCache = null): int|false|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleans directory size cache used by recurse_dirsize().
 *
 * Removes the current directory and all parent directories from the `dirsize_cache` transient.
 *
 * @since 5.6.0
 * @since 5.9.0 Added input validation with a notice for invalid input.
 *
 * @param string $path Full path of a directory or file.
 */
    public function cleanDirsizeCache(string $path): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks compatibility with the current WordPress version.
 *
 * @since 5.2.0
 *
 * @global string $wp_version The WordPress version string.
 *
 * @param string $required Minimum required WordPress version.
 * @return bool True if required version is compatible or empty, false if not.
 */
    public function isWpVersionCompatible(string $required): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks compatibility with the current PHP version.
 *
 * @since 5.2.0
 *
 * @param string $required Minimum required PHP version.
 * @return bool True if required version is compatible or empty, false if not.
 */
    public function isPhpVersionCompatible(string $required): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if two numbers are nearly the same.
 *
 * This is similar to using `round()` but the precision is more fine-grained.
 *
 * @since 5.3.0
 *
 * @param int|float $expected  The expected value.
 * @param int|float $actual    The actual number.
 * @param int|float $precision Optional. The allowed variation. Default 1.
 * @return bool Whether the numbers match within the specified precision.
 */
    public function wpFuzzyNumberMatch(int|float $expected, int|float $actual, int|float $precision = 1): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates and returns the markup for an admin notice.
 *
 * @since 6.4.0
 *
 * @param string $message The message.
 * @param array $args {
 *     Optional. An array of arguments for the admin notice. Default empty array.
 *
 *     @type string   $type               Optional. The type of admin notice.
 *                                        For example, 'error', 'success', 'warning', 'info'.
 *                                        Default empty string.
 *     @type bool     $dismissible        Optional. Whether the admin notice is dismissible. Default false.
 *     @type string   $id                 Optional. The value of the admin notice's ID attribute. Default empty string.
 *     @type string[] $additional_classes Optional. A string array of class names. Default empty array.
 *     @type string[] $attributes         Optional. Additional attributes for the notice div. Default empty array.
 *     @type bool     $paragraph_wrap     Optional. Whether to wrap the message in paragraph tags. Default true.
 * }
 * @return string The markup for an admin notice.
 */
    public function wpGetAdminNotice(string $message, array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs an admin notice.
 *
 * @since 6.4.0
 *
 * @param string $message The message to output.
 * @param array $args {
 *     Optional. An array of arguments for the admin notice. Default empty array.
 *
 *     @type string   $type               Optional. The type of admin notice.
 *                                        For example, 'error', 'success', 'warning', 'info'.
 *                                        Default empty string.
 *     @type bool     $dismissible        Optional. Whether the admin notice is dismissible. Default false.
 *     @type string   $id                 Optional. The value of the admin notice's ID attribute. Default empty string.
 *     @type string[] $additional_classes Optional. A string array of class names. Default empty array.
 *     @type string[] $attributes         Optional. Additional attributes for the notice div. Default empty array.
 *     @type bool     $paragraph_wrap     Optional. Whether to wrap the message in paragraph tags. Default true.
 * }
 */
    public function wpAdminNotice(string $message, array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Initializes $wp_scripts if it has not been set.
 *
 * @since 4.2.0
 *
 * @global WP_Scripts $wp_scripts
 *
 * @return \WP_Scripts WP_Scripts instance.
 */
    public function wpScripts(): \WP_Scripts
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints scripts in document head that are in the $handles queue.
 *
 * Called by admin-header.php and {@see 'wp_head'} hook. Since it is called by wp_head on every page load,
 * the function does not instantiate the WP_Scripts object unless script names are explicitly passed.
 * Makes use of already-instantiated `$wp_scripts` global if present. Use provided {@see 'wp_print_scripts'}
 * hook to register/enqueue new scripts.
 *
 * @see WP_Scripts::do_item()
 * @since 2.1.0
 *
 * @global WP_Scripts $wp_scripts The WP_Scripts object for printing scripts.
 *
 * @param string|string[]|false $handles Optional. Scripts to be printed. Default 'false'.
 * @return string[] On success, an array of handles of processed WP_Dependencies items; otherwise, an empty array.
 */
    public function wpPrintScripts(string|array|false $handles = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds extra code to a registered script.
 *
 * Code will only be added if the script is already in the queue.
 * Accepts a string `$data` containing the code. If two or more code blocks
 * are added to the same script `$handle`, they will be printed in the order
 * they were added, i.e. the latter added code can redeclare the previous.
 *
 * @since 4.5.0
 *
 * @see WP_Scripts::add_inline_script()
 *
 * @param string $handle   Name of the script to add the inline script to.
 * @param string $data     String containing the JavaScript to be added.
 * @param string $position Optional. Whether to add the inline script before the handle
 *                         or after. Default 'after'.
 * @return bool True on success, false on failure.
 */
    public function wpAddInlineScript(string $handle, string $data, string $position = 'after'): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a new script.
 *
 * Registers a script to be enqueued later using the wp_enqueue_script() function.
 *
 * @see WP_Dependencies::add()
 * @see WP_Dependencies::add_data()
 *
 * @since 2.1.0
 * @since 4.3.0 A return value was added.
 * @since 6.3.0 The $in_footer parameter of type boolean was overloaded to be an $args parameter of type array.
 *
 * @param string $handle    Name of the script. Should be unique.
 * @param string|false $src       Full URL of the script, or path of the script relative to the WordPress root directory.
 *                                    If source is set to false, script is an alias of other scripts it depends on.
 * @param string[] $deps      Optional. An array of registered script handles this script depends on. Default empty array.
 * @param string|bool|null $ver       Optional. String specifying script version number, if it has one, which is added to the URL
 *                                    as a query string for cache busting purposes. If version is set to false, a version
 *                                    number is automatically added equal to current installed WordPress version.
 *                                    If set to null, no version is added.
 * @param array|bool $args     {
 *     Optional. An array of additional script loading strategies. Default empty array.
 *     Otherwise, it may be a boolean in which case it determines whether the script is printed in the footer. Default false.
 *
 *     @type string    $strategy     Optional. If provided, may be either 'defer' or 'async'.
 *     @type bool      $in_footer    Optional. Whether to print the script in the footer. Default 'false'.
 * }
 * @return bool Whether the script has been registered. True on success, false on failure.
 */
    public function wpRegisterScript(string $handle, string|false $src, array $deps = [], string|bool|null $ver = false, array|bool $args = []): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Localizes a script.
 *
 * Works only if the script has already been registered.
 *
 * Accepts an associative array `$l10n` and creates a JavaScript object:
 *
 *     "$object_name": {
 *         key: value,
 *         key: value,
 *         ...
 *     }
 *
 * @see WP_Scripts::localize()
 * @link https://core.trac.wordpress.org/ticket/11520
 *
 * @since 2.2.0
 *
 * @todo Documentation cleanup
 *
 * @param string $handle      Script handle the data will be attached to.
 * @param string $objectName Name for the JavaScript object. Passed directly, so it should be qualified JS variable.
 *                            Example: '/[a-zA-Z0-9_]+/'.
 * @param array $l10n        The data itself. The data can be either a single or multi-dimensional array.
 * @return bool True if the script was successfully localized, false otherwise.
 */
    public function wpLocalizeScript(string $handle, string $objectName, array $l10n): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets translated strings for a script.
 *
 * Works only if the script has already been registered.
 *
 * @see WP_Scripts::set_translations()
 * @since 5.0.0
 * @since 5.1.0 The `$domain` parameter was made optional.
 *
 * @global WP_Scripts $wp_scripts The WP_Scripts object for printing scripts.
 *
 * @param string $handle Script handle the textdomain will be attached to.
 * @param string $domain Optional. Text domain. Default 'default'.
 * @param string $path   Optional. The full file path to the directory containing translation files.
 * @return bool True if the text domain was successfully localized, false otherwise.
 */
    public function wpSetScriptTranslations(string $handle, string $domain = 'default', string $path = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a registered script.
 *
 * Note: there are intentional safeguards in place to prevent critical admin scripts,
 * such as jQuery core, from being unregistered.
 *
 * @see WP_Dependencies::remove()
 *
 * @since 2.1.0
 *
 * @global string $pagenow The filename of the current screen.
 *
 * @param string $handle Name of the script to be removed.
 */
    public function wpDeregisterScript(string $handle): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues a script.
 *
 * Registers the script if `$src` provided (does NOT overwrite), and enqueues it.
 *
 * @see WP_Dependencies::add()
 * @see WP_Dependencies::add_data()
 * @see WP_Dependencies::enqueue()
 *
 * @since 2.1.0
 * @since 6.3.0 The $in_footer parameter of type boolean was overloaded to be an $args parameter of type array.
 *
 * @param string $handle    Name of the script. Should be unique.
 * @param string $src       Full URL of the script, or path of the script relative to the WordPress root directory.
 *                                    Default empty.
 * @param string[] $deps      Optional. An array of registered script handles this script depends on. Default empty array.
 * @param string|bool|null $ver       Optional. String specifying script version number, if it has one, which is added to the URL
 *                                    as a query string for cache busting purposes. If version is set to false, a version
 *                                    number is automatically added equal to current installed WordPress version.
 *                                    If set to null, no version is added.
 * @param array|bool $args     {
 *     Optional. An array of additional script loading strategies. Default empty array.
 *     Otherwise, it may be a boolean in which case it determines whether the script is printed in the footer. Default false.
 *
 *     @type string    $strategy     Optional. If provided, may be either 'defer' or 'async'.
 *     @type bool      $in_footer    Optional. Whether to print the script in the footer. Default 'false'.
 * }
 */
    public function wpEnqueueScript(string $handle, string $src = '', array $deps = [], string|bool|null $ver = false, array|bool $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a previously enqueued script.
 *
 * @see WP_Dependencies::dequeue()
 *
 * @since 3.1.0
 *
 * @param string $handle Name of the script to be removed.
 */
    public function wpDequeueScript(string $handle): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a script has been added to the queue.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.8.0
 * @since 3.5.0 'enqueued' added as an alias of the 'queue' list.
 *
 * @param string $handle Name of the script.
 * @param string $status Optional. Status of the script to check. Default 'enqueued'.
 *                       Accepts 'enqueued', 'registered', 'queue', 'to_do', and 'done'.
 * @return bool Whether the script is queued.
 */
    public function wpScriptIs(string $handle, string $status = 'enqueued'): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds metadata to a script.
 *
 * Works only if the script has already been registered.
 *
 * Possible values for $key and $value:
 * 'conditional' string Comments for IE 6, lte IE 7, etc.
 *
 * @since 4.2.0
 *
 * @see WP_Dependencies::add_data()
 *
 * @param string $handle Name of the script.
 * @param string $key    Name of data point for which we're storing a value.
 * @param mixed $value  String containing the data to be added.
 * @return bool True on success, false on failure.
 */
    public function wpScriptAddData(string $handle, string $key, mixed $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Initializes $wp_styles if it has not been set.
 *
 * @since 4.2.0
 *
 * @global WP_Styles $wp_styles
 *
 * @return \WP_Styles WP_Styles instance.
 */
    public function wpStyles(): \WP_Styles
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays styles that are in the $handles queue.
 *
 * Passing an empty array to $handles prints the queue,
 * passing an array with one string prints that style,
 * and passing an array of strings prints those styles.
 *
 * @since 2.6.0
 *
 * @global WP_Styles $wp_styles The WP_Styles object for printing styles.
 *
 * @param string|bool|array $handles Styles to be printed. Default 'false'.
 * @return string[] On success, an array of handles of processed WP_Dependencies items; otherwise, an empty array.
 */
    public function wpPrintStyles(string|bool|array $handles = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds extra CSS styles to a registered stylesheet.
 *
 * Styles will only be added if the stylesheet is already in the queue.
 * Accepts a string $data containing the CSS. If two or more CSS code blocks
 * are added to the same stylesheet $handle, they will be printed in the order
 * they were added, i.e. the latter added styles can redeclare the previous.
 *
 * @see WP_Styles::add_inline_style()
 *
 * @since 3.3.0
 *
 * @param string $handle Name of the stylesheet to add the extra styles to.
 * @param string $data   String containing the CSS styles to be added.
 * @return bool True on success, false on failure.
 */
    public function wpAddInlineStyle(string $handle, string $data): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a CSS stylesheet.
 *
 * @see WP_Dependencies::add()
 * @link https://www.w3.org/TR/CSS2/media.html#media-types List of CSS media types.
 *
 * @since 2.6.0
 * @since 4.3.0 A return value was added.
 *
 * @param string $handle Name of the stylesheet. Should be unique.
 * @param string|false $src    Full URL of the stylesheet, or path of the stylesheet relative to the WordPress root directory.
 *                                 If source is set to false, stylesheet is an alias of other stylesheets it depends on.
 * @param string[] $deps   Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.
 * @param string|bool|null $ver    Optional. String specifying stylesheet version number, if it has one, which is added to the URL
 *                                 as a query string for cache busting purposes. If version is set to false, a version
 *                                 number is automatically added equal to current installed WordPress version.
 *                                 If set to null, no version is added.
 * @param string $media  Optional. The media for which this stylesheet has been defined.
 *                                 Default 'all'. Accepts media types like 'all', 'print' and 'screen', or media queries like
 *                                 '(orientation: portrait)' and '(max-width: 640px)'.
 * @return bool Whether the style has been registered. True on success, false on failure.
 */
    public function wpRegisterStyle(string $handle, string|false $src, array $deps = [], string|bool|null $ver = false, string $media = 'all'): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a registered stylesheet.
 *
 * @see WP_Dependencies::remove()
 *
 * @since 2.1.0
 *
 * @param string $handle Name of the stylesheet to be removed.
 */
    public function wpDeregisterStyle(string $handle): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues a CSS stylesheet.
 *
 * Registers the style if source provided (does NOT overwrite) and enqueues.
 *
 * @see WP_Dependencies::add()
 * @see WP_Dependencies::enqueue()
 * @link https://www.w3.org/TR/CSS2/media.html#media-types List of CSS media types.
 *
 * @since 2.6.0
 *
 * @param string $handle Name of the stylesheet. Should be unique.
 * @param string $src    Full URL of the stylesheet, or path of the stylesheet relative to the WordPress root directory.
 *                                 Default empty.
 * @param string[] $deps   Optional. An array of registered stylesheet handles this stylesheet depends on. Default empty array.
 * @param string|bool|null $ver    Optional. String specifying stylesheet version number, if it has one, which is added to the URL
 *                                 as a query string for cache busting purposes. If version is set to false, a version
 *                                 number is automatically added equal to current installed WordPress version.
 *                                 If set to null, no version is added.
 * @param string $media  Optional. The media for which this stylesheet has been defined.
 *                                 Default 'all'. Accepts media types like 'all', 'print' and 'screen', or media queries like
 *                                 '(orientation: portrait)' and '(max-width: 640px)'.
 */
    public function wpEnqueueStyle(string $handle, string $src = '', array $deps = [], string|bool|null $ver = false, string $media = 'all'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a previously enqueued CSS stylesheet.
 *
 * @see WP_Dependencies::dequeue()
 *
 * @since 3.1.0
 *
 * @param string $handle Name of the stylesheet to be removed.
 */
    public function wpDequeueStyle(string $handle): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a CSS stylesheet has been added to the queue.
 *
 * @since 2.8.0
 *
 * @param string $handle Name of the stylesheet.
 * @param string $status Optional. Status of the stylesheet to check. Default 'enqueued'.
 *                       Accepts 'enqueued', 'registered', 'queue', 'to_do', and 'done'.
 * @return bool Whether style is queued.
 */
    public function wpStyleIs(string $handle, string $status = 'enqueued'): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds metadata to a CSS stylesheet.
 *
 * Works only if the stylesheet has already been registered.
 *
 * Possible values for $key and $value:
 * 'conditional' string      Comments for IE 6, lte IE 7 etc.
 * 'rtl'         bool|string To declare an RTL stylesheet.
 * 'suffix'      string      Optional suffix, used in combination with RTL.
 * 'alt'         bool        For rel="alternate stylesheet".
 * 'title'       string      For preferred/alternate stylesheets.
 * 'path'        string      The absolute path to a stylesheet. Stylesheet will
 *                           load inline when 'path' is set.
 *
 * @see WP_Dependencies::add_data()
 *
 * @since 3.6.0
 * @since 5.8.0 Added 'path' as an official value for $key.
 *              See {@see wp_maybe_inline_styles()}.
 *
 * @param string $handle Name of the stylesheet.
 * @param string $key    Name of data point for which we're storing a value.
 *                       Accepts 'conditional', 'rtl' and 'suffix', 'alt', 'title' and 'path'.
 * @param mixed $value  String containing the CSS data to be added.
 * @return bool True on success, false on failure.
 */
    public function wpStyleAddData(string $handle, string $key, mixed $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads header template.
 *
 * Includes the header template for a theme or if a name is specified then a
 * specialized header will be included.
 *
 * For the parameter, if the file is called "header-special.php" then specify
 * "special".
 *
 * @since 1.5.0
 * @since 5.5.0 A return value was added.
 * @since 5.5.0 The `$args` parameter was added.
 *
 * @param string $name The name of the specialized header.
 * @param array $args Optional. Additional arguments passed to the header template.
 *                     Default empty array.
 * @return void|false Void on success, false if the template does not exist.
 */
    public function getHeader(string $name = null, array $args = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads footer template.
 *
 * Includes the footer template for a theme or if a name is specified then a
 * specialized footer will be included.
 *
 * For the parameter, if the file is called "footer-special.php" then specify
 * "special".
 *
 * @since 1.5.0
 * @since 5.5.0 A return value was added.
 * @since 5.5.0 The `$args` parameter was added.
 *
 * @param string $name The name of the specialized footer.
 * @param array $args Optional. Additional arguments passed to the footer template.
 *                     Default empty array.
 * @return void|false Void on success, false if the template does not exist.
 */
    public function getFooter(string $name = null, array $args = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads sidebar template.
 *
 * Includes the sidebar template for a theme or if a name is specified then a
 * specialized sidebar will be included.
 *
 * For the parameter, if the file is called "sidebar-special.php" then specify
 * "special".
 *
 * @since 1.5.0
 * @since 5.5.0 A return value was added.
 * @since 5.5.0 The `$args` parameter was added.
 *
 * @param string $name The name of the specialized sidebar.
 * @param array $args Optional. Additional arguments passed to the sidebar template.
 *                     Default empty array.
 * @return void|false Void on success, false if the template does not exist.
 */
    public function getSidebar(string $name = null, array $args = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads a template part into a template.
 *
 * Provides a simple mechanism for child themes to overload reusable sections of code
 * in the theme.
 *
 * Includes the named template part for a theme or if a name is specified then a
 * specialized part will be included. If the theme contains no {slug}.php file
 * then no template will be included.
 *
 * The template is included using require, not require_once, so you may include the
 * same template part multiple times.
 *
 * For the $name parameter, if the file is called "{slug}-special.php" then specify
 * "special".
 *
 * @since 3.0.0
 * @since 5.5.0 A return value was added.
 * @since 5.5.0 The `$args` parameter was added.
 *
 * @param string $slug The slug name for the generic template.
 * @param string|null $name Optional. The name of the specialized template.
 * @param array $args Optional. Additional arguments passed to the template.
 *                          Default empty array.
 * @return void|false Void on success, false if the template does not exist.
 */
    public function getTemplatePart(string $slug, string|null $name = null, array $args = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays search form.
 *
 * Will first attempt to locate the searchform.php file in either the child or
 * the parent, then load it. If it doesn't exist, then the default search form
 * will be displayed. The default search form is HTML, which will be displayed.
 * There is a filter applied to the search form HTML in order to edit or replace
 * it. The filter is {@see 'get_search_form'}.
 *
 * This function is primarily used by themes which want to hardcode the search
 * form into the sidebar and also by the search widget in WordPress.
 *
 * There is also an action that is called whenever the function is run called,
 * {@see 'pre_get_search_form'}. This can be useful for outputting JavaScript that the
 * search relies on or various formatting that applies to the beginning of the
 * search. To give a few examples of what it can be used for.
 *
 * @since 2.7.0
 * @since 5.2.0 The `$args` array parameter was added in place of an `$echo` boolean flag.
 *
 * @param array $args {
 *     Optional. Array of display arguments.
 *
 *     @type bool   $echo       Whether to echo or return the form. Default true.
 *     @type string $aria_label ARIA label for the search form. Useful to distinguish
 *                              multiple search forms on the same page and improve
 *                              accessibility. Default empty.
 * }
 * @return void|string Void if 'echo' argument is true, search form HTML if 'echo' is false.
 */
    public function getSearchForm(array $args = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the Log In/Out link.
 *
 * Displays a link, which allows users to navigate to the Log In page to log in
 * or log out depending on whether they are currently logged in.
 *
 * @since 1.5.0
 *
 * @param string $redirect Optional path to redirect to on login/logout.
 * @param bool $display  Default to echo and not return the link.
 * @return void|string Void if `$display` argument is true, log in/out link if `$display` is false.
 */
    public function wpLoginout(string $redirect = '', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the logout URL.
 *
 * Returns the URL that allows the user to log out of the site.
 *
 * @since 2.7.0
 *
 * @param string $redirect Path to redirect to on logout.
 * @return string The logout URL. Note: HTML-encoded via esc_html() in wp_nonce_url().
 */
    public function wpLogoutUrl(string $redirect = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the login URL.
 *
 * @since 2.7.0
 *
 * @param string $redirect     Path to redirect to on log in.
 * @param bool $forceReauth Whether to force reauthorization, even if a cookie is present.
 *                             Default false.
 * @return string The login URL. Not HTML-encoded.
 */
    public function wpLoginUrl(string $redirect = '', bool $forceReauth = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the URL that allows the user to register on the site.
 *
 * @since 3.6.0
 *
 * @return string User registration URL.
 */
    public function wpRegistrationUrl(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Provides a simple login form for use anywhere within WordPress.
 *
 * The login form HTML is echoed by default. Pass a false value for `$echo` to return it instead.
 *
 * @since 3.0.0
 * @since 6.6.0 Added `required_username` and `required_password` arguments.
 *
 * @param array $args {
 *     Optional. Array of options to control the form output. Default empty array.
 *
 *     @type bool   $echo              Whether to display the login form or return the form HTML code.
 *                                     Default true (echo).
 *     @type string $redirect          URL to redirect to. Must be absolute, as in "https://example.com/mypage/".
 *                                     Default is to redirect back to the request URI.
 *     @type string $form_id           ID attribute value for the form. Default 'loginform'.
 *     @type string $label_username    Label for the username or email address field. Default 'Username or Email Address'.
 *     @type string $label_password    Label for the password field. Default 'Password'.
 *     @type string $label_remember    Label for the remember field. Default 'Remember Me'.
 *     @type string $label_log_in      Label for the submit button. Default 'Log In'.
 *     @type string $id_username       ID attribute value for the username field. Default 'user_login'.
 *     @type string $id_password       ID attribute value for the password field. Default 'user_pass'.
 *     @type string $id_remember       ID attribute value for the remember field. Default 'rememberme'.
 *     @type string $id_submit         ID attribute value for the submit button. Default 'wp-submit'.
 *     @type bool   $remember          Whether to display the "rememberme" checkbox in the form.
 *     @type string $value_username    Default value for the username field. Default empty.
 *     @type bool   $value_remember    Whether the "Remember Me" checkbox should be checked by default.
 *                                     Default false (unchecked).
 *     @type bool   $required_username Whether the username field has the 'required' attribute.
 *                                     Default false.
 *     @type bool   $required_password Whether the password field has the 'required' attribute.
 *                                     Default false.
 *
 * }
 * @return void|string Void if 'echo' argument is true, login form HTML if 'echo' is false.
 */
    public function wpLoginForm(array $args = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the URL that allows the user to reset the lost password.
 *
 * @since 2.8.0
 *
 * @param string $redirect Path to redirect to on login.
 * @return string Lost password URL.
 */
    public function wpLostpasswordUrl(string $redirect = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the Registration or Admin link.
 *
 * Display a link which allows the user to navigate to the registration page if
 * not logged in and registration is enabled or to the dashboard if logged in.
 *
 * @since 1.5.0
 *
 * @param string $before  Text to output before the link. Default `<li>`.
 * @param string $after   Text to output after the link. Default `</li>`.
 * @param bool $display Default to echo and not return the link.
 * @return void|string Void if `$display` argument is true, registration or admin link
 *                     if `$display` is false.
 */
    public function wpRegister(string $before = '<li>', string $after = '</li>', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Theme container function for the 'wp_meta' action.
 *
 * The {@see 'wp_meta'} action can have several purposes, depending on how you use it,
 * but one purpose might have been to allow for theme switching.
 *
 * @since 1.5.0
 *
 * @link https://core.trac.wordpress.org/ticket/1458 Explanation of 'wp_meta' action.
 */
    public function wpMeta(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays information about the current site.
 *
 * @since 0.71
 *
 * @see get_bloginfo() For possible `$show` values
 *
 * @param string $show Optional. Site information to display. Default empty.
 */
    public function bloginfo(string $show = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves information about the current site.
 *
 * Possible values for `$show` include:
 *
 * - 'name' - Site title (set in Settings > General)
 * - 'description' - Site tagline (set in Settings > General)
 * - 'wpurl' - The WordPress address (URL) (set in Settings > General)
 * - 'url' - The Site address (URL) (set in Settings > General)
 * - 'admin_email' - Admin email (set in Settings > General)
 * - 'charset' - The "Encoding for pages and feeds"  (set in Settings > Reading)
 * - 'version' - The current WordPress version
 * - 'html_type' - The Content-Type (default: "text/html"). Themes and plugins
 *   can override the default value using the {@see 'pre_option_html_type'} filter
 * - 'text_direction' - The text direction determined by the site's language. is_rtl()
 *   should be used instead
 * - 'language' - Language code for the current site
 * - 'stylesheet_url' - URL to the stylesheet for the active theme. An active child theme
 *   will take precedence over this value
 * - 'stylesheet_directory' - Directory path for the active theme.  An active child theme
 *   will take precedence over this value
 * - 'template_url' / 'template_directory' - URL of the active theme's directory. An active
 *   child theme will NOT take precedence over this value
 * - 'pingback_url' - The pingback XML-RPC file URL (xmlrpc.php)
 * - 'atom_url' - The Atom feed URL (/feed/atom)
 * - 'rdf_url' - The RDF/RSS 1.0 feed URL (/feed/rdf)
 * - 'rss_url' - The RSS 0.92 feed URL (/feed/rss)
 * - 'rss2_url' - The RSS 2.0 feed URL (/feed)
 * - 'comments_atom_url' - The comments Atom feed URL (/comments/feed)
 * - 'comments_rss2_url' - The comments RSS 2.0 feed URL (/comments/feed)
 *
 * Some `$show` values are deprecated and will be removed in future versions.
 * These options will trigger the _deprecated_argument() function.
 *
 * Deprecated arguments include:
 *
 * - 'siteurl' - Use 'url' instead
 * - 'home' - Use 'url' instead
 *
 * @since 0.71
 *
 * @global string $wp_version The WordPress version string.
 *
 * @param string $show   Optional. Site info to retrieve. Default empty (site name).
 * @param string $filter Optional. How to filter what is retrieved. Default 'raw'.
 * @return string Mostly string values, might be empty.
 */
    public function getBloginfo(string $show = '', string $filter = 'raw'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the Site Icon URL.
 *
 * @since 4.3.0
 *
 * @param int $size    Optional. Size of the site icon. Default 512 (pixels).
 * @param string $url     Optional. Fallback url if no site icon is found. Default empty.
 * @param int $blogId Optional. ID of the blog to get the site icon for. Default current blog.
 * @return string Site Icon URL.
 */
    public function getSiteIconUrl(int $size = 512, string $url = '', int $blogId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the Site Icon URL.
 *
 * @since 4.3.0
 *
 * @param int $size    Optional. Size of the site icon. Default 512 (pixels).
 * @param string $url     Optional. Fallback url if no site icon is found. Default empty.
 * @param int $blogId Optional. ID of the blog to get the site icon for. Default current blog.
 */
    public function siteIconUrl(int $size = 512, string $url = '', int $blogId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the site has a Site Icon.
 *
 * @since 4.3.0
 *
 * @param int $blogId Optional. ID of the blog in question. Default current blog.
 * @return bool Whether the site has a site icon or not.
 */
    public function hasSiteIcon(int $blogId = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the site has a custom logo.
 *
 * @since 4.5.0
 *
 * @param int $blogId Optional. ID of the blog in question. Default is the ID of the current blog.
 * @return bool Whether the site has a custom logo or not.
 */
    public function hasCustomLogo(int $blogId = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a custom logo, linked to home unless the theme supports removing the link on the home page.
 *
 * @since 4.5.0
 * @since 5.5.0 Added option to remove the link on the home page with `unlink-homepage-logo` theme support
 *              for the `custom-logo` theme feature.
 * @since 5.5.1 Disabled lazy-loading by default.
 *
 * @param int $blogId Optional. ID of the blog in question. Default is the ID of the current blog.
 * @return string Custom logo markup.
 */
    public function getCustomLogo(int $blogId = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a custom logo, linked to home unless the theme supports removing the link on the home page.
 *
 * @since 4.5.0
 *
 * @param int $blogId Optional. ID of the blog in question. Default is the ID of the current blog.
 */
    public function theCustomLogo(int $blogId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns document title for the current page.
 *
 * @since 4.4.0
 *
 * @global int $page  Page number of a single post.
 * @global int $paged Page number of a list of posts.
 *
 * @return string Tag with the document title.
 */
    public function wpGetDocumentTitle(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves page title for all areas of blog.
 *
 * By default, the page title will display the separator before the page title,
 * so that the blog title will be before the page title. This is not good for
 * title display, since the blog title shows up on most tabs and not what is
 * important, which is the page that the user is looking at.
 *
 * There are also SEO benefits to having the blog title after or to the 'right'
 * of the page title. However, it is mostly common sense to have the blog title
 * to the right with most browsers supporting tabs. You can achieve this by
 * using the seplocation parameter and setting the value to 'right'. This change
 * was introduced around 2.5.0, in case backward compatibility of themes is
 * important.
 *
 * @since 1.0.0
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @param string $sep         Optional. How to separate the various items within the page title.
 *                            Default '&raquo;'.
 * @param bool $display     Optional. Whether to display or retrieve title. Default true.
 * @param string $seplocation Optional. Location of the separator (either 'left' or 'right').
 * @return string|void String when `$display` is false, nothing otherwise.
 */
    public function wpTitle(string $sep = '&raquo;', bool $display = true, string $seplocation = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves page title for post.
 *
 * This is optimized for single.php template file for displaying the post title.
 *
 * It does not support placing the separator after the title, but by leaving the
 * prefix parameter empty, you can set the title separator manually. The prefix
 * does not automatically place a space between the prefix, so if there should
 * be a space, the parameter value will need to have it at the end.
 *
 * @since 0.71
 *
 * @param string $prefix  Optional. What to display before the title.
 * @param bool $display Optional. Whether to display or retrieve title. Default true.
 * @return string|void Title when retrieving.
 */
    public function singlePostTitle(string $prefix = '', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves title for a post type archive.
 *
 * This is optimized for archive.php and archive-{$post_type}.php template files
 * for displaying the title of the post type.
 *
 * @since 3.1.0
 *
 * @param string $prefix  Optional. What to display before the title.
 * @param bool $display Optional. Whether to display or retrieve title. Default true.
 * @return string|void Title when retrieving, null when displaying or failure.
 */
    public function postTypeArchiveTitle(string $prefix = '', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves page title for category archive.
 *
 * Useful for category template files for displaying the category page title.
 * The prefix does not automatically place a space between the prefix, so if
 * there should be a space, the parameter value will need to have it at the end.
 *
 * @since 0.71
 *
 * @param string $prefix  Optional. What to display before the title.
 * @param bool $display Optional. Whether to display or retrieve title. Default true.
 * @return string|void Title when retrieving.
 */
    public function singleCatTitle(string $prefix = '', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves page title for tag post archive.
 *
 * Useful for tag template files for displaying the tag page title. The prefix
 * does not automatically place a space between the prefix, so if there should
 * be a space, the parameter value will need to have it at the end.
 *
 * @since 2.3.0
 *
 * @param string $prefix  Optional. What to display before the title.
 * @param bool $display Optional. Whether to display or retrieve title. Default true.
 * @return string|void Title when retrieving.
 */
    public function singleTagTitle(string $prefix = '', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves page title for taxonomy term archive.
 *
 * Useful for taxonomy term template files for displaying the taxonomy term page title.
 * The prefix does not automatically place a space between the prefix, so if there should
 * be a space, the parameter value will need to have it at the end.
 *
 * @since 3.1.0
 *
 * @param string $prefix  Optional. What to display before the title.
 * @param bool $display Optional. Whether to display or retrieve title. Default true.
 * @return string|void Title when retrieving.
 */
    public function singleTermTitle(string $prefix = '', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves page title for post archive based on date.
 *
 * Useful for when the template only needs to display the month and year,
 * if either are available. The prefix does not automatically place a space
 * between the prefix, so if there should be a space, the parameter value
 * will need to have it at the end.
 *
 * @since 0.71
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @param string $prefix  Optional. What to display before the title.
 * @param bool $display Optional. Whether to display or retrieve title. Default true.
 * @return string|false|void False if there's no valid title for the month. Title when retrieving.
 */
    public function singleMonthTitle(string $prefix = '', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the archive title based on the queried object.
 *
 * @since 4.1.0
 *
 * @see get_the_archive_title()
 *
 * @param string $before Optional. Content to prepend to the title. Default empty.
 * @param string $after  Optional. Content to append to the title. Default empty.
 */
    public function theArchiveTitle(string $before = '', string $after = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the archive title based on the queried object.
 *
 * @since 4.1.0
 * @since 5.5.0 The title part is wrapped in a `<span>` element.
 *
 * @return string Archive title.
 */
    public function getTheArchiveTitle(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays category, tag, term, or author description.
 *
 * @since 4.1.0
 *
 * @see get_the_archive_description()
 *
 * @param string $before Optional. Content to prepend to the description. Default empty.
 * @param string $after  Optional. Content to append to the description. Default empty.
 */
    public function theArchiveDescription(string $before = '', string $after = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the description for an author, post type, or term archive.
 *
 * @since 4.1.0
 * @since 4.7.0 Added support for author archives.
 * @since 4.9.0 Added support for post type archives.
 *
 * @see term_description()
 *
 * @return string Archive description.
 */
    public function getTheArchiveDescription(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the description for a post type archive.
 *
 * @since 4.9.0
 *
 * @return string The post type description.
 */
    public function getThePostTypeDescription(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves archive link content based on predefined or custom code.
 *
 * The format can be one of four styles. The 'link' for head element, 'option'
 * for use in the select element, 'html' for use in list (either ol or ul HTML
 * elements). Custom content is also supported using the before and after
 * parameters.
 *
 * The 'link' format uses the `<link>` HTML element with the **archives**
 * relationship. The before and after parameters are not used. The text
 * parameter is used to describe the link.
 *
 * The 'option' format uses the option HTML element for use in select element.
 * The value is the url parameter and the before and after parameters are used
 * between the text description.
 *
 * The 'html' format, which is the default, uses the li HTML element for use in
 * the list HTML elements. The before parameter is before the link and the after
 * parameter is after the closing link.
 *
 * The custom format uses the before parameter before the link ('a' HTML
 * element) and the after parameter after the closing link tag. If the above
 * three values for the format are not used, then custom format is assumed.
 *
 * @since 1.0.0
 * @since 5.2.0 Added the `$selected` parameter.
 *
 * @param string $url      URL to archive.
 * @param string $text     Archive text description.
 * @param string $format   Optional. Can be 'link', 'option', 'html', or custom. Default 'html'.
 * @param string $before   Optional. Content to prepend to the description. Default empty.
 * @param string $after    Optional. Content to append to the description. Default empty.
 * @param bool $selected Optional. Set to true if the current page is the selected archive page.
 * @return string HTML link content for archive.
 */
    public function getArchivesLink(string $url, string $text, string $format = 'html', string $before = '', string $after = '', bool $selected = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays archive links based on type and format.
 *
 * @since 1.2.0
 * @since 4.4.0 The `$post_type` argument was added.
 * @since 5.2.0 The `$year`, `$monthnum`, `$day`, and `$w` arguments were added.
 *
 * @see get_archives_link()
 *
 * @global wpdb      $wpdb      WordPress database abstraction object.
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @param string|array $args {
 *     Default archive links arguments. Optional.
 *
 *     @type string     $type            Type of archive to retrieve. Accepts 'daily', 'weekly', 'monthly',
 *                                       'yearly', 'postbypost', or 'alpha'. Both 'postbypost' and 'alpha'
 *                                       display the same archive link list as well as post titles instead
 *                                       of displaying dates. The difference between the two is that 'alpha'
 *                                       will order by post title and 'postbypost' will order by post date.
 *                                       Default 'monthly'.
 *     @type string|int $limit           Number of links to limit the query to. Default empty (no limit).
 *     @type string     $format          Format each link should take using the $before and $after args.
 *                                       Accepts 'link' (`<link>` tag), 'option' (`<option>` tag), 'html'
 *                                       (`<li>` tag), or a custom format, which generates a link anchor
 *                                       with $before preceding and $after succeeding. Default 'html'.
 *     @type string     $before          Markup to prepend to the beginning of each link. Default empty.
 *     @type string     $after           Markup to append to the end of each link. Default empty.
 *     @type bool       $show_post_count Whether to display the post count alongside the link. Default false.
 *     @type bool|int   $echo            Whether to echo or return the links list. Default 1|true to echo.
 *     @type string     $order           Whether to use ascending or descending order. Accepts 'ASC', or 'DESC'.
 *                                       Default 'DESC'.
 *     @type string     $post_type       Post type. Default 'post'.
 *     @type string     $year            Year. Default current year.
 *     @type string     $monthnum        Month number. Default current month number.
 *     @type string     $day             Day. Default current day.
 *     @type string     $w               Week. Default current week.
 * }
 * @return void|string Void if 'echo' argument is true, archive links if 'echo' is false.
 */
    public function wpGetArchives(string|array $args = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets number of days since the start of the week.
 *
 * @since 1.5.0
 *
 * @param int $num Number of day.
 * @return float Days since the start of the week.
 */
    public function calendarWeekMod(int $num): float
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays calendar with days that have posts as links.
 *
 * The calendar is cached, which will be retrieved, if it exists. If there are
 * no posts for the month, then it will not be displayed.
 *
 * @since 1.0.0
 *
 * @global wpdb      $wpdb      WordPress database abstraction object.
 * @global int       $m
 * @global int       $monthnum
 * @global int       $year
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 * @global array     $posts
 *
 * @param bool $initial Optional. Whether to use initial calendar names. Default true.
 * @param bool $display Optional. Whether to display the calendar output. Default true.
 * @return void|string Void if `$display` argument is true, calendar HTML if `$display` is false.
 */
    public function getCalendar(bool $initial = true, bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Purges the cached results of get_calendar.
 *
 * @see get_calendar()
 * @since 2.1.0
 */
    public function deleteGetCalendarCache(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays all of the allowed tags in HTML format with attributes.
 *
 * This is useful for displaying in the comment area, which elements and
 * attributes are supported. As well as any plugins which want to display it.
 *
 * @since 1.0.1
 * @since 4.4.0 No longer used in core.
 *
 * @global array $allowedtags
 *
 * @return string HTML allowed tags entity encoded.
 */
    public function allowedTags(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the date in iso8601 format for xml files.
 *
 * @since 1.0.0
 */
    public function theDateXml(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves the date the current post was written (once per date)
 *
 * Will only output the date if the current post's date is different from the
 * previous one output.
 *
 * i.e. Only one date listing will show per day worth of posts shown in the loop, even if the
 * function is called several times for each post.
 *
 * HTML output can be filtered with 'the_date'.
 * Date string output can be filtered with 'get_the_date'.
 *
 * @since 0.71
 *
 * @global string $currentday  The day of the current post in the loop.
 * @global string $previousday The day of the previous post in the loop.
 *
 * @param string $format  Optional. PHP date format. Defaults to the 'date_format' option.
 * @param string $before  Optional. Output before the date. Default empty.
 * @param string $after   Optional. Output after the date. Default empty.
 * @param bool $display Optional. Whether to echo the date or return it. Default true.
 * @return string|void String if retrieving.
 */
    public function theDate(string $format = '', string $before = '', string $after = '', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the date on which the post was written.
 *
 * Unlike the_date() this function will always return the date.
 * Modify output with the {@see 'get_the_date'} filter.
 *
 * @since 3.0.0
 *
 * @param string $format Optional. PHP date format. Defaults to the 'date_format' option.
 * @param int|\WP_Post $post   Optional. Post ID or WP_Post object. Default current post.
 * @return string|int|false Date the current post was written. False on failure.
 */
    public function getTheDate(string $format = '', int|\WP_Post $post = null): string|int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the date on which the post was last modified.
 *
 * @since 2.1.0
 *
 * @param string $format  Optional. PHP date format. Defaults to the 'date_format' option.
 * @param string $before  Optional. Output before the date. Default empty.
 * @param string $after   Optional. Output after the date. Default empty.
 * @param bool $display Optional. Whether to echo the date or return it. Default true.
 * @return string|void String if retrieving.
 */
    public function theModifiedDate(string $format = '', string $before = '', string $after = '', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the date on which the post was last modified.
 *
 * @since 2.1.0
 * @since 4.6.0 Added the `$post` parameter.
 *
 * @param string $format Optional. PHP date format. Defaults to the 'date_format' option.
 * @param int|\WP_Post $post   Optional. Post ID or WP_Post object. Default current post.
 * @return string|int|false Date the current post was modified. False on failure.
 */
    public function getTheModifiedDate(string $format = '', int|\WP_Post $post = null): string|int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the time at which the post was written.
 *
 * @since 0.71
 *
 * @param string $format Optional. Format to use for retrieving the time the post
 *                       was written. Accepts 'G', 'U', or PHP date format.
 *                       Defaults to the 'time_format' option.
 */
    public function theTime(string $format = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the time at which the post was written.
 *
 * @since 1.5.0
 *
 * @param string $format Optional. Format to use for retrieving the time the post
 *                            was written. Accepts 'G', 'U', or PHP date format.
 *                            Defaults to the 'time_format' option.
 * @param int|\WP_Post $post   Post ID or post object. Default is global `$post` object.
 * @return string|int|false Formatted date string or Unix timestamp if `$format` is 'U' or 'G'.
 *                          False on failure.
 */
    public function getTheTime(string $format = '', int|\WP_Post $post = null): string|int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the time at which the post was written.
 *
 * @since 2.0.0
 *
 * @param string $format    Optional. Format to use for retrieving the time the post
 *                               was written. Accepts 'G', 'U', or PHP date format. Default 'U'.
 * @param bool $gmt       Optional. Whether to retrieve the GMT time. Default false.
 * @param int|\WP_Post $post      Post ID or post object. Default is global `$post` object.
 * @param bool $translate Whether to translate the time string. Default false.
 * @return string|int|false Formatted date string or Unix timestamp if `$format` is 'U' or 'G'.
 *                          False on failure.
 */
    public function getPostTime(string $format = 'U', bool $gmt = false, int|\WP_Post $post = null, bool $translate = false): string|int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves post published or modified time as a `DateTimeImmutable` object instance.
 *
 * The object will be set to the timezone from WordPress settings.
 *
 * For legacy reasons, this function allows to choose to instantiate from local or UTC time in database.
 * Normally this should make no difference to the result. However, the values might get out of sync in database,
 * typically because of timezone setting changes. The parameter ensures the ability to reproduce backwards
 * compatible behaviors in such cases.
 *
 * @since 5.3.0
 *
 * @param int|\WP_Post $post   Optional. Post ID or post object. Default is global `$post` object.
 * @param string $field  Optional. Published or modified time to use from database. Accepts 'date' or 'modified'.
 *                            Default 'date'.
 * @param string $source Optional. Local or UTC time to use from database. Accepts 'local' or 'gmt'.
 *                            Default 'local'.
 * @return \DateTimeImmutable|false Time object on success, false on failure.
 */
    public function getPostDatetime(int|\WP_Post $post = null, string $field = 'date', string $source = 'local'): \DateTimeImmutable|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves post published or modified time as a Unix timestamp.
 *
 * Note that this function returns a true Unix timestamp, not summed with timezone offset
 * like older WP functions.
 *
 * @since 5.3.0
 *
 * @param int|\WP_Post $post  Optional. Post ID or post object. Default is global `$post` object.
 * @param string $field Optional. Published or modified time to use from database. Accepts 'date' or 'modified'.
 *                           Default 'date'.
 * @return int|false Unix timestamp on success, false on failure.
 */
    public function getPostTimestamp(int|\WP_Post $post = null, string $field = 'date'): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the time at which the post was last modified.
 *
 * @since 2.0.0
 *
 * @param string $format Optional. Format to use for retrieving the time the post
 *                       was modified. Accepts 'G', 'U', or PHP date format.
 *                       Defaults to the 'time_format' option.
 */
    public function theModifiedTime(string $format = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the time at which the post was last modified.
 *
 * @since 2.0.0
 * @since 4.6.0 Added the `$post` parameter.
 *
 * @param string $format Optional. Format to use for retrieving the time the post
 *                            was modified. Accepts 'G', 'U', or PHP date format.
 *                            Defaults to the 'time_format' option.
 * @param int|\WP_Post $post   Optional. Post ID or WP_Post object. Default current post.
 * @return string|int|false Formatted date string or Unix timestamp. False on failure.
 */
    public function getTheModifiedTime(string $format = '', int|\WP_Post $post = null): string|int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the time at which the post was last modified.
 *
 * @since 2.0.0
 *
 * @param string $format    Optional. Format to use for retrieving the time the post
 *                               was modified. Accepts 'G', 'U', or PHP date format. Default 'U'.
 * @param bool $gmt       Optional. Whether to retrieve the GMT time. Default false.
 * @param int|\WP_Post $post      Post ID or post object. Default is global `$post` object.
 * @param bool $translate Whether to translate the time string. Default false.
 * @return string|int|false Formatted date string or Unix timestamp if `$format` is 'U' or 'G'.
 *                          False on failure.
 */
    public function getPostModifiedTime(string $format = 'U', bool $gmt = false, int|\WP_Post $post = null, bool $translate = false): string|int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the weekday on which the post was written.
 *
 * @since 0.71
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 */
    public function theWeekday(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the weekday on which the post was written.
 *
 * Will only output the weekday if the current post's weekday is different from
 * the previous one output.
 *
 * @since 0.71
 *
 * @global WP_Locale $wp_locale       WordPress date and time locale object.
 * @global string    $currentday      The day of the current post in the loop.
 * @global string    $previousweekday The day of the previous post in the loop.
 *
 * @param string $before Optional. Output before the date. Default empty.
 * @param string $after  Optional. Output after the date. Default empty.
 */
    public function theWeekdayDate(string $before = '', string $after = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fires the wp_head action.
 *
 * See {@see 'wp_head'}.
 *
 * @since 1.2.0
 */
    public function wpHead(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fires the wp_footer action.
 *
 * See {@see 'wp_footer'}.
 *
 * @since 1.5.1
 */
    public function wpFooter(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fires the wp_body_open action.
 *
 * See {@see 'wp_body_open'}.
 *
 * @since 5.2.0
 */
    public function wpBodyOpen(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the links to the general feeds.
 *
 * @since 2.8.0
 *
 * @param array $args Optional arguments.
 */
    public function feedLinks(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the links to the extra feeds such as category feeds.
 *
 * @since 2.8.0
 *
 * @param array $args Optional arguments.
 */
    public function feedLinksExtra(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the link to the Really Simple Discovery service endpoint.
 *
 * @link http://archipelago.phrasewise.com/rsd
 * @since 2.0.0
 */
    public function rsdLink(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a referrer `strict-origin-when-cross-origin` meta tag.
 *
 * Outputs a referrer `strict-origin-when-cross-origin` meta tag that tells the browser not to send
 * the full URL as a referrer to other sites when cross-origin assets are loaded.
 *
 * Typical usage is as a {@see 'wp_head'} callback:
 *
 *     add_action( 'wp_head', 'wp_strict_cross_origin_referrer' );
 *
 * @since 5.7.0
 */
    public function wpStrictCrossOriginReferrer(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays site icon meta tags.
 *
 * @since 4.3.0
 *
 * @link https://www.whatwg.org/specs/web-apps/current-work/multipage/links.html#rel-icon HTML5 specification link icon.
 */
    public function wpSiteIcon(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints resource hints to browsers for pre-fetching, pre-rendering
 * and pre-connecting to websites.
 *
 * Gives hints to browsers to prefetch specific pages or render them
 * in the background, to perform DNS lookups or to begin the connection
 * handshake (DNS, TCP, TLS) in the background.
 *
 * These performance improving indicators work by using `<link rel"…">`.
 *
 * @since 4.6.0
 */
    public function wpResourceHints(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints resource preloads directives to browsers.
 *
 * Gives directive to browsers to preload specific resources that website will
 * need very soon, this ensures that they are available earlier and are less
 * likely to block the page's render. Preload directives should not be used for
 * non-render-blocking elements, as then they would compete with the
 * render-blocking ones, slowing down the render.
 *
 * These performance improving indicators work by using `<link rel="preload">`.
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload
 * @link https://web.dev/preload-responsive-images/
 *
 * @since 6.1.0
 */
    public function wpPreloadResources(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of unique hosts of all enqueued scripts and styles.
 *
 * @since 4.6.0
 *
 * @global WP_Scripts $wp_scripts The WP_Scripts object for printing scripts.
 * @global WP_Styles  $wp_styles  The WP_Styles object for printing styles.
 *
 * @return string[] A list of unique hosts of enqueued scripts and styles.
 */
    public function wpDependenciesUniqueHosts(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the user can access the visual editor.
 *
 * Checks if the user can access the visual editor and that it's supported by the user's browser.
 *
 * @since 2.0.0
 *
 * @global bool $wp_rich_edit Whether the user can access the visual editor.
 * @global bool $is_gecko     Whether the browser is Gecko-based.
 * @global bool $is_opera     Whether the browser is Opera.
 * @global bool $is_safari    Whether the browser is Safari.
 * @global bool $is_chrome    Whether the browser is Chrome.
 * @global bool $is_IE        Whether the browser is Internet Explorer.
 * @global bool $is_edge      Whether the browser is Microsoft Edge.
 *
 * @return bool True if the user can access the visual editor, false otherwise.
 */
    public function userCanRichedit(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds out which editor should be displayed by default.
 *
 * Works out which of the editors to display as the current editor for a
 * user. The 'html' setting is for the "Text" editor tab.
 *
 * @since 2.5.0
 *
 * @return string Either 'tinymce', 'html', or 'test'
 */
    public function wpDefaultEditor(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders an editor.
 *
 * Using this function is the proper way to output all needed components for both TinyMCE and Quicktags.
 * _WP_Editors should not be used directly. See https://core.trac.wordpress.org/ticket/17144.
 *
 * NOTE: Once initialized the TinyMCE editor cannot be safely moved in the DOM. For that reason
 * running wp_editor() inside of a meta box is not a good idea unless only Quicktags is used.
 * On the post edit screen several actions can be used to include additional editors
 * containing TinyMCE: 'edit_page_form', 'edit_form_advanced' and 'dbx_post_sidebar'.
 * See https://core.trac.wordpress.org/ticket/19173 for more information.
 *
 * @see _WP_Editors::editor()
 * @see _WP_Editors::parse_settings()
 * @since 3.3.0
 *
 * @param string $content   Initial content for the editor.
 * @param string $editorId HTML ID attribute value for the textarea and TinyMCE.
 *                          Should not contain square brackets.
 * @param array $settings  See _WP_Editors::parse_settings() for description.
 */
    public function wpEditor(string $content, string $editorId, array $settings = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the editor scripts, stylesheets, and default settings.
 *
 * The editor can be initialized when needed after page load.
 * See wp.editor.initialize() in wp-admin/js/editor.js for initialization options.
 *
 * @uses _WP_Editors
 * @since 4.8.0
 */
    public function wpEnqueueEditor(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues assets needed by the code editor for the given settings.
 *
 * @since 4.9.0
 *
 * @see wp_enqueue_editor()
 * @see wp_get_code_editor_settings();
 * @see _WP_Editors::parse_settings()
 *
 * @param array $args {
 *     Args.
 *
 *     @type string   $type       The MIME type of the file to be edited.
 *     @type string   $file       Filename to be edited. Extension is used to sniff the type. Can be supplied as alternative to `$type` param.
 *     @type WP_Theme $theme      Theme being edited when on the theme file editor.
 *     @type string   $plugin     Plugin being edited when on the plugin file editor.
 *     @type array    $codemirror Additional CodeMirror setting overrides.
 *     @type array    $csslint    CSSLint rule overrides.
 *     @type array    $jshint     JSHint rule overrides.
 *     @type array    $htmlhint   HTMLHint rule overrides.
 * }
 * @return array|false Settings for the enqueued code editor, or false if the editor was not enqueued.
 */
    public function wpEnqueueCodeEditor(array $args): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates and returns code editor settings.
 *
 * @since 5.0.0
 *
 * @see wp_enqueue_code_editor()
 *
 * @param array $args {
 *     Args.
 *
 *     @type string   $type       The MIME type of the file to be edited.
 *     @type string   $file       Filename to be edited. Extension is used to sniff the type. Can be supplied as alternative to `$type` param.
 *     @type WP_Theme $theme      Theme being edited when on the theme file editor.
 *     @type string   $plugin     Plugin being edited when on the plugin file editor.
 *     @type array    $codemirror Additional CodeMirror setting overrides.
 *     @type array    $csslint    CSSLint rule overrides.
 *     @type array    $jshint     JSHint rule overrides.
 *     @type array    $htmlhint   HTMLHint rule overrides.
 * }
 * @return array|false Settings for the code editor.
 */
    public function wpGetCodeEditorSettings(array $args): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the contents of the search WordPress query variable.
 *
 * The search query string is passed through esc_attr() to ensure that it is safe
 * for placing in an HTML attribute.
 *
 * @since 2.3.0
 *
 * @param bool $escaped Whether the result is escaped. Default true.
 *                      Only use when you are later escaping it. Do not use unescaped.
 * @return string
 */
    public function getSearchQuery(bool $escaped = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the contents of the search query variable.
 *
 * The search query string is passed through esc_attr() to ensure that it is safe
 * for placing in an HTML attribute.
 *
 * @since 2.1.0
 */
    public function theSearchQuery(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the language attributes for the 'html' tag.
 *
 * Builds up a set of HTML attributes containing the text direction and language
 * information for the page.
 *
 * @since 4.3.0
 *
 * @param string $doctype Optional. The type of HTML document. Accepts 'xhtml' or 'html'. Default 'html'.
 * @return string A space-separated list of language attributes.
 */
    public function getLanguageAttributes(string $doctype = 'html'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the language attributes for the 'html' tag.
 *
 * Builds up a set of HTML attributes containing the text direction and language
 * information for the page.
 *
 * @since 2.1.0
 * @since 4.3.0 Converted into a wrapper for get_language_attributes().
 *
 * @param string $doctype Optional. The type of HTML document. Accepts 'xhtml' or 'html'. Default 'html'.
 */
    public function languageAttributes(string $doctype = 'html'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves paginated links for archive post pages.
 *
 * Technically, the function can be used to create paginated link list for any
 * area. The 'base' argument is used to reference the url, which will be used to
 * create the paginated links. The 'format' argument is then used for replacing
 * the page number. It is however, most likely and by default, to be used on the
 * archive post pages.
 *
 * The 'type' argument controls format of the returned value. The default is
 * 'plain', which is just a string with the links separated by a newline
 * character. The other possible values are either 'array' or 'list'. The
 * 'array' value will return an array of the paginated link list to offer full
 * control of display. The 'list' value will place all of the paginated links in
 * an unordered HTML list.
 *
 * The 'total' argument is the total amount of pages and is an integer. The
 * 'current' argument is the current page number and is also an integer.
 *
 * An example of the 'base' argument is "http://example.com/all_posts.php%_%"
 * and the '%_%' is required. The '%_%' will be replaced by the contents of in
 * the 'format' argument. An example for the 'format' argument is "?page=%#%"
 * and the '%#%' is also required. The '%#%' will be replaced with the page
 * number.
 *
 * You can include the previous and next links in the list by setting the
 * 'prev_next' argument to true, which it is by default. You can set the
 * previous text, by using the 'prev_text' argument. You can set the next text
 * by setting the 'next_text' argument.
 *
 * If the 'show_all' argument is set to true, then it will show all of the pages
 * instead of a short list of the pages near the current page. By default, the
 * 'show_all' is set to false and controlled by the 'end_size' and 'mid_size'
 * arguments. The 'end_size' argument is how many numbers on either the start
 * and the end list edges, by default is 1. The 'mid_size' argument is how many
 * numbers to either side of current page, but not including current page.
 *
 * It is possible to add query vars to the link by using the 'add_args' argument
 * and see add_query_arg() for more information.
 *
 * The 'before_page_number' and 'after_page_number' arguments allow users to
 * augment the links themselves. Typically this might be to add context to the
 * numbered links so that screen reader users understand what the links are for.
 * The text strings are added before and after the page number - within the
 * anchor tag.
 *
 * @since 2.1.0
 * @since 4.9.0 Added the `aria_current` argument.
 *
 * @global WP_Query   $wp_query   WordPress Query object.
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string|array $args {
 *     Optional. Array or string of arguments for generating paginated links for archives.
 *
 *     @type string $base               Base of the paginated url. Default empty.
 *     @type string $format             Format for the pagination structure. Default empty.
 *     @type int    $total              The total amount of pages. Default is the value WP_Query's
 *                                      `max_num_pages` or 1.
 *     @type int    $current            The current page number. Default is 'paged' query var or 1.
 *     @type string $aria_current       The value for the aria-current attribute. Possible values are 'page',
 *                                      'step', 'location', 'date', 'time', 'true', 'false'. Default is 'page'.
 *     @type bool   $show_all           Whether to show all pages. Default false.
 *     @type int    $end_size           How many numbers on either the start and the end list edges.
 *                                      Default 1.
 *     @type int    $mid_size           How many numbers to either side of the current pages. Default 2.
 *     @type bool   $prev_next          Whether to include the previous and next links in the list. Default true.
 *     @type string $prev_text          The previous page text. Default '&laquo; Previous'.
 *     @type string $next_text          The next page text. Default 'Next &raquo;'.
 *     @type string $type               Controls format of the returned value. Possible values are 'plain',
 *                                      'array' and 'list'. Default is 'plain'.
 *     @type array  $add_args           An array of query args to add. Default false.
 *     @type string $add_fragment       A string to append to each link. Default empty.
 *     @type string $before_page_number A string to appear before the page number. Default empty.
 *     @type string $after_page_number  A string to append after the page number. Default empty.
 * }
 * @return string|string[]|void String of page links or array of page links, depending on 'type' argument.
 *                              Void if total number of pages is less than 2.
 */
    public function paginateLinks(string|array $args = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers an admin color scheme css file.
 *
 * Allows a plugin to register a new admin color scheme. For example:
 *
 *     wp_admin_css_color( 'classic', __( 'Classic' ), admin_url( "css/colors-classic.css" ), array(
 *         '#07273E', '#14568A', '#D54E21', '#2683AE'
 *     ) );
 *
 * @since 2.5.0
 *
 * @global array $_wp_admin_css_colors
 *
 * @param string $key    The unique key for this theme.
 * @param string $name   The name of the theme.
 * @param string $url    The URL of the CSS file containing the color scheme.
 * @param array $colors Optional. An array of CSS color definition strings which are used
 *                       to give the user a feel for the theme.
 * @param array $icons {
 *     Optional. CSS color definitions used to color any SVG icons.
 *
 *     @type string $base    SVG icon base color.
 *     @type string $focus   SVG icon color on focus.
 *     @type string $current SVG icon color of current admin menu link.
 * }
 */
    public function wpAdminCssColor(string $key, string $name, string $url, array $colors = [], array $icons = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the default admin color schemes.
 *
 * Registers the initial set of eight color schemes in the Profile section
 * of the dashboard which allows for styling the admin menu and toolbar.
 *
 * @see wp_admin_css_color()
 *
 * @since 3.0.0
 */
    public function registerAdminColorSchemes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the URL of a WordPress admin CSS file.
 *
 * @see WP_Styles::_css_href() and its {@see 'style_loader_src'} filter.
 *
 * @since 2.3.0
 *
 * @param string $file file relative to wp-admin/ without its ".css" extension.
 * @return string
 */
    public function wpAdminCssUri(string $file = 'wp-admin'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues or directly prints a stylesheet link to the specified CSS file.
 *
 * "Intelligently" decides to enqueue or to print the CSS file. If the
 * {@see 'wp_print_styles'} action has *not* yet been called, the CSS file will be
 * enqueued. If the {@see 'wp_print_styles'} action has been called, the CSS link will
 * be printed. Printing may be forced by passing true as the $force_echo
 * (second) parameter.
 *
 * For backward compatibility with WordPress 2.3 calling method: If the $file
 * (first) parameter does not correspond to a registered CSS file, we assume
 * $file is a file relative to wp-admin/ without its ".css" extension. A
 * stylesheet link to that generated URL is printed.
 *
 * @since 2.3.0
 *
 * @param string $file       Optional. Style handle name or file name (without ".css" extension) relative
 *                           to wp-admin/. Defaults to 'wp-admin'.
 * @param bool $forceEcho Optional. Force the stylesheet link to be printed rather than enqueued.
 */
    public function wpAdminCss(string $file = 'wp-admin', bool $forceEcho = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues the default ThickBox js and css.
 *
 * If any of the settings need to be changed, this can be done with another js
 * file similar to media-upload.js. That file should
 * require array('thickbox') to ensure it is loaded after.
 *
 * @since 2.5.0
 */
    public function addThickbox(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the XHTML generator that is generated on the wp_head hook.
 *
 * See {@see 'wp_head'}.
 *
 * @since 2.5.0
 */
    public function wpGenerator(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the generator XML or Comment for RSS, ATOM, etc.
 *
 * Returns the correct generator type for the requested output format. Allows
 * for a plugin to filter generators overall the {@see 'the_generator'} filter.
 *
 * @since 2.5.0
 *
 * @param string $type The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export).
 */
    public function theGenerator(string $type): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates the generator XML or Comment for RSS, ATOM, etc.
 *
 * Returns the correct generator type for the requested output format. Allows
 * for a plugin to filter generators on an individual basis using the
 * {@see 'get_the_generator_$type'} filter.
 *
 * @since 2.5.0
 *
 * @param string $type The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export).
 * @return string|void The HTML content for the generator.
 */
    public function getTheGenerator(string $type = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the HTML checked attribute.
 *
 * Compares the first two arguments and if identical marks as checked.
 *
 * @since 1.0.0
 *
 * @param mixed $checked One of the values to compare.
 * @param mixed $current Optional. The other value to compare if not just true.
 *                       Default true.
 * @param bool $display Optional. Whether to echo or just return the string.
 *                       Default true.
 * @return string HTML attribute or empty string.
 */
    public function checked(mixed $checked, mixed $current = true, bool $display = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the HTML selected attribute.
 *
 * Compares the first two arguments and if identical marks as selected.
 *
 * @since 1.0.0
 *
 * @param mixed $selected One of the values to compare.
 * @param mixed $current  Optional. The other value to compare if not just true.
 *                        Default true.
 * @param bool $display  Optional. Whether to echo or just return the string.
 *                        Default true.
 * @return string HTML attribute or empty string.
 */
    public function selected(mixed $selected, mixed $current = true, bool $display = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the HTML disabled attribute.
 *
 * Compares the first two arguments and if identical marks as disabled.
 *
 * @since 3.0.0
 *
 * @param mixed $disabled One of the values to compare.
 * @param mixed $current  Optional. The other value to compare if not just true.
 *                        Default true.
 * @param bool $display  Optional. Whether to echo or just return the string.
 *                        Default true.
 * @return string HTML attribute or empty string.
 */
    public function disabled(mixed $disabled, mixed $current = true, bool $display = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the HTML readonly attribute.
 *
 * Compares the first two arguments and if identical marks as readonly.
 *
 * @since 5.9.0
 *
 * @param mixed $readonlyValue One of the values to compare.
 * @param mixed $current        Optional. The other value to compare if not just true.
 *                              Default true.
 * @param bool $display        Optional. Whether to echo or just return the string.
 *                              Default true.
 * @return string HTML attribute or empty string.
 */
    public function wpReadonly(mixed $readonlyValue, mixed $current = true, bool $display = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Assigns a visual indicator for required form fields.
 *
 * @since 6.1.0
 *
 * @return string Indicator glyph wrapped in a `span` tag.
 */
    public function wpRequiredFieldIndicator(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates a message to explain required form fields.
 *
 * @since 6.1.0
 *
 * @return string Message text and glyph wrapped in a `span` tag.
 */
    public function wpRequiredFieldMessage(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Default settings for heartbeat.
 *
 * Outputs the nonce used in the heartbeat XHR.
 *
 * @since 3.6.0
 *
 * @param array $settings
 * @return array Heartbeat settings.
 */
    public function wpHeartbeatSettings(array $settings): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the settings resulting of merging core, theme, and user data.
 *
 * @since 5.9.0
 *
 * @param array $path    Path to the specific setting to retrieve. Optional.
 *                       If empty, will return all settings.
 * @param array $context {
 *     Metadata to know where to retrieve the $path from. Optional.
 *
 *     @type string $block_name Which block to retrieve the settings from.
 *                              If empty, it'll return the settings for the global context.
 *     @type string $origin     Which origin to take data from.
 *                              Valid values are 'all' (core, theme, and user) or 'base' (core and theme).
 *                              If empty or unknown, 'all' is used.
 * }
 * @return mixed The settings array or individual setting value to retrieve.
 */
    public function wpGetGlobalSettings(array $path = [], array $context = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the styles resulting of merging core, theme, and user data.
 *
 * @since 5.9.0
 * @since 6.3.0 the internal link format "var:preset|color|secondary" is resolved
 *              to "var(--wp--preset--font-size--small)" so consumers don't have to.
 * @since 6.3.0 `transforms` is now usable in the `context` parameter. In case [`transforms`]['resolve_variables']
 *              is defined, variables are resolved to their value in the styles.
 *
 * @param array $path    Path to the specific style to retrieve. Optional.
 *                       If empty, will return all styles.
 * @param array $context {
 *     Metadata to know where to retrieve the $path from. Optional.
 *
 *     @type string $block_name Which block to retrieve the styles from.
 *                              If empty, it'll return the styles for the global context.
 *     @type string $origin     Which origin to take data from.
 *                              Valid values are 'all' (core, theme, and user) or 'base' (core and theme).
 *                              If empty or unknown, 'all' is used.
 *     @type array $transforms Which transformation(s) to apply.
 *                              Valid value is array( 'resolve-variables' ).
 *                              If defined, variables are resolved to their value in the styles.
 * }
 * @return mixed The styles array or individual style value to retrieve.
 */
    public function wpGetGlobalStyles(array $path = [], array $context = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the stylesheet resulting of merging core, theme, and user data.
 *
 * @since 5.9.0
 * @since 6.1.0 Added 'base-layout-styles' support.
 * @since 6.6.0 Resolves relative paths in theme.json styles to theme absolute paths.
 *
 * @param array $types Optional. Types of styles to load.
 *                     It accepts as values 'variables', 'presets', 'styles', 'base-layout-styles'.
 *                     If empty, it'll load the following:
 *                     - for themes without theme.json: 'variables', 'presets', 'base-layout-styles'.
 *                     - for themes with theme.json: 'variables', 'presets', 'styles'.
 * @return string Stylesheet.
 */
    public function wpGetGlobalStylesheet(array $types = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the global styles custom CSS from theme.json.
 *
 * @since 6.2.0
 *
 * @return string The global styles custom CSS.
 */
    public function wpGetGlobalStylesCustomCss(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds global style rules to the inline style for each block.
 *
 * @since 6.1.0
 *
 * @global WP_Styles $wp_styles
 */
    public function wpAddGlobalStylesForBlocks(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a theme or its parent has a theme.json file.
 *
 * @since 6.2.0
 *
 * @return bool Returns true if theme or its parent has a theme.json file, false otherwise.
 */
    public function wpThemeHasThemeJson(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleans the caches under the theme_json group.
 *
 * @since 6.2.0
 */
    public function wpCleanThemeJsonCache(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the current theme's wanted patterns (slugs) to be
 * registered from Pattern Directory.
 *
 * @since 6.3.0
 *
 * @return string[]
 */
    public function wpGetThemeDirectoryPatternSlugs(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the metadata for the custom templates defined by the theme via theme.json.
 *
 * @since 6.4.0
 *
 * @return array Associative array of `$template_name => $template_data` pairs,
 *               with `$template_data` having "title" and "postTypes" fields.
 */
    public function wpGetThemeDataCustomTemplates(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the metadata for the template parts defined by the theme.
 *
 * @since 6.4.0
 *
 * @return array Associative array of `$part_name => $part_data` pairs,
 *               with `$part_data` having "title" and "area" fields.
 */
    public function wpGetThemeDataTemplateParts(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines the CSS selector for the block type and property provided,
 * returning it if available.
 *
 * @since 6.3.0
 *
 * @param \WP_Block_Type $blockType The block's type.
 * @param string|array $target     The desired selector's target, `root` or array path.
 * @param boolean $fallback   Whether to fall back to broader selector.
 *
 * @return string|null CSS selector or `null` if no selector available.
 */
    public function wpGetBlockCssSelector(\WP_Block_Type $blockType, string|array $target = 'root', bool $fallback = false): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the raw response from a safe HTTP request.
 *
 * This function is ideal when the HTTP request is being made to an arbitrary
 * URL. The URL, and every URL it redirects to, are validated with wp_http_validate_url()
 * to avoid Server Side Request Forgery attacks (SSRF).
 *
 * @since 3.6.0
 *
 * @see wp_remote_request() For more information on the response array format.
 * @see WP_Http::request() For default arguments information.
 * @see wp_http_validate_url() For more information about how the URL is validated.
 *
 * @link https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
 *
 * @param string $url  URL to retrieve.
 * @param array $args Optional. Request arguments. Default empty array.
 *                     See WP_Http::request() for information on accepted arguments.
 * @return array|\WP_Error The response or WP_Error on failure.
 */
    public function wpSafeRemoteRequest(string $url, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the raw response from a safe HTTP request using the GET method.
 *
 * This function is ideal when the HTTP request is being made to an arbitrary
 * URL. The URL, and every URL it redirects to, are validated with wp_http_validate_url()
 * to avoid Server Side Request Forgery attacks (SSRF).
 *
 * @since 3.6.0
 *
 * @see wp_remote_request() For more information on the response array format.
 * @see WP_Http::request() For default arguments information.
 * @see wp_http_validate_url() For more information about how the URL is validated.
 *
 * @link https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
 *
 * @param string $url  URL to retrieve.
 * @param array $args Optional. Request arguments. Default empty array.
 *                     See WP_Http::request() for information on accepted arguments.
 * @return array|\WP_Error The response or WP_Error on failure.
 */
    public function wpSafeRemoteGet(string $url, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the raw response from a safe HTTP request using the POST method.
 *
 * This function is ideal when the HTTP request is being made to an arbitrary
 * URL. The URL, and every URL it redirects to, are validated with wp_http_validate_url()
 * to avoid Server Side Request Forgery attacks (SSRF).
 *
 * @since 3.6.0
 *
 * @see wp_remote_request() For more information on the response array format.
 * @see WP_Http::request() For default arguments information.
 * @see wp_http_validate_url() For more information about how the URL is validated.
 *
 * @link https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
 *
 * @param string $url  URL to retrieve.
 * @param array $args Optional. Request arguments. Default empty array.
 *                     See WP_Http::request() for information on accepted arguments.
 * @return array|\WP_Error The response or WP_Error on failure.
 */
    public function wpSafeRemotePost(string $url, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the raw response from a safe HTTP request using the HEAD method.
 *
 * This function is ideal when the HTTP request is being made to an arbitrary
 * URL. The URL, and every URL it redirects to, are validated with wp_http_validate_url()
 * to avoid Server Side Request Forgery attacks (SSRF).
 *
 * @since 3.6.0
 *
 * @see wp_remote_request() For more information on the response array format.
 * @see WP_Http::request() For default arguments information.
 * @see wp_http_validate_url() For more information about how the URL is validated.
 *
 * @link https://owasp.org/www-community/attacks/Server_Side_Request_Forgery
 *
 * @param string $url  URL to retrieve.
 * @param array $args Optional. Request arguments. Default empty array.
 *                     See WP_Http::request() for information on accepted arguments.
 * @return array|\WP_Error The response or WP_Error on failure.
 */
    public function wpSafeRemoteHead(string $url, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs an HTTP request and returns its response.
 *
 * There are other API functions available which abstract away the HTTP method:
 *
 *  - Default 'GET'  for wp_remote_get()
 *  - Default 'POST' for wp_remote_post()
 *  - Default 'HEAD' for wp_remote_head()
 *
 * @since 2.7.0
 *
 * @see WP_Http::request() For information on default arguments.
 *
 * @param string $url  URL to retrieve.
 * @param array $args Optional. Request arguments. Default empty array.
 *                     See WP_Http::request() for information on accepted arguments.
 * @return array|\WP_Error {
 *     The response array or a WP_Error on failure.
 *
 *     @type string[]                       $headers       Array of response headers keyed by their name.
 *     @type string                         $body          Response body.
 *     @type array                          $response      {
 *         Data about the HTTP response.
 *
 *         @type int|false    $code    HTTP response code.
 *         @type string|false $message HTTP response message.
 *     }
 *     @type WP_HTTP_Cookie[]               $cookies       Array of response cookies.
 *     @type WP_HTTP_Requests_Response|null $http_response Raw HTTP response object.
 * }
 */
    public function wpRemoteRequest(string $url, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs an HTTP request using the GET method and returns its response.
 *
 * @since 2.7.0
 *
 * @see wp_remote_request() For more information on the response array format.
 * @see WP_Http::request() For default arguments information.
 *
 * @param string $url  URL to retrieve.
 * @param array $args Optional. Request arguments. Default empty array.
 *                     See WP_Http::request() for information on accepted arguments.
 * @return array|\WP_Error The response or WP_Error on failure.
 */
    public function wpRemoteGet(string $url, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs an HTTP request using the POST method and returns its response.
 *
 * @since 2.7.0
 *
 * @see wp_remote_request() For more information on the response array format.
 * @see WP_Http::request() For default arguments information.
 *
 * @param string $url  URL to retrieve.
 * @param array $args Optional. Request arguments. Default empty array.
 *                     See WP_Http::request() for information on accepted arguments.
 * @return array|\WP_Error The response or WP_Error on failure.
 */
    public function wpRemotePost(string $url, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs an HTTP request using the HEAD method and returns its response.
 *
 * @since 2.7.0
 *
 * @see wp_remote_request() For more information on the response array format.
 * @see WP_Http::request() For default arguments information.
 *
 * @param string $url  URL to retrieve.
 * @param array $args Optional. Request arguments. Default empty array.
 *                     See WP_Http::request() for information on accepted arguments.
 * @return array|\WP_Error The response or WP_Error on failure.
 */
    public function wpRemoteHead(string $url, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves only the headers from the raw response.
 *
 * @since 2.7.0
 * @since 4.6.0 Return value changed from an array to an WpOrg\Requests\Utility\CaseInsensitiveDictionary instance.
 *
 * @see \WpOrg\Requests\Utility\CaseInsensitiveDictionary
 *
 * @param array|\WP_Error $response HTTP response.
 * @return \WpOrg\Requests\Utility\CaseInsensitiveDictionary|array The headers of the response, or empty array
 *                                                                 if incorrect parameter given.
 */
    public function wpRemoteRetrieveHeaders(array|\WP_Error $response): \WpOrg\Requests\Utility\CaseInsensitiveDictionary|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a single header by name from the raw response.
 *
 * @since 2.7.0
 *
 * @param array|\WP_Error $response HTTP response.
 * @param string $header   Header name to retrieve value from.
 * @return array|string The header(s) value(s). Array if multiple headers with the same name are retrieved.
 *                      Empty string if incorrect parameter given, or if the header doesn't exist.
 */
    public function wpRemoteRetrieveHeader(array|\WP_Error $response, string $header): array|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves only the response code from the raw response.
 *
 * Will return an empty string if incorrect parameter value is given.
 *
 * @since 2.7.0
 *
 * @param array|\WP_Error $response HTTP response.
 * @return int|string The response code as an integer. Empty string if incorrect parameter given.
 */
    public function wpRemoteRetrieveResponseCode(array|\WP_Error $response): int|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves only the response message from the raw response.
 *
 * Will return an empty string if incorrect parameter value is given.
 *
 * @since 2.7.0
 *
 * @param array|\WP_Error $response HTTP response.
 * @return string The response message. Empty string if incorrect parameter given.
 */
    public function wpRemoteRetrieveResponseMessage(array|\WP_Error $response): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves only the body from the raw response.
 *
 * @since 2.7.0
 *
 * @param array|\WP_Error $response HTTP response.
 * @return string The body of the response. Empty string if no body or incorrect parameter given.
 */
    public function wpRemoteRetrieveBody(array|\WP_Error $response): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves only the cookies from the raw response.
 *
 * @since 4.4.0
 *
 * @param array|\WP_Error $response HTTP response.
 * @return WP_Http_Cookie[] An array of `WP_Http_Cookie` objects from the response.
 *                          Empty array if there are none, or the response is a WP_Error.
 */
    public function wpRemoteRetrieveCookies(array|\WP_Error $response): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a single cookie by name from the raw response.
 *
 * @since 4.4.0
 *
 * @param array|\WP_Error $response HTTP response.
 * @param string $name     The name of the cookie to retrieve.
 * @return \WP_Http_Cookie|string The `WP_Http_Cookie` object, or empty string
 *                               if the cookie is not present in the response.
 */
    public function wpRemoteRetrieveCookie(array|\WP_Error $response, string $name): \WP_Http_Cookie|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a single cookie's value by name from the raw response.
 *
 * @since 4.4.0
 *
 * @param array|\WP_Error $response HTTP response.
 * @param string $name     The name of the cookie to retrieve.
 * @return string The value of the cookie, or empty string
 *                if the cookie is not present in the response.
 */
    public function wpRemoteRetrieveCookieValue(array|\WP_Error $response, string $name): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if there is an HTTP Transport that can process this request.
 *
 * @since 3.2.0
 *
 * @param array $capabilities Array of capabilities to test or a wp_remote_request() $args array.
 * @param string $url          Optional. If given, will check if the URL requires SSL and adds
 *                             that requirement to the capabilities array.
 *
 * @return bool
 */
    public function wpHttpSupports(array $capabilities = [], string $url = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the HTTP Origin of the current request.
 *
 * @since 3.4.0
 *
 * @return string URL of the origin. Empty string if no origin.
 */
    public function getHttpOrigin(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves list of allowed HTTP origins.
 *
 * @since 3.4.0
 *
 * @return string[] Array of origin URLs.
 */
    public function getAllowedHttpOrigins(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if the HTTP origin is an authorized one.
 *
 * @since 3.4.0
 *
 * @param string|null $origin Origin URL. If not provided, the value of get_http_origin() is used.
 * @return string Origin URL if allowed, empty string if not.
 */
    public function isAllowedHttpOrigin(string|null $origin = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends Access-Control-Allow-Origin and related headers if the current request
 * is from an allowed origin.
 *
 * If the request is an OPTIONS request, the script exits with either access
 * control headers sent, or a 403 response if the origin is not allowed. For
 * other request methods, you will receive a return value.
 *
 * @since 3.4.0
 *
 * @return string|false Returns the origin URL if headers are sent. Returns false
 *                      if headers are not sent.
 */
    public function sendOriginHeaders(): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates a URL for safe use in the HTTP API.
 *
 * Examples of URLs that are considered unsafe:
 *
 * - ftp://example.com/caniload.php - Invalid protocol - only http and https are allowed.
 * - http:///example.com/caniload.php - Malformed URL.
 * - http://user:pass@example.com/caniload.php - Login information.
 * - http://exampleeeee.com/caniload.php - Invalid hostname, as the IP cannot be looked up in DNS.
 *
 * Examples of URLs that are considered unsafe by default:
 *
 * - http://192.168.0.1/caniload.php - IPs from LAN networks.
 *   This can be changed with the {@see 'http_request_host_is_external'} filter.
 * - http://198.143.164.252:81/caniload.php - By default, only 80, 443, and 8080 ports are allowed.
 *   This can be changed with the {@see 'http_allowed_safe_ports'} filter.
 *
 * @since 3.5.2
 *
 * @param string $url Request URL.
 * @return string|false URL or false on failure.
 */
    public function wpHttpValidateUrl(string $url): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Marks allowed redirect hosts safe for HTTP requests as well.
 *
 * Attached to the {@see 'http_request_host_is_external'} filter.
 *
 * @since 3.6.0
 *
 * @param bool $isExternal
 * @param string $host
 * @return bool
 */
    public function allowedHttpRequestHosts(bool $isExternal, string $host): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds any domain in a multisite installation for safe HTTP requests to the
 * allowed list.
 *
 * Attached to the {@see 'http_request_host_is_external'} filter.
 *
 * @since 3.6.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param bool $isExternal
 * @param string $host
 * @return bool
 */
    public function msAllowedHttpRequestHosts(bool $isExternal, string $host): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * A wrapper for PHP's parse_url() function that handles consistency in the return values
 * across PHP versions.
 *
 * PHP 5.4.7 expanded parse_url()'s ability to handle non-absolute URLs, including
 * schemeless and relative URLs with "://" in the path. This function works around
 * those limitations providing a standard output on PHP 5.2~5.4+.
 *
 * Secondly, across various PHP versions, schemeless URLs containing a ":" in the query
 * are being handled inconsistently. This function works around those differences as well.
 *
 * @since 4.4.0
 * @since 4.7.0 The `$component` parameter was added for parity with PHP's `parse_url()`.
 *
 * @link https://www.php.net/manual/en/function.parse-url.php
 *
 * @param string $url       The URL to parse.
 * @param int $component The specific component to retrieve. Use one of the PHP
 *                          predefined constants to specify which one.
 *                          Defaults to -1 (= return all parts as an array).
 * @return mixed False on parse failure; Array of URL components on success;
 *               When a specific component has been requested: null if the component
 *               doesn't exist in the given URL; a string or - in the case of
 *               PHP_URL_PORT - integer when it does. See parse_url()'s return values.
 */
    public function wpParseUrl(string $url, int $component): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether the website is using HTTPS.
 *
 * This is based on whether both the home and site URL are using HTTPS.
 *
 * @since 5.7.0
 * @see wp_is_home_url_using_https()
 * @see wp_is_site_url_using_https()
 *
 * @return bool True if using HTTPS, false otherwise.
 */
    public function wpIsUsingHttps(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether the current site URL is using HTTPS.
 *
 * @since 5.7.0
 * @see home_url()
 *
 * @return bool True if using HTTPS, false otherwise.
 */
    public function wpIsHomeUrlUsingHttps(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether the current site's URL where WordPress is stored is using HTTPS.
 *
 * This checks the URL where WordPress application files (e.g. wp-blog-header.php or the wp-admin/ folder)
 * are accessible.
 *
 * @since 5.7.0
 * @see site_url()
 *
 * @return bool True if using HTTPS, false otherwise.
 */
    public function wpIsSiteUrlUsingHttps(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether HTTPS is supported for the server and domain.
 *
 * @since 5.7.0
 *
 * @return bool True if HTTPS is supported, false otherwise.
 */
    public function wpIsHttpsSupported(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether WordPress should replace old HTTP URLs to the site with their HTTPS counterpart.
 *
 * If a WordPress site had its URL changed from HTTP to HTTPS, by default this will return `true`, causing WordPress to
 * add frontend filters to replace insecure site URLs that may be present in older database content. The
 * {@see 'wp_should_replace_insecure_home_url'} filter can be used to modify that behavior.
 *
 * @since 5.7.0
 *
 * @return bool True if insecure URLs should replaced, false otherwise.
 */
    public function wpShouldReplaceInsecureHomeUrl(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Replaces insecure HTTP URLs to the site in the given content, if configured to do so.
 *
 * This function replaces all occurrences of the HTTP version of the site's URL with its HTTPS counterpart, if
 * determined via {@see wp_should_replace_insecure_home_url()}.
 *
 * @since 5.7.0
 *
 * @param string $content Content to replace URLs in.
 * @return string Filtered content.
 */
    public function wpReplaceInsecureHomeUrl(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Update the 'home' and 'siteurl' option to use the HTTPS variant of their URL.
 *
 * If this update does not result in WordPress recognizing that the site is now using HTTPS (e.g. due to constants
 * overriding the URLs used), the changes will be reverted. In such a case the function will return false.
 *
 * @since 5.7.0
 *
 * @return bool True on success, false on failure.
 */
    public function wpUpdateUrlsToHttps(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the main WP_Interactivity_API instance.
 *
 * It provides access to the WP_Interactivity_API instance, creating one if it
 * doesn't exist yet.
 *
 * @since 6.5.0
 *
 * @global WP_Interactivity_API $wp_interactivity
 *
 * @return \WP_Interactivity_API The main WP_Interactivity_API instance.
 */
    public function wpInteractivity(): \WP_Interactivity_API
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Processes the interactivity directives contained within the HTML content
 * and updates the markup accordingly.
 *
 * @since 6.5.0
 *
 * @param string $html The HTML content to process.
 * @return string The processed HTML content. It returns the original content when the HTML contains unbalanced tags.
 */
    public function wpInteractivityProcessDirectives(string $html): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets and/or sets the initial state of an Interactivity API store for a
 * given namespace.
 *
 * If state for that store namespace already exists, it merges the new
 * provided state with the existing one.
 *
 * The namespace can be omitted inside derived state getters, using the
 * namespace where the getter is defined.
 *
 * @since 6.5.0
 * @since 6.6.0 The namespace can be omitted when called inside derived state getters.
 *
 * @param string $storeNamespace The unique store namespace identifier.
 * @param array $state           Optional. The array that will be merged with the existing state for the specified
 *                                store namespace.
 * @return array The state for the specified store namespace. This will be the updated state if a $state argument was
 *               provided.
 */
    public function wpInteractivityState(string $storeNamespace = null, array $state = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets and/or sets the configuration of the Interactivity API for a given
 * store namespace.
 *
 * If configuration for that store namespace exists, it merges the new
 * provided configuration with the existing one.
 *
 * @since 6.5.0
 *
 * @param string $storeNamespace The unique store namespace identifier.
 * @param array $config          Optional. The array that will be merged with the existing configuration for the
 *                                specified store namespace.
 * @return array The configuration for the specified store namespace. This will be the updated configuration if a
 *               $config argument was provided.
 */
    public function wpInteractivityConfig(string $storeNamespace, array $config = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates a `data-wp-context` directive attribute by encoding a context
 * array.
 *
 * This helper function simplifies the creation of `data-wp-context` directives
 * by providing a way to pass an array of data, which encodes into a JSON string
 * safe for direct use as a HTML attribute value.
 *
 * Example:
 *
 *     <div <?php echo wp_interactivity_data_wp_context( array( 'isOpen' => true, 'count' => 0 ) ); ?>>
 *
 * @since 6.5.0
 *
 * @param array $context         The array of context data to encode.
 * @param string $storeNamespace Optional. The unique store namespace identifier.
 * @return string A complete `data-wp-context` directive with a JSON encoded value representing the context array and
 *                the store namespace if specified.
 */
    public function wpInteractivityDataWpContext(array $context, string $storeNamespace = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the current Interactivity API context for a given namespace.
 *
 * The function should be used only during directive processing. If the
 * `$store_namespace` parameter is omitted, it uses the current namespace value
 * on the internal namespace stack.
 *
 * It returns an empty array when the specified namespace is not defined.
 *
 * @since 6.6.0
 *
 * @param string $storeNamespace Optional. The unique store namespace identifier.
 * @return array The context for the specified store namespace.
 */
    public function wpInteractivityGetContext(string $storeNamespace = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters text content and strips out disallowed HTML.
 *
 * This function makes sure that only the allowed HTML element names, attribute
 * names, attribute values, and HTML entities will occur in the given text string.
 *
 * This function expects unslashed data.
 *
 * @see wp_kses_post() for specifically filtering post content and fields.
 * @see wp_allowed_protocols() for the default allowed protocols in link URLs.
 *
 * @since 1.0.0
 *
 * @param string $content           Text content to filter.
 * @param array[]|string $allowedHtml      An array of allowed HTML elements and attributes,
 *                                          or a context name such as 'post'. See wp_kses_allowed_html()
 *                                          for the list of accepted context names.
 * @param string[] $allowedProtocols Optional. Array of allowed URL protocols.
 *                                          Defaults to the result of wp_allowed_protocols().
 * @return string Filtered content containing only the allowed HTML.
 */
    public function wpKses(string $content, array|string $allowedHtml, array $allowedProtocols = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters one HTML attribute and ensures its value is allowed.
 *
 * This function can escape data in some situations where `wp_kses()` must strip the whole attribute.
 *
 * @since 4.2.3
 *
 * @param string $attr    The 'whole' attribute, including name and value.
 * @param string $element The HTML element name to which the attribute belongs.
 * @return string Filtered attribute.
 */
    public function wpKsesOneAttr(string $attr, string $element): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of allowed HTML tags and attributes for a given context.
 *
 * @since 3.5.0
 * @since 5.0.1 `form` removed as allowable HTML tag.
 *
 * @global array $allowedposttags
 * @global array $allowedtags
 * @global array $allowedentitynames
 *
 * @param string|array $context The context for which to retrieve tags. Allowed values are 'post',
 *                              'strip', 'data', 'entities', or the name of a field filter such as
 *                              'pre_user_description', or an array of allowed HTML elements and attributes.
 * @return array Array of allowed HTML tags and their allowed attributes.
 */
    public function wpKsesAllowedHtml(string|array $context = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * You add any KSES hooks here.
 *
 * There is currently only one KSES WordPress hook, {@see 'pre_kses'}, and it is called here.
 * All parameters are passed to the hooks and expected to receive a string.
 *
 * @since 1.0.0
 *
 * @param string $content           Content to filter through KSES.
 * @param array[]|string $allowedHtml      An array of allowed HTML elements and attributes,
 *                                          or a context name such as 'post'. See wp_kses_allowed_html()
 *                                          for the list of accepted context names.
 * @param string[] $allowedProtocols Array of allowed URL protocols.
 * @return string Filtered content through {@see 'pre_kses'} hook.
 */
    public function wpKsesHook(string $content, array|string $allowedHtml, array $allowedProtocols): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the version number of KSES.
 *
 * @since 1.0.0
 *
 * @return string KSES version number.
 */
    public function wpKsesVersion(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Searches for HTML tags, no matter how malformed.
 *
 * It also matches stray `>` characters.
 *
 * @since 1.0.0
 * @since 6.6.0 Recognize additional forms of invalid HTML which convert into comments.
 *
 * @global array[]|string $pass_allowed_html      An array of allowed HTML elements and attributes,
 *                                                or a context name such as 'post'.
 * @global string[]       $pass_allowed_protocols Array of allowed URL protocols.
 *
 * @param string $content           Content to filter.
 * @param array[]|string $allowedHtml      An array of allowed HTML elements and attributes,
 *                                          or a context name such as 'post'. See wp_kses_allowed_html()
 *                                          for the list of accepted context names.
 * @param string[] $allowedProtocols Array of allowed URL protocols.
 * @return string Content with fixed HTML tags
 */
    public function wpKsesSplit(string $content, array|string $allowedHtml, array $allowedProtocols): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of HTML attribute names whose value contains a URL.
 *
 * This function returns a list of all HTML attributes that must contain
 * a URL according to the HTML specification.
 *
 * This list includes URI attributes both allowed and disallowed by KSES.
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
 *
 * @since 5.0.1
 *
 * @return string[] HTML attribute names whose value contains a URL.
 */
    public function wpKsesUriAttributes(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all attributes, if none are allowed for this element.
 *
 * If some are allowed it calls `wp_kses_hair()` to split them further, and then
 * it builds up new HTML code from the data that `wp_kses_hair()` returns. It also
 * removes `<` and `>` characters, if there are any left. One more thing it does
 * is to check if the tag has a closing XHTML slash, and if it does, it puts one
 * in the returned code as well.
 *
 * An array of allowed values can be defined for attributes. If the attribute value
 * doesn't fall into the list, the attribute will be removed from the tag.
 *
 * Attributes can be marked as required. If a required attribute is not present,
 * KSES will remove all attributes from the tag. As KSES doesn't match opening and
 * closing tags, it's not possible to safely remove the tag itself, the safest
 * fallback is to strip all attributes from the tag, instead.
 *
 * @since 1.0.0
 * @since 5.9.0 Added support for an array of allowed values for attributes.
 *              Added support for required attributes.
 *
 * @param string $element           HTML element/tag.
 * @param string $attr              HTML attributes from HTML element to closing HTML element tag.
 * @param array[]|string $allowedHtml      An array of allowed HTML elements and attributes,
 *                                          or a context name such as 'post'. See wp_kses_allowed_html()
 *                                          for the list of accepted context names.
 * @param string[] $allowedProtocols Array of allowed URL protocols.
 * @return string Sanitized HTML element.
 */
    public function wpKsesAttr(string $element, string $attr, array|string $allowedHtml, array $allowedProtocols): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether an attribute is allowed.
 *
 * @since 4.2.3
 * @since 5.0.0 Added support for `data-*` wildcard attributes.
 *
 * @param string $name         The attribute name. Passed by reference. Returns empty string when not allowed.
 * @param string $value        The attribute value. Passed by reference. Returns a filtered value.
 * @param string $whole        The `name=value` input. Passed by reference. Returns filtered input.
 * @param string $vless        Whether the attribute is valueless. Use 'y' or 'n'.
 * @param string $element      The name of the element to which this attribute belongs.
 * @param array $allowedHtml The full list of allowed elements and attributes.
 * @return bool Whether or not the attribute is allowed.
 */
    public function wpKsesAttrCheck(string $name, string $value, string $whole, string $vless, string $element, array $allowedHtml): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds an attribute list from string containing attributes.
 *
 * This function does a lot of work. It parses an attribute list into an array
 * with attribute data, and tries to do the right thing even if it gets weird
 * input. It will add quotes around attribute values that don't have any quotes
 * or apostrophes around them, to make it easier to produce HTML code that will
 * conform to W3C's HTML specification. It will also remove bad URL protocols
 * from attribute values. It also reduces duplicate attributes by using the
 * attribute defined first (`foo='bar' foo='baz'` will result in `foo='bar'`).
 *
 * @since 1.0.0
 *
 * @param string $attr              Attribute list from HTML element to closing HTML element tag.
 * @param string[] $allowedProtocols Array of allowed URL protocols.
 * @return array[] Array of attribute information after parsing.
 */
    public function wpKsesHair(string $attr, array $allowedProtocols): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds all attributes of an HTML element.
 *
 * Does not modify input.  May return "evil" output.
 *
 * Based on `wp_kses_split2()` and `wp_kses_attr()`.
 *
 * @since 4.2.3
 *
 * @param string $element HTML element.
 * @return array|false List of attributes found in the element. Returns false on failure.
 */
    public function wpKsesAttrParse(string $element): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds an attribute list from string containing attributes.
 *
 * Does not modify input.  May return "evil" output.
 * In case of unexpected input, returns false instead of stripping things.
 *
 * Based on `wp_kses_hair()` but does not return a multi-dimensional array.
 *
 * @since 4.2.3
 *
 * @param string $attr Attribute list from HTML element to closing HTML element tag.
 * @return array|false List of attributes found in $attr. Returns false on failure.
 */
    public function wpKsesHairParse(string $attr): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs different checks for attribute values.
 *
 * The currently implemented checks are "maxlen", "minlen", "maxval", "minval",
 * and "valueless".
 *
 * @since 1.0.0
 *
 * @param string $value      Attribute value.
 * @param string $vless      Whether the attribute is valueless. Use 'y' or 'n'.
 * @param string $checkname  What $checkvalue is checking for.
 * @param mixed $checkvalue What constraint the value should pass.
 * @return bool Whether check passes.
 */
    public function wpKsesCheckAttrVal(string $value, string $vless, string $checkname, mixed $checkvalue): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a string and removed disallowed URL protocols.
 *
 * This function removes all non-allowed protocols from the beginning of the
 * string. It ignores whitespace and the case of the letters, and it does
 * understand HTML entities. It does its work recursively, so it won't be
 * fooled by a string like `javascript:javascript:alert(57)`.
 *
 * @since 1.0.0
 *
 * @param string $content           Content to filter bad protocols from.
 * @param string[] $allowedProtocols Array of allowed URL protocols.
 * @return string Filtered content.
 */
    public function wpKsesBadProtocol(string $content, array $allowedProtocols): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes any invalid control characters in a text string.
 *
 * Also removes any instance of the `\0` string.
 *
 * @since 1.0.0
 *
 * @param string $content Content to filter null characters from.
 * @param array $options Set 'slash_zero' => 'keep' when '\0' is allowed. Default is 'remove'.
 * @return string Filtered content.
 */
    public function wpKsesNoNull(string $content, array $options = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Strips slashes from in front of quotes.
 *
 * This function changes the character sequence `\"` to just `"`. It leaves all other
 * slashes alone. The quoting from `preg_replace(//e)` requires this.
 *
 * @since 1.0.0
 *
 * @param string $content String to strip slashes from.
 * @return string Fixed string with quoted slashes.
 */
    public function wpKsesStripslashes(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts the keys of an array to lowercase.
 *
 * @since 1.0.0
 *
 * @param array $inarray Unfiltered array.
 * @return array Fixed array with all lowercase keys.
 */
    public function wpKsesArrayLc(array $inarray): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles parsing errors in `wp_kses_hair()`.
 *
 * The general plan is to remove everything to and including some whitespace,
 * but it deals with quotes and apostrophes as well.
 *
 * @since 1.0.0
 *
 * @param string $attr
 * @return string
 */
    public function wpKsesHtmlError(string $attr): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes content from bad protocols and other characters.
 *
 * This function searches for URL protocols at the beginning of the string, while
 * handling whitespace and HTML entities.
 *
 * @since 1.0.0
 *
 * @param string $content           Content to check for bad protocols.
 * @param string[] $allowedProtocols Array of allowed URL protocols.
 * @param int $count             Depth of call recursion to this function.
 * @return string Sanitized content.
 */
    public function wpKsesBadProtocolOnce(string $content, array $allowedProtocols, int $count = 1): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts and fixes HTML entities.
 *
 * This function normalizes HTML entities. It will convert `AT&T` to the correct
 * `AT&amp;T`, `&#00058;` to `&#058;`, `&#XYZZY;` to `&amp;#XYZZY;` and so on.
 *
 * When `$context` is set to 'xml', HTML entities are converted to their code points.  For
 * example, `AT&T&hellip;&#XYZZY;` is converted to `AT&amp;T…&amp;#XYZZY;`.
 *
 * @since 1.0.0
 * @since 5.5.0 Added `$context` parameter.
 *
 * @param string $content Content to normalize entities.
 * @param string $context Context for normalization. Can be either 'html' or 'xml'.
 *                        Default 'html'.
 * @return string Content with normalized entities.
 */
    public function wpKsesNormalizeEntities(string $content, string $context = 'html'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Callback for `wp_kses_normalize_entities()` regular expression.
 *
 * This function only accepts valid named entity references, which are finite,
 * case-sensitive, and highly scrutinized by HTML and XML validators.
 *
 * @since 3.0.0
 *
 * @global array $allowedentitynames
 *
 * @param array $matches preg_replace_callback() matches array.
 * @return string Correctly encoded entity.
 */
    public function wpKsesNamedEntities(array $matches): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Callback for `wp_kses_normalize_entities()` regular expression.
 *
 * This function only accepts valid named entity references, which are finite,
 * case-sensitive, and highly scrutinized by XML validators.  HTML named entity
 * references are converted to their code points.
 *
 * @since 5.5.0
 *
 * @global array $allowedentitynames
 * @global array $allowedxmlentitynames
 *
 * @param array $matches preg_replace_callback() matches array.
 * @return string Correctly encoded entity.
 */
    public function wpKsesXmlNamedEntities(array $matches): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if a Unicode codepoint is valid.
 *
 * @since 2.7.0
 *
 * @param int $i Unicode codepoint.
 * @return bool Whether or not the codepoint is a valid Unicode codepoint.
 */
    public function validUnicode(int $i): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts all numeric HTML entities to their named counterparts.
 *
 * This function decodes numeric HTML entities (`&#65;` and `&#x41;`).
 * It doesn't do anything with named entities like `&auml;`, but we don't
 * need them in the allowed URL protocols system anyway.
 *
 * @since 1.0.0
 *
 * @param string $content Content to change entities.
 * @return string Content after decoded entities.
 */
    public function wpKsesDecodeEntities(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitize content with allowed HTML KSES rules.
 *
 * This function expects slashed data.
 *
 * @since 1.0.0
 *
 * @param string $data Content to filter, expected to be escaped with slashes.
 * @return string Filtered content.
 */
    public function wpFilterKses(string $data): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitize content with allowed HTML KSES rules.
 *
 * This function expects unslashed data.
 *
 * @since 2.9.0
 *
 * @param string $data Content to filter, expected to not be escaped.
 * @return string Filtered content.
 */
    public function wpKsesData(string $data): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes content for allowed HTML tags for post content.
 *
 * Post content refers to the page contents of the 'post' type and not `$_POST`
 * data from forms.
 *
 * This function expects slashed data.
 *
 * @since 2.0.0
 *
 * @param string $data Post content to filter, expected to be escaped with slashes.
 * @return string Filtered post content with allowed HTML tags and attributes intact.
 */
    public function wpFilterPostKses(string $data): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes global styles user content removing unsafe rules.
 *
 * @since 5.9.0
 *
 * @param string $data Post content to filter.
 * @return string Filtered post content with unsafe rules removed.
 */
    public function wpFilterGlobalStylesPost(string $data): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes content for allowed HTML tags for post content.
 *
 * Post content refers to the page contents of the 'post' type and not `$_POST`
 * data from forms.
 *
 * This function expects unslashed data.
 *
 * @since 2.9.0
 *
 * @param string $data Post content to filter.
 * @return string Filtered post content with allowed HTML tags and attributes intact.
 */
    public function wpKsesPost(string $data): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Navigates through an array, object, or scalar, and sanitizes content for
 * allowed HTML tags for post content.
 *
 * @since 4.4.2
 *
 * @see map_deep()
 *
 * @param mixed $data The array, object, or scalar value to inspect.
 * @return mixed The filtered content.
 */
    public function wpKsesPostDeep(mixed $data): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Strips all HTML from a text string.
 *
 * This function expects slashed data.
 *
 * @since 2.1.0
 *
 * @param string $data Content to strip all HTML from.
 * @return string Filtered content without any HTML.
 */
    public function wpFilterNohtmlKses(string $data): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds all KSES input form content filters.
 *
 * All hooks have default priority. The `wp_filter_kses()` function is added to
 * the 'pre_comment_content' and 'title_save_pre' hooks.
 *
 * The `wp_filter_post_kses()` function is added to the 'content_save_pre',
 * 'excerpt_save_pre', and 'content_filtered_save_pre' hooks.
 *
 * @since 2.0.0
 */
    public function ksesInitFilters(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all KSES input form content filters.
 *
 * A quick procedural method to removing all of the filters that KSES uses for
 * content in WordPress Loop.
 *
 * Does not remove the `kses_init()` function from {@see 'init'} hook (priority is
 * default). Also does not remove `kses_init()` function from {@see 'set_current_user'}
 * hook (priority is also default).
 *
 * @since 2.0.6
 */
    public function ksesRemoveFilters(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets up most of the KSES filters for input form content.
 *
 * First removes all of the KSES filters in case the current user does not need
 * to have KSES filter the content. If the user does not have `unfiltered_html`
 * capability, then KSES filters are added.
 *
 * @since 2.0.0
 */
    public function ksesInit(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters an inline style attribute and removes disallowed rules.
 *
 * @since 2.8.1
 * @since 4.4.0 Added support for `min-height`, `max-height`, `min-width`, and `max-width`.
 * @since 4.6.0 Added support for `list-style-type`.
 * @since 5.0.0 Added support for `background-image`.
 * @since 5.1.0 Added support for `text-transform`.
 * @since 5.2.0 Added support for `background-position` and `grid-template-columns`.
 * @since 5.3.0 Added support for `grid`, `flex` and `column` layout properties.
 *              Extended `background-*` support for individual properties.
 * @since 5.3.1 Added support for gradient backgrounds.
 * @since 5.7.1 Added support for `object-position`.
 * @since 5.8.0 Added support for `calc()` and `var()` values.
 * @since 6.1.0 Added support for `min()`, `max()`, `minmax()`, `clamp()`,
 *              nested `var()` values, and assigning values to CSS variables.
 *              Added support for `object-fit`, `gap`, `column-gap`, `row-gap`, and `flex-wrap`.
 *              Extended `margin-*` and `padding-*` support for logical properties.
 * @since 6.2.0 Added support for `aspect-ratio`, `position`, `top`, `right`, `bottom`, `left`,
 *              and `z-index` CSS properties.
 * @since 6.3.0 Extended support for `filter` to accept a URL and added support for repeat().
 *              Added support for `box-shadow`.
 * @since 6.4.0 Added support for `writing-mode`.
 * @since 6.5.0 Added support for `background-repeat`.
 * @since 6.6.0 Added support for `grid-column`, `grid-row`, and `container-type`.
 *
 * @param string $css        A string of CSS rules.
 * @param string $deprecated Not used.
 * @return string Filtered string of CSS rules.
 */
    public function safecssFilterAttr(string $css, string $deprecated = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current locale.
 *
 * If the locale is set, then it will filter the locale in the {@see 'locale'}
 * filter hook and return the value.
 *
 * If the locale is not set already, then the WPLANG constant is used if it is
 * defined. Then it is filtered through the {@see 'locale'} filter hook and
 * the value for the locale global set and the locale is returned.
 *
 * The process to get the locale should only be done once, but the locale will
 * always be filtered using the {@see 'locale'} hook.
 *
 * @since 1.5.0
 *
 * @global string $locale           The current locale.
 * @global string $wp_local_package Locale code of the package.
 *
 * @return string The locale of the blog or from the {@see 'locale'} hook.
 */
    public function getLocale(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the locale of a user.
 *
 * If the user has a locale set to a non-empty string then it will be
 * returned. Otherwise it returns the locale of get_locale().
 *
 * @since 4.7.0
 *
 * @param int|\WP_User $user User's ID or a WP_User object. Defaults to current user.
 * @return string The locale of the user.
 */
    public function getUserLocale(int|\WP_User $user = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines the current locale desired for the request.
 *
 * @since 5.0.0
 *
 * @global string $pagenow The filename of the current screen.
 *
 * @return string The determined locale.
 */
    public function determineLocale(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the translation of $text.
 *
 * If there is no translation, or the text domain isn't loaded, the original text is returned.
 *
 * *Note:* Don't use translate() directly, use __() or related functions.
 *
 * @since 2.2.0
 * @since 5.5.0 Introduced `gettext-{$domain}` filter.
 *
 * @param string $text   Text to translate.
 * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.
 *                       Default 'default'.
 * @return string Translated text.
 */
    public function translate(string $text, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes last item on a pipe-delimited string.
 *
 * Meant for removing the last item in a string, such as 'Role name|User role'. The original
 * string will be returned if no pipe '|' characters are found in the string.
 *
 * @since 2.8.0
 *
 * @param string $text A pipe-delimited string.
 * @return string Either $text or everything before the last pipe.
 */
    public function beforeLastBar(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the translation of $text in the context defined in $context.
 *
 * If there is no translation, or the text domain isn't loaded, the original text is returned.
 *
 * *Note:* Don't use translate_with_gettext_context() directly, use _x() or related functions.
 *
 * @since 2.8.0
 * @since 5.5.0 Introduced `gettext_with_context-{$domain}` filter.
 *
 * @param string $text    Text to translate.
 * @param string $context Context information for the translators.
 * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.
 *                        Default 'default'.
 * @return string Translated text on success, original text on failure.
 */
    public function translateWithGettextContext(string $text, string $context, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the translation of $text.
 *
 * If there is no translation, or the text domain isn't loaded, the original text is returned.
 *
 * @since 2.1.0
 *
 * @param string $text   Text to translate.
 * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.
 *                       Default 'default'.
 * @return string Translated text.
 */
    public function __(string $text, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the translation of $text and escapes it for safe use in an attribute.
 *
 * If there is no translation, or the text domain isn't loaded, the original text is returned.
 *
 * @since 2.8.0
 *
 * @param string $text   Text to translate.
 * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.
 *                       Default 'default'.
 * @return string Translated text on success, original text on failure.
 */
    public function escAttr__(string $text, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the translation of $text and escapes it for safe use in HTML output.
 *
 * If there is no translation, or the text domain isn't loaded, the original text
 * is escaped and returned.
 *
 * @since 2.8.0
 *
 * @param string $text   Text to translate.
 * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.
 *                       Default 'default'.
 * @return string Translated text.
 */
    public function escHtml__(string $text, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays translated text.
 *
 * @since 1.2.0
 *
 * @param string $text   Text to translate.
 * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.
 *                       Default 'default'.
 */
    public function _e(string $text, string $domain = 'default'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays translated text that has been escaped for safe use in an attribute.
 *
 * Encodes `< > & " '` (less than, greater than, ampersand, double quote, single quote).
 * Will never double encode entities.
 *
 * If you need the value for use in PHP, use esc_attr__().
 *
 * @since 2.8.0
 *
 * @param string $text   Text to translate.
 * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.
 *                       Default 'default'.
 */
    public function escAttrE(string $text, string $domain = 'default'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays translated text that has been escaped for safe use in HTML output.
 *
 * If there is no translation, or the text domain isn't loaded, the original text
 * is escaped and displayed.
 *
 * If you need the value for use in PHP, use esc_html__().
 *
 * @since 2.8.0
 *
 * @param string $text   Text to translate.
 * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.
 *                       Default 'default'.
 */
    public function escHtmlE(string $text, string $domain = 'default'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves translated string with gettext context.
 *
 * Quite a few times, there will be collisions with similar translatable text
 * found in more than two places, but with different translated context.
 *
 * By including the context in the pot file, translators can translate the two
 * strings differently.
 *
 * @since 2.8.0
 *
 * @param string $text    Text to translate.
 * @param string $context Context information for the translators.
 * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.
 *                        Default 'default'.
 * @return string Translated context string without pipe.
 */
    public function _x(string $text, string $context, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays translated string with gettext context.
 *
 * @since 3.0.0
 *
 * @param string $text    Text to translate.
 * @param string $context Context information for the translators.
 * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.
 *                        Default 'default'.
 */
    public function _ex(string $text, string $context, string $domain = 'default'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Translates string with gettext context, and escapes it for safe use in an attribute.
 *
 * If there is no translation, or the text domain isn't loaded, the original text
 * is escaped and returned.
 *
 * @since 2.8.0
 *
 * @param string $text    Text to translate.
 * @param string $context Context information for the translators.
 * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.
 *                        Default 'default'.
 * @return string Translated text.
 */
    public function escAttrX(string $text, string $context, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Translates string with gettext context, and escapes it for safe use in HTML output.
 *
 * If there is no translation, or the text domain isn't loaded, the original text
 * is escaped and returned.
 *
 * @since 2.9.0
 *
 * @param string $text    Text to translate.
 * @param string $context Context information for the translators.
 * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.
 *                        Default 'default'.
 * @return string Translated text.
 */
    public function escHtmlX(string $text, string $context, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Translates and retrieves the singular or plural form based on the supplied number.
 *
 * Used when you want to use the appropriate form of a string based on whether a
 * number is singular or plural.
 *
 * Example:
 *
 *     printf( _n( '%s person', '%s people', $count, 'text-domain' ), number_format_i18n( $count ) );
 *
 * @since 2.8.0
 * @since 5.5.0 Introduced `ngettext-{$domain}` filter.
 *
 * @param string $single The text to be used if the number is singular.
 * @param string $plural The text to be used if the number is plural.
 * @param int $number The number to compare against to use either the singular or plural form.
 * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.
 *                       Default 'default'.
 * @return string The translated singular or plural form.
 */
    public function _n(string $single, string $plural, int $number, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Translates and retrieves the singular or plural form based on the supplied number, with gettext context.
 *
 * This is a hybrid of _n() and _x(). It supports context and plurals.
 *
 * Used when you want to use the appropriate form of a string with context based on whether a
 * number is singular or plural.
 *
 * Example of a generic phrase which is disambiguated via the context parameter:
 *
 *     printf( _nx( '%s group', '%s groups', $people, 'group of people', 'text-domain' ), number_format_i18n( $people ) );
 *     printf( _nx( '%s group', '%s groups', $animals, 'group of animals', 'text-domain' ), number_format_i18n( $animals ) );
 *
 * @since 2.8.0
 * @since 5.5.0 Introduced `ngettext_with_context-{$domain}` filter.
 *
 * @param string $single  The text to be used if the number is singular.
 * @param string $plural  The text to be used if the number is plural.
 * @param int $number  The number to compare against to use either the singular or plural form.
 * @param string $context Context information for the translators.
 * @param string $domain  Optional. Text domain. Unique identifier for retrieving translated strings.
 *                        Default 'default'.
 * @return string The translated singular or plural form.
 */
    public function _nx(string $single, string $plural, int $number, string $context, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers plural strings in POT file, but does not translate them.
 *
 * Used when you want to keep structures with translatable plural
 * strings and use them later when the number is known.
 *
 * Example:
 *
 *     $message = _n_noop( '%s post', '%s posts', 'text-domain' );
 *     ...
 *     printf( translate_nooped_plural( $message, $count, 'text-domain' ), number_format_i18n( $count ) );
 *
 * @since 2.5.0
 *
 * @param string $singular Singular form to be localized.
 * @param string $plural   Plural form to be localized.
 * @param string $domain   Optional. Text domain. Unique identifier for retrieving translated strings.
 *                         Default null.
 * @return array {
 *     Array of translation information for the strings.
 *
 *     @type string      $0        Singular form to be localized. No longer used.
 *     @type string      $1        Plural form to be localized. No longer used.
 *     @type string      $singular Singular form to be localized.
 *     @type string      $plural   Plural form to be localized.
 *     @type null        $context  Context information for the translators.
 *     @type string|null $domain   Text domain.
 * }
 */
    public function _nNoop(string $singular, string $plural, string $domain = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers plural strings with gettext context in POT file, but does not translate them.
 *
 * Used when you want to keep structures with translatable plural
 * strings and use them later when the number is known.
 *
 * Example of a generic phrase which is disambiguated via the context parameter:
 *
 *     $messages = array(
 *          'people'  => _nx_noop( '%s group', '%s groups', 'people', 'text-domain' ),
 *          'animals' => _nx_noop( '%s group', '%s groups', 'animals', 'text-domain' ),
 *     );
 *     ...
 *     $message = $messages[ $type ];
 *     printf( translate_nooped_plural( $message, $count, 'text-domain' ), number_format_i18n( $count ) );
 *
 * @since 2.8.0
 *
 * @param string $singular Singular form to be localized.
 * @param string $plural   Plural form to be localized.
 * @param string $context  Context information for the translators.
 * @param string $domain   Optional. Text domain. Unique identifier for retrieving translated strings.
 *                         Default null.
 * @return array {
 *     Array of translation information for the strings.
 *
 *     @type string      $0        Singular form to be localized. No longer used.
 *     @type string      $1        Plural form to be localized. No longer used.
 *     @type string      $2        Context information for the translators. No longer used.
 *     @type string      $singular Singular form to be localized.
 *     @type string      $plural   Plural form to be localized.
 *     @type string      $context  Context information for the translators.
 *     @type string|null $domain   Text domain.
 * }
 */
    public function _nxNoop(string $singular, string $plural, string $context, string $domain = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Translates and returns the singular or plural form of a string that's been registered
 * with _n_noop() or _nx_noop().
 *
 * Used when you want to use a translatable plural string once the number is known.
 *
 * Example:
 *
 *     $message = _n_noop( '%s post', '%s posts', 'text-domain' );
 *     ...
 *     printf( translate_nooped_plural( $message, $count, 'text-domain' ), number_format_i18n( $count ) );
 *
 * @since 3.1.0
 *
 * @param array $noopedPlural {
 *     Array that is usually a return value from _n_noop() or _nx_noop().
 *
 *     @type string      $singular Singular form to be localized.
 *     @type string      $plural   Plural form to be localized.
 *     @type string|null $context  Context information for the translators.
 *     @type string|null $domain   Text domain.
 * }
 * @param int $count         Number of objects.
 * @param string $domain        Optional. Text domain. Unique identifier for retrieving translated strings. If $nooped_plural contains
 *                              a text domain passed to _n_noop() or _nx_noop(), it will override this value. Default 'default'.
 * @return string Either $singular or $plural translated text.
 */
    public function translateNoopedPlural(array $noopedPlural, int $count, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads a .mo file into the text domain $domain.
 *
 * If the text domain already exists, the translations will be merged. If both
 * sets have the same string, the translation from the original value will be taken.
 *
 * On success, the .mo file will be placed in the $l10n global by $domain
 * and will be a MO object.
 *
 * @since 1.5.0
 * @since 6.1.0 Added the `$locale` parameter.
 *
 * @global MO[]                   $l10n                   An array of all currently loaded text domains.
 * @global MO[]                   $l10n_unloaded          An array of all text domains that have been unloaded again.
 * @global WP_Textdomain_Registry $wp_textdomain_registry WordPress Textdomain Registry.
 *
 * @param string $domain Text domain. Unique identifier for retrieving translated strings.
 * @param string $mofile Path to the .mo file.
 * @param string $locale Optional. Locale. Default is the current locale.
 * @return bool True on success, false on failure.
 */
    public function loadTextdomain(string $domain, string $mofile, string $locale = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unloads translations for a text domain.
 *
 * @since 3.0.0
 * @since 6.1.0 Added the `$reloadable` parameter.
 *
 * @global MO[] $l10n          An array of all currently loaded text domains.
 * @global MO[] $l10n_unloaded An array of all text domains that have been unloaded again.
 *
 * @param string $domain     Text domain. Unique identifier for retrieving translated strings.
 * @param bool $reloadable Whether the text domain can be loaded just-in-time again.
 * @return bool Whether textdomain was unloaded.
 */
    public function unloadTextdomain(string $domain, bool $reloadable = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads default translated strings based on locale.
 *
 * Loads the .mo file in WP_LANG_DIR constant path from WordPress root.
 * The translated (.mo) file is named based on the locale.
 *
 * @see load_textdomain()
 *
 * @since 1.5.0
 *
 * @param string $locale Optional. Locale to load. Default is the value of get_locale().
 * @return bool Whether the textdomain was loaded.
 */
    public function loadDefaultTextdomain(string $locale = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads a plugin's translated strings.
 *
 * If the path is not given then it will be the root of the plugin directory.
 *
 * The .mo file should be named based on the text domain with a dash, and then the locale exactly.
 *
 * @since 1.5.0
 * @since 4.6.0 The function now tries to load the .mo file from the languages directory first.
 *
 * @param string $domain          Unique identifier for retrieving translated strings
 * @param string|false $deprecated      Optional. Deprecated. Use the $plugin_rel_path parameter instead.
 *                                      Default false.
 * @param string|false $pluginRelPath Optional. Relative path to WP_PLUGIN_DIR where the .mo file resides.
 *                                      Default false.
 * @return bool True when textdomain is successfully loaded, false otherwise.
 */
    public function loadPluginTextdomain(string $domain, string|false $deprecated = false, string|false $pluginRelPath = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the translated strings for a plugin residing in the mu-plugins directory.
 *
 * @since 3.0.0
 * @since 4.6.0 The function now tries to load the .mo file from the languages directory first.
 *
 * @global WP_Textdomain_Registry $wp_textdomain_registry WordPress Textdomain Registry.
 *
 * @param string $domain             Text domain. Unique identifier for retrieving translated strings.
 * @param string $muPluginRelPath Optional. Relative to `WPMU_PLUGIN_DIR` directory in which the .mo
 *                                   file resides. Default empty string.
 * @return bool True when textdomain is successfully loaded, false otherwise.
 */
    public function loadMupluginTextdomain(string $domain, string $muPluginRelPath = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the theme's translated strings.
 *
 * If the current locale exists as a .mo file in the theme's root directory, it
 * will be included in the translated strings by the $domain.
 *
 * The .mo files must be named based on the locale exactly.
 *
 * @since 1.5.0
 * @since 4.6.0 The function now tries to load the .mo file from the languages directory first.
 *
 * @global WP_Textdomain_Registry $wp_textdomain_registry WordPress Textdomain Registry.
 *
 * @param string $domain Text domain. Unique identifier for retrieving translated strings.
 * @param string|false $path   Optional. Path to the directory containing the .mo file.
 *                             Default false.
 * @return bool True when textdomain is successfully loaded, false otherwise.
 */
    public function loadThemeTextdomain(string $domain, string|false $path = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the child theme's translated strings.
 *
 * If the current locale exists as a .mo file in the child theme's
 * root directory, it will be included in the translated strings by the $domain.
 *
 * The .mo files must be named based on the locale exactly.
 *
 * @since 2.9.0
 *
 * @param string $domain Text domain. Unique identifier for retrieving translated strings.
 * @param string|false $path   Optional. Path to the directory containing the .mo file.
 *                             Default false.
 * @return bool True when the theme textdomain is successfully loaded, false otherwise.
 */
    public function loadChildThemeTextdomain(string $domain, string|false $path = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the script translated strings.
 *
 * @since 5.0.0
 * @since 5.0.2 Uses load_script_translations() to load translation data.
 * @since 5.1.0 The `$domain` parameter was made optional.
 *
 * @see WP_Scripts::set_translations()
 *
 * @param string $handle Name of the script to register a translation domain to.
 * @param string $domain Optional. Text domain. Default 'default'.
 * @param string $path   Optional. The full file path to the directory containing translation files.
 * @return string|false The translated strings in JSON encoding on success,
 *                      false if the script textdomain could not be loaded.
 */
    public function loadScriptTextdomain(string $handle, string $domain = 'default', string $path = ''): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the translation data for the given script handle and text domain.
 *
 * @since 5.0.2
 *
 * @param string|false $file   Path to the translation file to load. False if there isn't one.
 * @param string $handle Name of the script to register a translation domain to.
 * @param string $domain The text domain.
 * @return string|false The JSON-encoded translated strings for the given script handle and text domain.
 *                      False if there are none.
 */
    public function loadScriptTranslations(string|false $file, string $handle, string $domain): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the Translations instance for a text domain.
 *
 * If there isn't one, returns empty Translations instance.
 *
 * @since 2.8.0
 *
 * @global MO[] $l10n An array of all currently loaded text domains.
 *
 * @param string $domain Text domain. Unique identifier for retrieving translated strings.
 * @return \Translations|\NOOP_Translations A Translations instance.
 */
    public function getTranslationsForDomain(string $domain): \Translations|\NOOP_Translations
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether there are translations for the text domain.
 *
 * @since 3.0.0
 *
 * @global MO[] $l10n An array of all currently loaded text domains.
 *
 * @param string $domain Text domain. Unique identifier for retrieving translated strings.
 * @return bool Whether there are translations.
 */
    public function isTextdomainLoaded(string $domain): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Translates role name.
 *
 * Since the role names are in the database and not in the source there
 * are dummy gettext calls to get them into the POT file and this function
 * properly translates them back.
 *
 * The before_last_bar() call is needed, because older installations keep the roles
 * using the old context format: 'Role name|User role' and just skipping the
 * content after the last bar is easier than fixing them in the DB. New installations
 * won't suffer from that problem.
 *
 * @since 2.8.0
 * @since 5.2.0 Added the `$domain` parameter.
 *
 * @param string $name   The role name.
 * @param string $domain Optional. Text domain. Unique identifier for retrieving translated strings.
 *                       Default 'default'.
 * @return string Translated role name on success, original name on failure.
 */
    public function translateUserRole(string $name, string $domain = 'default'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets all available languages based on the presence of *.mo and *.l10n.php files in a given directory.
 *
 * The default directory is WP_LANG_DIR.
 *
 * @since 3.0.0
 * @since 4.7.0 The results are now filterable with the {@see 'get_available_languages'} filter.
 * @since 6.5.0 The initial file list is now cached and also takes into account *.l10n.php files.
 *
 * @global WP_Textdomain_Registry $wp_textdomain_registry WordPress Textdomain Registry.
 *
 * @param string $dir A directory to search for language files.
 *                    Default WP_LANG_DIR.
 * @return string[] An array of language codes or an empty array if no languages are present.
 *                  Language codes are formed by stripping the file extension from the language file names.
 */
    public function getAvailableLanguages(string $dir = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets installed translations.
 *
 * Looks in the wp-content/languages directory for translations of
 * plugins or themes.
 *
 * @since 3.7.0
 *
 * @global WP_Textdomain_Registry $wp_textdomain_registry WordPress Textdomain Registry.
 *
 * @param string $type What to search for. Accepts 'plugins', 'themes', 'core'.
 * @return array Array of language data.
 */
    public function wpGetInstalledTranslations(string $type): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Extracts headers from a PO file.
 *
 * @since 3.7.0
 *
 * @param string $poFile Path to PO file.
 * @return string[] Array of PO file header values keyed by header name.
 */
    public function wpGetPomoFileData(string $poFile): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Extracts headers from a PHP translation file.
 *
 * @since 6.6.0
 *
 * @param string $phpFile Path to a `.l10n.php` file.
 * @return string[] Array of file header values keyed by header name.
 */
    public function wpGetL10nPhpFileData(string $phpFile): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or returns a Language selector.
 *
 * @since 4.0.0
 * @since 4.3.0 Introduced the `echo` argument.
 * @since 4.7.0 Introduced the `show_option_site_default` argument.
 * @since 5.1.0 Introduced the `show_option_en_us` argument.
 * @since 5.9.0 Introduced the `explicit_option_en_us` argument.
 *
 * @see get_available_languages()
 * @see wp_get_available_translations()
 *
 * @param string|array $args {
 *     Optional. Array or string of arguments for outputting the language selector.
 *
 *     @type string   $id                           ID attribute of the select element. Default 'locale'.
 *     @type string   $name                         Name attribute of the select element. Default 'locale'.
 *     @type string[] $languages                    List of installed languages, contain only the locales.
 *                                                  Default empty array.
 *     @type array    $translations                 List of available translations. Default result of
 *                                                  wp_get_available_translations().
 *     @type string   $selected                     Language which should be selected. Default empty.
 *     @type bool|int $echo                         Whether to echo the generated markup. Accepts 0, 1, or their
 *                                                  boolean equivalents. Default 1.
 *     @type bool     $show_available_translations  Whether to show available translations. Default true.
 *     @type bool     $show_option_site_default     Whether to show an option to fall back to the site's locale. Default false.
 *     @type bool     $show_option_en_us            Whether to show an option for English (United States). Default true.
 *     @type bool     $explicit_option_en_us        Whether the English (United States) option uses an explicit value of en_US
 *                                                  instead of an empty value. Default false.
 * }
 * @return string HTML dropdown list of languages.
 */
    public function wpDropdownLanguages(string|array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current locale is right-to-left (RTL).
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 3.0.0
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @return bool Whether locale is RTL.
 */
    public function isRtl(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Switches the translations according to the given locale.
 *
 * @since 4.7.0
 *
 * @global WP_Locale_Switcher $wp_locale_switcher WordPress locale switcher object.
 *
 * @param string $locale The locale.
 * @return bool True on success, false on failure.
 */
    public function switchToLocale(string $locale): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Switches the translations according to the given user's locale.
 *
 * @since 6.2.0
 *
 * @global WP_Locale_Switcher $wp_locale_switcher WordPress locale switcher object.
 *
 * @param int $userId User ID.
 * @return bool True on success, false on failure.
 */
    public function switchToUserLocale(int $userId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Restores the translations according to the previous locale.
 *
 * @since 4.7.0
 *
 * @global WP_Locale_Switcher $wp_locale_switcher WordPress locale switcher object.
 *
 * @return string|false Locale on success, false on error.
 */
    public function restorePreviousLocale(): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Restores the translations according to the original locale.
 *
 * @since 4.7.0
 *
 * @global WP_Locale_Switcher $wp_locale_switcher WordPress locale switcher object.
 *
 * @return string|false Locale on success, false on error.
 */
    public function restoreCurrentLocale(): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether switch_to_locale() is in effect.
 *
 * @since 4.7.0
 *
 * @global WP_Locale_Switcher $wp_locale_switcher WordPress locale switcher object.
 *
 * @return bool True if the locale has been switched, false otherwise.
 */
    public function isLocaleSwitched(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the list item separator based on the locale.
 *
 * @since 6.0.0
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @return string Locale-specific list item separator.
 */
    public function wpGetListItemSeparator(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the word count type based on the locale.
 *
 * @since 6.2.0
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @return string Locale-specific word count type. Possible values are `characters_excluding_spaces`,
 *                `characters_including_spaces`, or `words`. Defaults to `words`.
 */
    public function wpGetWordCountType(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the permalink for the current post.
 *
 * @since 1.2.0
 * @since 4.4.0 Added the `$post` parameter.
 *
 * @param int|\WP_Post $post Optional. Post ID or post object. Default is the global `$post`.
 */
    public function thePermalink(int|\WP_Post $post = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a trailing-slashed string if the site is set for adding trailing slashes.
 *
 * Conditionally adds a trailing slash if the permalink structure has a trailing
 * slash, strips the trailing slash if not. The string is passed through the
 * {@see 'user_trailingslashit'} filter. Will remove trailing slash from string, if
 * site is not set to have them.
 *
 * @since 2.2.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $url         URL with or without a trailing slash.
 * @param string $typeOfUrl Optional. The type of URL being considered (e.g. single, category, etc)
 *                            for use in the filter. Default empty string.
 * @return string The URL with the trailing slash appended or stripped.
 */
    public function userTrailingslashit(string $url, string $typeOfUrl = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the permalink anchor for the current post.
 *
 * The permalink mode title will use the post title for the 'a' element 'id'
 * attribute. The id mode uses 'post-' with the post ID for the 'id' attribute.
 *
 * @since 0.71
 *
 * @param string $mode Optional. Permalink mode. Accepts 'title' or 'id'. Default 'id'.
 */
    public function permalinkAnchor(string $mode = 'id'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determine whether post should always use a plain permalink structure.
 *
 * @since 5.7.0
 *
 * @param \WP_Post|int|null $post   Optional. Post ID or post object. Defaults to global $post.
 * @param bool|null $sample Optional. Whether to force consideration based on sample links.
 *                                 If omitted, a sample link is generated if a post object is passed
 *                                 with the filter property set to 'sample'.
 * @return bool Whether to use a plain permalink structure.
 */
    public function wpForcePlainPostPermalink(\WP_Post|int|null $post = null, bool|null $sample = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the full permalink for the current post or post ID.
 *
 * This function is an alias for get_permalink().
 *
 * @since 3.9.0
 *
 * @see get_permalink()
 *
 * @param int|\WP_Post $post      Optional. Post ID or post object. Default is the global `$post`.
 * @param bool $leavename Optional. Whether to keep post name or page name. Default false.
 * @return string|false The permalink URL. False if the post does not exist.
 */
    public function getThePermalink(int|\WP_Post $post = 0, bool $leavename = false): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the full permalink for the current post or post ID.
 *
 * @since 1.0.0
 *
 * @param int|\WP_Post $post      Optional. Post ID or post object. Default is the global `$post`.
 * @param bool $leavename Optional. Whether to keep post name or page name. Default false.
 * @return string|false The permalink URL. False if the post does not exist.
 */
    public function getPermalink(int|\WP_Post $post = 0, bool $leavename = false): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for a post of a custom post type.
 *
 * @since 3.0.0
 * @since 6.1.0 Returns false if the post does not exist.
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param int|\WP_Post $post      Optional. Post ID or post object. Default is the global `$post`.
 * @param bool $leavename Optional. Whether to keep post name. Default false.
 * @param bool $sample    Optional. Is it a sample permalink. Default false.
 * @return string|false The post permalink URL. False if the post does not exist.
 */
    public function getPostPermalink(int|\WP_Post $post = 0, bool $leavename = false, bool $sample = false): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for the current page or page ID.
 *
 * Respects page_on_front. Use this one.
 *
 * @since 1.5.0
 *
 * @param int|WP_Post $post      Optional. Post ID or object. Default uses the global `$post`.
 * @param bool $leavename Optional. Whether to keep the page name. Default false.
 * @param bool $sample    Optional. Whether it should be treated as a sample permalink.
 *                               Default false.
 * @return string The page permalink.
 */
    public function getPageLink(int|\WP_Post|false $post = false, bool $leavename = false, bool $sample = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for an attachment.
 *
 * This can be used in the WordPress Loop or outside of it.
 *
 * @since 2.0.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param int|\WP_Post $post      Optional. Post ID or object. Default uses the global `$post`.
 * @param bool $leavename Optional. Whether to keep the page name. Default false.
 * @return string The attachment permalink.
 */
    public function getAttachmentLink(int|\WP_Post $post = null, bool $leavename = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for the year archives.
 *
 * @since 1.5.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param int|false $year Integer of year. False for current year.
 * @return string The permalink for the specified year archive.
 */
    public function getYearLink(int|false $year): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for the month archives with year.
 *
 * @since 1.0.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param int|false $year  Integer of year. False for current year.
 * @param int|false $month Integer of month. False for current month.
 * @return string The permalink for the specified month and year archive.
 */
    public function getMonthLink(int|false $year, int|false $month): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for the day archives with year and month.
 *
 * @since 1.0.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param int|false $year  Integer of year. False for current year.
 * @param int|false $month Integer of month. False for current month.
 * @param int|false $day   Integer of day. False for current day.
 * @return string The permalink for the specified day, month, and year archive.
 */
    public function getDayLink(int|false $year, int|false $month, int|false $day): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the permalink for the feed type.
 *
 * @since 3.0.0
 *
 * @param string $anchor The link's anchor text.
 * @param string $feed   Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                       Default is the value of get_default_feed().
 */
    public function theFeedLink(string $anchor, string $feed = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for the feed type.
 *
 * @since 1.5.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $feed Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                     Default is the value of get_default_feed().
 * @return string The feed permalink.
 */
    public function getFeedLink(string $feed = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for the post comments feed.
 *
 * @since 2.2.0
 *
 * @param int $postId Optional. Post ID. Default is the ID of the global `$post`.
 * @param string $feed    Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                        Default is the value of get_default_feed().
 * @return string The permalink for the comments feed for the given post on success, empty string on failure.
 */
    public function getPostCommentsFeedLink(int $postId = 0, string $feed = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the comment feed link for a post.
 *
 * Prints out the comment feed link for a post. Link text is placed in the
 * anchor. If no link text is specified, default text is used. If no post ID is
 * specified, the current post is used.
 *
 * @since 2.5.0
 *
 * @param string $linkText Optional. Descriptive link text. Default 'Comments Feed'.
 * @param int $postId   Optional. Post ID. Default is the ID of the global `$post`.
 * @param string $feed      Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                          Default is the value of get_default_feed().
 */
    public function postCommentsFeedLink(string $linkText = '', int|string $postId = '', string $feed = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the feed link for a given author.
 *
 * Returns a link to the feed for all posts by a given author. A specific feed
 * can be requested or left blank to get the default feed.
 *
 * @since 2.5.0
 *
 * @param int $authorId Author ID.
 * @param string $feed      Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                          Default is the value of get_default_feed().
 * @return string Link to the feed for the author specified by $author_id.
 */
    public function getAuthorFeedLink(int $authorId, string $feed = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the feed link for a category.
 *
 * Returns a link to the feed for all posts in a given category. A specific feed
 * can be requested or left blank to get the default feed.
 *
 * @since 2.5.0
 *
 * @param int|WP_Term|object $cat  The ID or category object whose feed link will be retrieved.
 * @param string $feed Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                                 Default is the value of get_default_feed().
 * @return string Link to the feed for the category specified by `$cat`.
 */
    public function getCategoryFeedLink(int|object $cat, string $feed = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the feed link for a term.
 *
 * Returns a link to the feed for all posts in a given term. A specific feed
 * can be requested or left blank to get the default feed.
 *
 * @since 3.0.0
 *
 * @param int|WP_Term|object $term     The ID or term object whose feed link will be retrieved.
 * @param string $taxonomy Optional. Taxonomy of `$term_id`.
 * @param string $feed     Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                                     Default is the value of get_default_feed().
 * @return string|false Link to the feed for the term specified by `$term` and `$taxonomy`.
 */
    public function getTermFeedLink(int|object $term, string $taxonomy = '', string $feed = ''): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for a tag feed.
 *
 * @since 2.3.0
 *
 * @param int|WP_Term|object $tag  The ID or term object whose feed link will be retrieved.
 * @param string $feed Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                                 Default is the value of get_default_feed().
 * @return string                  The feed permalink for the given tag.
 */
    public function getTagFeedLink(int|object $tag, string $feed = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the edit link for a tag.
 *
 * @since 2.7.0
 *
 * @param int|WP_Term|object $tag      The ID or term object whose edit link will be retrieved.
 * @param string $taxonomy Optional. Taxonomy slug. Default 'post_tag'.
 * @return string The edit tag link URL for the given tag.
 */
    public function getEditTagLink(int|object $tag, string $taxonomy = 'post_tag'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves the edit link for a tag with formatting.
 *
 * @since 2.7.0
 *
 * @param string $link   Optional. Anchor text. If empty, default is 'Edit This'. Default empty.
 * @param string $before Optional. Display before edit link. Default empty.
 * @param string $after  Optional. Display after edit link. Default empty.
 * @param \WP_Term $tag    Optional. Term object. If null, the queried object will be inspected.
 *                        Default null.
 */
    public function editTagLink(string $link = '', string $before = '', string $after = '', \WP_Term $tag = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL for editing a given term.
 *
 * @since 3.1.0
 * @since 4.5.0 The `$taxonomy` parameter was made optional.
 *
 * @param int|WP_Term|object $term        The ID or term object whose edit link will be retrieved.
 * @param string $taxonomy    Optional. Taxonomy. Defaults to the taxonomy of the term identified
 *                                        by `$term`.
 * @param string $objectType Optional. The object type. Used to highlight the proper post type
 *                                        menu on the linked page. Defaults to the first object_type associated
 *                                        with the taxonomy.
 * @return string|null The edit term link URL for the given term, or null on failure.
 */
    public function getEditTermLink(int|object $term, string $taxonomy = '', string $objectType = ''): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves the edit term link with formatting.
 *
 * @since 3.1.0
 *
 * @param string $link    Optional. Anchor text. If empty, default is 'Edit This'. Default empty.
 * @param string $before  Optional. Display before edit link. Default empty.
 * @param string $after   Optional. Display after edit link. Default empty.
 * @param int|\WP_Term|null $term    Optional. Term ID or object. If null, the queried object will be inspected. Default null.
 * @param bool $display Optional. Whether or not to echo the return. Default true.
 * @return string|void HTML content.
 */
    public function editTermLink(string $link = '', string $before = '', string $after = '', int|\WP_Term|null $term = null, bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for a search.
 *
 * @since 3.0.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $query Optional. The query string to use. If empty the current query is used. Default empty.
 * @return string The search permalink.
 */
    public function getSearchLink(string $query = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for the search results feed.
 *
 * @since 2.5.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $searchQuery Optional. Search query. Default empty.
 * @param string $feed         Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                             Default is the value of get_default_feed().
 * @return string The search results feed permalink.
 */
    public function getSearchFeedLink(string $searchQuery = '', string $feed = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for the search results comments feed.
 *
 * @since 2.5.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $searchQuery Optional. Search query. Default empty.
 * @param string $feed         Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                             Default is the value of get_default_feed().
 * @return string The comments feed search results permalink.
 */
    public function getSearchCommentsFeedLink(string $searchQuery = '', string $feed = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for a post type archive.
 *
 * @since 3.1.0
 * @since 4.5.0 Support for posts was added.
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $postType Post type.
 * @return string|false The post type archive permalink. False if the post type
 *                      does not exist or does not have an archive.
 */
    public function getPostTypeArchiveLink(string $postType): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the permalink for a post type archive feed.
 *
 * @since 3.1.0
 *
 * @param string $postType Post type.
 * @param string $feed      Optional. Feed type. Possible values include 'rss2', 'atom'.
 *                          Default is the value of get_default_feed().
 * @return string|false The post type feed permalink. False if the post type
 *                      does not exist or does not have an archive.
 */
    public function getPostTypeArchiveFeedLink(string $postType, string $feed = ''): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL used for the post preview.
 *
 * Allows additional query args to be appended.
 *
 * @since 4.4.0
 *
 * @param int|\WP_Post $post         Optional. Post ID or `WP_Post` object. Defaults to global `$post`.
 * @param array $queryArgs   Optional. Array of additional query args to be appended to the link.
 *                                  Default empty array.
 * @param string $previewLink Optional. Base preview link to be used if it should differ from the
 *                                  post permalink. Default empty.
 * @return string|null URL used for the post preview, or null if the post does not exist.
 */
    public function getPreviewPostLink(int|\WP_Post $post = null, array $queryArgs = [], string $previewLink = ''): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the edit post link for post.
 *
 * Can be used within the WordPress loop or outside of it. Can be used with
 * pages, posts, attachments, revisions, global styles, templates, and template parts.
 *
 * @since 2.3.0
 * @since 6.3.0 Adds custom link for wp_navigation post types.
 *              Adds custom links for wp_template_part and wp_template post types.
 *
 * @param int|\WP_Post $post    Optional. Post ID or post object. Default is the global `$post`.
 * @param string $context Optional. How to output the '&' character. Default '&amp;'.
 * @return string|null The edit post link for the given post. Null if the post type does not exist
 *                     or does not allow an editing UI.
 */
    public function getEditPostLink(int|\WP_Post $post = 0, string $context = 'display'): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the edit post link for post.
 *
 * @since 1.0.0
 * @since 4.4.0 The `$css_class` argument was added.
 *
 * @param string $text      Optional. Anchor text. If null, default is 'Edit This'. Default null.
 * @param string $before    Optional. Display before edit link. Default empty.
 * @param string $after     Optional. Display after edit link. Default empty.
 * @param int|\WP_Post $post      Optional. Post ID or post object. Default is the global `$post`.
 * @param string $cssClass Optional. Add custom class to link. Default 'post-edit-link'.
 */
    public function editPostLink(string $text = null, string $before = '', string $after = '', int|\WP_Post $post = 0, string $cssClass = 'post-edit-link'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the delete posts link for post.
 *
 * Can be used within the WordPress loop or outside of it, with any post type.
 *
 * @since 2.9.0
 *
 * @param int|\WP_Post $post         Optional. Post ID or post object. Default is the global `$post`.
 * @param string $deprecated   Not used.
 * @param bool $forceDelete Optional. Whether to bypass Trash and force deletion. Default false.
 * @return string|void The delete post link URL for the given post.
 */
    public function getDeletePostLink(int|\WP_Post $post = 0, string $deprecated = '', bool $forceDelete = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the edit comment link.
 *
 * @since 2.3.0
 *
 * @param int|\WP_Comment $commentId Optional. Comment ID or WP_Comment object.
 * @return string|void The edit comment link URL for the given comment.
 */
    public function getEditCommentLink(int|\WP_Comment $commentId = 0): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the edit comment link with formatting.
 *
 * @since 1.0.0
 *
 * @param string $text   Optional. Anchor text. If null, default is 'Edit This'. Default null.
 * @param string $before Optional. Display before edit link. Default empty.
 * @param string $after  Optional. Display after edit link. Default empty.
 */
    public function editCommentLink(string $text = null, string $before = '', string $after = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the edit bookmark link.
 *
 * @since 2.7.0
 *
 * @param int|\stdClass $link Optional. Bookmark ID. Default is the ID of the current bookmark.
 * @return string|void The edit bookmark link URL.
 */
    public function getEditBookmarkLink(int|\stdClass $link = 0): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the edit bookmark link anchor content.
 *
 * @since 2.7.0
 *
 * @param string $link     Optional. Anchor text. If empty, default is 'Edit This'. Default empty.
 * @param string $before   Optional. Display before edit link. Default empty.
 * @param string $after    Optional. Display after edit link. Default empty.
 * @param int $bookmark Optional. Bookmark ID. Default is the current bookmark.
 */
    public function editBookmarkLink(string $link = '', string $before = '', string $after = '', int $bookmark = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the edit user link.
 *
 * @since 3.5.0
 *
 * @param int $userId Optional. User ID. Defaults to the current user.
 * @return string URL to edit user page or empty string.
 */
    public function getEditUserLink(int $userId = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the previous post that is adjacent to the current post.
 *
 * @since 1.5.0
 *
 * @param bool $inSameTerm   Optional. Whether post should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 * @return \WP_Post|null|string Post object if successful. Null if global `$post` is not set.
 *                             Empty string if no corresponding post exists.
 */
    public function getPreviousPost(bool $inSameTerm = false, array|string $excludedTerms = '', string $taxonomy = 'category'): \WP_Post|null|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the next post that is adjacent to the current post.
 *
 * @since 1.5.0
 *
 * @param bool $inSameTerm   Optional. Whether post should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 * @return \WP_Post|null|string Post object if successful. Null if global `$post` is not set.
 *                             Empty string if no corresponding post exists.
 */
    public function getNextPost(bool $inSameTerm = false, array|string $excludedTerms = '', string $taxonomy = 'category'): \WP_Post|null|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the adjacent post.
 *
 * Can either be next or previous post.
 *
 * @since 2.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param bool $inSameTerm   Optional. Whether post should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty string.
 * @param bool $previous       Optional. Whether to retrieve previous post.
 *                                     Default true.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 * @return \WP_Post|null|string Post object if successful. Null if global `$post` is not set.
 *                             Empty string if no corresponding post exists.
 */
    public function getAdjacentPost(bool $inSameTerm = false, array|string $excludedTerms = '', bool $previous = true, string $taxonomy = 'category'): \WP_Post|null|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the adjacent post relational link.
 *
 * Can either be next or previous post relational link.
 *
 * @since 2.8.0
 *
 * @param string $title          Optional. Link title format. Default '%title'.
 * @param bool $inSameTerm   Optional. Whether link should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty.
 * @param bool $previous       Optional. Whether to display link to previous or next post.
 *                                     Default true.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 * @return string|void The adjacent post relational link URL.
 */
    public function getAdjacentPostRelLink(string $title = '%title', bool $inSameTerm = false, array|string $excludedTerms = '', bool $previous = true, string $taxonomy = 'category'): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the relational links for the posts adjacent to the current post.
 *
 * @since 2.8.0
 *
 * @param string $title          Optional. Link title format. Default '%title'.
 * @param bool $inSameTerm   Optional. Whether link should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 */
    public function adjacentPostsRelLink(string $title = '%title', bool $inSameTerm = false, array|string $excludedTerms = '', string $taxonomy = 'category'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays relational links for the posts adjacent to the current post for single post pages.
 *
 * This is meant to be attached to actions like 'wp_head'. Do not call this directly in plugins
 * or theme templates.
 *
 * @since 3.0.0
 * @since 5.6.0 No longer used in core.
 *
 * @see adjacent_posts_rel_link()
 */
    public function adjacentPostsRelLinkWpHead(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the relational link for the next post adjacent to the current post.
 *
 * @since 2.8.0
 *
 * @see get_adjacent_post_rel_link()
 *
 * @param string $title          Optional. Link title format. Default '%title'.
 * @param bool $inSameTerm   Optional. Whether link should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 */
    public function nextPostRelLink(string $title = '%title', bool $inSameTerm = false, array|string $excludedTerms = '', string $taxonomy = 'category'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the relational link for the previous post adjacent to the current post.
 *
 * @since 2.8.0
 *
 * @see get_adjacent_post_rel_link()
 *
 * @param string $title          Optional. Link title format. Default '%title'.
 * @param bool $inSameTerm   Optional. Whether link should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default true.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 */
    public function prevPostRelLink(string $title = '%title', bool $inSameTerm = false, array|string $excludedTerms = '', string $taxonomy = 'category'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the boundary post.
 *
 * Boundary being either the first or last post by publish date within the constraints specified
 * by `$in_same_term` or `$excluded_terms`.
 *
 * @since 2.8.0
 *
 * @param bool $inSameTerm   Optional. Whether returned post should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty.
 * @param bool $start          Optional. Whether to retrieve first or last post.
 *                                     Default true.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 * @return array|null Array containing the boundary post object if successful, null otherwise.
 */
    public function getBoundaryPost(bool $inSameTerm = false, array|string $excludedTerms = '', bool $start = true, string $taxonomy = 'category'): array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the previous post link that is adjacent to the current post.
 *
 * @since 3.7.0
 *
 * @param string $format         Optional. Link anchor format. Default '&laquo; %link'.
 * @param string $link           Optional. Link permalink format. Default '%title'.
 * @param bool $inSameTerm   Optional. Whether link should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 * @return string The link URL of the previous post in relation to the current post.
 */
    public function getPreviousPostLink(string $format = '&laquo; %link', string $link = '%title', bool $inSameTerm = false, array|string $excludedTerms = '', string $taxonomy = 'category'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the previous post link that is adjacent to the current post.
 *
 * @since 1.5.0
 *
 * @see get_previous_post_link()
 *
 * @param string $format         Optional. Link anchor format. Default '&laquo; %link'.
 * @param string $link           Optional. Link permalink format. Default '%title'.
 * @param bool $inSameTerm   Optional. Whether link should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 */
    public function previousPostLink(string $format = '&laquo; %link', string $link = '%title', bool $inSameTerm = false, array|string $excludedTerms = '', string $taxonomy = 'category'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the next post link that is adjacent to the current post.
 *
 * @since 3.7.0
 *
 * @param string $format         Optional. Link anchor format. Default '&laquo; %link'.
 * @param string $link           Optional. Link permalink format. Default '%title'.
 * @param bool $inSameTerm   Optional. Whether link should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 * @return string The link URL of the next post in relation to the current post.
 */
    public function getNextPostLink(string $format = '%link &raquo;', string $link = '%title', bool $inSameTerm = false, array|string $excludedTerms = '', string $taxonomy = 'category'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the next post link that is adjacent to the current post.
 *
 * @since 1.5.0
 *
 * @see get_next_post_link()
 *
 * @param string $format         Optional. Link anchor format. Default '&laquo; %link'.
 * @param string $link           Optional. Link permalink format. Default '%title'.
 * @param bool $inSameTerm   Optional. Whether link should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded term IDs.
 *                                     Default empty.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 */
    public function nextPostLink(string $format = '%link &raquo;', string $link = '%title', bool $inSameTerm = false, array|string $excludedTerms = '', string $taxonomy = 'category'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the adjacent post link.
 *
 * Can be either next post link or previous.
 *
 * @since 3.7.0
 *
 * @param string $format         Link anchor format.
 * @param string $link           Link permalink format.
 * @param bool $inSameTerm   Optional. Whether link should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded terms IDs.
 *                                     Default empty.
 * @param bool $previous       Optional. Whether to display link to previous or next post.
 *                                     Default true.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 * @return string The link URL of the previous or next post in relation to the current post.
 */
    public function getAdjacentPostLink(string $format, string $link, bool $inSameTerm = false, array|string $excludedTerms = '', bool $previous = true, string $taxonomy = 'category'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the adjacent post link.
 *
 * Can be either next post link or previous.
 *
 * @since 2.5.0
 *
 * @param string $format         Link anchor format.
 * @param string $link           Link permalink format.
 * @param bool $inSameTerm   Optional. Whether link should be in the same taxonomy term.
 *                                     Default false.
 * @param int[]|string $excludedTerms Optional. Array or comma-separated list of excluded category IDs.
 *                                     Default empty.
 * @param bool $previous       Optional. Whether to display link to previous or next post.
 *                                     Default true.
 * @param string $taxonomy       Optional. Taxonomy, if `$in_same_term` is true. Default 'category'.
 */
    public function adjacentPostLink(string $format, string $link, bool $inSameTerm = false, array|string $excludedTerms = '', bool $previous = true, string $taxonomy = 'category'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the link for a page number.
 *
 * @since 1.5.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param int $pagenum Optional. Page number. Default 1.
 * @param bool $escape  Optional. Whether to escape the URL for display, with esc_url().
 *                      If set to false, prepares the URL with sanitize_url(). Default true.
 * @return string The link URL for the given page number.
 */
    public function getPagenumLink(int $pagenum = 1, bool $escape = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the next posts page link.
 *
 * Backported from 2.1.3 to 2.0.10.
 *
 * @since 2.0.10
 *
 * @global int $paged
 *
 * @param int $maxPage Optional. Max pages. Default 0.
 * @return string|void The link URL for next posts page.
 */
    public function getNextPostsPageLink(int $maxPage = 0): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves the next posts page link.
 *
 * @since 0.71
 *
 * @param int $maxPage Optional. Max pages. Default 0.
 * @param bool $display  Optional. Whether to echo the link. Default true.
 * @return string|void The link URL for next posts page if `$display = false`.
 */
    public function nextPosts(int $maxPage = 0, bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the next posts page link.
 *
 * @since 2.7.0
 *
 * @global int      $paged
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string $label    Content for link text.
 * @param int $maxPage Optional. Max pages. Default 0.
 * @return string|void HTML-formatted next posts page link.
 */
    public function getNextPostsLink(string $label = null, int $maxPage = 0): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the next posts page link.
 *
 * @since 0.71
 *
 * @param string $label    Content for link text.
 * @param int $maxPage Optional. Max pages. Default 0.
 */
    public function nextPostsLink(string $label = null, int $maxPage = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the previous posts page link.
 *
 * Will only return string, if not on a single page or post.
 *
 * Backported to 2.0.10 from 2.1.3.
 *
 * @since 2.0.10
 *
 * @global int $paged
 *
 * @return string|void The link for the previous posts page.
 */
    public function getPreviousPostsPageLink(): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves the previous posts page link.
 *
 * @since 0.71
 *
 * @param bool $display Optional. Whether to echo the link. Default true.
 * @return string|void The previous posts page link if `$display = false`.
 */
    public function previousPosts(bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the previous posts page link.
 *
 * @since 2.7.0
 *
 * @global int $paged
 *
 * @param string $label Optional. Previous page link text.
 * @return string|void HTML-formatted previous page link.
 */
    public function getPreviousPostsLink(string $label = null): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the previous posts page link.
 *
 * @since 0.71
 *
 * @param string $label Optional. Previous page link text.
 */
    public function previousPostsLink(string $label = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post pages link navigation for previous and next pages.
 *
 * @since 2.8.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string|array $args {
 *     Optional. Arguments to build the post pages link navigation.
 *
 *     @type string $sep      Separator character. Default '&#8212;'.
 *     @type string $prelabel Link text to display for the previous page link.
 *                            Default '&laquo; Previous Page'.
 *     @type string $nxtlabel Link text to display for the next page link.
 *                            Default 'Next Page &raquo;'.
 * }
 * @return string The posts link navigation.
 */
    public function getPostsNavLink(string|array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post pages link navigation for previous and next pages.
 *
 * @since 0.71
 *
 * @param string $sep      Optional. Separator for posts navigation links. Default empty.
 * @param string $prelabel Optional. Label for previous pages. Default empty.
 * @param string $nxtlabel Optional Label for next pages. Default empty.
 */
    public function postsNavLink(string $sep = '', string $prelabel = '', string $nxtlabel = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the navigation to next/previous post, when applicable.
 *
 * @since 4.1.0
 * @since 4.4.0 Introduced the `in_same_term`, `excluded_terms`, and `taxonomy` arguments.
 * @since 5.3.0 Added the `aria_label` parameter.
 * @since 5.5.0 Added the `class` parameter.
 *
 * @param array $args {
 *     Optional. Default post navigation arguments. Default empty array.
 *
 *     @type string       $prev_text          Anchor text to display in the previous post link.
 *                                            Default '%title'.
 *     @type string       $next_text          Anchor text to display in the next post link.
 *                                            Default '%title'.
 *     @type bool         $in_same_term       Whether link should be in the same taxonomy term.
 *                                            Default false.
 *     @type int[]|string $excluded_terms     Array or comma-separated list of excluded term IDs.
 *                                            Default empty.
 *     @type string       $taxonomy           Taxonomy, if `$in_same_term` is true. Default 'category'.
 *     @type string       $screen_reader_text Screen reader text for the nav element.
 *                                            Default 'Post navigation'.
 *     @type string       $aria_label         ARIA label text for the nav element. Default 'Posts'.
 *     @type string       $class              Custom class for the nav element. Default 'post-navigation'.
 * }
 * @return string Markup for post links.
 */
    public function getThePostNavigation(array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the navigation to next/previous post, when applicable.
 *
 * @since 4.1.0
 *
 * @param array $args Optional. See get_the_post_navigation() for available arguments.
 *                    Default empty array.
 */
    public function thePostNavigation(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the navigation to next/previous set of posts, when applicable.
 *
 * @since 4.1.0
 * @since 5.3.0 Added the `aria_label` parameter.
 * @since 5.5.0 Added the `class` parameter.
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param array $args {
 *     Optional. Default posts navigation arguments. Default empty array.
 *
 *     @type string $prev_text          Anchor text to display in the previous posts link.
 *                                      Default 'Older posts'.
 *     @type string $next_text          Anchor text to display in the next posts link.
 *                                      Default 'Newer posts'.
 *     @type string $screen_reader_text Screen reader text for the nav element.
 *                                      Default 'Posts navigation'.
 *     @type string $aria_label         ARIA label text for the nav element. Default 'Posts'.
 *     @type string $class              Custom class for the nav element. Default 'posts-navigation'.
 * }
 * @return string Markup for posts links.
 */
    public function getThePostsNavigation(array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the navigation to next/previous set of posts, when applicable.
 *
 * @since 4.1.0
 *
 * @param array $args Optional. See get_the_posts_navigation() for available arguments.
 *                    Default empty array.
 */
    public function thePostsNavigation(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a paginated navigation to next/previous set of posts, when applicable.
 *
 * @since 4.1.0
 * @since 5.3.0 Added the `aria_label` parameter.
 * @since 5.5.0 Added the `class` parameter.
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param array $args {
 *     Optional. Default pagination arguments, see paginate_links().
 *
 *     @type string $screen_reader_text Screen reader text for navigation element.
 *                                      Default 'Posts navigation'.
 *     @type string $aria_label         ARIA label text for the nav element. Default 'Posts'.
 *     @type string $class              Custom class for the nav element. Default 'pagination'.
 * }
 * @return string Markup for pagination links.
 */
    public function getThePostsPagination(array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a paginated navigation to next/previous set of posts, when applicable.
 *
 * @since 4.1.0
 *
 * @param array $args Optional. See get_the_posts_pagination() for available arguments.
 *                    Default empty array.
 */
    public function thePostsPagination(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the comments page number link.
 *
 * @since 2.7.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param int $pagenum  Optional. Page number. Default 1.
 * @param int $maxPage Optional. The maximum number of comment pages. Default 0.
 * @return string The comments page number link URL.
 */
    public function getCommentsPagenumLink(int $pagenum = 1, int $maxPage = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the link to the next comments page.
 *
 * @since 2.7.1
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string $label    Optional. Label for link text. Default empty.
 * @param int $maxPage Optional. Max page. Default 0.
 * @return string|void HTML-formatted link for the next page of comments.
 */
    public function getNextCommentsLink(string $label = '', int $maxPage = 0): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the link to the next comments page.
 *
 * @since 2.7.0
 *
 * @param string $label    Optional. Label for link text. Default empty.
 * @param int $maxPage Optional. Max page. Default 0.
 */
    public function nextCommentsLink(string $label = '', int $maxPage = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the link to the previous comments page.
 *
 * @since 2.7.1
 *
 * @param string $label Optional. Label for comments link text. Default empty.
 * @return string|void HTML-formatted link for the previous page of comments.
 */
    public function getPreviousCommentsLink(string $label = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the link to the previous comments page.
 *
 * @since 2.7.0
 *
 * @param string $label Optional. Label for comments link text. Default empty.
 */
    public function previousCommentsLink(string $label = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves pagination links for the comments on the current post.
 *
 * @see paginate_links()
 * @since 2.7.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string|array $args Optional args. See paginate_links(). Default empty array.
 * @return void|string|array Void if 'echo' argument is true and 'type' is not an array,
 *                           or if the query is not for an existing single post of any post type.
 *                           Otherwise, markup for comment page links or array of comment page links,
 *                           depending on 'type' argument.
 */
    public function paginateCommentsLinks(string|array $args = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves navigation to next/previous set of comments, when applicable.
 *
 * @since 4.4.0
 * @since 5.3.0 Added the `aria_label` parameter.
 * @since 5.5.0 Added the `class` parameter.
 *
 * @param array $args {
 *     Optional. Default comments navigation arguments.
 *
 *     @type string $prev_text          Anchor text to display in the previous comments link.
 *                                      Default 'Older comments'.
 *     @type string $next_text          Anchor text to display in the next comments link.
 *                                      Default 'Newer comments'.
 *     @type string $screen_reader_text Screen reader text for the nav element. Default 'Comments navigation'.
 *     @type string $aria_label         ARIA label text for the nav element. Default 'Comments'.
 *     @type string $class              Custom class for the nav element. Default 'comment-navigation'.
 * }
 * @return string Markup for comments links.
 */
    public function getTheCommentsNavigation(array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays navigation to next/previous set of comments, when applicable.
 *
 * @since 4.4.0
 *
 * @param array $args See get_the_comments_navigation() for available arguments. Default empty array.
 */
    public function theCommentsNavigation(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a paginated navigation to next/previous set of comments, when applicable.
 *
 * @since 4.4.0
 * @since 5.3.0 Added the `aria_label` parameter.
 * @since 5.5.0 Added the `class` parameter.
 *
 * @see paginate_comments_links()
 *
 * @param array $args {
 *     Optional. Default pagination arguments.
 *
 *     @type string $screen_reader_text Screen reader text for the nav element. Default 'Comments navigation'.
 *     @type string $aria_label         ARIA label text for the nav element. Default 'Comments'.
 *     @type string $class              Custom class for the nav element. Default 'comments-pagination'.
 * }
 * @return string Markup for pagination links.
 */
    public function getTheCommentsPagination(array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a paginated navigation to next/previous set of comments, when applicable.
 *
 * @since 4.4.0
 *
 * @param array $args See get_the_comments_pagination() for available arguments. Default empty array.
 */
    public function theCommentsPagination(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL for the current site where the front end is accessible.
 *
 * Returns the 'home' option with the appropriate protocol. The protocol will be 'https'
 * if is_ssl() evaluates to true; otherwise, it will be the same as the 'home' option.
 * If `$scheme` is 'http' or 'https', is_ssl() is overridden.
 *
 * @since 3.0.0
 *
 * @param string $path   Optional. Path relative to the home URL. Default empty.
 * @param string|null $scheme Optional. Scheme to give the home URL context. Accepts
 *                            'http', 'https', 'relative', 'rest', or null. Default null.
 * @return string Home URL link with optional path appended.
 */
    public function homeUrl(string $path = '', string|null $scheme = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL for a given site where the front end is accessible.
 *
 * Returns the 'home' option with the appropriate protocol. The protocol will be 'https'
 * if is_ssl() evaluates to true; otherwise, it will be the same as the 'home' option.
 * If `$scheme` is 'http' or 'https', is_ssl() is overridden.
 *
 * @since 3.0.0
 *
 * @param int|null $blogId Optional. Site ID. Default null (current site).
 * @param string $path    Optional. Path relative to the home URL. Default empty.
 * @param string|null $scheme  Optional. Scheme to give the home URL context. Accepts
 *                             'http', 'https', 'relative', 'rest', or null. Default null.
 * @return string Home URL link with optional path appended.
 */
    public function getHomeUrl(int|null $blogId = null, string $path = '', string|null $scheme = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL for the current site where WordPress application files
 * (e.g. wp-blog-header.php or the wp-admin/ folder) are accessible.
 *
 * Returns the 'site_url' option with the appropriate protocol, 'https' if
 * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is
 * overridden.
 *
 * @since 3.0.0
 *
 * @param string $path   Optional. Path relative to the site URL. Default empty.
 * @param string|null $scheme Optional. Scheme to give the site URL context. See set_url_scheme().
 * @return string Site URL link with optional path appended.
 */
    public function siteUrl(string $path = '', string|null $scheme = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL for a given site where WordPress application files
 * (e.g. wp-blog-header.php or the wp-admin/ folder) are accessible.
 *
 * Returns the 'site_url' option with the appropriate protocol, 'https' if
 * is_ssl() and 'http' otherwise. If `$scheme` is 'http' or 'https',
 * `is_ssl()` is overridden.
 *
 * @since 3.0.0
 *
 * @param int|null $blogId Optional. Site ID. Default null (current site).
 * @param string $path    Optional. Path relative to the site URL. Default empty.
 * @param string|null $scheme  Optional. Scheme to give the site URL context. Accepts
 *                             'http', 'https', 'login', 'login_post', 'admin', or
 *                             'relative'. Default null.
 * @return string Site URL link with optional path appended.
 */
    public function getSiteUrl(int|null $blogId = null, string $path = '', string|null $scheme = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the admin area for the current site.
 *
 * @since 2.6.0
 *
 * @param string $path   Optional. Path relative to the admin URL. Default empty.
 * @param string $scheme The scheme to use. Default is 'admin', which obeys force_ssl_admin() and is_ssl().
 *                       'http' or 'https' can be passed to force those schemes.
 * @return string Admin URL link with optional path appended.
 */
    public function adminUrl(string $path = '', string $scheme = 'admin'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the admin area for a given site.
 *
 * @since 3.0.0
 *
 * @param int|null $blogId Optional. Site ID. Default null (current site).
 * @param string $path    Optional. Path relative to the admin URL. Default empty.
 * @param string $scheme  Optional. The scheme to use. Accepts 'http' or 'https',
 *                          to force those schemes. Default 'admin', which obeys
 *                          force_ssl_admin() and is_ssl().
 * @return string Admin URL link with optional path appended.
 */
    public function getAdminUrl(int|null $blogId = null, string $path = '', string $scheme = 'admin'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the includes directory.
 *
 * @since 2.6.0
 *
 * @param string $path   Optional. Path relative to the includes URL. Default empty.
 * @param string|null $scheme Optional. Scheme to give the includes URL context. Accepts
 *                            'http', 'https', or 'relative'. Default null.
 * @return string Includes URL link with optional path appended.
 */
    public function includesUrl(string $path = '', string|null $scheme = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the content directory.
 *
 * @since 2.6.0
 *
 * @param string $path Optional. Path relative to the content URL. Default empty.
 * @return string Content URL link with optional path appended.
 */
    public function contentUrl(string $path = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a URL within the plugins or mu-plugins directory.
 *
 * Defaults to the plugins directory URL if no arguments are supplied.
 *
 * @since 2.6.0
 *
 * @param string $path   Optional. Extra path appended to the end of the URL, including
 *                       the relative directory if $plugin is supplied. Default empty.
 * @param string $plugin Optional. A full path to a file inside a plugin or mu-plugin.
 *                       The URL will be relative to its directory. Default empty.
 *                       Typically this is done by passing `__FILE__` as the argument.
 * @return string Plugins URL link with optional paths appended.
 */
    public function pluginsUrl(string $path = '', string $plugin = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the site URL for the current network.
 *
 * Returns the site URL with the appropriate protocol, 'https' if
 * is_ssl() and 'http' otherwise. If $scheme is 'http' or 'https', is_ssl() is
 * overridden.
 *
 * @since 3.0.0
 *
 * @see set_url_scheme()
 *
 * @param string $path   Optional. Path relative to the site URL. Default empty.
 * @param string|null $scheme Optional. Scheme to give the site URL context. Accepts
 *                            'http', 'https', or 'relative'. Default null.
 * @return string Site URL link with optional path appended.
 */
    public function networkSiteUrl(string $path = '', string|null $scheme = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the home URL for the current network.
 *
 * Returns the home URL with the appropriate protocol, 'https' is_ssl()
 * and 'http' otherwise. If `$scheme` is 'http' or 'https', `is_ssl()` is
 * overridden.
 *
 * @since 3.0.0
 *
 * @param string $path   Optional. Path relative to the home URL. Default empty.
 * @param string|null $scheme Optional. Scheme to give the home URL context. Accepts
 *                            'http', 'https', or 'relative'. Default null.
 * @return string Home URL link with optional path appended.
 */
    public function networkHomeUrl(string $path = '', string|null $scheme = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the admin area for the network.
 *
 * @since 3.0.0
 *
 * @param string $path   Optional path relative to the admin URL. Default empty.
 * @param string $scheme Optional. The scheme to use. Default is 'admin', which obeys force_ssl_admin()
 *                       and is_ssl(). 'http' or 'https' can be passed to force those schemes.
 * @return string Admin URL link with optional path appended.
 */
    public function networkAdminUrl(string $path = '', string $scheme = 'admin'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the admin area for the current user.
 *
 * @since 3.0.0
 *
 * @param string $path   Optional. Path relative to the admin URL. Default empty.
 * @param string $scheme Optional. The scheme to use. Default is 'admin', which obeys force_ssl_admin()
 *                       and is_ssl(). 'http' or 'https' can be passed to force those schemes.
 * @return string Admin URL link with optional path appended.
 */
    public function userAdminUrl(string $path = '', string $scheme = 'admin'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the admin area for either the current site or the network depending on context.
 *
 * @since 3.1.0
 *
 * @param string $path   Optional. Path relative to the admin URL. Default empty.
 * @param string $scheme Optional. The scheme to use. Default is 'admin', which obeys force_ssl_admin()
 *                       and is_ssl(). 'http' or 'https' can be passed to force those schemes.
 * @return string Admin URL link with optional path appended.
 */
    public function selfAdminUrl(string $path = '', string $scheme = 'admin'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the scheme for a URL.
 *
 * @since 3.4.0
 * @since 4.4.0 The 'rest' scheme was added.
 *
 * @param string $url    Absolute URL that includes a scheme
 * @param string|null $scheme Optional. Scheme to give $url. Currently 'http', 'https', 'login',
 *                            'login_post', 'admin', 'relative', 'rest', 'rpc', or null. Default null.
 * @return string URL with chosen scheme.
 */
    public function setUrlScheme(string $url, string|null $scheme = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the user's dashboard.
 *
 * If a user does not belong to any site, the global user dashboard is used. If the user
 * belongs to the current site, the dashboard for the current site is returned. If the user
 * cannot edit the current site, the dashboard to the user's primary site is returned.
 *
 * @since 3.1.0
 *
 * @param int $userId Optional. User ID. Defaults to current user.
 * @param string $path    Optional path relative to the dashboard. Use only paths known to
 *                        both site and user admins. Default empty.
 * @param string $scheme  The scheme to use. Default is 'admin', which obeys force_ssl_admin()
 *                        and is_ssl(). 'http' or 'https' can be passed to force those schemes.
 * @return string Dashboard URL link with optional path appended.
 */
    public function getDashboardUrl(int $userId = 0, string $path = '', string $scheme = 'admin'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the user's profile editor.
 *
 * @since 3.1.0
 *
 * @param int $userId Optional. User ID. Defaults to current user.
 * @param string $scheme  Optional. The scheme to use. Default is 'admin', which obeys force_ssl_admin()
 *                        and is_ssl(). 'http' or 'https' can be passed to force those schemes.
 * @return string Dashboard URL link with optional path appended.
 */
    public function getEditProfileUrl(int $userId = 0, string $scheme = 'admin'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the canonical URL for a post.
 *
 * When the post is the same as the current requested page the function will handle the
 * pagination arguments too.
 *
 * @since 4.6.0
 *
 * @param int|\WP_Post $post Optional. Post ID or object. Default is global `$post`.
 * @return string|false The canonical URL. False if the post does not exist
 *                      or has not been published yet.
 */
    public function wpGetCanonicalUrl(int|\WP_Post $post = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs rel=canonical for singular queries.
 *
 * @since 2.9.0
 * @since 4.6.0 Adjusted to use `wp_get_canonical_url()`.
 */
    public function relCanonical(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a shortlink for a post, page, attachment, or site.
 *
 * This function exists to provide a shortlink tag that all themes and plugins can target.
 * A plugin must hook in to provide the actual shortlinks. Default shortlink support is
 * limited to providing ?p= style links for posts. Plugins can short-circuit this function
 * via the {@see 'pre_get_shortlink'} filter or filter the output via the {@see 'get_shortlink'}
 * filter.
 *
 * @since 3.0.0
 *
 * @param int $id          Optional. A post or site ID. Default is 0, which means the current post or site.
 * @param string $context     Optional. Whether the ID is a 'site' ID, 'post' ID, or 'media' ID. If 'post',
 *                            the post_type of the post is consulted. If 'query', the current query is consulted
 *                            to determine the ID and context. Default 'post'.
 * @param bool $allowSlugs Optional. Whether to allow post slugs in the shortlink. It is up to the plugin how
 *                            and whether to honor this. Default true.
 * @return string A shortlink or an empty string if no shortlink exists for the requested resource or if shortlinks
 *                are not enabled.
 */
    public function wpGetShortlink(int $id = 0, string $context = 'post', bool $allowSlugs = true): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Injects rel=shortlink into the head if a shortlink is defined for the current page.
 *
 * Attached to the {@see 'wp_head'} action.
 *
 * @since 3.0.0
 */
    public function wpShortlinkWpHead(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a Link: rel=shortlink header if a shortlink is defined for the current page.
 *
 * Attached to the {@see 'wp'} action.
 *
 * @since 3.0.0
 */
    public function wpShortlinkHeader(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the shortlink for a post.
 *
 * Must be called from inside "The Loop"
 *
 * Call like the_shortlink( __( 'Shortlinkage FTW' ) )
 *
 * @since 3.0.0
 *
 * @param string $text   Optional The link text or HTML to be displayed. Defaults to 'This is the short link.'
 * @param string $title  Optional The tooltip for the link. Must be sanitized. Defaults to the sanitized post title.
 * @param string $before Optional HTML to display before the link. Default empty.
 * @param string $after  Optional HTML to display after the link. Default empty.
 */
    public function theShortlink(string $text = '', string $title = '', string $before = '', string $after = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the avatar URL.
 *
 * @since 4.2.0
 *
 * @param mixed $idOrEmail The avatar to retrieve a URL for. Accepts a user ID, Gravatar MD5 hash,
 *                           user email, WP_User object, WP_Post object, or WP_Comment object.
 * @param array $args {
 *     Optional. Arguments to use instead of the default arguments.
 *
 *     @type int    $size           Height and width of the avatar in pixels. Default 96.
 *     @type string $default        URL for the default image or a default type. Accepts:
 *                                  - '404' (return a 404 instead of a default image)
 *                                  - 'retro' (a 8-bit arcade-style pixelated face)
 *                                  - 'robohash' (a robot)
 *                                  - 'monsterid' (a monster)
 *                                  - 'wavatar' (a cartoon face)
 *                                  - 'identicon' (the "quilt", a geometric pattern)
 *                                  - 'mystery', 'mm', or 'mysteryman' (The Oyster Man)
 *                                  - 'blank' (transparent GIF)
 *                                  - 'gravatar_default' (the Gravatar logo)
 *                                  Default is the value of the 'avatar_default' option,
 *                                  with a fallback of 'mystery'.
 *     @type bool   $force_default  Whether to always show the default image, never the Gravatar.
 *                                  Default false.
 *     @type string $rating         What rating to display avatars up to. Accepts:
 *                                  - 'G' (suitable for all audiences)
 *                                  - 'PG' (possibly offensive, usually for audiences 13 and above)
 *                                  - 'R' (intended for adult audiences above 17)
 *                                  - 'X' (even more mature than above)
 *                                  Default is the value of the 'avatar_rating' option.
 *     @type string $scheme         URL scheme to use. See set_url_scheme() for accepted values.
 *                                  Default null.
 *     @type array  $processed_args When the function returns, the value will be the processed/sanitized $args
 *                                  plus a "found_avatar" guess. Pass as a reference. Default null.
 * }
 * @return string|false The URL of the avatar on success, false on failure.
 */
    public function getAvatarUrl(mixed $idOrEmail, array $args = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Check if this comment type allows avatars to be retrieved.
 *
 * @since 5.1.0
 *
 * @param string $commentType Comment type to check.
 * @return bool Whether the comment type is allowed for retrieving avatars.
 */
    public function isAvatarCommentType(string $commentType): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves default data about the avatar.
 *
 * @since 4.2.0
 *
 * @param mixed $idOrEmail The avatar to retrieve. Accepts a user ID, Gravatar MD5 hash,
 *                           user email, WP_User object, WP_Post object, or WP_Comment object.
 * @param array $args {
 *     Optional. Arguments to use instead of the default arguments.
 *
 *     @type int    $size           Height and width of the avatar in pixels. Default 96.
 *     @type int    $height         Display height of the avatar in pixels. Defaults to $size.
 *     @type int    $width          Display width of the avatar in pixels. Defaults to $size.
 *     @type string $default        URL for the default image or a default type. Accepts:
 *                                  - '404' (return a 404 instead of a default image)
 *                                  - 'retro' (a 8-bit arcade-style pixelated face)
 *                                  - 'robohash' (a robot)
 *                                  - 'monsterid' (a monster)
 *                                  - 'wavatar' (a cartoon face)
 *                                  - 'identicon' (the "quilt", a geometric pattern)
 *                                  - 'mystery', 'mm', or 'mysteryman' (The Oyster Man)
 *                                  - 'blank' (transparent GIF)
 *                                  - 'gravatar_default' (the Gravatar logo)
 *                                  Default is the value of the 'avatar_default' option,
 *                                  with a fallback of 'mystery'.
 *     @type bool   $force_default  Whether to always show the default image, never the Gravatar.
 *                                  Default false.
 *     @type string $rating         What rating to display avatars up to. Accepts:
 *                                  - 'G' (suitable for all audiences)
 *                                  - 'PG' (possibly offensive, usually for audiences 13 and above)
 *                                  - 'R' (intended for adult audiences above 17)
 *                                  - 'X' (even more mature than above)
 *                                  Default is the value of the 'avatar_rating' option.
 *     @type string $scheme         URL scheme to use. See set_url_scheme() for accepted values.
 *                                  Default null.
 *     @type array  $processed_args When the function returns, the value will be the processed/sanitized $args
 *                                  plus a "found_avatar" guess. Pass as a reference. Default null.
 *     @type string $extra_attr     HTML attributes to insert in the IMG element. Is not sanitized.
 *                                  Default empty.
 * }
 * @return array {
 *     Along with the arguments passed in `$args`, this will contain a couple of extra arguments.
 *
 *     @type bool         $found_avatar True if an avatar was found for this user,
 *                                      false or not set if none was found.
 *     @type string|false $url          The URL of the avatar that was found, or false.
 * }
 */
    public function getAvatarData(mixed $idOrEmail, array $args = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL of a file in the theme.
 *
 * Searches in the stylesheet directory before the template directory so themes
 * which inherit from a parent theme can just override one file.
 *
 * @since 4.7.0
 *
 * @param string $file Optional. File to search for in the stylesheet directory.
 * @return string The URL of the file.
 */
    public function getThemeFileUri(string $file = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL of a file in the parent theme.
 *
 * @since 4.7.0
 *
 * @param string $file Optional. File to return the URL for in the template directory.
 * @return string The URL of the file.
 */
    public function getParentThemeFileUri(string $file = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the path of a file in the theme.
 *
 * Searches in the stylesheet directory before the template directory so themes
 * which inherit from a parent theme can just override one file.
 *
 * @since 4.7.0
 *
 * @param string $file Optional. File to search for in the stylesheet directory.
 * @return string The path of the file.
 */
    public function getThemeFilePath(string $file = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the path of a file in the parent theme.
 *
 * @since 4.7.0
 *
 * @param string $file Optional. File to return the path for in the template directory.
 * @return string The path of the file.
 */
    public function getParentThemeFilePath(string $file = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to the privacy policy page.
 *
 * @since 4.9.6
 *
 * @return string The URL to the privacy policy page. Empty string if it doesn't exist.
 */
    public function getPrivacyPolicyUrl(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the privacy policy link with formatting, when applicable.
 *
 * @since 4.9.6
 *
 * @param string $before Optional. Display before privacy policy link. Default empty.
 * @param string $after  Optional. Display after privacy policy link. Default empty.
 */
    public function thePrivacyPolicyLink(string $before = '', string $after = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the privacy policy link with formatting, when applicable.
 *
 * @since 4.9.6
 * @since 6.2.0 Added 'privacy-policy' rel attribute.
 *
 * @param string $before Optional. Display before privacy policy link. Default empty.
 * @param string $after  Optional. Display after privacy policy link. Default empty.
 * @return string Markup for the link and surrounding elements. Empty string if it
 *                doesn't exist.
 */
    public function getThePrivacyPolicyLink(string $before = '', string $after = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of URL hosts which are considered to be internal hosts.
 *
 * By default the list of internal hosts is comprised of the host name of
 * the site's home_url() (as parsed by wp_parse_url()).
 *
 * This list is used when determining if a specified URL is a link to a page on
 * the site itself or a link offsite (to an external host). This is used, for
 * example, when determining if the "nofollow" attribute should be applied to a
 * link.
 *
 * @see wp_is_internal_link
 *
 * @since 6.2.0
 *
 * @return string[] An array of URL hosts.
 */
    public function wpInternalHosts(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether or not the specified URL is of a host included in the internal hosts list.
 *
 * @see wp_internal_hosts()
 *
 * @since 6.2.0
 *
 * @param string $link The URL to test.
 * @return bool Returns true for internal URLs and false for all other URLs.
 */
    public function wpIsInternalLink(string $link): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the HTTP protocol sent by the server.
 *
 * @since 4.4.0
 *
 * @return string The HTTP protocol. Default: HTTP/1.0.
 */
    public function wpGetServerProtocol(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Populates the Basic Auth server details from the Authorization header.
 *
 * Some servers running in CGI or FastCGI mode don't pass the Authorization
 * header on to WordPress.  If it's been rewritten to the `HTTP_AUTHORIZATION` header,
 * fill in the proper $_SERVER variables instead.
 *
 * @since 5.6.0
 */
    public function wpPopulateBasicAuthFromAuthorizationHeader(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current environment type.
 *
 * The type can be set via the `WP_ENVIRONMENT_TYPE` global system variable,
 * or a constant of the same name.
 *
 * Possible values are 'local', 'development', 'staging', and 'production'.
 * If not set, the type defaults to 'production'.
 *
 * @since 5.5.0
 * @since 5.5.1 Added the 'local' type.
 * @since 5.5.1 Removed the ability to alter the list of types.
 *
 * @return string The current environment type.
 */
    public function wpGetEnvironmentType(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current development mode.
 *
 * The development mode affects how certain parts of the WordPress application behave,
 * which is relevant when developing for WordPress.
 *
 * Development mode can be set via the `WP_DEVELOPMENT_MODE` constant in `wp-config.php`.
 * Possible values are 'core', 'plugin', 'theme', 'all', or an empty string to disable
 * development mode. 'all' is a special value to signify that all three development modes
 * ('core', 'plugin', and 'theme') are enabled.
 *
 * Development mode is considered separately from `WP_DEBUG` and wp_get_environment_type().
 * It does not affect debugging output, but rather functional nuances in WordPress.
 *
 * This function retrieves the currently set development mode value. To check whether
 * a specific development mode is enabled, use wp_is_development_mode().
 *
 * @since 6.3.0
 *
 * @return string The current development mode.
 */
    public function wpGetDevelopmentMode(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether the site is in the given development mode.
 *
 * @since 6.3.0
 *
 * @param string $mode Development mode to check for. Either 'core', 'plugin', 'theme', or 'all'.
 * @return bool True if the given mode is covered by the current development mode, false otherwise.
 */
    public function wpIsDevelopmentMode(string $mode): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if maintenance mode is enabled.
 *
 * Checks for a file in the WordPress root directory named ".maintenance".
 * This file will contain the variable $upgrading, set to the time the file
 * was created. If the file was created less than 10 minutes ago, WordPress
 * is in maintenance mode.
 *
 * @since 5.5.0
 *
 * @global int $upgrading The Unix timestamp marking when upgrading WordPress began.
 *
 * @return bool True if maintenance mode is enabled, false otherwise.
 */
    public function wpIsMaintenanceMode(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the time elapsed so far during this PHP script.
 *
 * Uses REQUEST_TIME_FLOAT that appeared in PHP 5.4.0.
 *
 * @since 5.8.0
 *
 * @return float Seconds since the PHP script started.
 */
    public function timerFloat(): float
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves or displays the time from the page start to when function is called.
 *
 * @since 0.71
 *
 * @global float   $timestart Seconds from when timer_start() is called.
 * @global float   $timeend   Seconds from when function is called.
 *
 * @param int|bool $display   Whether to echo or return the results. Accepts 0|false for return,
 *                            1|true for echo. Default 0|false.
 * @param int $precision The number of digits from the right of the decimal to display.
 *                            Default 3.
 * @return string The "second.microsecond" finished time calculation. The number is formatted
 *                for human consumption, both localized and rounded.
 */
    public function timerStop(int|bool $display = 0, int $precision = 3): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the database class file and instantiates the `$wpdb` global.
 *
 * @since 2.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 */
    public function requireWpDb(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Toggles `$_wp_using_ext_object_cache` on and off without directly
 * touching global.
 *
 * @since 3.7.0
 *
 * @global bool $_wp_using_ext_object_cache
 *
 * @param bool $using Whether external object cache is being used.
 * @return bool The current 'using' setting.
 */
    public function wpUsingExtObjectCache(bool $using = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters a given list of plugins, removing any paused plugins from it.
 *
 * @since 5.2.0
 *
 * @global WP_Paused_Extensions_Storage $_paused_plugins
 *
 * @param string[] $plugins Array of absolute plugin main file paths.
 * @return string[] Filtered array of plugins, without any paused plugins.
 */
    public function wpSkipPausedPlugins(array $plugins): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters a given list of themes, removing any paused themes from it.
 *
 * @since 5.2.0
 *
 * @global WP_Paused_Extensions_Storage $_paused_themes
 *
 * @param string[] $themes Array of absolute theme directory paths.
 * @return string[] Filtered array of absolute paths to themes, without any paused themes.
 */
    public function wpSkipPausedThemes(array $themes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether WordPress is in Recovery Mode.
 *
 * In this mode, plugins or themes that cause WSODs will be paused.
 *
 * @since 5.2.0
 *
 * @return bool
 */
    public function wpIsRecoveryMode(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether we are currently on an endpoint that should be protected against WSODs.
 *
 * @since 5.2.0
 *
 * @global string $pagenow The filename of the current screen.
 *
 * @return bool True if the current endpoint should be protected.
 */
    public function isProtectedEndpoint(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether we are currently handling an Ajax action that should be protected against WSODs.
 *
 * @since 5.2.0
 *
 * @return bool True if the current Ajax action should be protected.
 */
    public function isProtectedAjaxAction(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current request is for the login screen.
 *
 * @since 6.1.0
 *
 * @see wp_login_url()
 *
 * @return bool True if inside WordPress login screen, false otherwise.
 */
    public function isLogin(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current request is for an administrative interface page.
 *
 * Does not check if the user is an administrator; use current_user_can()
 * for checking roles and capabilities.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.1
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 *
 * @return bool True if inside WordPress administration interface, false otherwise.
 */
    public function isAdmin(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current request is for a site's administrative interface.
 *
 * e.g. `/wp-admin/`
 *
 * Does not check if the user is an administrator; use current_user_can()
 * for checking roles and capabilities.
 *
 * @since 3.1.0
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 *
 * @return bool True if inside WordPress site administration pages.
 */
    public function isBlogAdmin(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current request is for the network administrative interface.
 *
 * e.g. `/wp-admin/network/`
 *
 * Does not check if the user is an administrator; use current_user_can()
 * for checking roles and capabilities.
 *
 * Does not check if the site is a Multisite network; use is_multisite()
 * for checking if Multisite is enabled.
 *
 * @since 3.1.0
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 *
 * @return bool True if inside WordPress network administration pages.
 */
    public function isNetworkAdmin(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current request is for a user admin screen.
 *
 * e.g. `/wp-admin/user/`
 *
 * Does not check if the user is an administrator; use current_user_can()
 * for checking roles and capabilities.
 *
 * @since 3.1.0
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 *
 * @return bool True if inside WordPress user administration pages.
 */
    public function isUserAdmin(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether Multisite is enabled.
 *
 * @since 3.0.0
 *
 * @return bool True if Multisite is enabled, false otherwise.
 */
    public function isMultisite(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current site ID.
 *
 * @since 3.1.0
 *
 * @global int $blog_id
 *
 * @return int Site ID.
 */
    public function getCurrentBlogId(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current network ID.
 *
 * @since 4.6.0
 *
 * @return int The ID of the current network.
 */
    public function getCurrentNetworkId(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks or sets whether WordPress is in "installation" mode.
 *
 * If the `WP_INSTALLING` constant is defined during the bootstrap, `wp_installing()` will default to `true`.
 *
 * @since 4.4.0
 *
 * @param bool $isInstalling Optional. True to set WP into Installing mode, false to turn Installing mode off.
 *                            Omit this parameter if you only want to fetch the current status.
 * @return bool True if WP is installing, otherwise false. When a `$is_installing` is passed, the function will
 *              report whether WP was in installing mode prior to the change to `$is_installing`.
 */
    public function wpInstalling(bool $isInstalling = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if SSL is used.
 *
 * @since 2.6.0
 * @since 4.6.0 Moved from functions.php to load.php.
 *
 * @return bool True if SSL, otherwise false.
 */
    public function isSsl(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts a shorthand byte value to an integer byte value.
 *
 * @since 2.3.0
 * @since 4.6.0 Moved from media.php to load.php.
 *
 * @link https://www.php.net/manual/en/function.ini-get.php
 * @link https://www.php.net/manual/en/faq.using.php#faq.using.shorthandbytes
 *
 * @param string $value A (PHP ini) byte value, either shorthand or ordinary.
 * @return int An integer byte value.
 */
    public function wpConvertHrToBytes(string $value): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a PHP ini value is changeable at runtime.
 *
 * @since 4.6.0
 *
 * @link https://www.php.net/manual/en/function.ini-get-all.php
 *
 * @param string $setting The name of the ini setting to check.
 * @return bool True if the value is changeable at runtime. False otherwise.
 */
    public function wpIsIniValueChangeable(string $setting): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current request is a WordPress Ajax request.
 *
 * @since 4.7.0
 *
 * @return bool True if it's a WordPress Ajax request, false otherwise.
 */
    public function wpDoingAjax(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current request should use themes.
 *
 * @since 5.1.0
 *
 * @return bool True if themes should be used, false otherwise.
 */
    public function wpUsingThemes(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current request is a WordPress cron request.
 *
 * @since 4.8.0
 *
 * @return bool True if it's a WordPress cron request, false otherwise.
 */
    public function wpDoingCron(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether the given variable is a WordPress Error.
 *
 * Returns whether `$thing` is an instance of the `WP_Error` class.
 *
 * @since 2.1.0
 *
 * @param mixed $thing The variable to check.
 * @return bool Whether the variable is an instance of WP_Error.
 */
    public function isWpError(mixed $thing): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether file modifications are allowed.
 *
 * @since 4.8.0
 *
 * @param string $context The usage context.
 * @return bool True if file modification is allowed, false otherwise.
 */
    public function wpIsFileModAllowed(string $context): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Starts scraping edited file errors.
 *
 * @since 4.9.0
 */
    public function wpStartScrapingEditedFileErrors(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finalizes scraping for edited file errors.
 *
 * @since 4.9.0
 *
 * @param string $scrapeKey Scrape key.
 */
    public function wpFinalizeScrapingEditedFileErrors(string $scrapeKey): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether current request is a JSON request, or is expecting a JSON response.
 *
 * @since 5.0.0
 *
 * @return bool True if `Accepts` or `Content-Type` headers contain `application/json`.
 *              False otherwise.
 */
    public function wpIsJsonRequest(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether current request is a JSONP request, or is expecting a JSONP response.
 *
 * @since 5.2.0
 *
 * @return bool True if JSONP request, false otherwise.
 */
    public function wpIsJsonpRequest(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a string is a valid JSON Media Type.
 *
 * @since 5.6.0
 *
 * @param string $mediaType A Media Type string to check.
 * @return bool True if string is a valid JSON Media Type.
 */
    public function wpIsJsonMediaType(string $mediaType): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether current request is an XML request, or is expecting an XML response.
 *
 * @since 5.2.0
 *
 * @return bool True if `Accepts` or `Content-Type` headers contain `text/xml`
 *              or one of the related MIME types. False otherwise.
 */
    public function wpIsXmlRequest(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if this site is protected by HTTP Basic Auth.
 *
 * At the moment, this merely checks for the present of Basic Auth credentials. Therefore, calling
 * this function with a context different from the current context may give inaccurate results.
 * In a future release, this evaluation may be made more robust.
 *
 * Currently, this is only used by Application Passwords to prevent a conflict since it also utilizes
 * Basic Auth.
 *
 * @since 5.6.1
 *
 * @global string $pagenow The filename of the current screen.
 *
 * @param string $context The context to check for protection. Accepts 'login', 'admin', and 'front'.
 *                        Defaults to the current context.
 * @return bool Whether the site is protected by Basic Auth.
 */
    public function wpIsSiteProtectedByBasicAuth(string $context = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the markup for an audio tag to be used in an Underscore template
 * when data.model is passed.
 *
 * @since 3.9.0
 */
    public function wpUnderscoreAudioTemplate(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the markup for a video tag to be used in an Underscore template
 * when data.model is passed.
 *
 * @since 3.9.0
 */
    public function wpUnderscoreVideoTemplate(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the templates used in the media manager.
 *
 * @since 3.5.0
 */
    public function wpPrintMediaTemplates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves additional image sizes.
 *
 * @since 4.7.0
 *
 * @global array $_wp_additional_image_sizes
 *
 * @return array Additional images size data.
 */
    public function wpGetAdditionalImageSizes(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Scales down the default size of an image.
 *
 * This is so that the image is a better fit for the editor and theme.
 *
 * The `$size` parameter accepts either an array or a string. The supported string
 * values are 'thumb' or 'thumbnail' for the given thumbnail size or defaults at
 * 128 width and 96 height in pixels. Also supported for the string value is
 * 'medium', 'medium_large' and 'full'. The 'full' isn't actually supported, but any value other
 * than the supported will result in the content_width size or 500 if that is
 * not set.
 *
 * Finally, there is a filter named {@see 'editor_max_image_size'}, that will be
 * called on the calculated array for width and height, respectively.
 *
 * @since 2.5.0
 *
 * @global int $content_width
 *
 * @param int $width   Width of the image in pixels.
 * @param int $height  Height of the image in pixels.
 * @param string|int[] $size    Optional. Image size. Accepts any registered image size name, or an array
 *                              of width and height values in pixels (in that order). Default 'medium'.
 * @param string $context Optional. Could be 'display' (like in a theme) or 'edit'
 *                              (like inserting into an editor). Default null.
 * @return int[] {
 *     An array of width and height values.
 *
 *     @type int $0 The maximum width in pixels.
 *     @type int $1 The maximum height in pixels.
 * }
 */
    public function imageConstrainSizeForEditor(int $width, int $height, string|array $size = 'medium', string $context = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves width and height attributes using given width and height values.
 *
 * Both attributes are required in the sense that both parameters must have a
 * value, but are optional in that if you set them to false or null, then they
 * will not be added to the returned string.
 *
 * You can set the value using a string, but it will only take numeric values.
 * If you wish to put 'px' after the numbers, then it will be stripped out of
 * the return.
 *
 * @since 2.5.0
 *
 * @param int|string $width  Image width in pixels.
 * @param int|string $height Image height in pixels.
 * @return string HTML attributes for width and, or height.
 */
    public function imageHwstring(int|string $width, int|string $height): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Scales an image to fit a particular size (such as 'thumb' or 'medium').
 *
 * The URL might be the original image, or it might be a resized version. This
 * function won't create a new resized copy, it will just return an already
 * resized one if it exists.
 *
 * A plugin may use the {@see 'image_downsize'} filter to hook into and offer image
 * resizing services for images. The hook must return an array with the same
 * elements that are normally returned from the function.
 *
 * @since 2.5.0
 *
 * @param int $id   Attachment ID for image.
 * @param string|int[] $size Optional. Image size. Accepts any registered image size name, or an array
 *                           of width and height values in pixels (in that order). Default 'medium'.
 * @return array|false {
 *     Array of image data, or boolean false if no image is available.
 *
 *     @type string $0 Image source URL.
 *     @type int    $1 Image width in pixels.
 *     @type int    $2 Image height in pixels.
 *     @type bool   $3 Whether the image is a resized image.
 * }
 */
    public function imageDownsize(int $id, string|array $size = 'medium'): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a new image size.
 *
 * @since 2.9.0
 *
 * @global array $_wp_additional_image_sizes Associative array of additional image sizes.
 *
 * @param string $name   Image size identifier.
 * @param int $width  Optional. Image width in pixels. Default 0.
 * @param int $height Optional. Image height in pixels. Default 0.
 * @param bool|array $crop   {
 *     Optional. Image cropping behavior. If false, the image will be scaled (default).
 *     If true, image will be cropped to the specified dimensions using center positions.
 *     If an array, the image will be cropped using the array to specify the crop location:
 *
 *     @type string $0 The x crop position. Accepts 'left' 'center', or 'right'.
 *     @type string $1 The y crop position. Accepts 'top', 'center', or 'bottom'.
 * }
 */
    public function addImageSize(string $name, int $width = 0, int $height = 0, bool|array $crop = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if an image size exists.
 *
 * @since 3.9.0
 *
 * @param string $name The image size to check.
 * @return bool True if the image size exists, false if not.
 */
    public function hasImageSize(string $name): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a new image size.
 *
 * @since 3.9.0
 *
 * @global array $_wp_additional_image_sizes
 *
 * @param string $name The image size to remove.
 * @return bool True if the image size was successfully removed, false on failure.
 */
    public function removeImageSize(string $name): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers an image size for the post thumbnail.
 *
 * @since 2.9.0
 *
 * @see add_image_size() for details on cropping behavior.
 *
 * @param int $width  Image width in pixels.
 * @param int $height Image height in pixels.
 * @param bool|array $crop   {
 *     Optional. Image cropping behavior. If false, the image will be scaled (default).
 *     If true, image will be cropped to the specified dimensions using center positions.
 *     If an array, the image will be cropped using the array to specify the crop location:
 *
 *     @type string $0 The x crop position. Accepts 'left' 'center', or 'right'.
 *     @type string $1 The y crop position. Accepts 'top', 'center', or 'bottom'.
 * }
 */
    public function setPostThumbnailSize(int $width = 0, int $height = 0, bool|array $crop = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets an img tag for an image attachment, scaling it down if requested.
 *
 * The {@see 'get_image_tag_class'} filter allows for changing the class name for the
 * image without having to use regular expressions on the HTML content. The
 * parameters are: what WordPress will use for the class, the Attachment ID,
 * image align value, and the size the image should be.
 *
 * The second filter, {@see 'get_image_tag'}, has the HTML content, which can then be
 * further manipulated by a plugin to change all attribute values and even HTML
 * content.
 *
 * @since 2.5.0
 *
 * @param int $id    Attachment ID.
 * @param string $alt   Image description for the alt attribute.
 * @param string $title Image description for the title attribute.
 * @param string $align Part of the class name for aligning the image.
 * @param string|int[] $size  Optional. Image size. Accepts any registered image size name, or an array of
 *                            width and height values in pixels (in that order). Default 'medium'.
 * @return string HTML IMG element for given image attachment.
 */
    public function getImageTag(int $id, string $alt, string $title, string $align, string|array $size = 'medium'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calculates the new dimensions for a down-sampled image.
 *
 * If either width or height are empty, no constraint is applied on
 * that dimension.
 *
 * @since 2.5.0
 *
 * @param int $currentWidth  Current width of the image.
 * @param int $currentHeight Current height of the image.
 * @param int $maxWidth      Optional. Max width in pixels to constrain to. Default 0.
 * @param int $maxHeight     Optional. Max height in pixels to constrain to. Default 0.
 * @return int[] {
 *     An array of width and height values.
 *
 *     @type int $0 The width in pixels.
 *     @type int $1 The height in pixels.
 * }
 */
    public function wpConstrainDimensions(int $currentWidth, int $currentHeight, int $maxWidth = 0, int $maxHeight = 0): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves calculated resize dimensions for use in WP_Image_Editor.
 *
 * Calculates dimensions and coordinates for a resized image that fits
 * within a specified width and height.
 *
 * @since 2.5.0
 *
 * @param int $origW Original width in pixels.
 * @param int $origH Original height in pixels.
 * @param int $destW New width in pixels.
 * @param int $destH New height in pixels.
 * @param bool|array $crop   {
 *     Optional. Image cropping behavior. If false, the image will be scaled (default).
 *     If true, image will be cropped to the specified dimensions using center positions.
 *     If an array, the image will be cropped using the array to specify the crop location:
 *
 *     @type string $0 The x crop position. Accepts 'left' 'center', or 'right'.
 *     @type string $1 The y crop position. Accepts 'top', 'center', or 'bottom'.
 * }
 * @return array|false Returned array matches parameters for `imagecopyresampled()`. False on failure.
 */
    public function imageResizeDimensions(int $origW, int $origH, int $destW, int $destH, bool|array $crop = false): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Resizes an image to make a thumbnail or intermediate size.
 *
 * The returned array has the file size, the image width, and image height. The
 * {@see 'image_make_intermediate_size'} filter can be used to hook in and change the
 * values of the returned array. The only parameter is the resized file path.
 *
 * @since 2.5.0
 *
 * @param string $file   File path.
 * @param int $width  Image width.
 * @param int $height Image height.
 * @param bool|array $crop   {
 *     Optional. Image cropping behavior. If false, the image will be scaled (default).
 *     If true, image will be cropped to the specified dimensions using center positions.
 *     If an array, the image will be cropped using the array to specify the crop location:
 *
 *     @type string $0 The x crop position. Accepts 'left' 'center', or 'right'.
 *     @type string $1 The y crop position. Accepts 'top', 'center', or 'bottom'.
 * }
 * @return array|false Metadata array on success. False if no image was created.
 */
    public function imageMakeIntermediateSize(string $file, int $width, int $height, bool|array $crop = false): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Helper function to test if aspect ratios for two images match.
 *
 * @since 4.6.0
 *
 * @param int $sourceWidth  Width of the first image in pixels.
 * @param int $sourceHeight Height of the first image in pixels.
 * @param int $targetWidth  Width of the second image in pixels.
 * @param int $targetHeight Height of the second image in pixels.
 * @return bool True if aspect ratios match within 1px. False if not.
 */
    public function wpImageMatchesRatio(int $sourceWidth, int $sourceHeight, int $targetWidth, int $targetHeight): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the image's intermediate size (resized) path, width, and height.
 *
 * The $size parameter can be an array with the width and height respectively.
 * If the size matches the 'sizes' metadata array for width and height, then it
 * will be used. If there is no direct match, then the nearest image size larger
 * than the specified size will be used. If nothing is found, then the function
 * will break out and return false.
 *
 * The metadata 'sizes' is used for compatible sizes that can be used for the
 * parameter $size value.
 *
 * The url path will be given, when the $size parameter is a string.
 *
 * If you are passing an array for the $size, you should consider using
 * add_image_size() so that a cropped version is generated. It's much more
 * efficient than having to find the closest-sized image and then having the
 * browser scale down the image.
 *
 * @since 2.5.0
 *
 * @param int $postId Attachment ID.
 * @param string|int[] $size    Optional. Image size. Accepts any registered image size name, or an array
 *                              of width and height values in pixels (in that order). Default 'thumbnail'.
 * @return array|false {
 *     Array of file relative path, width, and height on success. Additionally includes absolute
 *     path and URL if registered size is passed to `$size` parameter. False on failure.
 *
 *     @type string $file   Filename of image.
 *     @type int    $width  Width of image in pixels.
 *     @type int    $height Height of image in pixels.
 *     @type string $path   Path of image relative to uploads directory.
 *     @type string $url    URL of image.
 * }
 */
    public function imageGetIntermediateSize(int $postId, string|array $size = 'thumbnail'): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the available intermediate image size names.
 *
 * @since 3.0.0
 *
 * @return string[] An array of image size names.
 */
    public function getIntermediateImageSizes(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a normalized list of all currently registered image sub-sizes.
 *
 * @since 5.3.0
 * @uses wp_get_additional_image_sizes()
 * @uses get_intermediate_image_sizes()
 *
 * @return array[] Associative array of arrays of image sub-size information,
 *                 keyed by image size name.
 */
    public function wpGetRegisteredImageSubsizes(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an image to represent an attachment.
 *
 * @since 2.5.0
 *
 * @param int $attachmentId Image attachment ID.
 * @param string|int[] $size          Optional. Image size. Accepts any registered image size name, or an array of
 *                                    width and height values in pixels (in that order). Default 'thumbnail'.
 * @param bool $icon          Optional. Whether the image should fall back to a mime type icon. Default false.
 * @return array|false {
 *     Array of image data, or boolean false if no image is available.
 *
 *     @type string $0 Image source URL.
 *     @type int    $1 Image width in pixels.
 *     @type int    $2 Image height in pixels.
 *     @type bool   $3 Whether the image is a resized image.
 * }
 */
    public function wpGetAttachmentImageSrc(int $attachmentId, string|array $size = 'thumbnail', bool $icon = false): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets an HTML img element representing an image attachment.
 *
 * While `$size` will accept an array, it is better to register a size with
 * add_image_size() so that a cropped version is generated. It's much more
 * efficient than having to find the closest-sized image and then having the
 * browser scale down the image.
 *
 * @since 2.5.0
 * @since 4.4.0 The `$srcset` and `$sizes` attributes were added.
 * @since 5.5.0 The `$loading` attribute was added.
 * @since 6.1.0 The `$decoding` attribute was added.
 *
 * @param int $attachmentId Image attachment ID.
 * @param string|int[] $size          Optional. Image size. Accepts any registered image size name, or an array
 *                                    of width and height values in pixels (in that order). Default 'thumbnail'.
 * @param bool $icon          Optional. Whether the image should be treated as an icon. Default false.
 * @param string|array $attr {
 *     Optional. Attributes for the image markup.
 *
 *     @type string       $src           Image attachment URL.
 *     @type string       $class         CSS class name or space-separated list of classes.
 *                                       Default `attachment-$size_class size-$size_class`,
 *                                       where `$size_class` is the image size being requested.
 *     @type string       $alt           Image description for the alt attribute.
 *     @type string       $srcset        The 'srcset' attribute value.
 *     @type string       $sizes         The 'sizes' attribute value.
 *     @type string|false $loading       The 'loading' attribute value. Passing a value of false
 *                                       will result in the attribute being omitted for the image.
 *                                       Default determined by {@see wp_get_loading_optimization_attributes()}.
 *     @type string       $decoding      The 'decoding' attribute value. Possible values are
 *                                       'async' (default), 'sync', or 'auto'. Passing false or an empty
 *                                       string will result in the attribute being omitted.
 *     @type string       $fetchpriority The 'fetchpriority' attribute value, whether `high`, `low`, or `auto`.
 *                                       Default determined by {@see wp_get_loading_optimization_attributes()}.
 * }
 * @return string HTML img element or empty string on failure.
 */
    public function wpGetAttachmentImage(int $attachmentId, string|array $size = 'thumbnail', bool $icon = false, string|array $attr = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the URL of an image attachment.
 *
 * @since 4.4.0
 *
 * @param int $attachmentId Image attachment ID.
 * @param string|int[] $size          Optional. Image size. Accepts any registered image size name, or an array of
 *                                    width and height values in pixels (in that order). Default 'thumbnail'.
 * @param bool $icon          Optional. Whether the image should be treated as an icon. Default false.
 * @return string|false Attachment URL or false if no image is available. If `$size` does not match
 *                      any registered image size, the original image URL will be returned.
 */
    public function wpGetAttachmentImageUrl(int $attachmentId, string|array $size = 'thumbnail', bool $icon = false): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the value for an image attachment's 'srcset' attribute.
 *
 * @since 4.4.0
 *
 * @see wp_calculate_image_srcset()
 *
 * @param int $attachmentId Image attachment ID.
 * @param string|int[] $size          Optional. Image size. Accepts any registered image size name, or an array of
 *                                    width and height values in pixels (in that order). Default 'medium'.
 * @param array|null $imageMeta    Optional. The image meta data as returned by 'wp_get_attachment_metadata()'.
 *                                    Default null.
 * @return string|false A 'srcset' value string or false.
 */
    public function wpGetAttachmentImageSrcset(int $attachmentId, string|array $size = 'medium', array|null $imageMeta = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * A helper function to calculate the image sources to include in a 'srcset' attribute.
 *
 * @since 4.4.0
 *
 * @param int[] $sizeArray    {
 *     An array of width and height values.
 *
 *     @type int $0 The width in pixels.
 *     @type int $1 The height in pixels.
 * }
 * @param string $imageSrc     The 'src' of the image.
 * @param array $imageMeta    The image meta data as returned by 'wp_get_attachment_metadata()'.
 * @param int $attachmentId Optional. The image attachment ID. Default 0.
 * @return string|false The 'srcset' attribute value. False on error or when only one source exists.
 */
    public function wpCalculateImageSrcset(array $sizeArray, string $imageSrc, array $imageMeta, int $attachmentId = 0): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the value for an image attachment's 'sizes' attribute.
 *
 * @since 4.4.0
 *
 * @see wp_calculate_image_sizes()
 *
 * @param int $attachmentId Image attachment ID.
 * @param string|int[] $size          Optional. Image size. Accepts any registered image size name, or an array of
 *                                    width and height values in pixels (in that order). Default 'medium'.
 * @param array|null $imageMeta    Optional. The image meta data as returned by 'wp_get_attachment_metadata()'.
 *                                    Default null.
 * @return string|false A valid source size value for use in a 'sizes' attribute or false.
 */
    public function wpGetAttachmentImageSizes(int $attachmentId, string|array $size = 'medium', array|null $imageMeta = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates a 'sizes' attribute value for an image.
 *
 * @since 4.4.0
 *
 * @param string|int[] $size          Image size. Accepts any registered image size name, or an array of
 *                                    width and height values in pixels (in that order).
 * @param string|null $imageSrc     Optional. The URL to the image file. Default null.
 * @param array|null $imageMeta    Optional. The image meta data as returned by 'wp_get_attachment_metadata()'.
 *                                    Default null.
 * @param int $attachmentId Optional. Image attachment ID. Either `$image_meta` or `$attachment_id`
 *                                    is needed when using the image size name as argument for `$size`. Default 0.
 * @return string|false A valid source size value for use in a 'sizes' attribute or false.
 */
    public function wpCalculateImageSizes(string|array $size, string|null $imageSrc = null, array|null $imageMeta = null, int $attachmentId = 0): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if the image meta data is for the image source file.
 *
 * The image meta data is retrieved by attachment post ID. In some cases the post IDs may change.
 * For example when the website is exported and imported at another website. Then the
 * attachment post IDs that are in post_content for the exported website may not match
 * the same attachments at the new website.
 *
 * @since 5.5.0
 *
 * @param string $imageLocation The full path or URI to the image file.
 * @param array $imageMeta     The attachment meta data as returned by 'wp_get_attachment_metadata()'.
 * @param int $attachmentId  Optional. The image attachment ID. Default 0.
 * @return bool Whether the image meta is for this image file.
 */
    public function wpImageFileMatchesImageMeta(string $imageLocation, array $imageMeta, int $attachmentId = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines an image's width and height dimensions based on the source file.
 *
 * @since 5.5.0
 *
 * @param string $imageSrc     The image source file.
 * @param array $imageMeta    The image meta data as returned by 'wp_get_attachment_metadata()'.
 * @param int $attachmentId Optional. The image attachment ID. Default 0.
 * @return array|false Array with first element being the width and second element being the height,
 *                     or false if dimensions cannot be determined.
 */
    public function wpImageSrcGetDimensions(string $imageSrc, array $imageMeta, int $attachmentId = 0): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds 'srcset' and 'sizes' attributes to an existing 'img' element.
 *
 * @since 4.4.0
 *
 * @see wp_calculate_image_srcset()
 * @see wp_calculate_image_sizes()
 *
 * @param string $image         An HTML 'img' element to be filtered.
 * @param array $imageMeta    The image meta data as returned by 'wp_get_attachment_metadata()'.
 * @param int $attachmentId Image attachment ID.
 * @return string Converted 'img' element with 'srcset' and 'sizes' attributes added.
 */
    public function wpImageAddSrcsetAndSizes(string $image, array $imageMeta, int $attachmentId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether to add the `loading` attribute to the specified tag in the specified context.
 *
 * @since 5.5.0
 * @since 5.7.0 Now returns `true` by default for `iframe` tags.
 *
 * @param string $tagName The tag name.
 * @param string $context  Additional context, like the current filter name
 *                         or the function name from where this was called.
 * @return bool Whether to add the attribute.
 */
    public function wpLazyLoadingEnabled(string $tagName, string $context): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters specific tags in post content and modifies their markup.
 *
 * Modifies HTML tags in post content to include new browser and HTML technologies
 * that may not have existed at the time of post creation. These modifications currently
 * include adding `srcset`, `sizes`, and `loading` attributes to `img` HTML tags, as well
 * as adding `loading` attributes to `iframe` HTML tags.
 * Future similar optimizations should be added/expected here.
 *
 * @since 5.5.0
 * @since 5.7.0 Now supports adding `loading` attributes to `iframe` tags.
 *
 * @see wp_img_tag_add_width_and_height_attr()
 * @see wp_img_tag_add_srcset_and_sizes_attr()
 * @see wp_img_tag_add_loading_optimization_attrs()
 * @see wp_iframe_tag_add_loading_attr()
 *
 * @param string $content The HTML content to be filtered.
 * @param string $context Optional. Additional context to pass to the filters.
 *                        Defaults to `current_filter()` when not set.
 * @return string Converted content with images modified.
 */
    public function wpFilterContentTags(string $content, string $context = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds optimization attributes to an `img` HTML tag.
 *
 * @since 6.3.0
 *
 * @param string $image   The HTML `img` tag where the attribute should be added.
 * @param string $context Additional context to pass to the filters.
 * @return string Converted `img` tag with optimization attributes added.
 */
    public function wpImgTagAddLoadingOptimizationAttrs(string $image, string $context): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `width` and `height` attributes to an `img` HTML tag.
 *
 * @since 5.5.0
 *
 * @param string $image         The HTML `img` tag where the attribute should be added.
 * @param string $context       Additional context to pass to the filters.
 * @param int $attachmentId Image attachment ID.
 * @return string Converted 'img' element with 'width' and 'height' attributes added.
 */
    public function wpImgTagAddWidthAndHeightAttr(string $image, string $context, int $attachmentId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `srcset` and `sizes` attributes to an existing `img` HTML tag.
 *
 * @since 5.5.0
 *
 * @param string $image         The HTML `img` tag where the attribute should be added.
 * @param string $context       Additional context to pass to the filters.
 * @param int $attachmentId Image attachment ID.
 * @return string Converted 'img' element with 'loading' attribute added.
 */
    public function wpImgTagAddSrcsetAndSizesAttr(string $image, string $context, int $attachmentId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `loading` attribute to an `iframe` HTML tag.
 *
 * @since 5.7.0
 *
 * @param string $iframe  The HTML `iframe` tag where the attribute should be added.
 * @param string $context Additional context to pass to the filters.
 * @return string Converted `iframe` tag with `loading` attribute added.
 */
    public function wpIframeTagAddLoadingAttr(string $iframe, string $context): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds the Caption shortcode output.
 *
 * Allows a plugin to replace the content that would otherwise be returned. The
 * filter is {@see 'img_caption_shortcode'} and passes an empty string, the attr
 * parameter and the content parameter values.
 *
 * The supported attributes for the shortcode are 'id', 'caption_id', 'align',
 * 'width', 'caption', and 'class'.
 *
 * @since 2.6.0
 * @since 3.9.0 The `class` attribute was added.
 * @since 5.1.0 The `caption_id` attribute was added.
 * @since 5.9.0 The `$content` parameter default value changed from `null` to `''`.
 *
 * @param array $attr {
 *     Attributes of the caption shortcode.
 *
 *     @type string $id         ID of the image and caption container element, i.e. `<figure>` or `<div>`.
 *     @type string $caption_id ID of the caption element, i.e. `<figcaption>` or `<p>`.
 *     @type string $align      Class name that aligns the caption. Default 'alignnone'. Accepts 'alignleft',
 *                              'aligncenter', alignright', 'alignnone'.
 *     @type int    $width      The width of the caption, in pixels.
 *     @type string $caption    The caption text.
 *     @type string $class      Additional class name(s) added to the caption container.
 * }
 * @param string $content Optional. Shortcode content. Default empty string.
 * @return string HTML content to display the caption.
 */
    public function imgCaptionShortcode(array $attr, string $content = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds the Gallery shortcode output.
 *
 * This implements the functionality of the Gallery Shortcode for displaying
 * WordPress images on a post.
 *
 * @since 2.5.0
 * @since 2.8.0 Added the `$attr` parameter to set the shortcode output. New attributes included
 *              such as `size`, `itemtag`, `icontag`, `captiontag`, and columns. Changed markup from
 *              `div` tags to `dl`, `dt` and `dd` tags. Support more than one gallery on the
 *              same page.
 * @since 2.9.0 Added support for `include` and `exclude` to shortcode.
 * @since 3.5.0 Use get_post() instead of global `$post`. Handle mapping of `ids` to `include`
 *              and `orderby`.
 * @since 3.6.0 Added validation for tags used in gallery shortcode. Add orientation information to items.
 * @since 3.7.0 Introduced the `link` attribute.
 * @since 3.9.0 `html5` gallery support, accepting 'itemtag', 'icontag', and 'captiontag' attributes.
 * @since 4.0.0 Removed use of `extract()`.
 * @since 4.1.0 Added attribute to `wp_get_attachment_link()` to output `aria-describedby`.
 * @since 4.2.0 Passed the shortcode instance ID to `post_gallery` and `post_playlist` filters.
 * @since 4.6.0 Standardized filter docs to match documentation standards for PHP.
 * @since 5.1.0 Code cleanup for WPCS 1.0.0 coding standards.
 * @since 5.3.0 Saved progress of intermediate image creation after upload.
 * @since 5.5.0 Ensured that galleries can be output as a list of links in feeds.
 * @since 5.6.0 Replaced order-style PHP type conversion functions with typecasts. Fix logic for
 *              an array of image dimensions.
 *
 * @param array $attr {
 *     Attributes of the gallery shortcode.
 *
 *     @type string       $order      Order of the images in the gallery. Default 'ASC'. Accepts 'ASC', 'DESC'.
 *     @type string       $orderby    The field to use when ordering the images. Default 'menu_order ID'.
 *                                    Accepts any valid SQL ORDERBY statement.
 *     @type int          $id         Post ID.
 *     @type string       $itemtag    HTML tag to use for each image in the gallery.
 *                                    Default 'dl', or 'figure' when the theme registers HTML5 gallery support.
 *     @type string       $icontag    HTML tag to use for each image's icon.
 *                                    Default 'dt', or 'div' when the theme registers HTML5 gallery support.
 *     @type string       $captiontag HTML tag to use for each image's caption.
 *                                    Default 'dd', or 'figcaption' when the theme registers HTML5 gallery support.
 *     @type int          $columns    Number of columns of images to display. Default 3.
 *     @type string|int[] $size       Size of the images to display. Accepts any registered image size name, or an array
 *                                    of width and height values in pixels (in that order). Default 'thumbnail'.
 *     @type string       $ids        A comma-separated list of IDs of attachments to display. Default empty.
 *     @type string       $include    A comma-separated list of IDs of attachments to include. Default empty.
 *     @type string       $exclude    A comma-separated list of IDs of attachments to exclude. Default empty.
 *     @type string       $link       What to link each image to. Default empty (links to the attachment page).
 *                                    Accepts 'file', 'none'.
 * }
 * @return string HTML content to display gallery.
 */
    public function galleryShortcode(array $attr): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the templates used by playlists.
 *
 * @since 3.9.0
 */
    public function wpUnderscorePlaylistTemplates(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs and enqueues default scripts and styles for playlists.
 *
 * @since 3.9.0
 *
 * @param string $type Type of playlist. Accepts 'audio' or 'video'.
 */
    public function wpPlaylistScripts(string $type): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds the Playlist shortcode output.
 *
 * This implements the functionality of the playlist shortcode for displaying
 * a collection of WordPress audio or video files in a post.
 *
 * @since 3.9.0
 *
 * @global int $content_width
 *
 * @param array $attr {
 *     Array of default playlist attributes.
 *
 *     @type string  $type         Type of playlist to display. Accepts 'audio' or 'video'. Default 'audio'.
 *     @type string  $order        Designates ascending or descending order of items in the playlist.
 *                                 Accepts 'ASC', 'DESC'. Default 'ASC'.
 *     @type string  $orderby      Any column, or columns, to sort the playlist. If $ids are
 *                                 passed, this defaults to the order of the $ids array ('post__in').
 *                                 Otherwise default is 'menu_order ID'.
 *     @type int     $id           If an explicit $ids array is not present, this parameter
 *                                 will determine which attachments are used for the playlist.
 *                                 Default is the current post ID.
 *     @type array   $ids          Create a playlist out of these explicit attachment IDs. If empty,
 *                                 a playlist will be created from all $type attachments of $id.
 *                                 Default empty.
 *     @type array   $exclude      List of specific attachment IDs to exclude from the playlist. Default empty.
 *     @type string  $style        Playlist style to use. Accepts 'light' or 'dark'. Default 'light'.
 *     @type bool    $tracklist    Whether to show or hide the playlist. Default true.
 *     @type bool    $tracknumbers Whether to show or hide the numbers next to entries in the playlist. Default true.
 *     @type bool    $images       Show or hide the video or audio thumbnail (Featured Image/post
 *                                 thumbnail). Default true.
 *     @type bool    $artists      Whether to show or hide artist name in the playlist. Default true.
 * }
 *
 * @return string Playlist output. Empty string if the passed type is unsupported.
 */
    public function wpPlaylistShortcode(array $attr): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Provides a No-JS Flash fallback as a last resort for audio / video.
 *
 * @since 3.6.0
 *
 * @param string $url The media element URL.
 * @return string Fallback HTML.
 */
    public function wpMediaelementFallback(string $url): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a filtered list of supported audio formats.
 *
 * @since 3.6.0
 *
 * @return string[] Supported audio formats.
 */
    public function wpGetAudioExtensions(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns useful keys to use to lookup data from an attachment's stored metadata.
 *
 * @since 3.9.0
 *
 * @param \WP_Post $attachment The current attachment, provided for context.
 * @param string $context    Optional. The context. Accepts 'edit', 'display'. Default 'display'.
 * @return string[] Key/value pairs of field keys to labels.
 */
    public function wpGetAttachmentId3Keys(\WP_Post $attachment, string $context = 'display'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds the Audio shortcode output.
 *
 * This implements the functionality of the Audio Shortcode for displaying
 * WordPress mp3s in a post.
 *
 * @since 3.6.0
 *
 * @param array $attr {
 *     Attributes of the audio shortcode.
 *
 *     @type string $src      URL to the source of the audio file. Default empty.
 *     @type string $loop     The 'loop' attribute for the `<audio>` element. Default empty.
 *     @type string $autoplay The 'autoplay' attribute for the `<audio>` element. Default empty.
 *     @type string $preload  The 'preload' attribute for the `<audio>` element. Default 'none'.
 *     @type string $class    The 'class' attribute for the `<audio>` element. Default 'wp-audio-shortcode'.
 *     @type string $style    The 'style' attribute for the `<audio>` element. Default 'width: 100%;'.
 * }
 * @param string $content Shortcode content.
 * @return string|void HTML content to display audio.
 */
    public function wpAudioShortcode(array $attr, string $content = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a filtered list of supported video formats.
 *
 * @since 3.6.0
 *
 * @return string[] List of supported video formats.
 */
    public function wpGetVideoExtensions(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds the Video shortcode output.
 *
 * This implements the functionality of the Video Shortcode for displaying
 * WordPress mp4s in a post.
 *
 * @since 3.6.0
 *
 * @global int $content_width
 *
 * @param array $attr {
 *     Attributes of the shortcode.
 *
 *     @type string $src      URL to the source of the video file. Default empty.
 *     @type int    $height   Height of the video embed in pixels. Default 360.
 *     @type int    $width    Width of the video embed in pixels. Default $content_width or 640.
 *     @type string $poster   The 'poster' attribute for the `<video>` element. Default empty.
 *     @type string $loop     The 'loop' attribute for the `<video>` element. Default empty.
 *     @type string $autoplay The 'autoplay' attribute for the `<video>` element. Default empty.
 *     @type string $muted    The 'muted' attribute for the `<video>` element. Default false.
 *     @type string $preload  The 'preload' attribute for the `<video>` element.
 *                            Default 'metadata'.
 *     @type string $class    The 'class' attribute for the `<video>` element.
 *                            Default 'wp-video-shortcode'.
 * }
 * @param string $content Shortcode content.
 * @return string|void HTML content to display video.
 */
    public function wpVideoShortcode(array $attr, string $content = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the previous image link that has the same post parent.
 *
 * @since 5.8.0
 *
 * @see get_adjacent_image_link()
 *
 * @param string|int[] $size Optional. Image size. Accepts any registered image size name, or an array
 *                           of width and height values in pixels (in that order). Default 'thumbnail'.
 * @param string|false $text Optional. Link text. Default false.
 * @return string Markup for previous image link.
 */
    public function getPreviousImageLink(string|array $size = 'thumbnail', string|false $text = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays previous image link that has the same post parent.
 *
 * @since 2.5.0
 *
 * @param string|int[] $size Optional. Image size. Accepts any registered image size name, or an array
 *                           of width and height values in pixels (in that order). Default 'thumbnail'.
 * @param string|false $text Optional. Link text. Default false.
 */
    public function previousImageLink(string|array $size = 'thumbnail', string|false $text = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the next image link that has the same post parent.
 *
 * @since 5.8.0
 *
 * @see get_adjacent_image_link()
 *
 * @param string|int[] $size Optional. Image size. Accepts any registered image size name, or an array
 *                           of width and height values in pixels (in that order). Default 'thumbnail'.
 * @param string|false $text Optional. Link text. Default false.
 * @return string Markup for next image link.
 */
    public function getNextImageLink(string|array $size = 'thumbnail', string|false $text = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays next image link that has the same post parent.
 *
 * @since 2.5.0
 *
 * @param string|int[] $size Optional. Image size. Accepts any registered image size name, or an array
 *                           of width and height values in pixels (in that order). Default 'thumbnail'.
 * @param string|false $text Optional. Link text. Default false.
 */
    public function nextImageLink(string|array $size = 'thumbnail', string|false $text = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the next or previous image link that has the same post parent.
 *
 * Retrieves the current attachment object from the $post global.
 *
 * @since 5.8.0
 *
 * @param bool $prev Optional. Whether to display the next (false) or previous (true) link. Default true.
 * @param string|int[] $size Optional. Image size. Accepts any registered image size name, or an array
 *                           of width and height values in pixels (in that order). Default 'thumbnail'.
 * @param bool $text Optional. Link text. Default false.
 * @return string Markup for image link.
 */
    public function getAdjacentImageLink(bool $prev = true, string|array $size = 'thumbnail', bool $text = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays next or previous image link that has the same post parent.
 *
 * Retrieves the current attachment object from the $post global.
 *
 * @since 2.5.0
 *
 * @param bool $prev Optional. Whether to display the next (false) or previous (true) link. Default true.
 * @param string|int[] $size Optional. Image size. Accepts any registered image size name, or an array
 *                           of width and height values in pixels (in that order). Default 'thumbnail'.
 * @param bool $text Optional. Link text. Default false.
 */
    public function adjacentImageLink(bool $prev = true, string|array $size = 'thumbnail', bool $text = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves taxonomies attached to given the attachment.
 *
 * @since 2.5.0
 * @since 4.7.0 Introduced the `$output` parameter.
 *
 * @param int|array|object $attachment Attachment ID, data array, or data object.
 * @param string $output     Output type. 'names' to return an array of taxonomy names,
 *                                     or 'objects' to return an array of taxonomy objects.
 *                                     Default is 'names'.
 * @return string[]|WP_Taxonomy[] List of taxonomies or taxonomy names. Empty array on failure.
 */
    public function getAttachmentTaxonomies(int|array|object $attachment, string $output = 'names'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all of the taxonomies that are registered for attachments.
 *
 * Handles mime-type-specific taxonomies such as attachment:image and attachment:video.
 *
 * @since 3.5.0
 *
 * @see get_taxonomies()
 *
 * @param string $output Optional. The type of taxonomy output to return. Accepts 'names' or 'objects'.
 *                       Default 'names'.
 * @return string[]|WP_Taxonomy[] Array of names or objects of registered taxonomies for attachments.
 */
    public function getTaxonomiesForAttachments(string $output = 'names'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the value is an acceptable type for GD image functions.
 *
 * In PHP 8.0, the GD extension uses GdImage objects for its data structures.
 * This function checks if the passed value is either a GdImage object instance
 * or a resource of type `gd`. Any other type will return false.
 *
 * @since 5.6.0
 *
 * @param \resource|\GdImage|false $image A value to check the type for.
 * @return bool True if `$image` is either a GD image resource or a GdImage instance,
 *              false otherwise.
 */
    public function isGdImage(\resource|\GdImage|false $image): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates a new GD image resource with transparency support.
 *
 * @todo Deprecate if possible.
 *
 * @since 2.9.0
 *
 * @param int $width  Image width in pixels.
 * @param int $height Image height in pixels.
 * @return \resource|\GdImage|false The GD image resource or GdImage instance on success.
 *                                False on failure.
 */
    public function wpImagecreatetruecolor(int $width, int $height): \resource|\GdImage|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Based on a supplied width/height example, returns the biggest possible dimensions based on the max width/height.
 *
 * @since 2.9.0
 *
 * @see wp_constrain_dimensions()
 *
 * @param int $exampleWidth  The width of an example embed.
 * @param int $exampleHeight The height of an example embed.
 * @param int $maxWidth      The maximum allowed width.
 * @param int $maxHeight     The maximum allowed height.
 * @return int[] {
 *     An array of maximum width and height values.
 *
 *     @type int $0 The maximum width in pixels.
 *     @type int $1 The maximum height in pixels.
 * }
 */
    public function wpExpandDimensions(int $exampleWidth, int $exampleHeight, int $maxWidth, int $maxHeight): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines the maximum upload size allowed in php.ini.
 *
 * @since 2.5.0
 *
 * @return int Allowed upload size.
 */
    public function wpMaxUploadSize(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a WP_Image_Editor instance and loads file into it.
 *
 * @since 3.5.0
 *
 * @param string $path Path to the file to load.
 * @param array $args Optional. Additional arguments for retrieving the image editor.
 *                     Default empty array.
 * @return \WP_Image_Editor|\WP_Error The WP_Image_Editor object on success,
 *                                  a WP_Error object otherwise.
 */
    public function wpGetImageEditor(string $path, array $args = []): \WP_Image_Editor|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Tests whether there is an editor that supports a given mime type or methods.
 *
 * @since 3.5.0
 *
 * @param string|array $args Optional. Array of arguments to retrieve the image editor supports.
 *                           Default empty array.
 * @return bool True if an eligible editor is found; false otherwise.
 */
    public function wpImageEditorSupports(string|array $args = []): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints default Plupload arguments.
 *
 * @since 3.4.0
 */
    public function wpPluploadDefaultSettings(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prepares an attachment post object for JS, where it is expected
 * to be JSON-encoded and fit into an Attachment model.
 *
 * @since 3.5.0
 *
 * @param int|\WP_Post $attachment Attachment ID or object.
 * @return array|void {
 *     Array of attachment details, or void if the parameter does not correspond to an attachment.
 *
 *     @type string $alt                   Alt text of the attachment.
 *     @type string $author                ID of the attachment author, as a string.
 *     @type string $authorName            Name of the attachment author.
 *     @type string $caption               Caption for the attachment.
 *     @type array  $compat                Containing item and meta.
 *     @type string $context               Context, whether it's used as the site icon for example.
 *     @type int    $date                  Uploaded date, timestamp in milliseconds.
 *     @type string $dateFormatted         Formatted date (e.g. June 29, 2018).
 *     @type string $description           Description of the attachment.
 *     @type string $editLink              URL to the edit page for the attachment.
 *     @type string $filename              File name of the attachment.
 *     @type string $filesizeHumanReadable Filesize of the attachment in human readable format (e.g. 1 MB).
 *     @type int    $filesizeInBytes       Filesize of the attachment in bytes.
 *     @type int    $height                If the attachment is an image, represents the height of the image in pixels.
 *     @type string $icon                  Icon URL of the attachment (e.g. /wp-includes/images/media/archive.png).
 *     @type int    $id                    ID of the attachment.
 *     @type string $link                  URL to the attachment.
 *     @type int    $menuOrder             Menu order of the attachment post.
 *     @type array  $meta                  Meta data for the attachment.
 *     @type string $mime                  Mime type of the attachment (e.g. image/jpeg or application/zip).
 *     @type int    $modified              Last modified, timestamp in milliseconds.
 *     @type string $name                  Name, same as title of the attachment.
 *     @type array  $nonces                Nonces for update, delete and edit.
 *     @type string $orientation           If the attachment is an image, represents the image orientation
 *                                         (landscape or portrait).
 *     @type array  $sizes                 If the attachment is an image, contains an array of arrays
 *                                         for the images sizes: thumbnail, medium, large, and full.
 *     @type string $status                Post status of the attachment (usually 'inherit').
 *     @type string $subtype               Mime subtype of the attachment (usually the last part, e.g. jpeg or zip).
 *     @type string $title                 Title of the attachment (usually slugified file name without the extension).
 *     @type string $type                  Type of the attachment (usually first part of the mime type, e.g. image).
 *     @type int    $uploadedTo            Parent post to which the attachment was uploaded.
 *     @type string $uploadedToLink        URL to the edit page of the parent post of the attachment.
 *     @type string $uploadedToTitle       Post title of the parent of the attachment.
 *     @type string $url                   Direct URL to the attachment file (from wp-content).
 *     @type int    $width                 If the attachment is an image, represents the width of the image in pixels.
 * }
 *
 */
    public function wpPrepareAttachmentForJs(int|\WP_Post $attachment): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues all scripts, styles, settings, and templates necessary to use
 * all media JS APIs.
 *
 * @since 3.5.0
 *
 * @global int       $content_width
 * @global wpdb      $wpdb          WordPress database abstraction object.
 * @global WP_Locale $wp_locale     WordPress date and time locale object.
 *
 * @param array $args {
 *     Arguments for enqueuing media scripts.
 *
 *     @type int|WP_Post $post Post ID or post object.
 * }
 */
    public function wpEnqueueMedia(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves media attached to the passed post.
 *
 * @since 3.6.0
 *
 * @param string $type Mime type.
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return WP_Post[] Array of media attached to the given post.
 */
    public function getAttachedMedia(string $type, int|\WP_Post $post = 0): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks the HTML content for an audio, video, object, embed, or iframe tags.
 *
 * @since 3.6.0
 *
 * @param string $content A string of HTML which might contain media elements.
 * @param string[] $types   An array of media types: 'audio', 'video', 'object', 'embed', or 'iframe'.
 * @return string[] Array of found HTML media elements.
 */
    public function getMediaEmbeddedInContent(string $content, array $types = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves galleries from the passed post's content.
 *
 * @since 3.6.0
 *
 * @param int|\WP_Post $post Post ID or object.
 * @param bool $html Optional. Whether to return HTML or data in the array. Default true.
 * @return array A list of arrays, each containing gallery data and srcs parsed
 *               from the expanded shortcode.
 */
    public function getPostGalleries(int|\WP_Post $post, bool $html = true): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks a specified post's content for gallery and, if present, return the first
 *
 * @since 3.6.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @param bool $html Optional. Whether to return HTML or data. Default is true.
 * @return string|array Gallery data and srcs parsed from the expanded shortcode.
 */
    public function getPostGallery(int|\WP_Post $post = 0, bool $html = true): string|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the image srcs from galleries from a post's content, if present.
 *
 * @since 3.6.0
 *
 * @see get_post_galleries()
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.
 * @return array A list of lists, each containing image srcs parsed.
 *               from an expanded shortcode
 */
    public function getPostGalleriesImages(int|\WP_Post $post = 0): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks a post's content for galleries and return the image srcs for the first found gallery.
 *
 * @since 3.6.0
 *
 * @see get_post_gallery()
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.
 * @return string[] A list of a gallery's image srcs in order.
 */
    public function getPostGalleryImages(int|\WP_Post $post = 0): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Maybe attempts to generate attachment metadata, if missing.
 *
 * @since 3.9.0
 *
 * @param \WP_Post $attachment Attachment object.
 */
    public function wpMaybeGenerateAttachmentMetadata(\WP_Post $attachment): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Tries to convert an attachment URL into a post ID.
 *
 * @since 4.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $url The URL to resolve.
 * @return int The found post ID, or 0 on failure.
 */
    public function attachmentUrlToPostid(string $url): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the URLs for CSS files used in an iframe-sandbox'd TinyMCE media view.
 *
 * @since 4.0.0
 *
 * @return string[] The relevant CSS file URLs.
 */
    public function wpviewMediaSandboxStyles(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the personal data exporter for media.
 *
 * @param array[] $exporters An array of personal data exporters, keyed by their ID.
 * @return array[] Updated array of personal data exporters.
 */
    public function wpRegisterMediaPersonalDataExporter(array $exporters): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds and exports attachments associated with an email address.
 *
 * @since 4.9.6
 *
 * @param string $emailAddress The attachment owner email address.
 * @param int $page          Attachment page number.
 * @return array {
 *     An array of personal data.
 *
 *     @type array[] $data An array of personal data arrays.
 *     @type bool    $done Whether the exporter is finished.
 * }
 */
    public function wpMediaPersonalDataExporter(string $emailAddress, int $page = 1): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Callback to enable showing of the user error when uploading .heic images.
 *
 * @since 5.5.0
 *
 * @param array[] $pluploadSettings The settings for Plupload.js.
 * @return array[] Modified settings for Plupload.js.
 */
    public function wpShowHeicUploadError(array $pluploadSettings): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Allows PHP's getimagesize() to be debuggable when necessary.
 *
 * @since 5.7.0
 * @since 5.8.0 Added support for WebP images.
 * @since 6.5.0 Added support for AVIF images.
 *
 * @param string $filename   The file path.
 * @param array $imageInfo Optional. Extended image information (passed by reference).
 * @return array|false Array of image information or false on failure.
 */
    public function wpGetimagesize(string $filename, array $imageInfo = null): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Extracts meta information about an AVIF file: width, height, bit depth, and number of channels.
 *
 * @since 6.5.0
 *
 * @param string $filename Path to an AVIF file.
 * @return array {
 *     An array of AVIF image information.
 *
 *     @type int|false $width        Image width on success, false on failure.
 *     @type int|false $height       Image height on success, false on failure.
 *     @type int|false $bit_depth    Image bit depth on success, false on failure.
 *     @type int|false $num_channels Image number of channels on success, false on failure.
 * }
 */
    public function wpGetAvifInfo(string $filename): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Extracts meta information about a WebP file: width, height, and type.
 *
 * @since 5.8.0
 *
 * @param string $filename Path to a WebP file.
 * @return array {
 *     An array of WebP image information.
 *
 *     @type int|false    $width  Image width on success, false on failure.
 *     @type int|false    $height Image height on success, false on failure.
 *     @type string|false $type   The WebP type: one of 'lossy', 'lossless' or 'animated-alpha'.
 *                                False on failure.
 * }
 */
    public function wpGetWebpInfo(string $filename): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets loading optimization attributes.
 *
 * This function returns an array of attributes that should be merged into the given attributes array to optimize
 * loading performance. Potential attributes returned by this function are:
 * - `loading` attribute with a value of "lazy"
 * - `fetchpriority` attribute with a value of "high"
 * - `decoding` attribute with a value of "async"
 *
 * If any of these attributes are already present in the given attributes, they will not be modified. Note that no
 * element should have both `loading="lazy"` and `fetchpriority="high"`, so the function will trigger a warning in case
 * both attributes are present with those values.
 *
 * @since 6.3.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string $tagName The tag name.
 * @param array $attr     Array of the attributes for the tag.
 * @param string $context  Context for the element for which the loading optimization attribute is requested.
 * @return array Loading optimization attributes.
 */
    public function wpGetLoadingOptimizationAttributes(string $tagName, array $attr, string $context): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the threshold for how many of the first content media elements to not lazy-load.
 *
 * This function runs the {@see 'wp_omit_loading_attr_threshold'} filter, which uses a default threshold value of 3.
 * The filter is only run once per page load, unless the `$force` parameter is used.
 *
 * @since 5.9.0
 *
 * @param bool $force Optional. If set to true, the filter will be (re-)applied even if it already has been before.
 *                    Default false.
 * @return int The number of content media elements to not lazy-load.
 */
    public function wpOmitLoadingAttrThreshold(bool $force = false): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds metadata for the specified object.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $metaType  Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                           or any other object type with an associated meta table.
 * @param int $objectId  ID of the object metadata is for.
 * @param string $metaKey   Metadata key.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param bool $unique     Optional. Whether the specified metadata key should be unique for the object.
 *                           If true, and the object already has a value for the specified metadata key,
 *                           no change will be made. Default false.
 * @return int|false The meta ID on success, false on failure.
 */
    public function addMetadata(string $metaType, int $objectId, string $metaKey, mixed $metaValue, bool $unique = false): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates metadata for the specified object. If no value already exists for the specified object
 * ID and metadata key, the metadata will be added.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $metaType  Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                           or any other object type with an associated meta table.
 * @param int $objectId  ID of the object metadata is for.
 * @param string $metaKey   Metadata key.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param mixed $prevValue Optional. Previous value to check before updating.
 *                           If specified, only update existing metadata entries with
 *                           this value. Otherwise, update all entries. Default empty string.
 * @return int|bool The new meta field ID if a field with the given key didn't exist
 *                  and was therefore added, true on successful update,
 *                  false on failure or if the value passed to the function
 *                  is the same as the one that is already in the database.
 */
    public function updateMetadata(string $metaType, int $objectId, string $metaKey, mixed $metaValue, mixed $prevValue = ''): int|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes metadata for the specified object.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $metaType  Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                           or any other object type with an associated meta table.
 * @param int $objectId  ID of the object metadata is for.
 * @param string $metaKey   Metadata key.
 * @param mixed $metaValue Optional. Metadata value. Must be serializable if non-scalar.
 *                           If specified, only delete metadata entries with this value.
 *                           Otherwise, delete all entries with the specified meta_key.
 *                           Pass `null`, `false`, or an empty string to skip this check.
 *                           (For backward compatibility, it is not possible to pass an empty string
 *                           to delete those entries with an empty string for a value.)
 *                           Default empty string.
 * @param bool $deleteAll Optional. If true, delete matching metadata entries for all objects,
 *                           ignoring the specified object_id. Otherwise, only delete
 *                           matching metadata entries for the specified object_id. Default false.
 * @return bool True on successful delete, false on failure.
 */
    public function deleteMetadata(string $metaType, int $objectId, string $metaKey, mixed $metaValue = '', bool $deleteAll = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the value of a metadata field for the specified object type and ID.
 *
 * If the meta field exists, a single value is returned if `$single` is true,
 * or an array of values if it's false.
 *
 * If the meta field does not exist, the result depends on get_metadata_default().
 * By default, an empty string is returned if `$single` is true, or an empty array
 * if it's false.
 *
 * @since 2.9.0
 *
 * @see get_metadata_raw()
 * @see get_metadata_default()
 *
 * @param string $metaType Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int $objectId ID of the object metadata is for.
 * @param string $metaKey  Optional. Metadata key. If not specified, retrieve all metadata for
 *                          the specified object. Default empty string.
 * @param bool $single    Optional. If true, return only the first value of the specified `$meta_key`.
 *                          This parameter has no effect if `$meta_key` is not specified. Default false.
 * @return mixed An array of values if `$single` is false.
 *               The value of the meta field if `$single` is true.
 *               False for an invalid `$object_id` (non-numeric, zero, or negative value),
 *               or if `$meta_type` is not specified.
 *               An empty string if a valid but non-existing object ID is passed.
 */
    public function getMetadata(string $metaType, int $objectId, string $metaKey = '', bool $single = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves raw metadata value for the specified object.
 *
 * @since 5.5.0
 *
 * @param string $metaType Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int $objectId ID of the object metadata is for.
 * @param string $metaKey  Optional. Metadata key. If not specified, retrieve all metadata for
 *                          the specified object. Default empty string.
 * @param bool $single    Optional. If true, return only the first value of the specified `$meta_key`.
 *                          This parameter has no effect if `$meta_key` is not specified. Default false.
 * @return mixed An array of values if `$single` is false.
 *               The value of the meta field if `$single` is true.
 *               False for an invalid `$object_id` (non-numeric, zero, or negative value),
 *               or if `$meta_type` is not specified.
 *               Null if the value does not exist.
 */
    public function getMetadataRaw(string $metaType, int $objectId, string $metaKey = '', bool $single = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves default metadata value for the specified meta key and object.
 *
 * By default, an empty string is returned if `$single` is true, or an empty array
 * if it's false.
 *
 * @since 5.5.0
 *
 * @param string $metaType Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int $objectId ID of the object metadata is for.
 * @param string $metaKey  Metadata key.
 * @param bool $single    Optional. If true, return only the first value of the specified `$meta_key`.
 *                          This parameter has no effect if `$meta_key` is not specified. Default false.
 * @return mixed An array of default values if `$single` is false.
 *               The default value of the meta field if `$single` is true.
 */
    public function getMetadataDefault(string $metaType, int $objectId, string $metaKey, bool $single = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if a meta field with the given key exists for the given object ID.
 *
 * @since 3.3.0
 *
 * @param string $metaType Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int $objectId ID of the object metadata is for.
 * @param string $metaKey  Metadata key.
 * @return bool Whether a meta field with the given key exists.
 */
    public function metadataExists(string $metaType, int $objectId, string $metaKey): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves metadata by meta ID.
 *
 * @since 3.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $metaType Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int $metaId   ID for a specific meta row.
 * @return \stdClass|false {
 *     Metadata object, or boolean `false` if the metadata doesn't exist.
 *
 *     @type string $meta_key   The meta key.
 *     @type mixed  $meta_value The unserialized meta value.
 *     @type string $meta_id    Optional. The meta ID when the meta type is any value except 'user'.
 *     @type string $umeta_id   Optional. The meta ID when the meta type is 'user'.
 *     @type string $post_id    Optional. The object ID when the meta type is 'post'.
 *     @type string $comment_id Optional. The object ID when the meta type is 'comment'.
 *     @type string $term_id    Optional. The object ID when the meta type is 'term'.
 *     @type string $user_id    Optional. The object ID when the meta type is 'user'.
 * }
 */
    public function getMetadataByMid(string $metaType, int $metaId): \stdClass|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates metadata by meta ID.
 *
 * @since 3.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $metaType  Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                                 or any other object type with an associated meta table.
 * @param int $metaId    ID for a specific meta row.
 * @param string $metaValue Metadata value. Must be serializable if non-scalar.
 * @param string|false $metaKey   Optional. You can provide a meta key to update it. Default false.
 * @return bool True on successful update, false on failure.
 */
    public function updateMetadataByMid(string $metaType, int $metaId, string $metaValue, string|false $metaKey = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes metadata by meta ID.
 *
 * @since 3.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $metaType Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @param int $metaId   ID for a specific meta row.
 * @return bool True on successful delete, false on failure.
 */
    public function deleteMetadataByMid(string $metaType, int $metaId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the metadata cache for the specified objects.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $metaType  Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                                 or any other object type with an associated meta table.
 * @param string|int[] $objectIds Array or comma delimited list of object IDs to update cache for.
 * @return array|false Metadata cache for the specified objects, or false on failure.
 */
    public function updateMetaCache(string $metaType, string|array $objectIds): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the queue for lazy-loading metadata.
 *
 * @since 4.5.0
 *
 * @return \WP_Metadata_Lazyloader Metadata lazyloader queue.
 */
    public function wpMetadataLazyloader(): \WP_Metadata_Lazyloader
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Given a meta query, generates SQL clauses to be appended to a main query.
 *
 * @since 3.2.0
 *
 * @see WP_Meta_Query
 *
 * @param array $metaQuery        A meta query.
 * @param string $type              Type of meta.
 * @param string $primaryTable     Primary database table name.
 * @param string $primaryIdColumn Primary ID column name.
 * @param object $context           Optional. The main query object. Default null.
 * @return string[]|false {
 *     Array containing JOIN and WHERE SQL clauses to append to the main query,
 *     or false if no table exists for the requested meta type.
 *
 *     @type string $join  SQL fragment to append to the main JOIN clause.
 *     @type string $where SQL fragment to append to the main WHERE clause.
 * }
 */
    public function getMetaSql(array $metaQuery, string $type, string $primaryTable, string $primaryIdColumn, object $context = null): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a meta key is considered protected.
 *
 * @since 3.1.3
 *
 * @param string $metaKey  Metadata key.
 * @param string $metaType Optional. Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table. Default empty string.
 * @return bool Whether the meta key is considered protected.
 */
    public function isProtectedMeta(string $metaKey, string $metaType = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes meta value.
 *
 * @since 3.1.3
 * @since 4.9.8 The `$object_subtype` parameter was added.
 *
 * @param string $metaKey       Metadata key.
 * @param mixed $metaValue     Metadata value to sanitize.
 * @param string $objectType    Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                               or any other object type with an associated meta table.
 * @param string $objectSubtype Optional. The subtype of the object type. Default empty string.
 * @return mixed Sanitized $meta_value.
 */
    public function sanitizeMeta(string $metaKey, mixed $metaValue, string $objectType, string $objectSubtype = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a meta key.
 *
 * It is recommended to register meta keys for a specific combination of object type and object subtype. If passing
 * an object subtype is omitted, the meta key will be registered for the entire object type, however it can be partly
 * overridden in case a more specific meta key of the same name exists for the same object type and a subtype.
 *
 * If an object type does not support any subtypes, such as users or comments, you should commonly call this function
 * without passing a subtype.
 *
 * @since 3.3.0
 * @since 4.6.0 {@link https://core.trac.wordpress.org/ticket/35658 Modified
 *              to support an array of data to attach to registered meta keys}. Previous arguments for
 *              `$sanitize_callback` and `$auth_callback` have been folded into this array.
 * @since 4.9.8 The `$object_subtype` argument was added to the arguments array.
 * @since 5.3.0 Valid meta types expanded to include "array" and "object".
 * @since 5.5.0 The `$default` argument was added to the arguments array.
 * @since 6.4.0 The `$revisions_enabled` argument was added to the arguments array.
 *
 * @param string $objectType Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                                  or any other object type with an associated meta table.
 * @param string $metaKey    Meta key to register.
 * @param array $args {
 *     Data used to describe the meta key when registered.
 *
 *     @type string     $object_subtype    A subtype; e.g. if the object type is "post", the post type. If left empty,
 *                                         the meta key will be registered on the entire object type. Default empty.
 *     @type string     $type              The type of data associated with this meta key.
 *                                         Valid values are 'string', 'boolean', 'integer', 'number', 'array', and 'object'.
 *     @type string     $description       A description of the data attached to this meta key.
 *     @type bool       $single            Whether the meta key has one value per object, or an array of values per object.
 *     @type mixed      $default           The default value returned from get_metadata() if no value has been set yet.
 *                                         When using a non-single meta key, the default value is for the first entry.
 *                                         In other words, when calling get_metadata() with `$single` set to `false`,
 *                                         the default value given here will be wrapped in an array.
 *     @type callable   $sanitize_callback A function or method to call when sanitizing `$meta_key` data.
 *     @type callable   $auth_callback     Optional. A function or method to call when performing edit_post_meta,
 *                                         add_post_meta, and delete_post_meta capability checks.
 *     @type bool|array $show_in_rest      Whether data associated with this meta key can be considered public and
 *                                         should be accessible via the REST API. A custom post type must also declare
 *                                         support for custom fields for registered meta to be accessible via REST.
 *                                         When registering complex meta values this argument may optionally be an
 *                                         array with 'schema' or 'prepare_callback' keys instead of a boolean.
 *     @type bool       $revisions_enabled Whether to enable revisions support for this meta_key. Can only be used when the
 *                                         object type is 'post'.
 * }
 * @param string|array $deprecated Deprecated. Use `$args` instead.
 * @return bool True if the meta key was successfully registered in the global array, false if not.
 *              Registering a meta key with distinct sanitize and auth callbacks will fire those callbacks,
 *              but will not add to the global registry.
 */
    public function registerMeta(string $objectType, string $metaKey, array $args, string|array $deprecated = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters into default_{$object_type}_metadata and adds in default value.
 *
 * @since 5.5.0
 *
 * @param mixed $value     Current value passed to filter.
 * @param int $objectId ID of the object metadata is for.
 * @param string $metaKey  Metadata key.
 * @param bool $single    If true, return only the first value of the specified `$meta_key`.
 *                          This parameter has no effect if `$meta_key` is not specified.
 * @param string $metaType Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                          or any other object type with an associated meta table.
 * @return mixed An array of default values if `$single` is false.
 *               The default value of the meta field if `$single` is true.
 */
    public function filterDefaultMetadata(mixed $value, int $objectId, string $metaKey, bool $single, string $metaType): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if a meta key is registered.
 *
 * @since 4.6.0
 * @since 4.9.8 The `$object_subtype` parameter was added.
 *
 * @param string $objectType    Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                               or any other object type with an associated meta table.
 * @param string $metaKey       Metadata key.
 * @param string $objectSubtype Optional. The subtype of the object type. Default empty string.
 * @return bool True if the meta key is registered to the object type and, if provided,
 *              the object subtype. False if not.
 */
    public function registeredMetaKeyExists(string $objectType, string $metaKey, string $objectSubtype = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a meta key from the list of registered keys.
 *
 * @since 4.6.0
 * @since 4.9.8 The `$object_subtype` parameter was added.
 *
 * @param string $objectType    Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                               or any other object type with an associated meta table.
 * @param string $metaKey       Metadata key.
 * @param string $objectSubtype Optional. The subtype of the object type. Default empty string.
 * @return bool True if successful. False if the meta key was not registered.
 */
    public function unregisterMetaKey(string $objectType, string $metaKey, string $objectSubtype = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of registered metadata args for an object type, keyed by their meta keys.
 *
 * @since 4.6.0
 * @since 4.9.8 The `$object_subtype` parameter was added.
 *
 * @param string $objectType    Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                               or any other object type with an associated meta table.
 * @param string $objectSubtype Optional. The subtype of the object type. Default empty string.
 * @return array[] List of registered metadata args, keyed by their meta keys.
 */
    public function getRegisteredMetaKeys(string $objectType, string $objectSubtype = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves registered metadata for a specified object.
 *
 * The results include both meta that is registered specifically for the
 * object's subtype and meta that is registered for the entire object type.
 *
 * @since 4.6.0
 *
 * @param string $objectType Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                            or any other object type with an associated meta table.
 * @param int $objectId   ID of the object the metadata is for.
 * @param string $metaKey    Optional. Registered metadata key. If not specified, retrieve all registered
 *                            metadata for the specified object.
 * @return mixed A single value or array of values for a key if specified. An array of all registered keys
 *               and values for an object ID if not. False if a given $meta_key is not registered.
 */
    public function getRegisteredMetadata(string $objectType, int $objectId, string $metaKey = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the object subtype for a given object ID of a specific type.
 *
 * @since 4.9.8
 *
 * @param string $objectType Type of object metadata is for. Accepts 'post', 'comment', 'term', 'user',
 *                            or any other object type with an associated meta table.
 * @param int $objectId   ID of the object to retrieve its subtype.
 * @return string The object subtype or an empty string if unspecified subtype.
 */
    public function getObjectSubtype(string $objectType, int $objectId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the last_updated field for the current site.
 *
 * @since MU (3.0.0)
 */
    public function wpmuUpdateBlogsDate(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a full site URL, given a site ID.
 *
 * @since MU (3.0.0)
 *
 * @param int $blogId Site ID.
 * @return string Full site URL if found. Empty string if not.
 */
    public function getBlogaddressById(int $blogId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a full site URL, given a site name.
 *
 * @since MU (3.0.0)
 *
 * @param string $blogname Name of the subdomain or directory.
 * @return string
 */
    public function getBlogaddressByName(string $blogname): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a site's ID given its (subdomain or directory) slug.
 *
 * @since MU (3.0.0)
 * @since 4.7.0 Converted to use `get_sites()`.
 *
 * @param string $slug A site's slug.
 * @return int|null The site ID, or null if no site is found for the given slug.
 */
    public function getIdFromBlogname(string $slug): int|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the details for a blog from the blogs table and blog options.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|string|array $fields  Optional. A blog ID, a blog slug, or an array of fields to query against.
 *                                  Defaults to the current blog ID.
 * @param bool $getAll Whether to retrieve all details or only the details in the blogs table.
 *                                  Default is true.
 * @return \WP_Site|false Blog details on success. False on failure.
 */
    public function getBlogDetails(int|string|array $fields = null, bool $getAll = true): \WP_Site|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Clears the blog details cache.
 *
 * @since MU (3.0.0)
 *
 * @param int $blogId Optional. Blog ID. Defaults to current blog.
 */
    public function refreshBlogDetails(int $blogId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the details for a blog and the blogs table for a given blog ID.
 *
 * @since MU (3.0.0)
 *
 * @param int $blogId Blog ID.
 * @param array $details Array of details keyed by blogs table field names.
 * @return bool True if update succeeds, false otherwise.
 */
    public function updateBlogDetails(int $blogId, array $details = []): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleans the site details cache for a site.
 *
 * @since 4.7.4
 *
 * @param int $siteId Optional. Site ID. Default is the current site ID.
 */
    public function cleanSiteDetailsCache(int $siteId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves option value for a given blog id based on name of option.
 *
 * If the option does not exist or does not have a value, then the return value
 * will be false. This is useful to check whether you need to install an option
 * and is commonly used during installation of plugin options and to test
 * whether upgrading is required.
 *
 * If the option was serialized then it will be unserialized when it is returned.
 *
 * @since MU (3.0.0)
 *
 * @param int $id            A blog ID. Can be null to refer to the current blog.
 * @param string $option        Name of option to retrieve. Expected to not be SQL-escaped.
 * @param mixed $defaultValue Optional. Default value to return if the option does not exist.
 * @return mixed Value set for the option.
 */
    public function getBlogOption(int $id, string $option, mixed $defaultValue = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new option for a given blog ID.
 *
 * You do not need to serialize values. If the value needs to be serialized, then
 * it will be serialized before it is inserted into the database. Remember,
 * resources can not be serialized or added as an option.
 *
 * You can create options without values and then update the values later.
 * Existing options will not be updated and checks are performed to ensure that you
 * aren't adding a protected WordPress option. Care should be taken to not name
 * options the same as the ones which are protected.
 *
 * @since MU (3.0.0)
 *
 * @param int $id     A blog ID. Can be null to refer to the current blog.
 * @param string $option Name of option to add. Expected to not be SQL-escaped.
 * @param mixed $value  Option value, can be anything. Expected to not be SQL-escaped.
 * @return bool True if the option was added, false otherwise.
 */
    public function addBlogOption(int $id, string $option, mixed $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes an option by name for a given blog ID. Prevents removal of protected WordPress options.
 *
 * @since MU (3.0.0)
 *
 * @param int $id     A blog ID. Can be null to refer to the current blog.
 * @param string $option Name of option to remove. Expected to not be SQL-escaped.
 * @return bool True if the option was deleted, false otherwise.
 */
    public function deleteBlogOption(int $id, string $option): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates an option for a particular blog.
 *
 * @since MU (3.0.0)
 *
 * @param int $id         The blog ID.
 * @param string $option     The option key.
 * @param mixed $value      The option value.
 * @param mixed $deprecated Not used.
 * @return bool True if the value was updated, false otherwise.
 */
    public function updateBlogOption(int $id, string $option, mixed $value, mixed $deprecated = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Switches the current blog.
 *
 * This function is useful if you need to pull posts, or other information,
 * from other blogs. You can switch back afterwards using restore_current_blog().
 *
 * PHP code loaded with the originally requested site, such as code from a plugin or theme, does not switch. See #14941.
 *
 * @see restore_current_blog()
 * @since MU (3.0.0)
 *
 * @global wpdb            $wpdb               WordPress database abstraction object.
 * @global int             $blog_id
 * @global array           $_wp_switched_stack
 * @global bool            $switched
 * @global string          $table_prefix       The database table prefix.
 * @global WP_Object_Cache $wp_object_cache
 *
 * @param int $newBlogId The ID of the blog to switch to. Default: current blog.
 * @param bool $deprecated  Not used.
 * @return true Always returns true.
 */
    public function switchToBlog(int $newBlogId, bool $deprecated = null): true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Restores the current blog, after calling switch_to_blog().
 *
 * @see switch_to_blog()
 * @since MU (3.0.0)
 *
 * @global wpdb            $wpdb               WordPress database abstraction object.
 * @global array           $_wp_switched_stack
 * @global int             $blog_id
 * @global bool            $switched
 * @global string          $table_prefix       The database table prefix.
 * @global WP_Object_Cache $wp_object_cache
 *
 * @return bool True on success, false if we're already on the current blog.
 */
    public function restoreCurrentBlog(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Switches the initialized roles and current user capabilities to another site.
 *
 * @since 4.9.0
 *
 * @param int $newSiteId New site ID.
 * @param int $oldSiteId Old site ID.
 */
    public function wpSwitchRolesAndUser(int $newSiteId, int $oldSiteId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if switch_to_blog() is in effect.
 *
 * @since 3.5.0
 *
 * @global array $_wp_switched_stack
 *
 * @return bool True if switched, false otherwise.
 */
    public function msIsSwitched(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if a particular blog is archived.
 *
 * @since MU (3.0.0)
 *
 * @param int $id Blog ID.
 * @return string Whether the blog is archived or not.
 */
    public function isArchived(int $id): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the 'archived' status of a particular blog.
 *
 * @since MU (3.0.0)
 *
 * @param int $id       Blog ID.
 * @param string $archived The new status.
 * @return string $archived
 */
    public function updateArchived(int $id, string $archived): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates a blog details field.
 *
 * @since MU (3.0.0)
 * @since 5.1.0 Use wp_update_site() internally.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $blogId    Blog ID.
 * @param string $pref       Field name.
 * @param string $value      Field value.
 * @param null $deprecated Not used.
 * @return string|false $value
 */
    public function updateBlogStatus(int $blogId, string $pref, string $value, null $deprecated = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a blog details field.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $id   Blog ID.
 * @param string $pref Field name.
 * @return bool|string|null $value
 */
    public function getBlogStatus(int $id, string $pref): bool|string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a list of most recently updated blogs.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param mixed $deprecated Not used.
 * @param int $start      Optional. Number of blogs to offset the query. Used to build LIMIT clause.
 *                          Can be used for pagination. Default 0.
 * @param int $quantity   Optional. The maximum number of blogs to retrieve. Default 40.
 * @return array The list of blogs.
 */
    public function getLastUpdated(mixed $deprecated = '', int $start = 0, int $quantity = 40): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Counts number of sites grouped by site status.
 *
 * @since 5.3.0
 *
 * @param int $networkId Optional. The network to get counts for. Default is the current network ID.
 * @return int[] {
 *     Numbers of sites grouped by site status.
 *
 *     @type int $all      The total number of sites.
 *     @type int $public   The number of public sites.
 *     @type int $archived The number of archived sites.
 *     @type int $mature   The number of mature sites.
 *     @type int $spam     The number of spam sites.
 *     @type int $deleted  The number of deleted sites.
 * }
 */
    public function wpCountSites(int $networkId = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines Multisite upload constants.
 *
 * Exists for backward compatibility with legacy file-serving through
 * wp-includes/ms-files.php (wp-content/blogs.php in MU).
 *
 * @since 3.0.0
 */
    public function msUploadConstants(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines Multisite cookie constants.
 *
 * @since 3.0.0
 */
    public function msCookieConstants(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines Multisite file constants.
 *
 * Exists for backward compatibility with legacy file-serving through
 * wp-includes/ms-files.php (wp-content/blogs.php in MU).
 *
 * @since 3.0.0
 */
    public function msFileConstants(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Defines Multisite subdomain constants and handles warnings and notices.
 *
 * VHOST is deprecated in favor of SUBDOMAIN_INSTALL, which is a bool.
 *
 * On first call, the constants are checked and defined. On second call,
 * we will have translations loaded and can trigger warnings easily.
 *
 * @since 3.0.0
 */
    public function msSubdomainConstants(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the network's site and user counts.
 *
 * @since MU (3.0.0)
 *
 * @return int[] {
 *     Site and user count for the network.
 *
 *     @type int $blogs Number of sites on the network.
 *     @type int $users Number of users on the network.
 * }
 */
    public function getSitestats(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets one of a user's active blogs.
 *
 * Returns the user's primary blog, if they have one and
 * it is active. If it's inactive, function returns another
 * active blog of the user. If none are found, the user
 * is added as a Subscriber to the Dashboard Blog and that blog
 * is returned.
 *
 * @since MU (3.0.0)
 *
 * @param int $userId The unique ID of the user
 * @return \WP_Site|void The blog object
 */
    public function getActiveBlogForUser(int $userId): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the number of active sites on the installation.
 *
 * The count is cached and updated twice daily. This is not a live count.
 *
 * @since MU (3.0.0)
 * @since 3.7.0 The `$network_id` parameter has been deprecated.
 * @since 4.8.0 The `$network_id` parameter is now being used.
 *
 * @param int|null $networkId ID of the network. Default is the current network.
 * @return int Number of active sites on the network.
 */
    public function getBlogCount(int|null $networkId = null): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a blog post from any site on the network.
 *
 * This function is similar to get_post(), except that it can retrieve a post
 * from any site on the network, not just the current site.
 *
 * @since MU (3.0.0)
 *
 * @param int $blogId ID of the blog.
 * @param int $postId ID of the post being looked for.
 * @return \WP_Post|null WP_Post object on success, null on failure
 */
    public function getBlogPost(int $blogId, int $postId): \WP_Post|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a user to a blog, along with specifying the user's role.
 *
 * Use the {@see 'add_user_to_blog'} action to fire an event when users are added to a blog.
 *
 * @since MU (3.0.0)
 *
 * @param int $blogId ID of the blog the user is being added to.
 * @param int $userId ID of the user being added.
 * @param string $role    User role.
 * @return true|\WP_Error True on success or a WP_Error object if the user doesn't exist
 *                       or could not be added.
 */
    public function addUserToBlog(int $blogId, int $userId, string $role): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a user from a blog.
 *
 * Use the {@see 'remove_user_from_blog'} action to fire an event when
 * users are removed from a blog.
 *
 * Accepts an optional `$reassign` parameter, if you want to
 * reassign the user's blog posts to another user upon removal.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $userId  ID of the user being removed.
 * @param int $blogId  Optional. ID of the blog the user is being removed from. Default 0.
 * @param int $reassign Optional. ID of the user to whom to reassign posts. Default 0.
 * @return true|\WP_Error True on success or a WP_Error object if the user doesn't exist.
 */
    public function removeUserFromBlog(int $userId, int $blogId = 0, int $reassign = 0): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the permalink for a post on another blog.
 *
 * @since MU (3.0.0) 1.0
 *
 * @param int $blogId ID of the source blog.
 * @param int $postId ID of the desired post.
 * @return string The post's permalink.
 */
    public function getBlogPermalink(int $blogId, int $postId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a blog's numeric ID from its URL.
 *
 * On a subdirectory installation like example.com/blog1/,
 * $domain will be the root 'example.com' and $path the
 * subdirectory '/blog1/'. With subdomains like blog1.example.com,
 * $domain is 'blog1.example.com' and $path is '/'.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $domain Website domain.
 * @param string $path   Optional. Not required for subdomain installations. Default '/'.
 * @return int 0 if no blog found, otherwise the ID of the matching blog.
 */
    public function getBlogIdFromUrl(string $domain, string $path = '/'): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks an email address against a list of banned domains.
 *
 * This function checks against the Banned Email Domains list
 * at wp-admin/network/settings.php. The check is only run on
 * self-registrations; user creation at wp-admin/network/users.php
 * bypasses this check.
 *
 * @since MU (3.0.0)
 *
 * @param string $userEmail The email provided by the user at registration.
 * @return bool True when the email address is banned, false otherwise.
 */
    public function isEmailAddressUnsafe(string $userEmail): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes and validates data required for a user sign-up.
 *
 * Verifies the validity and uniqueness of user names and user email addresses,
 * and checks email addresses against allowed and disallowed domains provided by
 * administrators.
 *
 * The {@see 'wpmu_validate_user_signup'} hook provides an easy way to modify the sign-up
 * process. The value $result, which is passed to the hook, contains both the user-provided
 * info and the error messages created by the function. {@see 'wpmu_validate_user_signup'}
 * allows you to process the data in any way you'd like, and unset the relevant errors if
 * necessary.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $userName  The login name provided by the user.
 * @param string $userEmail The email provided by the user.
 * @return array {
 *     The array of user name, email, and the error messages.
 *
 *     @type string   $user_name     Sanitized and unique username.
 *     @type string   $orig_username Original username.
 *     @type string   $user_email    User email address.
 *     @type WP_Error $errors        WP_Error object containing any errors found.
 * }
 */
    public function wpmuValidateUserSignup(string $userName, string $userEmail): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Processes new site registrations.
 *
 * Checks the data provided by the user during blog signup. Verifies
 * the validity and uniqueness of blog paths and domains.
 *
 * This function prevents the current user from registering a new site
 * with a blogname equivalent to another user's login name. Passing the
 * $user parameter to the function, where $user is the other user, is
 * effectively an override of this limitation.
 *
 * Filter {@see 'wpmu_validate_blog_signup'} if you want to modify
 * the way that WordPress validates new site signups.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb   $wpdb   WordPress database abstraction object.
 * @global string $domain
 *
 * @param string $blogname   The site name provided by the user. Must be unique.
 * @param string $blogTitle The site title provided by the user.
 * @param \WP_User|string $user       Optional. The user object to check against the new site name.
 *                                   Default empty string.
 * @return array {
 *     Array of domain, path, site name, site title, user and error messages.
 *
 *     @type string         $domain     Domain for the site.
 *     @type string         $path       Path for the site. Used in subdirectory installations.
 *     @type string         $blogname   The unique site name (slug).
 *     @type string         $blog_title Blog title.
 *     @type string|WP_User $user       By default, an empty string. A user object if provided.
 *     @type WP_Error       $errors     WP_Error containing any errors found.
 * }
 */
    public function wpmuValidateBlogSignup(string $blogname, string $blogTitle, \WP_User|string $user = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Records site signup information for future activation.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $domain     The requested domain.
 * @param string $path       The requested path.
 * @param string $title      The requested site title.
 * @param string $user       The user's requested login name.
 * @param string $userEmail The user's email address.
 * @param array $meta       Optional. Signup meta data. By default, contains the requested privacy setting and lang_id.
 */
    public function wpmuSignupBlog(string $domain, string $path, string $title, string $user, string $userEmail, array $meta = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Records user signup information for future activation.
 *
 * This function is used when user registration is open but
 * new site registration is not.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $user       The user's requested login name.
 * @param string $userEmail The user's email address.
 * @param array $meta       Optional. Signup meta data. Default empty array.
 */
    public function wpmuSignupUser(string $user, string $userEmail, array $meta = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a confirmation request email to a user when they sign up for a new site. The new site will not become active
 * until the confirmation link is clicked.
 *
 * This is the notification function used when site registration
 * is enabled.
 *
 * Filter {@see 'wpmu_signup_blog_notification'} to bypass this function or
 * replace it with your own notification behavior.
 *
 * Filter {@see 'wpmu_signup_blog_notification_email'} and
 * {@see 'wpmu_signup_blog_notification_subject'} to change the content
 * and subject line of the email sent to newly registered users.
 *
 * @since MU (3.0.0)
 *
 * @param string $domain     The new blog domain.
 * @param string $path       The new blog path.
 * @param string $title      The site title.
 * @param string $userLogin The user's login name.
 * @param string $userEmail The user's email address.
 * @param string $key        The activation key created in wpmu_signup_blog().
 * @param array $meta       Optional. Signup meta data. By default, contains the requested privacy setting and lang_id.
 * @return bool
 */
    public function wpmuSignupBlogNotification(string $domain, string $path, string $title, string $userLogin, string $userEmail, string $key, array $meta = []): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a confirmation request email to a user when they sign up for a new user account (without signing up for a site
 * at the same time). The user account will not become active until the confirmation link is clicked.
 *
 * This is the notification function used when no new site has
 * been requested.
 *
 * Filter {@see 'wpmu_signup_user_notification'} to bypass this function or
 * replace it with your own notification behavior.
 *
 * Filter {@see 'wpmu_signup_user_notification_email'} and
 * {@see 'wpmu_signup_user_notification_subject'} to change the content
 * and subject line of the email sent to newly registered users.
 *
 * @since MU (3.0.0)
 *
 * @param string $userLogin The user's login name.
 * @param string $userEmail The user's email address.
 * @param string $key        The activation key created in wpmu_signup_user()
 * @param array $meta       Optional. Signup meta data. Default empty array.
 * @return bool
 */
    public function wpmuSignupUserNotification(string $userLogin, string $userEmail, string $key, array $meta = []): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Activates a signup.
 *
 * Hook to {@see 'wpmu_activate_user'} or {@see 'wpmu_activate_blog'} for events
 * that should happen only when users or sites are self-created (since
 * those actions are not called when users and sites are created
 * by a Super Admin).
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $key The activation key provided to the user.
 * @return array|\WP_Error An array containing information about the activated user and/or blog.
 */
    public function wpmuActivateSignup(string $key): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes an associated signup entry when a user is deleted from the database.
 *
 * @since 5.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $id       ID of the user to delete.
 * @param int|null $reassign ID of the user to reassign posts and links to.
 * @param \WP_User $user     User object.
 */
    public function wpDeleteSignupOnUserDelete(int $id, int|null $reassign, \WP_User $user): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates a user.
 *
 * This function runs when a user self-registers as well as when
 * a Super Admin creates a new user. Hook to {@see 'wpmu_new_user'} for events
 * that should affect all new users, but only on Multisite (otherwise
 * use {@see 'user_register'}).
 *
 * @since MU (3.0.0)
 *
 * @param string $userName The new user's login name.
 * @param string $password  The new user's password.
 * @param string $email     The new user's email address.
 * @return int|false Returns false on failure, or int $user_id on success.
 */
    public function wpmuCreateUser(string $userName, string $password, string $email): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates a site.
 *
 * This function runs when a user self-registers a new site as well
 * as when a Super Admin creates a new site. Hook to {@see 'wpmu_new_blog'}
 * for events that should affect all new sites.
 *
 * On subdirectory installations, $domain is the same as the main site's
 * domain, and the path is the subdirectory name (eg 'example.com'
 * and '/blog1/'). On subdomain installations, $domain is the new subdomain +
 * root domain (eg 'blog1.example.com'), and $path is '/'.
 *
 * @since MU (3.0.0)
 *
 * @param string $domain     The new site's domain.
 * @param string $path       The new site's path.
 * @param string $title      The new site's title.
 * @param int $userId    The user ID of the new site's admin.
 * @param array $options    Optional. Array of key=>value pairs used to set initial site options.
 *                           If valid status keys are included ('public', 'archived', 'mature',
 *                           'spam', 'deleted', or 'lang_id') the given site status(es) will be
 *                           updated. Otherwise, keys and values will be used to set options for
 *                           the new site. Default empty array.
 * @param int $networkId Optional. Network ID. Only relevant on multi-network installations.
 *                           Default 1.
 * @return int|\WP_Error Returns WP_Error object on failure, the new site ID on success.
 */
    public function wpmuCreateBlog(string $domain, string $path, string $title, int $userId, array $options = [], int $networkId = 1): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Notifies the network admin that a new site has been activated.
 *
 * Filter {@see 'newblog_notify_siteadmin'} to change the content of
 * the notification email.
 *
 * @since MU (3.0.0)
 * @since 5.1.0 $blog_id now supports input from the {@see 'wp_initialize_site'} action.
 *
 * @param \WP_Site|int $blogId    The new site's object or ID.
 * @param string $deprecated Not used.
 * @return bool
 */
    public function newblogNotifySiteadmin(\WP_Site|int $blogId, string $deprecated = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Notifies the network admin that a new user has been activated.
 *
 * Filter {@see 'newuser_notify_siteadmin'} to change the content of
 * the notification email.
 *
 * @since MU (3.0.0)
 *
 * @param int $userId The new user's ID.
 * @return bool
 */
    public function newuserNotifySiteadmin(int $userId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a site name is already taken.
 *
 * The name is the site's subdomain or the site's subdirectory
 * path depending on the network settings.
 *
 * Used during the new site registration process to ensure
 * that each site name is unique.
 *
 * @since MU (3.0.0)
 *
 * @param string $domain     The domain to be checked.
 * @param string $path       The path to be checked.
 * @param int $networkId Optional. Network ID. Only relevant on multi-network installations.
 *                           Default 1.
 * @return int|null The site ID if the site name exists, null otherwise.
 */
    public function domainExists(string $domain, string $path, int $networkId = 1): int|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Notifies the site administrator that their site activation was successful.
 *
 * Filter {@see 'wpmu_welcome_notification'} to disable or bypass.
 *
 * Filter {@see 'update_welcome_email'} and {@see 'update_welcome_subject'} to
 * modify the content and subject line of the notification email.
 *
 * @since MU (3.0.0)
 *
 * @param int $blogId  Site ID.
 * @param int $userId  User ID.
 * @param string $password User password, or "N/A" if the user account is not new.
 * @param string $title    Site title.
 * @param array $meta     Optional. Signup meta data. By default, contains the requested privacy setting and lang_id.
 * @return bool Whether the email notification was sent.
 */
    public function wpmuWelcomeNotification(int $blogId, int $userId, string $password, string $title, array $meta = []): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Notifies the Multisite network administrator that a new site was created.
 *
 * Filter {@see 'send_new_site_email'} to disable or bypass.
 *
 * Filter {@see 'new_site_email'} to filter the contents.
 *
 * @since 5.6.0
 *
 * @param int $siteId Site ID of the new site.
 * @param int $userId User ID of the administrator of the new site.
 * @return bool Whether the email notification was sent.
 */
    public function wpmuNewSiteAdminNotification(int $siteId, int $userId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Notifies a user that their account activation has been successful.
 *
 * Filter {@see 'wpmu_welcome_user_notification'} to disable or bypass.
 *
 * Filter {@see 'update_welcome_user_email'} and {@see 'update_welcome_user_subject'} to
 * modify the content and subject line of the notification email.
 *
 * @since MU (3.0.0)
 *
 * @param int $userId  User ID.
 * @param string $password User password.
 * @param array $meta     Optional. Signup meta data. Default empty array.
 * @return bool
 */
    public function wpmuWelcomeUserNotification(int $userId, string $password, array $meta = []): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the current network.
 *
 * Returns an object containing the 'id', 'domain', 'path', and 'site_name'
 * properties of the network being viewed.
 *
 * @see wpmu_current_site()
 *
 * @since MU (3.0.0)
 *
 * @global WP_Network $current_site The current network.
 *
 * @return \WP_Network The current network.
 */
    public function getCurrentSite(): \WP_Network
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a user's most recent post.
 *
 * Walks through each of a user's blogs to find the post with
 * the most recent post_date_gmt.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $userId User ID.
 * @return array Contains the blog_id, post_id, post_date_gmt, and post_gmt_ts.
 */
    public function getMostRecentPostOfUser(int $userId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks an array of MIME types against a list of allowed types.
 *
 * WordPress ships with a set of allowed upload filetypes,
 * which is defined in wp-includes/functions.php in
 * get_allowed_mime_types(). This function is used to filter
 * that list against the filetypes allowed provided by Multisite
 * Super Admins at wp-admin/network/settings.php.
 *
 * @since MU (3.0.0)
 *
 * @param array $mimes
 * @return array
 */
    public function checkUploadMimes(array $mimes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates a blog's post count.
 *
 * WordPress MS stores a blog's post count as an option so as
 * to avoid extraneous COUNTs when a blog's details are fetched
 * with get_site(). This function is called when posts are published
 * or unpublished to make sure the count stays current.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $deprecated Not used.
 */
    public function updatePostsCount(string $deprecated = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Logs the user email, IP, and registration date of a new site.
 *
 * @since MU (3.0.0)
 * @since 5.1.0 Parameters now support input from the {@see 'wp_initialize_site'} action.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param \WP_Site|int $blogId The new site's object or ID.
 * @param int|array $userId User ID, or array of arguments including 'user_id'.
 */
    public function wpmuLogNewRegistrations(\WP_Site|int $blogId, int|array $userId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Ensures that the current site's domain is listed in the allowed redirect host list.
 *
 * @see wp_validate_redirect()
 * @since MU (3.0.0)
 *
 * @param array|string $deprecated Not used.
 * @return string[] {
 *     An array containing the current site's domain.
 *
 *     @type string $0 The current site's domain.
 * }
 */
    public function redirectThisSite(array|string $deprecated = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether an upload is too big.
 *
 * @since MU (3.0.0)
 *
 * @param array $upload An array of information about the newly-uploaded file.
 * @return string|array If the upload is under the size limit, $upload is returned. Otherwise returns an error message.
 */
    public function uploadIsFileTooBig(array $upload): string|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a nonce field to the signup page.
 *
 * @since MU (3.0.0)
 */
    public function signupNonceFields(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Processes the signup nonce created in signup_nonce_fields().
 *
 * @since MU (3.0.0)
 *
 * @param array $result
 * @return array
 */
    public function signupNonceCheck(array $result): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Corrects 404 redirects when NOBLOGREDIRECT is defined.
 *
 * @since MU (3.0.0)
 */
    public function maybeRedirect404(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new user to a blog by visiting /newbloguser/{key}/.
 *
 * This will only work when the user's details are saved as an option
 * keyed as 'new_user_{key}', where '{key}' is a hash generated for the user to be
 * added, as when a user is invited through the regular WP Add User interface.
 *
 * @since MU (3.0.0)
 */
    public function maybeAddExistingUserToBlog(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a user to a blog based on details from maybe_add_existing_user_to_blog().
 *
 * @since MU (3.0.0)
 *
 * @param array|false $details {
 *     User details. Must at least contain values for the keys listed below.
 *
 *     @type int    $user_id The ID of the user being added to the current blog.
 *     @type string $role    The role to be assigned to the user.
 * }
 * @return true|\WP_Error|void True on success or a WP_Error object if the user doesn't exist
 *                            or could not be added. Void if $details array was not provided.
 */
    public function addExistingUserToBlog(array|false $details = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a newly created user to the appropriate blog
 *
 * To add a user in general, use add_user_to_blog(). This function
 * is specifically hooked into the {@see 'wpmu_activate_user'} action.
 *
 * @since MU (3.0.0)
 *
 * @see add_user_to_blog()
 *
 * @param int $userId  User ID.
 * @param string $password User password. Ignored.
 * @param array $meta     Signup meta data.
 */
    public function addNewUserToBlog(int $userId, string $password, array $meta): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Corrects From host on outgoing mail to match the site domain.
 *
 * @since MU (3.0.0)
 *
 * @param \PHPMailer $phpmailer The PHPMailer instance (passed by reference).
 */
    public function fixPhpmailerMessageid(\PHPMailer $phpmailer): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a user is marked as a spammer, based on user login.
 *
 * @since MU (3.0.0)
 *
 * @param string|\WP_User $user Optional. Defaults to current user. WP_User object,
 *                             or user login name as a string.
 * @return bool
 */
    public function isUserSpammy(string|\WP_User $user = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates this blog's 'public' setting in the global blogs table.
 *
 * Public blogs have a setting of 1, private blogs are 0.
 *
 * @since MU (3.0.0)
 *
 * @param int $oldValue The old public value.
 * @param int $value     The new public value.
 */
    public function updateBlogPublic(int $oldValue, int $value): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether users can self-register, based on Network settings.
 *
 * @since MU (3.0.0)
 *
 * @return bool
 */
    public function usersCanRegisterSignupFilter(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Ensures that the welcome message is not empty. Currently unused.
 *
 * @since MU (3.0.0)
 *
 * @param string $text
 * @return string
 */
    public function welcomeUserMsgFilter(string $text): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether to force SSL on content.
 *
 * @since 2.8.5
 *
 * @param bool $force
 * @return bool True if forced, false if not forced.
 */
    public function forceSslContent(bool|string $force = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Formats a URL to use https.
 *
 * Useful as a filter.
 *
 * @since 2.8.5
 *
 * @param string $url URL.
 * @return string URL with https as the scheme.
 */
    public function filterSSL(string $url): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Schedules update of the network-wide counts for the current network.
 *
 * @since 3.1.0
 */
    public function wpScheduleUpdateNetworkCounts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the network-wide counts for the current network.
 *
 * @since 3.1.0
 * @since 4.8.0 The `$network_id` parameter has been added.
 *
 * @param int|null $networkId ID of the network. Default is the current network.
 */
    public function wpUpdateNetworkCounts(int|null $networkId = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the count of sites for the current network.
 *
 * If enabled through the {@see 'enable_live_network_counts'} filter, update the sites count
 * on a network when a site is created or its status is updated.
 *
 * @since 3.7.0
 * @since 4.8.0 The `$network_id` parameter has been added.
 *
 * @param int|null $networkId ID of the network. Default is the current network.
 */
    public function wpMaybeUpdateNetworkSiteCounts(int|null $networkId = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the network-wide users count.
 *
 * If enabled through the {@see 'enable_live_network_counts'} filter, update the users count
 * on a network when a user is created or its status is updated.
 *
 * @since 3.7.0
 * @since 4.8.0 The `$network_id` parameter has been added.
 *
 * @param int|null $networkId ID of the network. Default is the current network.
 */
    public function wpMaybeUpdateNetworkUserCounts(int|null $networkId = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the network-wide site count.
 *
 * @since 3.7.0
 * @since 4.8.0 The `$network_id` parameter has been added.
 *
 * @param int|null $networkId ID of the network. Default is the current network.
 */
    public function wpUpdateNetworkSiteCounts(int|null $networkId = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the network-wide user count.
 *
 * @since 3.7.0
 * @since 4.8.0 The `$network_id` parameter has been added.
 * @since 6.0.0 This function is now a wrapper for wp_update_user_counts().
 *
 * @param int|null $networkId ID of the network. Default is the current network.
 */
    public function wpUpdateNetworkUserCounts(int|null $networkId = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the space used by the current site.
 *
 * @since 3.5.0
 *
 * @return int Used space in megabytes.
 */
    public function getSpaceUsed(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the upload quota for the current blog.
 *
 * @since MU (3.0.0)
 *
 * @return int Quota in megabytes.
 */
    public function getSpaceAllowed(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if there is any upload space left in the current blog's quota.
 *
 * @since 3.0.0
 *
 * @return int of upload space available in bytes.
 */
    public function getUploadSpaceAvailable(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if there is any upload space left in the current blog's quota.
 *
 * @since 3.0.0
 * @return bool True if space is available, false otherwise.
 */
    public function isUploadSpaceAvailable(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the maximum upload file size allowed, in bytes.
 *
 * @since 3.0.0
 *
 * @param int $size Upload size limit in bytes.
 * @return int Upload size limit in bytes.
 */
    public function uploadSizeLimitFilter(int $size): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether or not we have a large network.
 *
 * The default criteria for a large network is either more than 10,000 users or more than 10,000 sites.
 * Plugins can alter this criteria using the {@see 'wp_is_large_network'} filter.
 *
 * @since 3.3.0
 * @since 4.8.0 The `$network_id` parameter has been added.
 *
 * @param string $using      'sites' or 'users'. Default is 'sites'.
 * @param int|null $networkId ID of the network. Default is the current network.
 * @return bool True if the network meets the criteria for large. False otherwise.
 */
    public function wpIsLargeNetwork(string $using = 'sites', int|null $networkId = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of reserved site on a sub-directory Multisite installation.
 *
 * @since 4.4.0
 *
 * @return string[] Array of reserved names.
 */
    public function getSubdirectoryReservedNames(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a confirmation request email when a change of network admin email address is attempted.
 *
 * The new network admin address will not become active until confirmed.
 *
 * @since 4.9.0
 *
 * @param string $oldValue The old network admin email address.
 * @param string $value     The proposed new network admin email address.
 */
    public function updateNetworkOptionNewAdminEmail(string $oldValue, string $value): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends an email to the old network admin email address when the network admin email address changes.
 *
 * @since 4.9.0
 *
 * @param string $optionName The relevant database option name.
 * @param string $newEmail   The new network admin email address.
 * @param string $oldEmail   The old network admin email address.
 * @param int $networkId  ID of the network.
 */
    public function wpNetworkAdminEmailChangeNotification(string $optionName, string $newEmail, string $oldEmail, int $networkId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Whether a subdomain configuration is enabled.
 *
 * @since 3.0.0
 *
 * @return bool True if subdomain configuration is enabled, false otherwise.
 */
    public function isSubdomainInstall(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks status of current blog.
 *
 * Checks if the blog is deleted, inactive, archived, or spammed.
 *
 * Dies with a default message if the blog does not pass the check.
 *
 * To change the default message when a blog does not pass the check,
 * use the wp-content/blog-deleted.php, blog-inactive.php and
 * blog-suspended.php drop-ins.
 *
 * @since 3.0.0
 *
 * @return true|string Returns true on success, or drop-in file to include.
 */
    public function msSiteCheck(): true|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the closest matching network for a domain and path.
 *
 * @since 3.9.0
 *
 * @internal In 4.4.0, converted to a wrapper for WP_Network::get_by_path()
 *
 * @param string $domain   Domain to check.
 * @param string $path     Path to check.
 * @param int|null $segments Path segments to use. Defaults to null, or the full path.
 * @return \WP_Network|false Network object if successful. False when no network is found.
 */
    public function getNetworkByPath(string $domain, string $path, int|null $segments = null): \WP_Network|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the closest matching site object by its domain and path.
 *
 * This will not necessarily return an exact match for a domain and path. Instead, it
 * breaks the domain and path into pieces that are then used to match the closest
 * possibility from a query.
 *
 * The intent of this method is to match a site object during bootstrap for a
 * requested site address
 *
 * @since 3.9.0
 * @since 4.7.0 Updated to always return a `WP_Site` object.
 *
 * @param string $domain   Domain to check.
 * @param string $path     Path to check.
 * @param int|null $segments Path segments to use. Defaults to null, or the full path.
 * @return \WP_Site|false Site object if successful. False when no site is found.
 */
    public function getSiteByPath(string $domain, string $path, int|null $segments = null): \WP_Site|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves network data given a network ID or network object.
 *
 * Network data will be cached and returned after being passed through a filter.
 * If the provided network is empty, the current network global will be used.
 *
 * @since 4.6.0
 *
 * @global WP_Network $current_site
 *
 * @param \WP_Network|int|null $network Optional. Network to retrieve. Default is the current network.
 * @return \WP_Network|null The network object or null if not found.
 */
    public function getNetwork(\WP_Network|int|null $network = null): \WP_Network|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of networks.
 *
 * @since 4.6.0
 *
 * @param string|array $args Optional. Array or string of arguments. See WP_Network_Query::parse_query()
 *                           for information on accepted arguments. Default empty array.
 * @return array|int List of WP_Network objects, a list of network IDs when 'fields' is set to 'ids',
 *                   or the number of networks when 'count' is passed as a query var.
 */
    public function getNetworks(string|array $args = []): array|int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a network from the object cache.
 *
 * @since 4.6.0
 *
 * @global bool $_wp_suspend_cache_invalidation
 *
 * @param int|array $ids Network ID or an array of network IDs to remove from cache.
 */
    public function cleanNetworkCache(int|array $ids): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the network cache of given networks.
 *
 * Will add the networks in $networks to the cache. If network ID already exists
 * in the network cache then it will not be updated. The network is added to the
 * cache using the network group with the key using the ID of the networks.
 *
 * @since 4.6.0
 *
 * @param array $networks Array of network row objects.
 */
    public function updateNetworkCache(array $networks): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Inserts a new site into the database.
 *
 * @since 5.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array $data {
 *     Data for the new site that should be inserted.
 *
 *     @type string $domain       Site domain. Default empty string.
 *     @type string $path         Site path. Default '/'.
 *     @type int    $network_id   The site's network ID. Default is the current network ID.
 *     @type string $registered   When the site was registered, in SQL datetime format. Default is
 *                                the current time.
 *     @type string $last_updated When the site was last updated, in SQL datetime format. Default is
 *                                the value of $registered.
 *     @type int    $public       Whether the site is public. Default 1.
 *     @type int    $archived     Whether the site is archived. Default 0.
 *     @type int    $mature       Whether the site is mature. Default 0.
 *     @type int    $spam         Whether the site is spam. Default 0.
 *     @type int    $deleted      Whether the site is deleted. Default 0.
 *     @type int    $lang_id      The site's language ID. Currently unused. Default 0.
 *     @type int    $user_id      User ID for the site administrator. Passed to the
 *                                `wp_initialize_site` hook.
 *     @type string $title        Site title. Default is 'Site %d' where %d is the site ID. Passed
 *                                to the `wp_initialize_site` hook.
 *     @type array  $options      Custom option $key => $value pairs to use. Default empty array. Passed
 *                                to the `wp_initialize_site` hook.
 *     @type array  $meta         Custom site metadata $key => $value pairs to use. Default empty array.
 *                                Passed to the `wp_initialize_site` hook.
 * }
 * @return int|\WP_Error The new site's ID on success, or error object on failure.
 */
    public function wpInsertSite(array $data): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates a site in the database.
 *
 * @since 5.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $siteId ID of the site that should be updated.
 * @param array $data    Site data to update. See {@see wp_insert_site()} for the list of supported keys.
 * @return int|\WP_Error The updated site's ID on success, or error object on failure.
 */
    public function wpUpdateSite(int $siteId, array $data): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a site from the database.
 *
 * @since 5.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $siteId ID of the site that should be deleted.
 * @return \WP_Site|\WP_Error The deleted site object on success, or error object on failure.
 */
    public function wpDeleteSite(int $siteId): \WP_Site|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves site data given a site ID or site object.
 *
 * Site data will be cached and returned after being passed through a filter.
 * If the provided site is empty, the current site global will be used.
 *
 * @since 4.6.0
 *
 * @param \WP_Site|int|null $site Optional. Site to retrieve. Default is the current site.
 * @return \WP_Site|null The site object or null if not found.
 */
    public function getSite(\WP_Site|int|null $site = null): \WP_Site|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Queue site meta for lazy-loading.
 *
 * @since 6.3.0
 *
 * @param array $siteIds List of site IDs.
 */
    public function wpLazyloadSiteMeta(array $siteIds): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates sites in cache.
 *
 * @since 4.6.0
 * @since 5.1.0 Introduced the `$update_meta_cache` parameter.
 *
 * @param array $sites             Array of site objects.
 * @param bool $updateMetaCache Whether to update site meta cache. Default true.
 */
    public function updateSiteCache(array $sites, bool $updateMetaCache = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates metadata cache for list of site IDs.
 *
 * Performs SQL query to retrieve all metadata for the sites matching `$site_ids` and stores them in the cache.
 * Subsequent calls to `get_site_meta()` will not need to query the database.
 *
 * @since 5.1.0
 *
 * @param array $siteIds List of site IDs.
 * @return array|false An array of metadata on success, false if there is nothing to update.
 */
    public function updateSitemetaCache(array $siteIds): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of sites matching requested arguments.
 *
 * @since 4.6.0
 * @since 4.8.0 Introduced the 'lang_id', 'lang__in', and 'lang__not_in' parameters.
 *
 * @see WP_Site_Query::parse_query()
 *
 * @param string|array $args Optional. Array or string of arguments. See WP_Site_Query::__construct()
 *                           for information on accepted arguments. Default empty array.
 * @return array|int List of WP_Site objects, a list of site IDs when 'fields' is set to 'ids',
 *                   or the number of sites when 'count' is passed as a query var.
 */
    public function getSites(string|array $args = []): array|int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prepares site data for insertion or update in the database.
 *
 * @since 5.1.0
 *
 * @param array $data     Associative array of site data passed to the respective function.
 *                               See {@see wp_insert_site()} for the possibly included data.
 * @param array $defaults Site data defaults to parse $data against.
 * @param \WP_Site|null $oldSite Optional. Old site object if an update, or null if an insertion.
 *                               Default null.
 * @return array|\WP_Error Site data ready for a database transaction, or WP_Error in case a validation
 *                        error occurred.
 */
    public function wpPrepareSiteData(array $data, array $defaults, \WP_Site|null $oldSite = null): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Normalizes data for a site prior to inserting or updating in the database.
 *
 * @since 5.1.0
 *
 * @param array $data Associative array of site data passed to the respective function.
 *                    See {@see wp_insert_site()} for the possibly included data.
 * @return array Normalized site data.
 */
    public function wpNormalizeSiteData(array $data): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates data for a site prior to inserting or updating in the database.
 *
 * @since 5.1.0
 *
 * @param \WP_Error $errors   Error object, passed by reference. Will contain validation errors if
 *                               any occurred.
 * @param array $data     Associative array of complete site data. See {@see wp_insert_site()}
 *                               for the included data.
 * @param \WP_Site|null $oldSite The old site object if the data belongs to a site being updated,
 *                               or null if it is a new site being inserted.
 */
    public function wpValidateSiteData(\WP_Error $errors, array $data, \WP_Site|null $oldSite = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Runs the initialization routine for a given site.
 *
 * This process includes creating the site's database tables and
 * populating them with defaults.
 *
 * @since 5.1.0
 *
 * @global wpdb     $wpdb     WordPress database abstraction object.
 * @global WP_Roles $wp_roles WordPress role management object.
 *
 * @param int|\WP_Site $siteId Site ID or object.
 * @param array $args    {
 *     Optional. Arguments to modify the initialization behavior.
 *
 *     @type int    $user_id Required. User ID for the site administrator.
 *     @type string $title   Site title. Default is 'Site %d' where %d is the
 *                           site ID.
 *     @type array  $options Custom option $key => $value pairs to use. Default
 *                           empty array.
 *     @type array  $meta    Custom site metadata $key => $value pairs to use.
 *                           Default empty array.
 * }
 * @return true|\WP_Error True on success, or error object on failure.
 */
    public function wpInitializeSite(int|\WP_Site $siteId, array $args = []): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Runs the uninitialization routine for a given site.
 *
 * This process includes dropping the site's database tables and deleting its uploads directory.
 *
 * @since 5.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|\WP_Site $siteId Site ID or object.
 * @return true|\WP_Error True on success, or error object on failure.
 */
    public function wpUninitializeSite(int|\WP_Site $siteId): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a site is initialized.
 *
 * A site is considered initialized when its database tables are present.
 *
 * @since 5.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|\WP_Site $siteId Site ID or object.
 * @return bool True if the site is initialized, false otherwise.
 */
    public function wpIsSiteInitialized(int|\WP_Site $siteId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Clean the blog cache
 *
 * @since 3.5.0
 *
 * @global bool $_wp_suspend_cache_invalidation
 *
 * @param \WP_Site|int $blog The site object or ID to be cleared from cache.
 */
    public function cleanBlogCache(\WP_Site|int $blog): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds metadata to a site.
 *
 * @since 5.1.0
 *
 * @param int $siteId    Site ID.
 * @param string $metaKey   Metadata name.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param bool $unique     Optional. Whether the same key should not be added.
 *                           Default false.
 * @return int|false Meta ID on success, false on failure.
 */
    public function addSiteMeta(int $siteId, string $metaKey, mixed $metaValue, bool $unique = false): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes metadata matching criteria from a site.
 *
 * You can match based on the key, or key and value. Removing based on key and
 * value, will keep from removing duplicate metadata with the same key. It also
 * allows removing all metadata matching key, if needed.
 *
 * @since 5.1.0
 *
 * @param int $siteId    Site ID.
 * @param string $metaKey   Metadata name.
 * @param mixed $metaValue Optional. Metadata value. If provided,
 *                           rows will only be removed that match the value.
 *                           Must be serializable if non-scalar. Default empty.
 * @return bool True on success, false on failure.
 */
    public function deleteSiteMeta(int $siteId, string $metaKey, mixed $metaValue = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves metadata for a site.
 *
 * @since 5.1.0
 *
 * @param int $siteId Site ID.
 * @param string $key     Optional. The meta key to retrieve. By default,
 *                        returns data for all keys. Default empty.
 * @param bool $single  Optional. Whether to return a single value.
 *                        This parameter has no effect if `$key` is not specified.
 *                        Default false.
 * @return mixed An array of values if `$single` is false.
 *               The value of meta data field if `$single` is true.
 *               False for an invalid `$site_id` (non-numeric, zero, or negative value).
 *               An empty string if a valid but non-existing site ID is passed.
 */
    public function getSiteMeta(int $siteId, string $key = '', bool $single = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates metadata for a site.
 *
 * Use the $prev_value parameter to differentiate between meta fields with the
 * same key and site ID.
 *
 * If the meta field for the site does not exist, it will be added.
 *
 * @since 5.1.0
 *
 * @param int $siteId    Site ID.
 * @param string $metaKey   Metadata key.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param mixed $prevValue Optional. Previous value to check before updating.
 *                           If specified, only update existing metadata entries with
 *                           this value. Otherwise, update all entries. Default empty.
 * @return int|bool Meta ID if the key didn't exist, true on successful update,
 *                  false on failure or if the value passed to the function
 *                  is the same as the one that is already in the database.
 */
    public function updateSiteMeta(int $siteId, string $metaKey, mixed $metaValue, mixed $prevValue = ''): int|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes everything from site meta matching meta key.
 *
 * @since 5.1.0
 *
 * @param string $metaKey Metadata key to search for when deleting.
 * @return bool Whether the site meta key was deleted from the database.
 */
    public function deleteSiteMetaByKey(string $metaKey): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the count of sites for a network based on a changed site.
 *
 * @since 5.1.0
 *
 * @param \WP_Site $newSite The site object that has been inserted, updated or deleted.
 * @param \WP_Site|null $oldSite Optional. If $new_site has been updated, this must be the previous
 *                               state of that site. Default null.
 */
    public function wpMaybeUpdateNetworkSiteCountsOnUpdate(\WP_Site $newSite, \WP_Site|null $oldSite = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Triggers actions on site status updates.
 *
 * @since 5.1.0
 *
 * @param \WP_Site $newSite The site object after the update.
 * @param \WP_Site|null $oldSite Optional. If $new_site has been updated, this must be the previous
 *                               state of that site. Default null.
 */
    public function wpMaybeTransitionSiteStatusesOnUpdate(\WP_Site $newSite, \WP_Site|null $oldSite = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleans the necessary caches after specific site data has been updated.
 *
 * @since 5.1.0
 *
 * @param \WP_Site $newSite The site object after the update.
 * @param \WP_Site $oldSite The site object prior to the update.
 */
    public function wpMaybeCleanNewSiteCacheOnUpdate(\WP_Site $newSite, \WP_Site $oldSite): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the `blog_public` option for a given site ID.
 *
 * @since 5.1.0
 *
 * @param int $siteId   Site ID.
 * @param string $isPublic Whether the site is public. A numeric string,
 *                          for compatibility reasons. Accepts '1' or '0'.
 */
    public function wpUpdateBlogPublicOptionOnSiteUpdate(int $siteId, string $isPublic): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the last changed time for the 'sites' cache group.
 *
 * @since 5.1.0
 */
    public function wpCacheSetSitesLastChanged(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Aborts calls to site meta if it is not supported.
 *
 * @since 5.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param mixed $check Skip-value for whether to proceed site meta function execution.
 * @return mixed Original value of $check, or false if site meta is not supported.
 */
    public function wpCheckSiteMetaSupportPrefilter(mixed $check): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a navigation menu.
 *
 * @since 3.0.0
 * @since 4.7.0 Added the `item_spacing` argument.
 * @since 5.5.0 Added the `container_aria_label` argument.
 *
 * @param array $args {
 *     Optional. Array of nav menu arguments.
 *
 *     @type int|string|WP_Term $menu                 Desired menu. Accepts a menu ID, slug, name, or object.
 *                                                    Default empty.
 *     @type string             $menu_class           CSS class to use for the ul element which forms the menu.
 *                                                    Default 'menu'.
 *     @type string             $menu_id              The ID that is applied to the ul element which forms the menu.
 *                                                    Default is the menu slug, incremented.
 *     @type string             $container            Whether to wrap the ul, and what to wrap it with.
 *                                                    Default 'div'.
 *     @type string             $container_class      Class that is applied to the container.
 *                                                    Default 'menu-{menu slug}-container'.
 *     @type string             $container_id         The ID that is applied to the container. Default empty.
 *     @type string             $container_aria_label The aria-label attribute that is applied to the container
 *                                                    when it's a nav element. Default empty.
 *     @type callable|false     $fallback_cb          If the menu doesn't exist, a callback function will fire.
 *                                                    Default is 'wp_page_menu'. Set to false for no fallback.
 *     @type string             $before               Text before the link markup. Default empty.
 *     @type string             $after                Text after the link markup. Default empty.
 *     @type string             $link_before          Text before the link text. Default empty.
 *     @type string             $link_after           Text after the link text. Default empty.
 *     @type bool               $echo                 Whether to echo the menu or return it. Default true.
 *     @type int                $depth                How many levels of the hierarchy are to be included.
 *                                                    0 means all. Default 0.
 *                                                    Default 0.
 *     @type object             $walker               Instance of a custom walker class. Default empty.
 *     @type string             $theme_location       Theme location to be used. Must be registered with
 *                                                    register_nav_menu() in order to be selectable by the user.
 *     @type string             $items_wrap           How the list items should be wrapped. Uses printf() format with
 *                                                    numbered placeholders. Default is a ul with an id and class.
 *     @type string             $item_spacing         Whether to preserve whitespace within the menu's HTML.
 *                                                    Accepts 'preserve' or 'discard'. Default 'preserve'.
 * }
 * @return void|string|false Void if 'echo' argument is true, menu output if 'echo' is false.
 *                           False if there are no items or no menu was found.
 */
    public function wpNavMenu(array $args = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the HTML list content for nav menu items.
 *
 * @uses Walker_Nav_Menu to create HTML list content.
 * @since 3.0.0
 *
 * @param array $items The menu items, sorted by each menu item's menu order.
 * @param int $depth Depth of the item in reference to parents.
 * @param \stdClass $args  An object containing wp_nav_menu() arguments.
 * @return string The HTML list content for the menu items.
 */
    public function walkNavMenuTree(array $items, int $depth, \stdClass $args): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Remove the `menu-item-has-children` class from bottom level menu items.
 *
 * This runs on the {@see 'nav_menu_css_class'} filter. The $args and $depth
 * parameters were added after the filter was originally introduced in
 * WordPress 3.0.0 so this needs to allow for cases in which the filter is
 * called without them.
 *
 * @see https://core.trac.wordpress.org/ticket/56926
 *
 * @since 6.2.0
 *
 * @param string[] $classes   Array of the CSS classes that are applied to the menu item's `<li>` element.
 * @param \WP_Post $menuItem The current menu item object.
 * @param \stdClass|false $args      An object of wp_nav_menu() arguments. Default false ($args unspecified when filter is called).
 * @param int|false $depth     Depth of menu item. Default false ($depth unspecified when filter is called).
 * @return string[] Modified nav menu classes.
 */
    public function wpNavMenuRemoveMenuItemHasChildrenClass(array $classes, \WP_Post $menuItem, \stdClass|false $args = false, int|false $depth = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a navigation menu object.
 *
 * @since 3.0.0
 *
 * @param int|string|\WP_Term $menu Menu ID, slug, name, or object.
 * @return \WP_Term|false Menu object on success, false if $menu param isn't supplied or term does not exist.
 */
    public function wpGetNavMenuObject(int|string|\WP_Term $menu): \WP_Term|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the given ID is a navigation menu.
 *
 * Returns true if it is; false otherwise.
 *
 * @since 3.0.0
 *
 * @param int|string|\WP_Term $menu Menu ID, slug, name, or object of menu to check.
 * @return bool Whether the menu exists.
 */
    public function isNavMenu(int|string|\WP_Term $menu): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers navigation menu locations for a theme.
 *
 * @since 3.0.0
 *
 * @global array $_wp_registered_nav_menus
 *
 * @param string[] $locations Associative array of menu location identifiers (like a slug) and descriptive text.
 */
    public function registerNavMenus(array $locations = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a navigation menu location for a theme.
 *
 * @since 3.1.0
 *
 * @global array $_wp_registered_nav_menus
 *
 * @param string $location The menu location identifier.
 * @return bool True on success, false on failure.
 */
    public function unregisterNavMenu(string $location): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a navigation menu location for a theme.
 *
 * @since 3.0.0
 *
 * @param string $location    Menu location identifier, like a slug.
 * @param string $description Menu location descriptive text.
 */
    public function registerNavMenu(string $location, string $description): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all registered navigation menu locations in a theme.
 *
 * @since 3.0.0
 *
 * @global array $_wp_registered_nav_menus
 *
 * @return string[] Associative array of registered navigation menu descriptions keyed
 *                  by their location. If none are registered, an empty array.
 */
    public function getRegisteredNavMenus(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all registered navigation menu locations and the menus assigned to them.
 *
 * @since 3.0.0
 *
 * @return int[] Associative array of registered navigation menu IDs keyed by their
 *               location name. If none are registered, an empty array.
 */
    public function getNavMenuLocations(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a registered nav menu location has a menu assigned to it.
 *
 * @since 3.0.0
 *
 * @param string $location Menu location identifier.
 * @return bool Whether location has a menu.
 */
    public function hasNavMenu(string $location): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the name of a navigation menu.
 *
 * @since 4.9.0
 *
 * @param string $location Menu location identifier.
 * @return string Menu name.
 */
    public function wpGetNavMenuName(string $location): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the given ID is a nav menu item.
 *
 * @since 3.0.0
 *
 * @param int $menuItemId The ID of the potential nav menu item.
 * @return bool Whether the given ID is that of a nav menu item.
 */
    public function isNavMenuItem(int $menuItemId = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates a navigation menu.
 *
 * Note that `$menu_name` is expected to be pre-slashed.
 *
 * @since 3.0.0
 *
 * @param string $menuName Menu name.
 * @return int|\WP_Error Menu ID on success, WP_Error object on failure.
 */
    public function wpCreateNavMenu(string $menuName): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a navigation menu.
 *
 * @since 3.0.0
 *
 * @param int|string|\WP_Term $menu Menu ID, slug, name, or object.
 * @return bool|\WP_Error True on success, false or WP_Error object on failure.
 */
    public function wpDeleteNavMenu(int|string|\WP_Term $menu): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves the properties of a menu or create a new menu with those properties.
 *
 * Note that `$menu_data` is expected to be pre-slashed.
 *
 * @since 3.0.0
 *
 * @param int $menuId   The ID of the menu or "0" to create a new menu.
 * @param array $menuData The array of menu data.
 * @return int|\WP_Error Menu ID on success, WP_Error object on failure.
 */
    public function wpUpdateNavMenuObject(int $menuId = 0, array $menuData = []): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves the properties of a menu item or create a new one.
 *
 * The menu-item-title, menu-item-description and menu-item-attr-title are expected
 * to be pre-slashed since they are passed directly to APIs that expect slashed data.
 *
 * @since 3.0.0
 * @since 5.9.0 Added the `$fire_after_hooks` parameter.
 *
 * @param int $menuId          The ID of the menu. If 0, makes the menu item a draft orphan.
 * @param int $menuItemDbId  The ID of the menu item. If 0, creates a new menu item.
 * @param array $menuItemData   The menu item's data.
 * @param bool $fireAfterHooks Whether to fire the after insert hooks. Default true.
 * @return int|\WP_Error The menu item's database ID or WP_Error object on failure.
 */
    public function wpUpdateNavMenuItem(int $menuId = 0, int $menuItemDbId = 0, array $menuItemData = [], bool $fireAfterHooks = true): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns all navigation menu objects.
 *
 * @since 3.0.0
 * @since 4.1.0 Default value of the 'orderby' argument was changed from 'none'
 *              to 'name'.
 *
 * @param array $args Optional. Array of arguments passed on to get_terms().
 *                    Default empty array.
 * @return WP_Term[] An array of menu objects.
 */
    public function wpGetNavMenus(array $args = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all menu items of a navigation menu.
 *
 * Note: Most arguments passed to the `$args` parameter – save for 'output_key' – are
 * specifically for retrieving nav_menu_item posts from get_posts() and may only
 * indirectly affect the ultimate ordering and content of the resulting nav menu
 * items that get returned from this function.
 *
 * @since 3.0.0
 *
 * @param int|string|\WP_Term $menu Menu ID, slug, name, or object.
 * @param array $args {
 *     Optional. Arguments to pass to get_posts().
 *
 *     @type string $order                  How to order nav menu items as queried with get_posts().
 *                                          Will be ignored if 'output' is ARRAY_A. Default 'ASC'.
 *     @type string $orderby                Field to order menu items by as retrieved from get_posts().
 *                                          Supply an orderby field via 'output_key' to affect the
 *                                          output order of nav menu items. Default 'menu_order'.
 *     @type string $post_type              Menu items post type. Default 'nav_menu_item'.
 *     @type string $post_status            Menu items post status. Default 'publish'.
 *     @type string $output                 How to order outputted menu items. Default ARRAY_A.
 *     @type string $output_key             Key to use for ordering the actual menu items that get
 *                                          returned. Note that that is not a get_posts() argument
 *                                          and will only affect output of menu items processed in
 *                                          this function. Default 'menu_order'.
 *     @type bool   $nopaging               Whether to retrieve all menu items (true) or paginate
 *                                          (false). Default true.
 *     @type bool   $update_menu_item_cache Whether to update the menu item cache. Default true.
 * }
 * @return array|false Array of menu items, otherwise false.
 */
    public function wpGetNavMenuItems(int|string|\WP_Term $menu, array $args = []): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates post and term caches for all linked objects for a list of menu items.
 *
 * @since 6.1.0
 *
 * @param WP_Post[] $menuItems Array of menu item post objects.
 */
    public function updateMenuItemCache(array $menuItems): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Decorates a menu item object with the shared navigation menu item properties.
 *
 * Properties:
 * - ID:               The term_id if the menu item represents a taxonomy term.
 * - attr_title:       The title attribute of the link element for this menu item.
 * - classes:          The array of class attribute values for the link element of this menu item.
 * - db_id:            The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist).
 * - description:      The description of this menu item.
 * - menu_item_parent: The DB ID of the nav_menu_item that is this item's menu parent, if any. 0 otherwise.
 * - object:           The type of object originally represented, such as 'category', 'post', or 'attachment'.
 * - object_id:        The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories.
 * - post_parent:      The DB ID of the original object's parent object, if any (0 otherwise).
 * - post_title:       A "no title" label if menu item represents a post that lacks a title.
 * - target:           The target attribute of the link element for this menu item.
 * - title:            The title of this menu item.
 * - type:             The family of objects originally represented, such as 'post_type' or 'taxonomy'.
 * - type_label:       The singular label used to describe this type of menu item.
 * - url:              The URL to which this menu item points.
 * - xfn:              The XFN relationship expressed in the link of this menu item.
 * - _invalid:         Whether the menu item represents an object that no longer exists.
 *
 * @since 3.0.0
 *
 * @param object $menuItem The menu item to modify.
 * @return object The menu item with standard menu item properties.
 */
    public function wpSetupNavMenuItem(object $menuItem): object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the menu items associated with a particular object.
 *
 * @since 3.0.0
 *
 * @param int $objectId   Optional. The ID of the original object. Default 0.
 * @param string $objectType Optional. The type of object, such as 'post_type' or 'taxonomy'.
 *                            Default 'post_type'.
 * @param string $taxonomy    Optional. If $object_type is 'taxonomy', $taxonomy is the name
 *                            of the tax that $object_id belongs to. Default empty.
 * @return int[] The array of menu item IDs; empty array if none.
 */
    public function wpGetAssociatedNavMenuItems(int $objectId = 0, string $objectType = 'post_type', string $taxonomy = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Maps nav menu locations according to assignments in previously active theme.
 *
 * @since 4.9.0
 *
 * @param array $newNavMenuLocations New nav menu locations assignments.
 * @param array $oldNavMenuLocations Old nav menu locations assignments.
 * @return array Nav menus mapped to new nav menu locations.
 */
    public function wpMapNavMenuLocations(array $newNavMenuLocations, array $oldNavMenuLocations): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an option value based on an option name.
 *
 * If the option does not exist, and a default value is not provided,
 * boolean false is returned. This could be used to check whether you need
 * to initialize an option during installation of a plugin, however that
 * can be done better by using add_option() which will not overwrite
 * existing options.
 *
 * Not initializing an option and using boolean `false` as a return value
 * is a bad practice as it triggers an additional database query.
 *
 * The type of the returned value can be different from the type that was passed
 * when saving or updating the option. If the option value was serialized,
 * then it will be unserialized when it is returned. In this case the type will
 * be the same. For example, storing a non-scalar value like an array will
 * return the same array.
 *
 * In most cases non-string scalar and null values will be converted and returned
 * as string equivalents.
 *
 * Exceptions:
 *
 * 1. When the option has not been saved in the database, the `$default_value` value
 *    is returned if provided. If not, boolean `false` is returned.
 * 2. When one of the Options API filters is used: {@see 'pre_option_$option'},
 *    {@see 'default_option_$option'}, or {@see 'option_$option'}, the returned
 *    value may not match the expected type.
 * 3. When the option has just been saved in the database, and get_option()
 *    is used right after, non-string scalar and null values are not converted to
 *    string equivalents and the original type is returned.
 *
 * Examples:
 *
 * When adding options like this: `add_option( 'my_option_name', 'value' )`
 * and then retrieving them with `get_option( 'my_option_name' )`, the returned
 * values will be:
 *
 *   - `false` returns `string(0) ""`
 *   - `true`  returns `string(1) "1"`
 *   - `0`     returns `string(1) "0"`
 *   - `1`     returns `string(1) "1"`
 *   - `'0'`   returns `string(1) "0"`
 *   - `'1'`   returns `string(1) "1"`
 *   - `null`  returns `string(0) ""`
 *
 * When adding options with non-scalar values like
 * `add_option( 'my_array', array( false, 'str', null ) )`, the returned value
 * will be identical to the original as it is serialized before saving
 * it in the database:
 *
 *     array(3) {
 *         [0] => bool(false)
 *         [1] => string(3) "str"
 *         [2] => NULL
 *     }
 *
 * @since 1.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $option        Name of the option to retrieve. Expected to not be SQL-escaped.
 * @param mixed $defaultValue Optional. Default value to return if the option does not exist.
 * @return mixed Value of the option. A value of any type may be returned, including
 *               scalar (string, boolean, float, integer), null, array, object.
 *               Scalar and null values will be returned as strings as long as they originate
 *               from a database stored option value. If there is no option in the database,
 *               boolean `false` is returned.
 */
    public function getOption(string $option, mixed $defaultValue = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Primes specific options into the cache with a single database query.
 *
 * Only options that do not already exist in cache will be loaded.
 *
 * @since 6.4.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string[] $options An array of option names to be loaded.
 */
    public function wpPrimeOptionCaches(array $options): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Primes the cache of all options registered with a specific option group.
 *
 * @since 6.4.0
 *
 * @global array $new_allowed_options
 *
 * @param string $optionGroup The option group to load options for.
 */
    public function wpPrimeOptionCachesByGroup(string $optionGroup): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves multiple options.
 *
 * Options are loaded as necessary first in order to use a single database query at most.
 *
 * @since 6.4.0
 *
 * @param string[] $options An array of option names to retrieve.
 * @return array An array of key-value pairs for the requested options.
 */
    public function getOptions(array $options): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the autoload values for multiple options in the database.
 *
 * Autoloading too many options can lead to performance problems, especially if the options are not frequently used.
 * This function allows modifying the autoload value for multiple options without changing the actual option value.
 * This is for example recommended for plugin activation and deactivation hooks, to ensure any options exclusively used
 * by the plugin which are generally autoloaded can be set to not autoload when the plugin is inactive.
 *
 * @since 6.4.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array $options Associative array of option names and their autoload values to set. The option names are
 *                       expected to not be SQL-escaped. The autoload values accept 'yes'|true to enable or 'no'|false
 *                       to disable.
 * @return array Associative array of all provided $options as keys and boolean values for whether their autoload value
 *               was updated.
 */
    public function wpSetOptionAutoloadValues(array $options): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the autoload value for multiple options in the database.
 *
 * This is a wrapper for {@see wp_set_option_autoload_values()}, which can be used to set different autoload values for
 * each option at once.
 *
 * @since 6.4.0
 *
 * @see wp_set_option_autoload_values()
 *
 * @param string[] $options  List of option names. Expected to not be SQL-escaped.
 * @param string|bool $autoload Autoload value to control whether to load the options when WordPress starts up.
 *                              Accepts 'yes'|true to enable or 'no'|false to disable.
 * @return array Associative array of all provided $options as keys and boolean values for whether their autoload value
 *               was updated.
 */
    public function wpSetOptionsAutoload(array $options, string|bool $autoload): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the autoload value for an option in the database.
 *
 * This is a wrapper for {@see wp_set_option_autoload_values()}, which can be used to set the autoload value for
 * multiple options at once.
 *
 * @since 6.4.0
 *
 * @see wp_set_option_autoload_values()
 *
 * @param string $option   Name of the option. Expected to not be SQL-escaped.
 * @param string|bool $autoload Autoload value to control whether to load the option when WordPress starts up.
 *                              Accepts 'yes'|true to enable or 'no'|false to disable.
 * @return bool True if the autoload value was modified, false otherwise.
 */
    public function wpSetOptionAutoload(string $option, string|bool $autoload): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Protects WordPress special option from being modified.
 *
 * Will die if $option is in protected list. Protected options are 'alloptions'
 * and 'notoptions' options.
 *
 * @since 2.2.0
 *
 * @param string $option Option name.
 */
    public function wpProtectSpecialOption(string $option): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints option value after sanitizing for forms.
 *
 * @since 1.5.0
 *
 * @param string $option Option name.
 */
    public function formOption(string $option): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads and caches all autoloaded options, if available or all options.
 *
 * @since 2.2.0
 * @since 5.3.1 The `$force_cache` parameter was added.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param bool $forceCache Optional. Whether to force an update of the local cache
 *                          from the persistent cache. Default false.
 * @return array List of all options.
 */
    public function wpLoadAlloptions(bool $forceCache = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Primes specific network options for the current network into the cache with a single database query.
 *
 * Only network options that do not already exist in cache will be loaded.
 *
 * If site is not multisite, then call wp_prime_option_caches().
 *
 * @since 6.6.0
 *
 * @see wp_prime_network_option_caches()
 *
 * @param string[] $options An array of option names to be loaded.
 */
    public function wpPrimeSiteOptionCaches(array $options): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Primes specific network options into the cache with a single database query.
 *
 * Only network options that do not already exist in cache will be loaded.
 *
 * If site is not multisite, then call wp_prime_option_caches().
 *
 * @since 6.6.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $networkId ID of the network. Can be null to default to the current network ID.
 * @param string[] $options    An array of option names to be loaded.
 */
    public function wpPrimeNetworkOptionCaches(int $networkId, array $options): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads and primes caches of certain often requested network options if is_multisite().
 *
 * @since 3.0.0
 * @since 6.3.0 Also prime caches for network options when persistent object cache is enabled.
 * @since 6.6.0 Uses wp_prime_network_option_caches().
 *
 * @param int $networkId Optional. Network ID of network for which to prime network options cache. Defaults to current network.
 */
    public function wpLoadCoreSiteOptions(int $networkId = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the value of an option that was already added.
 *
 * You do not need to serialize values. If the value needs to be serialized,
 * then it will be serialized before it is inserted into the database.
 * Remember, resources cannot be serialized or added as an option.
 *
 * If the option does not exist, it will be created.

 * This function is designed to work with or without a logged-in user. In terms of security,
 * plugin developers should check the current user's capabilities before updating any options.
 *
 * @since 1.0.0
 * @since 4.2.0 The `$autoload` parameter was added.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $option   Name of the option to update. Expected to not be SQL-escaped.
 * @param mixed $value    Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.
 * @param bool|null $autoload Optional. Whether to load the option when WordPress starts up.
 *                            Accepts a boolean, or `null` to stick with the initial value or, if no initial value is set,
 *                            to leave the decision up to default heuristics in WordPress.
 *                            For existing options,
 *                            `$autoload` can only be updated using `update_option()` if `$value` is also changed.
 *                            For backward compatibility 'yes' and 'no' are also accepted.
 *                            Autoloading too many options can lead to performance problems, especially if the
 *                            options are not frequently used. For options which are accessed across several places
 *                            in the frontend, it is recommended to autoload them, by using true.
 *                            For options which are accessed only on few specific URLs, it is recommended
 *                            to not autoload them, by using false.
 *                            For non-existent options, the default is null, which means WordPress will determine
 *                            the autoload value.
 * @return bool True if the value was updated, false otherwise.
 */
    public function updateOption(string $option, mixed $value, bool|null $autoload = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new option.
 *
 * You do not need to serialize values. If the value needs to be serialized,
 * then it will be serialized before it is inserted into the database.
 * Remember, resources cannot be serialized or added as an option.
 *
 * You can create options without values and then update the values later.
 * Existing options will not be updated and checks are performed to ensure that you
 * aren't adding a protected WordPress option. Care should be taken to not name
 * options the same as the ones which are protected.
 *
 * @since 1.0.0
 * @since 6.6.0 The $autoload parameter's default value was changed to null.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $option     Name of the option to add. Expected to not be SQL-escaped.
 * @param mixed $value      Optional. Option value. Must be serializable if non-scalar.
 *                              Expected to not be SQL-escaped.
 * @param string $deprecated Optional. Description. Not used anymore.
 * @param bool|null $autoload   Optional. Whether to load the option when WordPress starts up.
 *                              Accepts a boolean, or `null` to leave the decision up to default heuristics in WordPress.
 *                              For backward compatibility 'yes' and 'no' are also accepted.
 *                              Autoloading too many options can lead to performance problems, especially if the
 *                              options are not frequently used. For options which are accessed across several places
 *                              in the frontend, it is recommended to autoload them, by using 'yes'|true.
 *                              For options which are accessed only on few specific URLs, it is recommended
 *                              to not autoload them, by using false.
 *                              Default is null, which means WordPress will determine the autoload value.
 * @return bool True if the option was added, false otherwise.
 */
    public function addOption(string $option, mixed $value = '', string $deprecated = '', bool|null $autoload = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes an option by name. Prevents removal of protected WordPress options.
 *
 * @since 1.2.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $option Name of the option to delete. Expected to not be SQL-escaped.
 * @return bool True if the option was deleted, false otherwise.
 */
    public function deleteOption(string $option): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a transient.
 *
 * @since 2.8.0
 *
 * @param string $transient Transient name. Expected to not be SQL-escaped.
 * @return bool True if the transient was deleted, false otherwise.
 */
    public function deleteTransient(string $transient): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the value of a transient.
 *
 * If the transient does not exist, does not have a value, or has expired,
 * then the return value will be false.
 *
 * @since 2.8.0
 *
 * @param string $transient Transient name. Expected to not be SQL-escaped.
 * @return mixed Value of transient.
 */
    public function getTransient(string $transient): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets/updates the value of a transient.
 *
 * You do not need to serialize values. If the value needs to be serialized,
 * then it will be serialized before it is set.
 *
 * @since 2.8.0
 *
 * @param string $transient  Transient name. Expected to not be SQL-escaped.
 *                           Must be 172 characters or fewer in length.
 * @param mixed $value      Transient value. Must be serializable if non-scalar.
 *                           Expected to not be SQL-escaped.
 * @param int $expiration Optional. Time until expiration in seconds. Default 0 (no expiration).
 * @return bool True if the value was set, false otherwise.
 */
    public function setTransient(string $transient, mixed $value, int $expiration = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes all expired transients.
 *
 * Note that this function won't do anything if an external object cache is in use.
 *
 * The multi-table delete syntax is used to delete the transient record
 * from table a, and the corresponding transient_timeout record from table b.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @since 4.9.0
 *
 * @param bool $forceDb Optional. Force cleanup to run against the database even when an external object cache is used.
 */
    public function deleteExpiredTransients(bool $forceDb = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves and restores user interface settings stored in a cookie.
 *
 * Checks if the current user-settings cookie is updated and stores it. When no
 * cookie exists (different browser used), adds the last saved cookie restoring
 * the settings.
 *
 * @since 2.7.0
 */
    public function wpUserSettings(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves user interface setting value based on setting name.
 *
 * @since 2.7.0
 *
 * @param string $name          The name of the setting.
 * @param string|false $defaultValue Optional. Default value to return when $name is not set. Default false.
 * @return mixed The last saved user setting or the default value/false if it doesn't exist.
 */
    public function getUserSetting(string $name, string|false $defaultValue = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds or updates user interface setting.
 *
 * Both `$name` and `$value` can contain only ASCII letters, numbers, hyphens, and underscores.
 *
 * This function has to be used before any output has started as it calls `setcookie()`.
 *
 * @since 2.8.0
 *
 * @param string $name  The name of the setting.
 * @param string $value The value for the setting.
 * @return bool|null True if set successfully, false otherwise.
 *                   Null if the current user is not a member of the site.
 */
    public function setUserSetting(string $name, string $value): bool|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes user interface settings.
 *
 * Deleting settings would reset them to the defaults.
 *
 * This function has to be used before any output has started as it calls `setcookie()`.
 *
 * @since 2.7.0
 *
 * @param string $names The name or array of names of the setting to be deleted.
 * @return bool|null True if deleted successfully, false otherwise.
 *                   Null if the current user is not a member of the site.
 */
    public function deleteUserSetting(string $names): bool|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all user interface settings.
 *
 * @since 2.7.0
 *
 * @global array $_updated_user_settings
 *
 * @return array The last saved user settings or empty array.
 */
    public function getAllUserSettings(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes the user settings of the current user.
 *
 * @since 2.7.0
 */
    public function deleteAllUserSettings(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieve an option value for the current network based on name of option.
 *
 * @since 2.8.0
 * @since 4.4.0 The `$use_cache` parameter was deprecated.
 * @since 4.4.0 Modified into wrapper for get_network_option()
 *
 * @see get_network_option()
 *
 * @param string $option        Name of the option to retrieve. Expected to not be SQL-escaped.
 * @param mixed $defaultValue Optional. Value to return if the option doesn't exist. Default false.
 * @param bool $deprecated    Whether to use cache. Multisite only. Always set to true.
 * @return mixed Value set for the option.
 */
    public function getSiteOption(string $option, mixed $defaultValue = false, bool $deprecated = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new option for the current network.
 *
 * Existing options will not be updated. Note that prior to 3.3 this wasn't the case.
 *
 * @since 2.8.0
 * @since 4.4.0 Modified into wrapper for add_network_option()
 *
 * @see add_network_option()
 *
 * @param string $option Name of the option to add. Expected to not be SQL-escaped.
 * @param mixed $value  Option value, can be anything. Expected to not be SQL-escaped.
 * @return bool True if the option was added, false otherwise.
 */
    public function addSiteOption(string $option, mixed $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes an option by name for the current network.
 *
 * @since 2.8.0
 * @since 4.4.0 Modified into wrapper for delete_network_option()
 *
 * @see delete_network_option()
 *
 * @param string $option Name of the option to delete. Expected to not be SQL-escaped.
 * @return bool True if the option was deleted, false otherwise.
 */
    public function deleteSiteOption(string $option): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the value of an option that was already added for the current network.
 *
 * @since 2.8.0
 * @since 4.4.0 Modified into wrapper for update_network_option()
 *
 * @see update_network_option()
 *
 * @param string $option Name of the option. Expected to not be SQL-escaped.
 * @param mixed $value  Option value. Expected to not be SQL-escaped.
 * @return bool True if the value was updated, false otherwise.
 */
    public function updateSiteOption(string $option, mixed $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a network's option value based on the option name.
 *
 * @since 4.4.0
 *
 * @see get_option()
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $networkId    ID of the network. Can be null to default to the current network ID.
 * @param string $option        Name of the option to retrieve. Expected to not be SQL-escaped.
 * @param mixed $defaultValue Optional. Value to return if the option doesn't exist. Default false.
 * @return mixed Value set for the option.
 */
    public function getNetworkOption(int $networkId, string $option, mixed $defaultValue = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new network option.
 *
 * Existing options will not be updated.
 *
 * @since 4.4.0
 *
 * @see add_option()
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $networkId ID of the network. Can be null to default to the current network ID.
 * @param string $option     Name of the option to add. Expected to not be SQL-escaped.
 * @param mixed $value      Option value, can be anything. Expected to not be SQL-escaped.
 * @return bool True if the option was added, false otherwise.
 */
    public function addNetworkOption(int $networkId, string $option, mixed $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a network option by name.
 *
 * @since 4.4.0
 *
 * @see delete_option()
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $networkId ID of the network. Can be null to default to the current network ID.
 * @param string $option     Name of the option to delete. Expected to not be SQL-escaped.
 * @return bool True if the option was deleted, false otherwise.
 */
    public function deleteNetworkOption(int $networkId, string $option): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the value of a network option that was already added.
 *
 * @since 4.4.0
 *
 * @see update_option()
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $networkId ID of the network. Can be null to default to the current network ID.
 * @param string $option     Name of the option. Expected to not be SQL-escaped.
 * @param mixed $value      Option value. Expected to not be SQL-escaped.
 * @return bool True if the value was updated, false otherwise.
 */
    public function updateNetworkOption(int $networkId, string $option, mixed $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a site transient.
 *
 * @since 2.9.0
 *
 * @param string $transient Transient name. Expected to not be SQL-escaped.
 * @return bool True if the transient was deleted, false otherwise.
 */
    public function deleteSiteTransient(string $transient): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the value of a site transient.
 *
 * If the transient does not exist, does not have a value, or has expired,
 * then the return value will be false.
 *
 * @since 2.9.0
 *
 * @see get_transient()
 *
 * @param string $transient Transient name. Expected to not be SQL-escaped.
 * @return mixed Value of transient.
 */
    public function getSiteTransient(string $transient): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets/updates the value of a site transient.
 *
 * You do not need to serialize values. If the value needs to be serialized,
 * then it will be serialized before it is set.
 *
 * @since 2.9.0
 *
 * @see set_transient()
 *
 * @param string $transient  Transient name. Expected to not be SQL-escaped. Must be
 *                           167 characters or fewer in length.
 * @param mixed $value      Transient value. Expected to not be SQL-escaped.
 * @param int $expiration Optional. Time until expiration in seconds. Default 0 (no expiration).
 * @return bool True if the value was set, false otherwise.
 */
    public function setSiteTransient(string $transient, mixed $value, int $expiration = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers default settings available in WordPress.
 *
 * The settings registered here are primarily useful for the REST API, so this
 * does not encompass all settings available in WordPress.
 *
 * @since 4.7.0
 * @since 6.0.1 The `show_on_front`, `page_on_front`, and `page_for_posts` options were added.
 */
    public function registerInitialSettings(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a setting and its data.
 *
 * @since 2.7.0
 * @since 3.0.0 The `misc` option group was deprecated.
 * @since 3.5.0 The `privacy` option group was deprecated.
 * @since 4.7.0 `$args` can be passed to set flags on the setting, similar to `register_meta()`.
 * @since 5.5.0 `$new_whitelist_options` was renamed to `$new_allowed_options`.
 *              Please consider writing more inclusive code.
 * @since 6.6.0 Added the `label` argument.
 *
 * @global array $new_allowed_options
 * @global array $wp_registered_settings
 *
 * @param string $optionGroup A settings group name. Should correspond to an allowed option key name.
 *                             Default allowed option key names include 'general', 'discussion', 'media',
 *                             'reading', 'writing', and 'options'.
 * @param string $optionName The name of an option to sanitize and save.
 * @param array $args {
 *     Data used to describe the setting when registered.
 *
 *     @type string     $type              The type of data associated with this setting.
 *                                         Valid values are 'string', 'boolean', 'integer', 'number', 'array', and 'object'.
 *     @type string     $label             A label of the data attached to this setting.
 *     @type string     $description       A description of the data attached to this setting.
 *     @type callable   $sanitize_callback A callback function that sanitizes the option's value.
 *     @type bool|array $show_in_rest      Whether data associated with this setting should be included in the REST API.
 *                                         When registering complex settings, this argument may optionally be an
 *                                         array with a 'schema' key.
 *     @type mixed      $default           Default value when calling `get_option()`.
 * }
 */
    public function registerSetting(string $optionGroup, string $optionName, array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a setting.
 *
 * @since 2.7.0
 * @since 4.7.0 `$sanitize_callback` was deprecated. The callback from `register_setting()` is now used instead.
 * @since 5.5.0 `$new_whitelist_options` was renamed to `$new_allowed_options`.
 *              Please consider writing more inclusive code.
 *
 * @global array $new_allowed_options
 * @global array $wp_registered_settings
 *
 * @param string $optionGroup The settings group name used during registration.
 * @param string $optionName  The name of the option to unregister.
 * @param callable $deprecated   Optional. Deprecated.
 */
    public function unregisterSetting(string $optionGroup, string $optionName, callable $deprecated = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an array of registered settings.
 *
 * @since 4.7.0
 *
 * @global array $wp_registered_settings
 *
 * @return array List of registered settings, keyed by option name.
 */
    public function getRegisteredSettings(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the default value for the option.
 *
 * For settings which register a default setting in `register_setting()`, this
 * function is added as a filter to `default_option_{$option}`.
 *
 * @since 4.7.0
 *
 * @param mixed $defaultValue  Existing default value to return.
 * @param string $option         Option name.
 * @param bool $passedDefault Was `get_option()` passed a default value?
 * @return mixed Filtered default value.
 */
    public function filterDefaultOption(mixed $defaultValue, string $option, bool $passedDefault): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the values that trigger autoloading from the options table.
 *
 * @since 6.6.0
 *
 * @return string[] The values that trigger autoloading.
 */
    public function wpAutoloadValuesToAutoload(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Changes the current user by ID or name.
     *
     * Set $id to null and specify a name if you do not know a user's ID.
     *
     * Some WordPress functionality is based on the current user and not based on
     * the signed in user. Therefore, it opens the ability to edit and perform
     * actions on users who aren't signed in.
     *
     * @since 2.0.3
     *
     * @global WP_User $current_user The current user object which holds the user data.
     *
     * @param int|null $id   User ID.
     * @param string $name User's username.
     * @return \WP_User Current user User object.
     */
    public function wpSetCurrentUser(int|null $id, string $name = ''): \WP_User
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Retrieves the current user object.
     *
     * Will set the current user, if the current user is not set. The current user
     * will be set to the logged-in person. If no user is logged-in, then it will
     * set the current user to 0, which is invalid and won't have any permissions.
     *
     * @since 2.0.3
     *
     * @see _wp_get_current_user()
     * @global WP_User $current_user Checks if the current user is set.
     *
     * @return \WP_User Current WP_User instance.
     */
    public function wpGetCurrentUser(): \WP_User
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Retrieves user info by user ID.
     *
     * @since 0.71
     *
     * @param int $userId User ID
     * @return \WP_User|false WP_User object on success, false on failure.
     */
    public function getUserdata(int $userId): \WP_User|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Retrieves user info by a given field.
     *
     * @since 2.8.0
     * @since 4.4.0 Added 'ID' as an alias of 'id' for the `$field` parameter.
     *
     * @global WP_User $current_user The current user object which holds the user data.
     *
     * @param string $field The field to retrieve the user with. id | ID | slug | email | login.
     * @param int|string $value A value for $field. A user ID, slug, email address, or login name.
     * @return \WP_User|false WP_User object on success, false on failure.
     */
    public function getUserBy(string $field, int|string $value): \WP_User|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Retrieves info for user lists to prevent multiple queries by get_userdata().
     *
     * @since 3.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param int[] $userIds User ID numbers list
     */
    public function cacheUsers(array $userIds): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Sends an email, similar to PHP's mail function.
     *
     * A true return value does not automatically mean that the user received the
     * email successfully. It just only means that the method used was able to
     * process the request without any errors.
     *
     * The default content type is `text/plain` which does not allow using HTML.
     * However, you can set the content type of the email by using the
     * {@see 'wp_mail_content_type'} filter.
     *
     * The default charset is based on the charset used on the blog. The charset can
     * be set using the {@see 'wp_mail_charset'} filter.
     *
     * @since 1.2.1
     * @since 5.5.0 is_email() is used for email validation,
     *              instead of PHPMailer's default validator.
     *
     * @global PHPMailer\PHPMailer\PHPMailer $phpmailer
     *
     * @param string|string[] $to          Array or comma-separated list of email addresses to send message.
     * @param string $subject     Email subject.
     * @param string $message     Message contents.
     * @param string|string[] $headers     Optional. Additional headers.
     * @param string|string[] $attachments Optional. Paths to files to attach.
     * @return bool Whether the email was sent successfully.
     */
    public function wpMail(string|array $to, string $subject, string $message, string|array $headers = '', string|array $attachments = []): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Authenticates a user, confirming the login credentials are valid.
     *
     * @since 2.5.0
     * @since 4.5.0 `$username` now accepts an email address.
     *
     * @param string $username User's username or email address.
     * @param string $password User's password.
     * @return \WP_User|\WP_Error WP_User object if the credentials are valid,
     *                          otherwise WP_Error.
     */
    public function wpAuthenticate(string $username, string $password): \WP_User|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Logs the current user out.
     *
     * @since 2.5.0
     */
    public function wpLogout(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Validates authentication cookie.
     *
     * The checks include making sure that the authentication cookie is set and
     * pulling in the contents (if $cookie is not used).
     *
     * Makes sure the cookie is not expired. Verifies the hash in cookie is what is
     * should be and compares the two.
     *
     * @since 2.5.0
     *
     * @global int $login_grace_period
     *
     * @param string $cookie Optional. If used, will validate contents instead of cookie's.
     * @param string $scheme Optional. The cookie scheme to use: 'auth', 'secure_auth', or 'logged_in'.
     * @return int|false User ID if valid cookie, false if invalid.
     */
    public function wpValidateAuthCookie(string $cookie = '', string $scheme = ''): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Generates authentication cookie contents.
     *
     * @since 2.5.0
     * @since 4.0.0 The `$token` parameter was added.
     *
     * @param int $userId    User ID.
     * @param int $expiration The time the cookie expires as a UNIX timestamp.
     * @param string $scheme     Optional. The cookie scheme to use: 'auth', 'secure_auth', or 'logged_in'.
     *                           Default 'auth'.
     * @param string $token      User's session token to use for this cookie.
     * @return string Authentication cookie contents. Empty string if user does not exist.
     */
    public function wpGenerateAuthCookie(int $userId, int $expiration, string $scheme = 'auth', string $token = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Parses a cookie into its components.
     *
     * @since 2.7.0
     * @since 4.0.0 The `$token` element was added to the return value.
     *
     * @param string $cookie Authentication cookie.
     * @param string $scheme Optional. The cookie scheme to use: 'auth', 'secure_auth', or 'logged_in'.
     * @return string[]|false {
     *     Authentication cookie components. None of the components should be assumed
     *     to be valid as they come directly from a client-provided cookie value. If
     *     the cookie value is malformed, false is returned.
     *
     *     @type string $username   User's username.
     *     @type string $expiration The time the cookie expires as a UNIX timestamp.
     *     @type string $token      User's session token used.
     *     @type string $hmac       The security hash for the cookie.
     *     @type string $scheme     The cookie scheme to use.
     * }
     */
    public function wpParseAuthCookie(string $cookie = '', string $scheme = ''): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Sets the authentication cookies based on user ID.
     *
     * The $remember parameter increases the time that the cookie will be kept. The
     * default the cookie is kept without remembering is two days. When $remember is
     * set, the cookies will be kept for 14 days or two weeks.
     *
     * @since 2.5.0
     * @since 4.3.0 Added the `$token` parameter.
     *
     * @param int $userId  User ID.
     * @param bool $remember Whether to remember the user.
     * @param bool|string $secure   Whether the auth cookie should only be sent over HTTPS. Default is an empty
     *                              string which means the value of `is_ssl()` will be used.
     * @param string $token    Optional. User's session token to use for this cookie.
     */
    public function wpSetAuthCookie(int $userId, bool $remember = false, bool|string $secure = '', string $token = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Removes all of the cookies associated with authentication.
     *
     * @since 2.5.0
     */
    public function wpClearAuthCookie(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Determines whether the current visitor is a logged in user.
     *
     * For more information on this and similar theme functions, check out
     * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
     * Conditional Tags} article in the Theme Developer Handbook.
     *
     * @since 2.0.0
     *
     * @return bool True if user is logged in, false if not logged in.
     */
    public function isUserLoggedIn(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Checks if a user is logged in, if not it redirects them to the login page.
     *
     * When this code is called from a page, it checks to see if the user viewing the page is logged in.
     * If the user is not logged in, they are redirected to the login page. The user is redirected
     * in such a way that, upon logging in, they will be sent directly to the page they were originally
     * trying to access.
     *
     * @since 1.5.0
     */
    public function authRedirect(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Ensures intent by verifying that a user was referred from another admin page with the correct security nonce.
     *
     * This function ensures the user intends to perform a given action, which helps protect against clickjacking style
     * attacks. It verifies intent, not authorization, therefore it does not verify the user's capabilities. This should
     * be performed with `current_user_can()` or similar.
     *
     * If the nonce value is invalid, the function will exit with an "Are You Sure?" style message.
     *
     * @since 1.2.0
     * @since 2.5.0 The `$query_arg` parameter was added.
     *
     * @param int|string $action    The nonce action.
     * @param string $queryArg Optional. Key to check for nonce in `$_REQUEST`. Default '_wpnonce'.
     * @return int|false 1 if the nonce is valid and generated between 0-12 hours ago,
     *                   2 if the nonce is valid and generated between 12-24 hours ago.
     *                   False if the nonce is invalid.
     */
    public function checkAdminReferer(int|string $action, string $queryArg = '_wpnonce'): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Verifies the Ajax request to prevent processing requests external of the blog.
     *
     * @since 2.0.3
     *
     * @param int|string $action    Action nonce.
     * @param false|string $queryArg Optional. Key to check for the nonce in `$_REQUEST` (since 2.5). If false,
     *                                `$_REQUEST` values will be evaluated for '_ajax_nonce', and '_wpnonce'
     *                                (in that order). Default false.
     * @param bool $stop      Optional. Whether to stop early when the nonce cannot be verified.
     *                                Default true.
     * @return int|false 1 if the nonce is valid and generated between 0-12 hours ago,
     *                   2 if the nonce is valid and generated between 12-24 hours ago.
     *                   False if the nonce is invalid.
     */
    public function checkAjaxReferer(int|string $action, false|string $queryArg = false, bool $stop = true): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Redirects to another page.
     *
     * Note: wp_redirect() does not exit automatically, and should almost always be
     * followed by a call to `exit;`:
     *
     *     wp_redirect( $url );
     *     exit;
     *
     * Exiting can also be selectively manipulated by using wp_redirect() as a conditional
     * in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_status'} filters:
     *
     *     if ( wp_redirect( $url ) ) {
     *         exit;
     *     }
     *
     * @since 1.5.1
     * @since 5.1.0 The `$x_redirect_by` parameter was added.
     * @since 5.4.0 On invalid status codes, wp_die() is called.
     *
     * @global bool $is_IIS
     *
     * @param string $location      The path or URL to redirect to.
     * @param int $status        Optional. HTTP response status code to use. Default '302' (Moved Temporarily).
     * @param string|false $xRedirectBy Optional. The application doing the redirect or false to omit. Default 'WordPress'.
     * @return bool False if the redirect was canceled, true otherwise.
     */
    public function wpRedirect(string $location, int $status = 302, string|false $xRedirectBy = 'WordPress'): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Sanitizes a URL for use in a redirect.
     *
     * @since 2.3.0
     *
     * @param string $location The path to redirect to.
     * @return string Redirect-sanitized URL.
     */
    public function wpSanitizeRedirect(string $location): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Performs a safe (local) redirect, using wp_redirect().
     *
     * Checks whether the $location is using an allowed host, if it has an absolute
     * path. A plugin can therefore set or remove allowed host(s) to or from the
     * list.
     *
     * If the host is not allowed, then the redirect defaults to wp-admin on the siteurl
     * instead. This prevents malicious redirects which redirect to another host,
     * but only used in a few places.
     *
     * Note: wp_safe_redirect() does not exit automatically, and should almost always be
     * followed by a call to `exit;`:
     *
     *     wp_safe_redirect( $url );
     *     exit;
     *
     * Exiting can also be selectively manipulated by using wp_safe_redirect() as a conditional
     * in conjunction with the {@see 'wp_redirect'} and {@see 'wp_redirect_status'} filters:
     *
     *     if ( wp_safe_redirect( $url ) ) {
     *         exit;
     *     }
     *
     * @since 2.3.0
     * @since 5.1.0 The return value from wp_redirect() is now passed on, and the `$x_redirect_by` parameter was added.
     *
     * @param string $location      The path or URL to redirect to.
     * @param int $status        Optional. HTTP response status code to use. Default '302' (Moved Temporarily).
     * @param string|false $xRedirectBy Optional. The application doing the redirect or false to omit. Default 'WordPress'.
     * @return bool False if the redirect was canceled, true otherwise.
     */
    public function wpSafeRedirect(string $location, int $status = 302, string|false $xRedirectBy = 'WordPress'): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Validates a URL for use in a redirect.
     *
     * Checks whether the $location is using an allowed host, if it has an absolute
     * path. A plugin can therefore set or remove allowed host(s) to or from the
     * list.
     *
     * If the host is not allowed, then the redirect is to $fallback_url supplied.
     *
     * @since 2.8.1
     *
     * @param string $location     The redirect to validate.
     * @param string $fallbackUrl The value to return if $location is not allowed.
     * @return string Redirect-sanitized URL.
     */
    public function wpValidateRedirect(string $location, string $fallbackUrl = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Notifies an author (and/or others) of a comment/trackback/pingback on a post.
     *
     * @since 1.0.0
     *
     * @param int|\WP_Comment $commentId Comment ID or WP_Comment object.
     * @param string $deprecated Not used.
     * @return bool True on completion. False if no email addresses were specified.
     */
    public function wpNotifyPostauthor(int|\WP_Comment $commentId, string $deprecated = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Notifies the moderator of the site about a new comment that is awaiting approval.
     *
     * @since 1.0.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * Uses the {@see 'notify_moderator'} filter to determine whether the site moderator
     * should be notified, overriding the site setting.
     *
     * @param int $commentId Comment ID.
     * @return true Always returns true.
     */
    public function wpNotifyModerator(int $commentId): true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Notifies the blog admin of a user changing password, normally via email.
     *
     * @since 2.7.0
     *
     * @param \WP_User $user User object.
     */
    public function wpPasswordChangeNotification(\WP_User $user): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Emails login credentials to a newly-registered user.
     *
     * A new user registration notification is also sent to admin email.
     *
     * @since 2.0.0
     * @since 4.3.0 The `$plaintext_pass` parameter was changed to `$notify`.
     * @since 4.3.1 The `$plaintext_pass` parameter was deprecated. `$notify` added as a third parameter.
     * @since 4.6.0 The `$notify` parameter accepts 'user' for sending notification only to the user created.
     *
     * @param int $userId    User ID.
     * @param null $deprecated Not used (argument deprecated).
     * @param string $notify     Optional. Type of notification that should happen. Accepts 'admin' or an empty
     *                           string (admin only), 'user', or 'both' (admin and user). Default empty.
     */
    public function wpNewUserNotification(int $userId, null $deprecated = null, string $notify = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Returns the time-dependent variable for nonce creation.
     *
     * A nonce has a lifespan of two ticks. Nonces in their second tick may be
     * updated, e.g. by autosave.
     *
     * @since 2.5.0
     * @since 6.1.0 Added `$action` argument.
     *
     * @param string|int $action Optional. The nonce action. Default -1.
     * @return float Float value rounded up to the next highest integer.
     */
    public function wpNonceTick(string|int $action): float
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Verifies that a correct security nonce was used with time limit.
     *
     * A nonce is valid for 24 hours (by default).
     *
     * @since 2.0.3
     *
     * @param string $nonce  Nonce value that was used for verification, usually via a form field.
     * @param string|int $action Should give context to what is taking place and be the same when nonce was created.
     * @return int|false 1 if the nonce is valid and generated between 0-12 hours ago,
     *                   2 if the nonce is valid and generated between 12-24 hours ago.
     *                   False if the nonce is invalid.
     */
    public function wpVerifyNonce(string $nonce, string|int $action): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Creates a cryptographic token tied to a specific action, user, user session,
     * and window of time.
     *
     * @since 2.0.3
     * @since 4.0.0 Session tokens were integrated with nonce creation.
     *
     * @param string|int $action Scalar value to add context to the nonce.
     * @return string The token.
     */
    public function wpCreateNonce(string|int $action): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Returns a salt to add to hashes.
     *
     * Salts are created using secret keys. Secret keys are located in two places:
     * in the database and in the wp-config.php file. The secret key in the database
     * is randomly generated and will be appended to the secret keys in wp-config.php.
     *
     * The secret keys in wp-config.php should be updated to strong, random keys to maximize
     * security. Below is an example of how the secret key constants are defined.
     * Do not paste this example directly into wp-config.php. Instead, have a
     * {@link https://api.wordpress.org/secret-key/1.1/salt/ secret key created} just
     * for you.
     *
     *     define('AUTH_KEY',         ' Xakm<o xQy rw4EMsLKM-?!T+,PFF})H4lzcW57AF0U@N@< >M%G4Yt>f`z]MON');
     *     define('SECURE_AUTH_KEY',  'LzJ}op]mr|6+![P}Ak:uNdJCJZd>(Hx.-Mh#Tz)pCIU#uGEnfFz|f ;;eU%/U^O~');
     *     define('LOGGED_IN_KEY',    '|i|Ux`9<p-h$aFf(qnT:sDO:D1P^wZ$$/Ra@miTJi9G;ddp_<q}6H1)o|a +&JCM');
     *     define('NONCE_KEY',        '%:R{[P|,s.KuMltH5}cI;/k<Gx~j!f0I)m_sIyu+&NJZ)-iO>z7X>QYR0Z_XnZ@|');
     *     define('AUTH_SALT',        'eZyT)-Naw]F8CwA*VaW#q*|.)g@o}||wf~@C-YSt}(dh_r6EbI#A,y|nU2{B#JBW');
     *     define('SECURE_AUTH_SALT', '!=oLUTXh,QW=H `}`L|9/^4-3 STz},T(w}W<I`.JjPi)<Bmf1v,HpGe}T1:Xt7n');
     *     define('LOGGED_IN_SALT',   '+XSqHc;@Q*K_b|Z?NC[3H!!EONbh.n<+=uKR:>*c(u`g~EJBf#8u#R{mUEZrozmm');
     *     define('NONCE_SALT',       'h`GXHhD>SLWVfg1(1(N{;.V!MoE(SfbA_ksP@&`+AycHcAV$+?@3q+rxV{%^VyKT');
     *
     * Salting passwords helps against tools which has stored hashed values of
     * common dictionary strings. The added values makes it harder to crack.
     *
     * @since 2.5.0
     *
     * @link https://api.wordpress.org/secret-key/1.1/salt/ Create secrets for wp-config.php
     *
     * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce).
     * @return string Salt value
     */
    public function wpSalt(string $scheme = 'auth'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Gets hash of given string.
     *
     * @since 2.0.3
     *
     * @param string $data   Plain text to hash.
     * @param string $scheme Authentication scheme (auth, secure_auth, logged_in, nonce).
     * @return string Hash of $data.
     */
    public function wpHash(string $data, string $scheme = 'auth'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Creates a hash (encrypt) of a plain text password.
     *
     * For integration with other applications, this function can be overwritten to
     * instead use the other package password checking algorithm.
     *
     * @since 2.5.0
     *
     * @global PasswordHash $wp_hasher PHPass object.
     *
     * @param string $password Plain text user password to hash.
     * @return string The hash string of the password.
     */
    public function wpHashPassword(string $password): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Checks the plaintext password against the encrypted Password.
     *
     * Maintains compatibility between old version and the new cookie authentication
     * protocol using PHPass library. The $hash parameter is the encrypted password
     * and the function compares the plain text password when encrypted similarly
     * against the already encrypted password to see if they match.
     *
     * For integration with other applications, this function can be overwritten to
     * instead use the other package password checking algorithm.
     *
     * @since 2.5.0
     *
     * @global PasswordHash $wp_hasher PHPass object used for checking the password
     *                                 against the $hash + $password.
     * @uses PasswordHash::CheckPassword
     *
     * @param string $password Plaintext user's password.
     * @param string $hash     Hash of the user's password to check against.
     * @param string|int $userId  Optional. User ID.
     * @return bool False, if the $password does not match the hashed password.
     */
    public function wpCheckPassword(string $password, string $hash, string|int $userId = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Generates a random password drawn from the defined set of characters.
     *
     * Uses wp_rand() to create passwords with far less predictability
     * than similar native PHP functions like `rand()` or `mt_rand()`.
     *
     * @since 2.5.0
     *
     * @param int $length              Optional. The length of password to generate. Default 12.
     * @param bool $specialChars       Optional. Whether to include standard special characters.
     *                                  Default true.
     * @param bool $extraSpecialChars Optional. Whether to include other special characters.
     *                                  Used when generating secret keys and salts. Default false.
     * @return string The random password.
     */
    public function wpGeneratePassword(int $length = 12, bool $specialChars = true, bool $extraSpecialChars = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Generates a random non-negative number.
     *
     * @since 2.6.2
     * @since 4.4.0 Uses PHP7 random_int() or the random_compat library if available.
     * @since 6.1.0 Returns zero instead of a random number if both `$min` and `$max` are zero.
     *
     * @global string $rnd_value
     *
     * @param int $min Optional. Lower limit for the generated number.
     *                 Accepts positive integers or zero. Defaults to 0.
     * @param int $max Optional. Upper limit for the generated number.
     *                 Accepts positive integers. Defaults to 4294967295.
     * @return int A random non-negative number between min and max.
     */
    public function wpRand(int $min = null, int $max = null): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Updates the user's password with a new encrypted one.
     *
     * For integration with other applications, this function can be overwritten to
     * instead use the other package password checking algorithm.
     *
     * Please note: This function should be used sparingly and is really only meant for single-time
     * application. Leveraging this improperly in a plugin or theme could result in an endless loop
     * of password resets if precautions are not taken to ensure it does not execute on every page load.
     *
     * @since 2.5.0
     *
     * @global wpdb $wpdb WordPress database abstraction object.
     *
     * @param string $password The plaintext new user password.
     * @param int $userId  User ID.
     */
    public function wpSetPassword(string $password, int $userId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Retrieves the avatar `<img>` tag for a user, email address, MD5 hash, comment, or post.
     *
     * @since 2.5.0
     * @since 4.2.0 Added the optional `$args` parameter.
     * @since 5.5.0 Added the `loading` argument.
     * @since 6.1.0 Added the `decoding` argument.
     * @since 6.3.0 Added the `fetchpriority` argument.
     *
     * @param mixed $idOrEmail   The avatar to retrieve. Accepts a user ID, Gravatar MD5 hash,
     *                              user email, WP_User object, WP_Post object, or WP_Comment object.
     * @param int $size          Optional. Height and width of the avatar in pixels. Default 96.
     * @param string $defaultValue URL for the default image or a default type. Accepts:
     *                              - '404' (return a 404 instead of a default image)
     *                              - 'retro' (a 8-bit arcade-style pixelated face)
     *                              - 'robohash' (a robot)
     *                              - 'monsterid' (a monster)
     *                              - 'wavatar' (a cartoon face)
     *                              - 'identicon' (the "quilt", a geometric pattern)
     *                              - 'mystery', 'mm', or 'mysteryman' (The Oyster Man)
     *                              - 'blank' (transparent GIF)
     *                              - 'gravatar_default' (the Gravatar logo)
     *                              Default is the value of the 'avatar_default' option,
     *                              with a fallback of 'mystery'.
     * @param string $alt           Optional. Alternative text to use in the avatar image tag.
     *                              Default empty.
     * @param array $args {
     *     Optional. Extra arguments to retrieve the avatar.
     *
     *     @type int          $height        Display height of the avatar in pixels. Defaults to $size.
     *     @type int          $width         Display width of the avatar in pixels. Defaults to $size.
     *     @type bool         $force_default Whether to always show the default image, never the Gravatar.
     *                                       Default false.
     *     @type string       $rating        What rating to display avatars up to. Accepts:
     *                                       - 'G' (suitable for all audiences)
     *                                       - 'PG' (possibly offensive, usually for audiences 13 and above)
     *                                       - 'R' (intended for adult audiences above 17)
     *                                       - 'X' (even more mature than above)
     *                                       Default is the value of the 'avatar_rating' option.
     *     @type string       $scheme        URL scheme to use. See set_url_scheme() for accepted values.
     *                                       Default null.
     *     @type array|string $class         Array or string of additional classes to add to the img element.
     *                                       Default null.
     *     @type bool         $force_display Whether to always show the avatar - ignores the show_avatars option.
     *                                       Default false.
     *     @type string       $loading       Value for the `loading` attribute.
     *                                       Default null.
     *     @type string       $fetchpriority Value for the `fetchpriority` attribute.
     *                                       Default null.
     *     @type string       $decoding      Value for the `decoding` attribute.
     *                                       Default null.
     *     @type string       $extra_attr    HTML attributes to insert in the IMG element. Is not sanitized.
     *                                       Default empty.
     * }
     * @return string|false `<img>` tag for the user's avatar. False on failure.
     */
    public function getAvatar(mixed $idOrEmail, int $size = 96, string $defaultValue = '', string $alt = '', array $args = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
     * Displays a human readable HTML representation of the difference between two strings.
     *
     * The Diff is available for getting the changes between versions. The output is
     * HTML, so the primary use is for displaying the changes. If the two strings
     * are equivalent, then an empty string will be returned.
     *
     * @since 2.6.0
     *
     * @see wp_parse_args() Used to change defaults to user defined settings.
     * @uses Text_Diff
     * @uses WP_Text_Diff_Renderer_Table
     *
     * @param string $leftString  "old" (left) version of string.
     * @param string $rightString "new" (right) version of string.
     * @param string|array $args {
     *     Associative array of options to pass to WP_Text_Diff_Renderer_Table().
     *
     *     @type string $title           Titles the diff in a manner compatible
     *                                   with the output. Default empty.
     *     @type string $title_left      Change the HTML to the left of the title.
     *                                   Default empty.
     *     @type string $title_right     Change the HTML to the right of the title.
     *                                   Default empty.
     *     @type bool   $show_split_view True for split view (two columns), false for
     *                                   un-split view (single column). Default true.
     * }
     * @return string Empty string if strings are equivalent or HTML with differences.
     */
    public function wpTextDiff(string $leftString, string $rightString, string|array $args = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a callback function to a filter hook.
 *
 * WordPress offers filter hooks to allow plugins to modify
 * various types of internal data at runtime.
 *
 * A plugin can modify data by binding a callback to a filter hook. When the filter
 * is later applied, each bound callback is run in order of priority, and given
 * the opportunity to modify a value by returning a new value.
 *
 * The following example shows how a callback function is bound to a filter hook.
 *
 * Note that `$example` is passed to the callback, (maybe) modified, then returned:
 *
 *     function example_callback( $example ) {
 *         // Maybe modify $example in some way.
 *         return $example;
 *     }
 *     add_filter( 'example_filter', 'example_callback' );
 *
 * Bound callbacks can accept from none to the total number of arguments passed as parameters
 * in the corresponding apply_filters() call.
 *
 * In other words, if an apply_filters() call passes four total arguments, callbacks bound to
 * it can accept none (the same as 1) of the arguments or up to four. The important part is that
 * the `$accepted_args` value must reflect the number of arguments the bound callback *actually*
 * opted to accept. If no arguments were accepted by the callback that is considered to be the
 * same as accepting 1 argument. For example:
 *
 *     // Filter call.
 *     $value = apply_filters( 'hook', $value, $arg2, $arg3 );
 *
 *     // Accepting zero/one arguments.
 *     function example_callback() {
 *         ...
 *         return 'some value';
 *     }
 *     add_filter( 'hook', 'example_callback' ); // Where $priority is default 10, $accepted_args is default 1.
 *
 *     // Accepting two arguments (three possible).
 *     function example_callback( $value, $arg2 ) {
 *         ...
 *         return $maybe_modified_value;
 *     }
 *     add_filter( 'hook', 'example_callback', 10, 2 ); // Where $priority is 10, $accepted_args is 2.
 *
 * *Note:* The function will return true whether or not the callback is valid.
 * It is up to you to take care. This is done for optimization purposes, so
 * everything is as quick as possible.
 *
 * @since 0.71
 *
 * @global WP_Hook[] $wp_filter A multidimensional array of all hooks and the callbacks hooked to them.
 *
 * @param string $hookName     The name of the filter to add the callback to.
 * @param callable $callback      The callback to be run when the filter is applied.
 * @param int $priority      Optional. Used to specify the order in which the functions
 *                                associated with a particular filter are executed.
 *                                Lower numbers correspond with earlier execution,
 *                                and functions with the same priority are executed
 *                                in the order in which they were added to the filter. Default 10.
 * @param int $acceptedArgs Optional. The number of arguments the function accepts. Default 1.
 * @return true Always returns true.
 */
    public function addFilter(string $hookName, callable $callback, int $priority = 10, int $acceptedArgs = 1): true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calls the callback functions that have been added to a filter hook.
 *
 * This function invokes all functions attached to filter hook `$hook_name`.
 * It is possible to create new filter hooks by simply calling this function,
 * specifying the name of the new hook using the `$hook_name` parameter.
 *
 * The function also allows for multiple additional arguments to be passed to hooks.
 *
 * Example usage:
 *
 *     // The filter callback function.
 *     function example_callback( $string, $arg1, $arg2 ) {
 *         // (maybe) modify $string.
 *         return $string;
 *     }
 *     add_filter( 'example_filter', 'example_callback', 10, 3 );
 *
 *     /*
 *      * Apply the filters by calling the 'example_callback()' function
 *      * that's hooked onto `example_filter` above.
 *      *
 *      * - 'example_filter' is the filter hook.
 *      * - 'filter me' is the value being filtered.
 *      * - $arg1 and $arg2 are the additional arguments passed to the callback.
 *     $value = apply_filters( 'example_filter', 'filter me', $arg1, $arg2 );
 *
 * @since 0.71
 * @since 6.0.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @global WP_Hook[] $wp_filter         Stores all of the filters and actions.
 * @global int[]     $wp_filters        Stores the number of times each filter was triggered.
 * @global string[]  $wp_current_filter Stores the list of current filters with the current one last.
 *
 * @param string $hookName The name of the filter hook.
 * @param mixed $value     The value to filter.
 * @param mixed  ...$args   Optional. Additional parameters to pass to the callback functions.
 * @return mixed The filtered value after all hooked functions are applied to it.
 */
    public function applyFilters(string $hookName, mixed $value): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calls the callback functions that have been added to a filter hook, specifying arguments in an array.
 *
 * @since 3.0.0
 *
 * @see apply_filters() This function is identical, but the arguments passed to the
 *                      functions hooked to `$hook_name` are supplied using an array.
 *
 * @global WP_Hook[] $wp_filter         Stores all of the filters and actions.
 * @global int[]     $wp_filters        Stores the number of times each filter was triggered.
 * @global string[]  $wp_current_filter Stores the list of current filters with the current one last.
 *
 * @param string $hookName The name of the filter hook.
 * @param array $args      The arguments supplied to the functions hooked to `$hook_name`.
 * @return mixed The filtered value after all hooked functions are applied to it.
 */
    public function applyFiltersRefArray(string $hookName, array $args): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if any filter has been registered for a hook.
 *
 * When using the `$callback` argument, this function may return a non-boolean value
 * that evaluates to false (e.g. 0), so use the `===` operator for testing the return value.
 *
 * @since 2.5.0
 *
 * @global WP_Hook[] $wp_filter Stores all of the filters and actions.
 *
 * @param string $hookName The name of the filter hook.
 * @param callable|string|array|false $callback  Optional. The callback to check for.
 *                                               This function can be called unconditionally to speculatively check
 *                                               a callback that may or may not exist. Default false.
 * @return bool|int If `$callback` is omitted, returns boolean for whether the hook has
 *                  anything registered. When checking a specific function, the priority
 *                  of that hook is returned, or false if the function is not attached.
 */
    public function hasFilter(string $hookName, callable|string|array|false $callback = false): bool|int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a callback function from a filter hook.
 *
 * This can be used to remove default functions attached to a specific filter
 * hook and possibly replace them with a substitute.
 *
 * To remove a hook, the `$callback` and `$priority` arguments must match
 * when the hook was added. This goes for both filters and actions. No warning
 * will be given on removal failure.
 *
 * @since 1.2.0
 *
 * @global WP_Hook[] $wp_filter Stores all of the filters and actions.
 *
 * @param string $hookName The filter hook to which the function to be removed is hooked.
 * @param callable|string|array $callback  The callback to be removed from running when the filter is applied.
 *                                         This function can be called unconditionally to speculatively remove
 *                                         a callback that may or may not exist.
 * @param int $priority  Optional. The exact priority used when adding the original
 *                                         filter callback. Default 10.
 * @return bool Whether the function existed before it was removed.
 */
    public function removeFilter(string $hookName, callable|string|array $callback, int $priority = 10): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all of the callback functions from a filter hook.
 *
 * @since 2.7.0
 *
 * @global WP_Hook[] $wp_filter Stores all of the filters and actions.
 *
 * @param string $hookName The filter to remove callbacks from.
 * @param int|false $priority  Optional. The priority number to remove them from.
 *                             Default false.
 * @return true Always returns true.
 */
    public function removeAllFilters(string $hookName, int|false $priority = false): true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the name of the current filter hook.
 *
 * @since 2.5.0
 *
 * @global string[] $wp_current_filter Stores the list of current filters with the current one last
 *
 * @return string Hook name of the current filter.
 */
    public function currentFilter(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether or not a filter hook is currently being processed.
 *
 * The function current_filter() only returns the most recent filter being executed.
 * did_filter() returns the number of times a filter has been applied during
 * the current request.
 *
 * This function allows detection for any filter currently being executed
 * (regardless of whether it's the most recent filter to fire, in the case of
 * hooks called from hook callbacks) to be verified.
 *
 * @since 3.9.0
 *
 * @see current_filter()
 * @see did_filter()
 * @global string[] $wp_current_filter Current filter.
 *
 * @param string|null $hookName Optional. Filter hook to check. Defaults to null,
 *                               which checks if any filter is currently being run.
 * @return bool Whether the filter is currently in the stack.
 */
    public function doingFilter(string|null $hookName = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the number of times a filter has been applied during the current request.
 *
 * @since 6.1.0
 *
 * @global int[] $wp_filters Stores the number of times each filter was triggered.
 *
 * @param string $hookName The name of the filter hook.
 * @return int The number of times the filter hook has been applied.
 */
    public function didFilter(string $hookName): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a callback function to an action hook.
 *
 * Actions are the hooks that the WordPress core launches at specific points
 * during execution, or when specific events occur. Plugins can specify that
 * one or more of its PHP functions are executed at these points, using the
 * Action API.
 *
 * @since 1.2.0
 *
 * @param string $hookName       The name of the action to add the callback to.
 * @param callable $callback        The callback to be run when the action is called.
 * @param int $priority        Optional. Used to specify the order in which the functions
 *                                  associated with a particular action are executed.
 *                                  Lower numbers correspond with earlier execution,
 *                                  and functions with the same priority are executed
 *                                  in the order in which they were added to the action. Default 10.
 * @param int $acceptedArgs   Optional. The number of arguments the function accepts. Default 1.
 * @return true Always returns true.
 */
    public function addAction(string $hookName, callable $callback, int $priority = 10, int $acceptedArgs = 1): true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calls the callback functions that have been added to an action hook.
 *
 * This function invokes all functions attached to action hook `$hook_name`.
 * It is possible to create new action hooks by simply calling this function,
 * specifying the name of the new hook using the `$hook_name` parameter.
 *
 * You can pass extra arguments to the hooks, much like you can with `apply_filters()`.
 *
 * Example usage:
 *
 *     // The action callback function.
 *     function example_callback( $arg1, $arg2 ) {
 *         // (maybe) do something with the args.
 *     }
 *     add_action( 'example_action', 'example_callback', 10, 2 );
 *
 *     /*
 *      * Trigger the actions by calling the 'example_callback()' function
 *      * that's hooked onto `example_action` above.
 *      *
 *      * - 'example_action' is the action hook.
 *      * - $arg1 and $arg2 are the additional arguments passed to the callback.
 *     do_action( 'example_action', $arg1, $arg2 );
 *
 * @since 1.2.0
 * @since 5.3.0 Formalized the existing and already documented `...$arg` parameter
 *              by adding it to the function signature.
 *
 * @global WP_Hook[] $wp_filter         Stores all of the filters and actions.
 * @global int[]     $wp_actions        Stores the number of times each action was triggered.
 * @global string[]  $wp_current_filter Stores the list of current filters with the current one last.
 *
 * @param string $hookName The name of the action to be executed.
 * @param mixed  ...$arg    Optional. Additional arguments which are passed on to the
 *                          functions hooked to the action. Default empty.
 */
    public function doAction(string $hookName): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calls the callback functions that have been added to an action hook, specifying arguments in an array.
 *
 * @since 2.1.0
 *
 * @see do_action() This function is identical, but the arguments passed to the
 *                  functions hooked to `$hook_name` are supplied using an array.
 *
 * @global WP_Hook[] $wp_filter         Stores all of the filters and actions.
 * @global int[]     $wp_actions        Stores the number of times each action was triggered.
 * @global string[]  $wp_current_filter Stores the list of current filters with the current one last.
 *
 * @param string $hookName The name of the action to be executed.
 * @param array $args      The arguments supplied to the functions hooked to `$hook_name`.
 */
    public function doActionRefArray(string $hookName, array $args): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if any action has been registered for a hook.
 *
 * When using the `$callback` argument, this function may return a non-boolean value
 * that evaluates to false (e.g. 0), so use the `===` operator for testing the return value.
 *
 * @since 2.5.0
 *
 * @see has_filter() This function is an alias of has_filter().
 *
 * @param string $hookName The name of the action hook.
 * @param callable|string|array|false $callback  Optional. The callback to check for.
 *                                               This function can be called unconditionally to speculatively check
 *                                               a callback that may or may not exist. Default false.
 * @return bool|int If `$callback` is omitted, returns boolean for whether the hook has
 *                  anything registered. When checking a specific function, the priority
 *                  of that hook is returned, or false if the function is not attached.
 */
    public function hasAction(string $hookName, callable|string|array|false $callback = false): bool|int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a callback function from an action hook.
 *
 * This can be used to remove default functions attached to a specific action
 * hook and possibly replace them with a substitute.
 *
 * To remove a hook, the `$callback` and `$priority` arguments must match
 * when the hook was added. This goes for both filters and actions. No warning
 * will be given on removal failure.
 *
 * @since 1.2.0
 *
 * @param string $hookName The action hook to which the function to be removed is hooked.
 * @param callable|string|array $callback  The name of the function which should be removed.
 *                                         This function can be called unconditionally to speculatively remove
 *                                         a callback that may or may not exist.
 * @param int $priority  Optional. The exact priority used when adding the original
 *                                         action callback. Default 10.
 * @return bool Whether the function is removed.
 */
    public function removeAction(string $hookName, callable|string|array $callback, int $priority = 10): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all of the callback functions from an action hook.
 *
 * @since 2.7.0
 *
 * @param string $hookName The action to remove callbacks from.
 * @param int|false $priority  Optional. The priority number to remove them from.
 *                             Default false.
 * @return true Always returns true.
 */
    public function removeAllActions(string $hookName, int|false $priority = false): true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the name of the current action hook.
 *
 * @since 3.9.0
 *
 * @return string Hook name of the current action.
 */
    public function currentAction(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether or not an action hook is currently being processed.
 *
 * The function current_action() only returns the most recent action being executed.
 * did_action() returns the number of times an action has been fired during
 * the current request.
 *
 * This function allows detection for any action currently being executed
 * (regardless of whether it's the most recent action to fire, in the case of
 * hooks called from hook callbacks) to be verified.
 *
 * @since 3.9.0
 *
 * @see current_action()
 * @see did_action()
 *
 * @param string|null $hookName Optional. Action hook to check. Defaults to null,
 *                               which checks if any action is currently being run.
 * @return bool Whether the action is currently in the stack.
 */
    public function doingAction(string|null $hookName = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the number of times an action has been fired during the current request.
 *
 * @since 2.1.0
 *
 * @global int[] $wp_actions Stores the number of times each action was triggered.
 *
 * @param string $hookName The name of the action hook.
 * @return int The number of times the action hook has been fired.
 */
    public function didAction(string $hookName): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fires functions attached to a deprecated filter hook.
 *
 * When a filter hook is deprecated, the apply_filters() call is replaced with
 * apply_filters_deprecated(), which triggers a deprecation notice and then fires
 * the original filter hook.
 *
 * Note: the value and extra arguments passed to the original apply_filters() call
 * must be passed here to `$args` as an array. For example:
 *
 *     // Old filter.
 *     return apply_filters( 'wpdocs_filter', $value, $extra_arg );
 *
 *     // Deprecated.
 *     return apply_filters_deprecated( 'wpdocs_filter', array( $value, $extra_arg ), '4.9.0', 'wpdocs_new_filter' );
 *
 * @since 4.6.0
 *
 * @see _deprecated_hook()
 *
 * @param string $hookName   The name of the filter hook.
 * @param array $args        Array of additional function arguments to be passed to apply_filters().
 * @param string $version     The version of WordPress that deprecated the hook.
 * @param string $replacement Optional. The hook that should have been used. Default empty.
 * @param string $message     Optional. A message regarding the change. Default empty.
 * @return mixed The filtered value after all hooked functions are applied to it.
 */
    public function applyFiltersDeprecated(string $hookName, array $args, string $version, string $replacement = '', string $message = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fires functions attached to a deprecated action hook.
 *
 * When an action hook is deprecated, the do_action() call is replaced with
 * do_action_deprecated(), which triggers a deprecation notice and then fires
 * the original hook.
 *
 * @since 4.6.0
 *
 * @see _deprecated_hook()
 *
 * @param string $hookName   The name of the action hook.
 * @param array $args        Array of additional function arguments to be passed to do_action().
 * @param string $version     The version of WordPress that deprecated the hook.
 * @param string $replacement Optional. The hook that should have been used. Default empty.
 * @param string $message     Optional. A message regarding the change. Default empty.
 */
    public function doActionDeprecated(string $hookName, array $args, string $version, string $replacement = '', string $message = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the basename of a plugin.
 *
 * This method extracts the name of a plugin from its filename.
 *
 * @since 1.5.0
 *
 * @global array $wp_plugin_paths
 *
 * @param string $file The filename of plugin.
 * @return string The name of a plugin.
 */
    public function pluginBasename(string $file): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register a plugin's real path.
 *
 * This is used in plugin_basename() to resolve symlinked paths.
 *
 * @since 3.9.0
 *
 * @see wp_normalize_path()
 *
 * @global array $wp_plugin_paths
 *
 * @param string $file Known path to the file.
 * @return bool Whether the path was able to be registered.
 */
    public function wpRegisterPluginRealpath(string $file): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in.
 *
 * @since 2.8.0
 *
 * @param string $file The filename of the plugin (__FILE__).
 * @return string the filesystem path of the directory that contains the plugin.
 */
    public function pluginDirPath(string $file): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get the URL directory path (with trailing slash) for the plugin __FILE__ passed in.
 *
 * @since 2.8.0
 *
 * @param string $file The filename of the plugin (__FILE__).
 * @return string the URL path of the directory that contains the plugin.
 */
    public function pluginDirUrl(string $file): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Set the activation hook for a plugin.
 *
 * When a plugin is activated, the action 'activate_PLUGINNAME' hook is
 * called. In the name of this hook, PLUGINNAME is replaced with the name
 * of the plugin, including the optional subdirectory. For example, when the
 * plugin is located in wp-content/plugins/sampleplugin/sample.php, then
 * the name of this hook will become 'activate_sampleplugin/sample.php'.
 *
 * When the plugin consists of only one file and is (as by default) located at
 * wp-content/plugins/sample.php the name of this hook will be
 * 'activate_sample.php'.
 *
 * @since 2.0.0
 *
 * @param string $file     The filename of the plugin including the path.
 * @param callable $callback The function hooked to the 'activate_PLUGIN' action.
 */
    public function registerActivationHook(string $file, callable $callback): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the deactivation hook for a plugin.
 *
 * When a plugin is deactivated, the action 'deactivate_PLUGINNAME' hook is
 * called. In the name of this hook, PLUGINNAME is replaced with the name
 * of the plugin, including the optional subdirectory. For example, when the
 * plugin is located in wp-content/plugins/sampleplugin/sample.php, then
 * the name of this hook will become 'deactivate_sampleplugin/sample.php'.
 *
 * When the plugin consists of only one file and is (as by default) located at
 * wp-content/plugins/sample.php the name of this hook will be
 * 'deactivate_sample.php'.
 *
 * @since 2.0.0
 *
 * @param string $file     The filename of the plugin including the path.
 * @param callable $callback The function hooked to the 'deactivate_PLUGIN' action.
 */
    public function registerDeactivationHook(string $file, callable $callback): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the uninstallation hook for a plugin.
 *
 * Registers the uninstall hook that will be called when the user clicks on the
 * uninstall link that calls for the plugin to uninstall itself. The link won't
 * be active unless the plugin hooks into the action.
 *
 * The plugin should not run arbitrary code outside of functions, when
 * registering the uninstall hook. In order to run using the hook, the plugin
 * will have to be included, which means that any code laying outside of a
 * function will be run during the uninstallation process. The plugin should not
 * hinder the uninstallation process.
 *
 * If the plugin can not be written without running code within the plugin, then
 * the plugin should create a file named 'uninstall.php' in the base plugin
 * folder. This file will be called, if it exists, during the uninstallation process
 * bypassing the uninstall hook. The plugin, when using the 'uninstall.php'
 * should always check for the 'WP_UNINSTALL_PLUGIN' constant, before
 * executing.
 *
 * @since 2.7.0
 *
 * @param string $file     Plugin file.
 * @param callable $callback The callback to run when the hook is called. Must be
 *                           a static method or function.
 */
    public function registerUninstallHook(string $file, callable $callback): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieve the format slug for a post
 *
 * @since 3.1.0
 *
 * @param int|\WP_Post|null $post Optional. Post ID or post object. Defaults to the current post in the loop.
 * @return string|false The format if successful. False otherwise.
 */
    public function getPostFormat(int|\WP_Post|null $post = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Check if a post has any of the given formats, or any format.
 *
 * @since 3.1.0
 *
 * @param string|string[] $format Optional. The format or formats to check. Default empty array.
 * @param \WP_Post|int|null $post   Optional. The post to check. Defaults to the current post in the loop.
 * @return bool True if the post has any of the given formats (or any format, if no format specified),
 *              false otherwise.
 */
    public function hasPostFormat(string|array $format = [], \WP_Post|int|null $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Assign a format to a post
 *
 * @since 3.1.0
 *
 * @param int|\WP_Post $post   The post for which to assign a format.
 * @param string $format A format to assign. Use an empty string or array to remove all formats from the post.
 * @return array|\WP_Error|false Array of affected term IDs on success. WP_Error on error.
 */
    public function setPostFormat(int|\WP_Post $post, string $format): array|\WP_Error|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of post format slugs to their translated and pretty display versions
 *
 * @since 3.1.0
 *
 * @return string[] Array of post format labels keyed by format slug.
 */
    public function getPostFormatStrings(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the array of post format slugs.
 *
 * @since 3.1.0
 *
 * @return string[] The array of post format slugs as both keys and values.
 */
    public function getPostFormatSlugs(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a pretty, translated version of a post format slug
 *
 * @since 3.1.0
 *
 * @param string $slug A post format slug.
 * @return string The translated post format name.
 */
    public function getPostFormatString(string $slug): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a link to a post format index.
 *
 * @since 3.1.0
 *
 * @param string $format The post format slug.
 * @return string|\WP_Error|false The post format term link.
 */
    public function getPostFormatLink(string $format): string|\WP_Error|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the ID of the current item in the WordPress Loop.
 *
 * @since 0.71
 */
    public function theID(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the ID of the current item in the WordPress Loop.
 *
 * @since 2.1.0
 *
 * @return int|false The ID of the current item in the WordPress Loop. False if $post is not set.
 */
    public function getTheID(): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves the current post title with optional markup.
 *
 * @since 0.71
 *
 * @param string $before  Optional. Markup to prepend to the title. Default empty.
 * @param string $after   Optional. Markup to append to the title. Default empty.
 * @param bool $display Optional. Whether to echo or return the title. Default true for echo.
 * @return void|string Void if `$display` argument is true or the title is empty,
 *                     current post title if `$display` is false.
 */
    public function theTitle(string $before = '', string $after = '', bool $display = true): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes the current title when retrieving or displaying.
 *
 * Works like the_title(), except the parameters can be in a string or
 * an array. See the function for what can be override in the $args parameter.
 *
 * The title before it is displayed will have the tags stripped and esc_attr()
 * before it is passed to the user or displayed. The default as with the_title(),
 * is to display the title.
 *
 * @since 2.3.0
 *
 * @param string|array $args {
 *     Title attribute arguments. Optional.
 *
 *     @type string  $before Markup to prepend to the title. Default empty.
 *     @type string  $after  Markup to append to the title. Default empty.
 *     @type bool    $echo   Whether to echo or return the title. Default true for echo.
 *     @type WP_Post $post   Current post object to retrieve the title for.
 * }
 * @return void|string Void if 'echo' argument is true, the title attribute if 'echo' is false.
 */
    public function theTitleAttribute(string|array $args = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post title.
 *
 * If the post is protected and the visitor is not an admin, then "Protected"
 * will be inserted before the post title. If the post is private, then
 * "Private" will be inserted before the post title.
 *
 * @since 0.71
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return string
 */
    public function getTheTitle(int|\WP_Post $post = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the Post Global Unique Identifier (guid).
 *
 * The guid will appear to be a link, but should not be used as a link to the
 * post. The reason you should not use it as a link, is because of moving the
 * blog across domains.
 *
 * URL is escaped to make it XML-safe.
 *
 * @since 1.5.0
 *
 * @param int|\WP_Post $post Optional. Post ID or post object. Default is global $post.
 */
    public function theGuid(int|\WP_Post $post = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the Post Global Unique Identifier (guid).
 *
 * The guid will appear to be a link, but should not be used as an link to the
 * post. The reason you should not use it as a link, is because of moving the
 * blog across domains.
 *
 * @since 1.5.0
 *
 * @param int|\WP_Post $post Optional. Post ID or post object. Default is global $post.
 * @return string
 */
    public function getTheGuid(int|\WP_Post $post = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post content.
 *
 * @since 0.71
 *
 * @param string $moreLinkText Optional. Content for when there is more text.
 * @param bool $stripTeaser   Optional. Strip teaser content before the more text. Default false.
 */
    public function theContent(string $moreLinkText = null, bool $stripTeaser = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post content.
 *
 * @since 0.71
 * @since 5.2.0 Added the `$post` parameter.
 *
 * @global int   $page      Page number of a single post/page.
 * @global int   $more      Boolean indicator for whether single post/page is being viewed.
 * @global bool  $preview   Whether post/page is in preview mode.
 * @global array $pages     Array of all pages in post/page. Each array element contains
 *                          part of the content separated by the `<!--nextpage-->` tag.
 * @global int   $multipage Boolean indicator for whether multiple pages are in play.
 *
 * @param string $moreLinkText Optional. Content for when there is more text.
 * @param bool $stripTeaser   Optional. Strip teaser content before the more text. Default false.
 * @param WP_Post|object|int $post           Optional. WP_Post instance or Post ID/object. Default null.
 * @return string
 */
    public function getTheContent(string $moreLinkText = null, bool $stripTeaser = false, int|object $post = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post excerpt.
 *
 * @since 0.71
 */
    public function theExcerpt(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post excerpt.
 *
 * @since 0.71
 * @since 4.5.0 Introduced the `$post` parameter.
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return string Post excerpt.
 */
    public function getTheExcerpt(int|\WP_Post $post = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the post has a custom excerpt.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.3.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return bool True if the post has a custom excerpt, false otherwise.
 */
    public function hasExcerpt(int|\WP_Post $post = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the classes for the post container element.
 *
 * @since 2.7.0
 *
 * @param string|string[] $cssClass Optional. One or more classes to add to the class list.
 *                                   Default empty.
 * @param int|\WP_Post $post      Optional. Post ID or post object. Defaults to the global `$post`.
 */
    public function postClass(string|array $cssClass = '', int|\WP_Post $post = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an array of the class names for the post container element.
 *
 * The class names are many:
 *
 *  - If the post has a post thumbnail, `has-post-thumbnail` is added as a class.
 *  - If the post is sticky, then the `sticky` class name is added.
 *  - The class `hentry` is always added to each post.
 *  - For each taxonomy that the post belongs to, a class will be added of the format
 *    `{$taxonomy}-{$slug}`, e.g. `category-foo` or `my_custom_taxonomy-bar`.
 *    The `post_tag` taxonomy is a special case; the class has the `tag-` prefix
 *    instead of `post_tag-`.
 *
 * All class names are passed through the filter, {@see 'post_class'}, followed by
 * `$css_class` parameter value, with the post ID as the last parameter.
 *
 * @since 2.7.0
 * @since 4.2.0 Custom taxonomy class names were added.
 *
 * @param string|string[] $cssClass Optional. Space-separated string or array of class names
 *                                   to add to the class list. Default empty.
 * @param int|\WP_Post $post      Optional. Post ID or post object.
 * @return string[] Array of class names.
 */
    public function getPostClass(string|array $cssClass = '', int|\WP_Post $post = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the class names for the body element.
 *
 * @since 2.8.0
 *
 * @param string|string[] $cssClass Optional. Space-separated string or array of class names
 *                                   to add to the class list. Default empty.
 */
    public function bodyClass(string|array $cssClass = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an array of the class names for the body element.
 *
 * @since 2.8.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string|string[] $cssClass Optional. Space-separated string or array of class names
 *                                   to add to the class list. Default empty.
 * @return string[] Array of class names.
 */
    public function getBodyClass(string|array $cssClass = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the post requires password and whether a correct password has been provided.
 *
 * @since 2.7.0
 *
 * @param int|\WP_Post|null $post An optional post. Global $post used if not provided.
 * @return bool false if a password is not required or the correct password cookie is present, true otherwise.
 */
    public function postPasswordRequired(int|\WP_Post|null $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * The formatted output of a list of pages.
 *
 * Displays page links for paginated posts (i.e. including the `<!--nextpage-->`
 * Quicktag one or more times). This tag must be within The Loop.
 *
 * @since 1.2.0
 * @since 5.1.0 Added the `aria_current` argument.
 *
 * @global int $page
 * @global int $numpages
 * @global int $multipage
 * @global int $more
 *
 * @param string|array $args {
 *     Optional. Array or string of default arguments.
 *
 *     @type string       $before           HTML or text to prepend to each link. Default is `<p> Pages:`.
 *     @type string       $after            HTML or text to append to each link. Default is `</p>`.
 *     @type string       $link_before      HTML or text to prepend to each link, inside the `<a>` tag.
 *                                          Also prepended to the current item, which is not linked. Default empty.
 *     @type string       $link_after       HTML or text to append to each Pages link inside the `<a>` tag.
 *                                          Also appended to the current item, which is not linked. Default empty.
 *     @type string       $aria_current     The value for the aria-current attribute. Possible values are 'page',
 *                                          'step', 'location', 'date', 'time', 'true', 'false'. Default is 'page'.
 *     @type string       $next_or_number   Indicates whether page numbers should be used. Valid values are number
 *                                          and next. Default is 'number'.
 *     @type string       $separator        Text between pagination links. Default is ' '.
 *     @type string       $nextpagelink     Link text for the next page link, if available. Default is 'Next Page'.
 *     @type string       $previouspagelink Link text for the previous page link, if available. Default is 'Previous Page'.
 *     @type string       $pagelink         Format string for page numbers. The % in the parameter string will be
 *                                          replaced with the page number, so 'Page %' generates "Page 1", "Page 2", etc.
 *                                          Defaults to '%', just the page number.
 *     @type int|bool     $echo             Whether to echo or not. Accepts 1|true or 0|false. Default 1|true.
 * }
 * @return string Formatted output in HTML.
 */
    public function wpLinkPages(string|array $args = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves post custom meta data field.
 *
 * @since 1.5.0
 *
 * @param string $key Meta data key name.
 * @return array|string|false Array of values, or single value if only one element exists.
 *                            False if the key does not exist.
 */
    public function postCustom(string $key = ''): array|string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves or displays a list of pages as a dropdown (select list).
 *
 * @since 2.1.0
 * @since 4.2.0 The `$value_field` argument was added.
 * @since 4.3.0 The `$class` argument was added.
 *
 * @see get_pages()
 *
 * @param array|string $args {
 *     Optional. Array or string of arguments to generate a page dropdown. See get_pages() for additional arguments.
 *
 *     @type int          $depth                 Maximum depth. Default 0.
 *     @type int          $child_of              Page ID to retrieve child pages of. Default 0.
 *     @type int|string   $selected              Value of the option that should be selected. Default 0.
 *     @type bool|int     $echo                  Whether to echo or return the generated markup. Accepts 0, 1,
 *                                               or their bool equivalents. Default 1.
 *     @type string       $name                  Value for the 'name' attribute of the select element.
 *                                               Default 'page_id'.
 *     @type string       $id                    Value for the 'id' attribute of the select element.
 *     @type string       $class                 Value for the 'class' attribute of the select element. Default: none.
 *                                               Defaults to the value of `$name`.
 *     @type string       $show_option_none      Text to display for showing no pages. Default empty (does not display).
 *     @type string       $show_option_no_change Text to display for "no change" option. Default empty (does not display).
 *     @type string       $option_none_value     Value to use when no page is selected. Default empty.
 *     @type string       $value_field           Post field used to populate the 'value' attribute of the option
 *                                               elements. Accepts any valid post field. Default 'ID'.
 * }
 * @return string HTML dropdown list of pages.
 */
    public function wpDropdownPages(array|string $args = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves or displays a list of pages (or hierarchical post type items) in list (li) format.
 *
 * @since 1.5.0
 * @since 4.7.0 Added the `item_spacing` argument.
 *
 * @see get_pages()
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param array|string $args {
 *     Optional. Array or string of arguments to generate a list of pages. See get_pages() for additional arguments.
 *
 *     @type int          $child_of     Display only the sub-pages of a single page by ID. Default 0 (all pages).
 *     @type string       $authors      Comma-separated list of author IDs. Default empty (all authors).
 *     @type string       $date_format  PHP date format to use for the listed pages. Relies on the 'show_date' parameter.
 *                                      Default is the value of 'date_format' option.
 *     @type int          $depth        Number of levels in the hierarchy of pages to include in the generated list.
 *                                      Accepts -1 (any depth), 0 (all pages), 1 (top-level pages only), and n (pages to
 *                                      the given n depth). Default 0.
 *     @type bool         $echo         Whether or not to echo the list of pages. Default true.
 *     @type string       $exclude      Comma-separated list of page IDs to exclude. Default empty.
 *     @type array        $include      Comma-separated list of page IDs to include. Default empty.
 *     @type string       $link_after   Text or HTML to follow the page link label. Default null.
 *     @type string       $link_before  Text or HTML to precede the page link label. Default null.
 *     @type string       $post_type    Post type to query for. Default 'page'.
 *     @type string|array $post_status  Comma-separated list or array of post statuses to include. Default 'publish'.
 *     @type string       $show_date    Whether to display the page publish or modified date for each page. Accepts
 *                                      'modified' or any other value. An empty value hides the date. Default empty.
 *     @type string       $sort_column  Comma-separated list of column names to sort the pages by. Accepts 'post_author',
 *                                      'post_date', 'post_title', 'post_name', 'post_modified', 'post_modified_gmt',
 *                                      'menu_order', 'post_parent', 'ID', 'rand', or 'comment_count'. Default 'post_title'.
 *     @type string       $title_li     List heading. Passing a null or empty value will result in no heading, and the list
 *                                      will not be wrapped with unordered list `<ul>` tags. Default 'Pages'.
 *     @type string       $item_spacing Whether to preserve whitespace within the menu's HTML. Accepts 'preserve' or 'discard'.
 *                                      Default 'preserve'.
 *     @type Walker       $walker       Walker instance to use for listing pages. Default empty which results in a
 *                                      Walker_Page instance being used.
 * }
 * @return void|string Void if 'echo' argument is true, HTML list of pages if 'echo' is false.
 */
    public function wpListPages(array|string $args = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays or retrieves a list of pages with an optional home link.
 *
 * The arguments are listed below and part of the arguments are for wp_list_pages() function.
 * Check that function for more info on those arguments.
 *
 * @since 2.7.0
 * @since 4.4.0 Added `menu_id`, `container`, `before`, `after`, and `walker` arguments.
 * @since 4.7.0 Added the `item_spacing` argument.
 *
 * @param array|string $args {
 *     Optional. Array or string of arguments to generate a page menu. See wp_list_pages() for additional arguments.
 *
 *     @type string          $sort_column  How to sort the list of pages. Accepts post column names.
 *                                         Default 'menu_order, post_title'.
 *     @type string          $menu_id      ID for the div containing the page list. Default is empty string.
 *     @type string          $menu_class   Class to use for the element containing the page list. Default 'menu'.
 *     @type string          $container    Element to use for the element containing the page list. Default 'div'.
 *     @type bool            $echo         Whether to echo the list or return it. Accepts true (echo) or false (return).
 *                                         Default true.
 *     @type int|bool|string $show_home    Whether to display the link to the home page. Can just enter the text
 *                                         you'd like shown for the home link. 1|true defaults to 'Home'.
 *     @type string          $link_before  The HTML or text to prepend to $show_home text. Default empty.
 *     @type string          $link_after   The HTML or text to append to $show_home text. Default empty.
 *     @type string          $before       The HTML or text to prepend to the menu. Default is '<ul>'.
 *     @type string          $after        The HTML or text to append to the menu. Default is '</ul>'.
 *     @type string          $item_spacing Whether to preserve whitespace within the menu's HTML. Accepts 'preserve'
 *                                         or 'discard'. Default 'discard'.
 *     @type Walker          $walker       Walker instance to use for listing pages. Default empty which results in a
 *                                         Walker_Page instance being used.
 * }
 * @return void|string Void if 'echo' argument is true, HTML menu if 'echo' is false.
 */
    public function wpPageMenu(array|string $args = []): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML list content for page list.
 *
 * @uses Walker_Page to create HTML list content.
 * @since 2.1.0
 *
 * @param array $pages
 * @param int $depth
 * @param int $currentPage
 * @param array $args
 * @return string
 */
    public function walkPageTree(array $pages, int $depth, int $currentPage, array $args): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves HTML dropdown (select) content for page list.
 *
 * @since 2.1.0
 * @since 5.3.0 Formalized the existing `...$args` parameter by adding it
 *              to the function signature.
 *
 * @uses Walker_PageDropdown to create HTML dropdown content.
 * @see Walker_PageDropdown::walk() for parameters and return description.
 *
 * @param mixed ...$args Elements array, maximum hierarchical depth and optional additional arguments.
 * @return string
 */
    public function walkPageDropdownTree(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays an attachment page link using an image or icon.
 *
 * @since 2.0.0
 *
 * @param int|\WP_Post $post       Optional. Post ID or post object.
 * @param bool $fullsize   Optional. Whether to use full size. Default false.
 * @param bool $deprecated Deprecated. Not used.
 * @param bool $permalink Optional. Whether to include permalink. Default false.
 */
    public function theAttachmentLink(int|\WP_Post $post = 0, bool $fullsize = false, bool $deprecated = false, bool $permalink = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an attachment page link using an image or icon, if possible.
 *
 * @since 2.5.0
 * @since 4.4.0 The `$post` parameter can now accept either a post ID or `WP_Post` object.
 *
 * @param int|\WP_Post $post      Optional. Post ID or post object.
 * @param string|int[] $size      Optional. Image size. Accepts any registered image size name, or an array
 *                                of width and height values in pixels (in that order). Default 'thumbnail'.
 * @param bool $permalink Optional. Whether to add permalink to image. Default false.
 * @param bool $icon      Optional. Whether the attachment is an icon. Default false.
 * @param string|false $text      Optional. Link text to use. Activated by passing a string, false otherwise.
 *                                Default false.
 * @param array|string $attr      Optional. Array or string of attributes. Default empty.
 * @return string HTML content.
 */
    public function wpGetAttachmentLink(int|\WP_Post $post = 0, string|array $size = 'thumbnail', bool $permalink = false, bool $icon = false, string|false $text = false, array|string $attr = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Wraps attachment in paragraph tag before content.
 *
 * @since 2.0.0
 *
 * @param string $content
 * @return string
 */
    public function prependAttachment(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves protected post password form content.
 *
 * @since 1.0.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return string HTML content for password form for password protected post.
 */
    public function getThePasswordForm(int|\WP_Post $post = 0): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the current post uses a page template.
 *
 * This template tag allows you to determine if you are in a page template.
 * You can optionally provide a template filename or array of template filenames
 * and then the check will be specific to that template.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.5.0
 * @since 4.2.0 The `$template` parameter was changed to also accept an array of page templates.
 * @since 4.7.0 Now works with any post type, not just pages.
 *
 * @param string|string[] $template The specific template filename or array of templates to match.
 * @return bool True on success, false on failure.
 */
    public function isPageTemplate(string|array $template = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the specific template filename for a given post.
 *
 * @since 3.4.0
 * @since 4.7.0 Now works with any post type, not just pages.
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return string|false Page template filename. Returns an empty string when the default page template
 *                      is in use. Returns false if the post does not exist.
 */
    public function getPageTemplateSlug(int|\WP_Post $post = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves formatted date timestamp of a revision (linked to that revisions's page).
 *
 * @since 2.6.0
 *
 * @param int|\WP_Post $revision Revision ID or revision object.
 * @param bool $link     Optional. Whether to link to revision's page. Default true.
 * @return string|false i18n formatted datetimestamp or localized 'Current Revision'.
 */
    public function wpPostRevisionTitle(int|\WP_Post $revision, bool $link = true): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves formatted date timestamp of a revision (linked to that revisions's page).
 *
 * @since 3.6.0
 *
 * @param int|\WP_Post $revision Revision ID or revision object.
 * @param bool $link     Optional. Whether to link to revision's page. Default true.
 * @return string|false gravatar, user, i18n formatted datetimestamp or localized 'Current Revision'.
 */
    public function wpPostRevisionTitleExpanded(int|\WP_Post $revision, bool $link = true): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays a list of a post's revisions.
 *
 * Can output either a UL with edit links or a TABLE with diff interface, and
 * restore action links.
 *
 * @since 2.6.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @param string $type 'all' (default), 'revision' or 'autosave'
 */
    public function wpListPostRevisions(int|\WP_Post $post = 0, string $type = 'all'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the parent post object for the given post.
 *
 * @since 5.7.0
 *
 * @param int|\WP_Post|null $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return \WP_Post|null Parent post object, or null if there isn't one.
 */
    public function getPostParent(int|\WP_Post|null $post = null): \WP_Post|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether the given post has a parent post.
 *
 * @since 5.7.0
 *
 * @param int|\WP_Post|null $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return bool Whether the post has a parent post.
 */
    public function hasPostParent(int|\WP_Post|null $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a post has an image attached.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.9.0
 * @since 4.4.0 `$post` can be a post ID or WP_Post object.
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.
 * @return bool Whether the post has an image attached.
 */
    public function hasPostThumbnail(int|\WP_Post $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post thumbnail ID.
 *
 * @since 2.9.0
 * @since 4.4.0 `$post` can be a post ID or WP_Post object.
 * @since 5.5.0 The return value for a non-existing post
 *              was changed to false instead of an empty string.
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.
 * @return int|false Post thumbnail ID (which can be 0 if the thumbnail is not set),
 *                   or false if the post does not exist.
 */
    public function getPostThumbnailId(int|\WP_Post $post = null): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post thumbnail.
 *
 * When a theme adds 'post-thumbnail' support, a special 'post-thumbnail' image size
 * is registered, which differs from the 'thumbnail' image size managed via the
 * Settings > Media screen.
 *
 * When using the_post_thumbnail() or related functions, the 'post-thumbnail' image
 * size is used by default, though a different size can be specified instead as needed.
 *
 * @since 2.9.0
 *
 * @see get_the_post_thumbnail()
 *
 * @param string|int[] $size Optional. Image size. Accepts any registered image size name, or an array of
 *                           width and height values in pixels (in that order). Default 'post-thumbnail'.
 * @param string|array $attr Optional. Query string or array of attributes. Default empty.
 */
    public function thePostThumbnail(string|array $size = 'post-thumbnail', string|array $attr = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates cache for thumbnails in the current loop.
 *
 * @since 3.2.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param \WP_Query $wpQuery Optional. A WP_Query instance. Defaults to the $wp_query global.
 */
    public function updatePostThumbnailCache(\WP_Query $wpQuery = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post thumbnail.
 *
 * When a theme adds 'post-thumbnail' support, a special 'post-thumbnail' image size
 * is registered, which differs from the 'thumbnail' image size managed via the
 * Settings > Media screen.
 *
 * When using the_post_thumbnail() or related functions, the 'post-thumbnail' image
 * size is used by default, though a different size can be specified instead as needed.
 *
 * @since 2.9.0
 * @since 4.4.0 `$post` can be a post ID or WP_Post object.
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object.  Default is global `$post`.
 * @param string|int[] $size Optional. Image size. Accepts any registered image size name, or an array of
 *                           width and height values in pixels (in that order). Default 'post-thumbnail'.
 * @param string|array $attr Optional. Query string or array of attributes. Default empty.
 * @return string The post thumbnail image tag.
 */
    public function getThePostThumbnail(int|\WP_Post $post = null, string|array $size = 'post-thumbnail', string|array $attr = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the post thumbnail URL.
 *
 * @since 4.4.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object.  Default is global `$post`.
 * @param string|int[] $size Optional. Registered image size to retrieve the source for or a flat array
 *                           of height and width dimensions. Default 'post-thumbnail'.
 * @return string|false Post thumbnail URL or false if no image is available. If `$size` does not match
 *                      any registered image size, the original image URL will be returned.
 */
    public function getThePostThumbnailUrl(int|\WP_Post $post = null, string|array $size = 'post-thumbnail'): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post thumbnail URL.
 *
 * @since 4.4.0
 *
 * @param string|int[] $size Optional. Image size to use. Accepts any valid image size,
 *                           or an array of width and height values in pixels (in that order).
 *                           Default 'post-thumbnail'.
 */
    public function thePostThumbnailUrl(string|array $size = 'post-thumbnail'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the post thumbnail caption.
 *
 * @since 4.6.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.
 * @return string Post thumbnail caption.
 */
    public function getThePostThumbnailCaption(int|\WP_Post $post = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the post thumbnail caption.
 *
 * @since 4.6.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.
 */
    public function thePostThumbnailCaption(int|\WP_Post $post = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates the initial post types when 'init' action is fired.
 *
 * See {@see 'init'}.
 *
 * @since 2.9.0
 */
    public function createInitialPostTypes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves attached file path based on attachment ID.
 *
 * By default the path will go through the {@see 'get_attached_file'} filter, but
 * passing `true` to the `$unfiltered` argument will return the file path unfiltered.
 *
 * The function works by retrieving the `_wp_attached_file` post meta value.
 * This is a convenience function to prevent looking up the meta name and provide
 * a mechanism for sending the attached filename through a filter.
 *
 * @since 2.0.0
 *
 * @param int $attachmentId Attachment ID.
 * @param bool $unfiltered    Optional. Whether to skip the {@see 'get_attached_file'} filter.
 *                            Default false.
 * @return string|false The file path to where the attached file should be, false otherwise.
 */
    public function getAttachedFile(int $attachmentId, bool $unfiltered = false): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates attachment file path based on attachment ID.
 *
 * Used to update the file path of the attachment, which uses post meta name
 * '_wp_attached_file' to store the path of the attachment.
 *
 * @since 2.1.0
 *
 * @param int $attachmentId Attachment ID.
 * @param string $file          File path for the attachment.
 * @return bool True on success, false on failure.
 */
    public function updateAttachedFile(int $attachmentId, string $file): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all children of the post parent ID.
 *
 * Normally, without any enhancements, the children would apply to pages. In the
 * context of the inner workings of WordPress, pages, posts, and attachments
 * share the same table, so therefore the functionality could apply to any one
 * of them. It is then noted that while this function does not work on posts, it
 * does not mean that it won't work on posts. It is recommended that you know
 * what context you wish to retrieve the children of.
 *
 * Attachments may also be made the child of a post, so if that is an accurate
 * statement (which needs to be verified), it would then be possible to get
 * all of the attachments for a post. Attachments have since changed since
 * version 2.5, so this is most likely inaccurate, but serves generally as an
 * example of what is possible.
 *
 * The arguments listed as defaults are for this function and also of the
 * get_posts() function. The arguments are combined with the get_children defaults
 * and are then passed to the get_posts() function, which accepts additional arguments.
 * You can replace the defaults in this function, listed below and the additional
 * arguments listed in the get_posts() function.
 *
 * The 'post_parent' is the most important argument and important attention
 * needs to be paid to the $args parameter. If you pass either an object or an
 * integer (number), then just the 'post_parent' is grabbed and everything else
 * is lost. If you don't specify any arguments, then it is assumed that you are
 * in The Loop and the post parent will be grabbed for from the current post.
 *
 * The 'post_parent' argument is the ID to get the children. The 'numberposts'
 * is the amount of posts to retrieve that has a default of '-1', which is
 * used to get all of the posts. Giving a number higher than 0 will only
 * retrieve that amount of posts.
 *
 * The 'post_type' and 'post_status' arguments can be used to choose what
 * criteria of posts to retrieve. The 'post_type' can be anything, but WordPress
 * post types are 'post', 'pages', and 'attachments'. The 'post_status'
 * argument will accept any post status within the write administration panels.
 *
 * @since 2.0.0
 *
 * @see get_posts()
 * @todo Check validity of description.
 *
 * @global WP_Post $post Global post object.
 *
 * @param mixed $args   Optional. User defined arguments for replacing the defaults. Default empty.
 * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                       correspond to a WP_Post object, an associative array, or a numeric array,
 *                       respectively. Default OBJECT.
 * @return WP_Post[]|array[]|int[] Array of post objects, arrays, or IDs, depending on `$output`.
 */
    public function getChildren(mixed $args = '', string $output = OBJECT): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets extended entry info (<!--more-->).
 *
 * There should not be any space after the second dash and before the word
 * 'more'. There can be text or space(s) after the word 'more', but won't be
 * referenced.
 *
 * The returned array has 'main', 'extended', and 'more_text' keys. Main has the text before
 * the `<!--more-->`. The 'extended' key has the content after the
 * `<!--more-->` comment. The 'more_text' key has the custom "Read More" text.
 *
 * @since 1.0.0
 *
 * @param string $post Post content.
 * @return string[] {
 *     Extended entry info.
 *
 *     @type string $main      Content before the more tag.
 *     @type string $extended  Content after the more tag.
 *     @type string $more_text Custom read more text, or empty string.
 * }
 */
    public function getExtended(string $post): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves post data given a post ID or post object.
 *
 * See sanitize_post() for optional $filter values. Also, the parameter
 * `$post`, must be given as a variable, since it is passed by reference.
 *
 * @since 1.5.1
 *
 * @global WP_Post $post Global post object.
 *
 * @param int|\WP_Post|null $post   Optional. Post ID or post object. `null`, `false`, `0` and other PHP falsey values
 *                                 return the current global post inside the loop. A numerically valid post ID that
 *                                 points to a non-existent post returns `null`. Defaults to global $post.
 * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                                 correspond to a WP_Post object, an associative array, or a numeric array,
 *                                 respectively. Default OBJECT.
 * @param string $filter Optional. Type of filter to apply. Accepts 'raw', 'edit', 'db',
 *                                 or 'display'. Default 'raw'.
 * @return \WP_Post|array|null Type corresponding to $output on success or null on failure.
 *                            When $output is OBJECT, a `WP_Post` instance is returned.
 */
    public function getPost(int|\WP_Post|null $post = null, string $output = OBJECT, string $filter = 'raw'): \WP_Post|array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the IDs of the ancestors of a post.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Post $post Post ID or post object.
 * @return int[] Array of ancestor IDs or empty array if there are none.
 */
    public function getPostAncestors(int|\WP_Post $post): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves data from a post field based on Post ID.
 *
 * Examples of the post field will be, 'post_type', 'post_status', 'post_content',
 * etc and based off of the post object property or key names.
 *
 * The context values are based off of the taxonomy filter functions and
 * supported values are found within those functions.
 *
 * @since 2.3.0
 * @since 4.5.0 The `$post` parameter was made optional.
 *
 * @see sanitize_post_field()
 *
 * @param string $field   Post field name.
 * @param int|\WP_Post $post    Optional. Post ID or post object. Defaults to global $post.
 * @param string $context Optional. How to filter the field. Accepts 'raw', 'edit', 'db',
 *                             or 'display'. Default 'display'.
 * @return string The value of the post field on success, empty string on failure.
 */
    public function getPostField(string $field, int|\WP_Post $post = null, string $context = 'display'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the mime type of an attachment based on the ID.
 *
 * This function can be used with any post type, but it makes more sense with
 * attachments.
 *
 * @since 2.0.0
 *
 * @param int|\WP_Post $post Optional. Post ID or post object. Defaults to global $post.
 * @return string|false The mime type on success, false on failure.
 */
    public function getPostMimeType(int|\WP_Post $post = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post status based on the post ID.
 *
 * If the post ID is of an attachment, then the parent post status will be given
 * instead.
 *
 * @since 2.0.0
 *
 * @param int|\WP_Post $post Optional. Post ID or post object. Defaults to global $post.
 * @return string|false Post status on success, false on failure.
 */
    public function getPostStatus(int|\WP_Post $post = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all of the WordPress supported post statuses.
 *
 * Posts have a limited set of valid status values, this provides the
 * post_status values and descriptions.
 *
 * @since 2.5.0
 *
 * @return string[] Array of post status labels keyed by their status.
 */
    public function getPostStatuses(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all of the WordPress support page statuses.
 *
 * Pages have a limited set of valid status values, this provides the
 * post_status values and descriptions.
 *
 * @since 2.5.0
 *
 * @return string[] Array of page status labels keyed by their status.
 */
    public function getPageStatuses(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a post status. Do not use before init.
 *
 * A simple function for creating or modifying a post status based on the
 * parameters given. The function will accept an array (second optional
 * parameter), along with a string for the post status name.
 *
 * Arguments prefixed with an _underscore shouldn't be used by plugins and themes.
 *
 * @since 3.0.0
 *
 * @global stdClass[] $wp_post_statuses Inserts new post status object into the list
 *
 * @param string $postStatus Name of the post status.
 * @param array|string $args {
 *     Optional. Array or string of post status arguments.
 *
 *     @type bool|string $label                     A descriptive name for the post status marked
 *                                                  for translation. Defaults to value of $post_status.
 *     @type array|false $label_count               Nooped plural text from _n_noop() to provide the singular
 *                                                  and plural forms of the label for counts. Default false
 *                                                  which means the `$label` argument will be used for both
 *                                                  the singular and plural forms of this label.
 *     @type bool        $exclude_from_search       Whether to exclude posts with this post status
 *                                                  from search results. Default is value of $internal.
 *     @type bool        $_builtin                  Whether the status is built-in. Core-use only.
 *                                                  Default false.
 *     @type bool        $public                    Whether posts of this status should be shown
 *                                                  in the front end of the site. Default false.
 *     @type bool        $internal                  Whether the status is for internal use only.
 *                                                  Default false.
 *     @type bool        $protected                 Whether posts with this status should be protected.
 *                                                  Default false.
 *     @type bool        $private                   Whether posts with this status should be private.
 *                                                  Default false.
 *     @type bool        $publicly_queryable        Whether posts with this status should be publicly-
 *                                                  queryable. Default is value of $public.
 *     @type bool        $show_in_admin_all_list    Whether to include posts in the edit listing for
 *                                                  their post type. Default is the opposite value
 *                                                  of $internal.
 *     @type bool        $show_in_admin_status_list Show in the list of statuses with post counts at
 *                                                  the top of the edit listings,
 *                                                  e.g. All (12) | Published (9) | My Custom Status (2)
 *                                                  Default is the opposite value of $internal.
 *     @type bool        $date_floating             Whether the post has a floating creation date.
 *                                                  Default to false.
 * }
 * @return object
 */
    public function registerPostStatus(string $postStatus, array|string $args = []): object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a post status object by name.
 *
 * @since 3.0.0
 *
 * @global stdClass[] $wp_post_statuses List of post statuses.
 *
 * @see register_post_status()
 *
 * @param string $postStatus The name of a registered post status.
 * @return \stdClass|null A post status object.
 */
    public function getPostStatusObject(string $postStatus): \stdClass|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a list of post statuses.
 *
 * @since 3.0.0
 *
 * @global stdClass[] $wp_post_statuses List of post statuses.
 *
 * @see register_post_status()
 *
 * @param array|string $args     Optional. Array or string of post status arguments to compare against
 *                               properties of the global `$wp_post_statuses objects`. Default empty array.
 * @param string $output   Optional. The type of output to return, either 'names' or 'objects'. Default 'names'.
 * @param string $operator Optional. The logical operation to perform. 'or' means only one element
 *                               from the array needs to match; 'and' means all elements must match.
 *                               Default 'and'.
 * @return string[]|stdClass[] A list of post status names or objects.
 */
    public function getPostStati(array|string $args = [], string $output = 'names', string $operator = 'and'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the post type is hierarchical.
 *
 * A false return value might also mean that the post type does not exist.
 *
 * @since 3.0.0
 *
 * @see get_post_type_object()
 *
 * @param string $postType Post type name
 * @return bool Whether post type is hierarchical.
 */
    public function isPostTypeHierarchical(string $postType): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a post type is registered.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 3.0.0
 *
 * @see get_post_type_object()
 *
 * @param string $postType Post type name.
 * @return bool Whether post type is registered.
 */
    public function postTypeExists(string $postType): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post type of the current post or of a given post.
 *
 * @since 2.1.0
 *
 * @param int|\WP_Post|null $post Optional. Post ID or post object. Default is global $post.
 * @return string|false          Post type on success, false on failure.
 */
    public function getPostType(int|\WP_Post|null $post = null): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a post type object by name.
 *
 * @since 3.0.0
 * @since 4.6.0 Object returned is now an instance of `WP_Post_Type`.
 *
 * @global array $wp_post_types List of post types.
 *
 * @see register_post_type()
 *
 * @param string $postType The name of a registered post type.
 * @return \WP_Post_Type|null WP_Post_Type object if it exists, null otherwise.
 */
    public function getPostTypeObject(string $postType): \WP_Post_Type|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a list of all registered post type objects.
 *
 * @since 2.9.0
 *
 * @global array $wp_post_types List of post types.
 *
 * @see register_post_type() for accepted arguments.
 *
 * @param array|string $args     Optional. An array of key => value arguments to match against
 *                               the post type objects. Default empty array.
 * @param string $output   Optional. The type of output to return. Either 'names'
 *                               or 'objects'. Default 'names'.
 * @param string $operator Optional. The logical operation to perform. 'or' means only one
 *                               element from the array needs to match; 'and' means all elements
 *                               must match; 'not' means no elements may match. Default 'and'.
 * @return string[]|WP_Post_Type[] An array of post type names or objects.
 */
    public function getPostTypes(array|string $args = [], string $output = 'names', string $operator = 'and'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a post type.
 *
 * Note: Post type registrations should not be hooked before the
 * {@see 'init'} action. Also, any taxonomy connections should be
 * registered via the `$taxonomies` argument to ensure consistency
 * when hooks such as {@see 'parse_query'} or {@see 'pre_get_posts'}
 * are used.
 *
 * Post types can support any number of built-in core features such
 * as meta boxes, custom fields, post thumbnails, post statuses,
 * comments, and more. See the `$supports` argument for a complete
 * list of supported features.
 *
 * @since 2.9.0
 * @since 3.0.0 The `show_ui` argument is now enforced on the new post screen.
 * @since 4.4.0 The `show_ui` argument is now enforced on the post type listing
 *              screen and post editing screen.
 * @since 4.6.0 Post type object returned is now an instance of `WP_Post_Type`.
 * @since 4.7.0 Introduced `show_in_rest`, `rest_base` and `rest_controller_class`
 *              arguments to register the post type in REST API.
 * @since 5.0.0 The `template` and `template_lock` arguments were added.
 * @since 5.3.0 The `supports` argument will now accept an array of arguments for a feature.
 * @since 5.9.0 The `rest_namespace` argument was added.
 *
 * @global array $wp_post_types List of post types.
 *
 * @param string $postType Post type key. Must not exceed 20 characters and may only contain
 *                                lowercase alphanumeric characters, dashes, and underscores. See sanitize_key().
 * @param array|string $args {
 *     Array or string of arguments for registering a post type.
 *
 *     @type string       $label                           Name of the post type shown in the menu. Usually plural.
 *                                                         Default is value of $labels['name'].
 *     @type string[]     $labels                          An array of labels for this post type. If not set, post
 *                                                         labels are inherited for non-hierarchical types and page
 *                                                         labels for hierarchical ones. See get_post_type_labels() for a full
 *                                                         list of supported labels.
 *     @type string       $description                     A short descriptive summary of what the post type is.
 *                                                         Default empty.
 *     @type bool         $public                          Whether a post type is intended for use publicly either via
 *                                                         the admin interface or by front-end users. While the default
 *                                                         settings of $exclude_from_search, $publicly_queryable, $show_ui,
 *                                                         and $show_in_nav_menus are inherited from $public, each does not
 *                                                         rely on this relationship and controls a very specific intention.
 *                                                         Default false.
 *     @type bool         $hierarchical                    Whether the post type is hierarchical (e.g. page). Default false.
 *     @type bool         $exclude_from_search             Whether to exclude posts with this post type from front end search
 *                                                         results. Default is the opposite value of $public.
 *     @type bool         $publicly_queryable              Whether queries can be performed on the front end for the post type
 *                                                         as part of parse_request(). Endpoints would include:
 *                                                          * ?post_type={post_type_key}
 *                                                          * ?{post_type_key}={single_post_slug}
 *                                                          * ?{post_type_query_var}={single_post_slug}
 *                                                         If not set, the default is inherited from $public.
 *     @type bool         $show_ui                         Whether to generate and allow a UI for managing this post type in the
 *                                                         admin. Default is value of $public.
 *     @type bool|string  $show_in_menu                    Where to show the post type in the admin menu. To work, $show_ui
 *                                                         must be true. If true, the post type is shown in its own top level
 *                                                         menu. If false, no menu is shown. If a string of an existing top
 *                                                         level menu ('tools.php' or 'edit.php?post_type=page', for example), the
 *                                                         post type will be placed as a sub-menu of that.
 *                                                         Default is value of $show_ui.
 *     @type bool         $show_in_nav_menus               Makes this post type available for selection in navigation menus.
 *                                                         Default is value of $public.
 *     @type bool         $show_in_admin_bar               Makes this post type available via the admin bar. Default is value
 *                                                         of $show_in_menu.
 *     @type bool         $show_in_rest                    Whether to include the post type in the REST API. Set this to true
 *                                                         for the post type to be available in the block editor.
 *     @type string       $rest_base                       To change the base URL of REST API route. Default is $post_type.
 *     @type string       $rest_namespace                  To change the namespace URL of REST API route. Default is wp/v2.
 *     @type string       $rest_controller_class           REST API controller class name. Default is 'WP_REST_Posts_Controller'.
 *     @type string|bool  $autosave_rest_controller_class  REST API controller class name. Default is 'WP_REST_Autosaves_Controller'.
 *     @type string|bool  $revisions_rest_controller_class REST API controller class name. Default is 'WP_REST_Revisions_Controller'.
 *     @type bool         $late_route_registration         A flag to direct the REST API controllers for autosave / revisions
 *                                                         should be registered before/after the post type controller.
 *     @type int          $menu_position                   The position in the menu order the post type should appear. To work,
 *                                                         $show_in_menu must be true. Default null (at the bottom).
 *     @type string       $menu_icon                       The URL to the icon to be used for this menu. Pass a base64-encoded
 *                                                         SVG using a data URI, which will be colored to match the color scheme
 *                                                         -- this should begin with 'data:image/svg+xml;base64,'. Pass the name
 *                                                         of a Dashicons helper class to use a font icon, e.g.
 *                                                        'dashicons-chart-pie'. Pass 'none' to leave div.wp-menu-image empty
 *                                                         so an icon can be added via CSS. Defaults to use the posts icon.
 *     @type string|array $capability_type                 The string to use to build the read, edit, and delete capabilities.
 *                                                         May be passed as an array to allow for alternative plurals when using
 *                                                         this argument as a base to construct the capabilities, e.g.
 *                                                         array('story', 'stories'). Default 'post'.
 *     @type string[]     $capabilities                    Array of capabilities for this post type. $capability_type is used
 *                                                         as a base to construct capabilities by default.
 *                                                         See get_post_type_capabilities().
 *     @type bool         $map_meta_cap                    Whether to use the internal default meta capability handling.
 *                                                         Default false.
 *     @type array|false  $supports                        Core feature(s) the post type supports. Serves as an alias for calling
 *                                                         add_post_type_support() directly. Core features include 'title',
 *                                                         'editor', 'comments', 'revisions', 'trackbacks', 'author', 'excerpt',
 *                                                         'page-attributes', 'thumbnail', 'custom-fields', and 'post-formats'.
 *                                                         Additionally, the 'revisions' feature dictates whether the post type
 *                                                         will store revisions, the 'autosave' feature dictates whether the post type
 *                                                         will be autosaved, and the 'comments' feature dictates whether the
 *                                                         comments count will show on the edit screen. For backward compatibility reasons,
 *                                                         adding 'editor' support implies 'autosave' support too. A feature can also be
 *                                                         specified as an array of arguments to provide additional information
 *                                                         about supporting that feature.
 *                                                         Example: `array( 'my_feature', array( 'field' => 'value' ) )`.
 *                                                         If false, no features will be added.
 *                                                         Default is an array containing 'title' and 'editor'.
 *     @type callable     $register_meta_box_cb            Provide a callback function that sets up the meta boxes for the
 *                                                         edit form. Do remove_meta_box() and add_meta_box() calls in the
 *                                                         callback. Default null.
 *     @type string[]     $taxonomies                      An array of taxonomy identifiers that will be registered for the
 *                                                         post type. Taxonomies can be registered later with register_taxonomy()
 *                                                         or register_taxonomy_for_object_type().
 *                                                         Default empty array.
 *     @type bool|string  $has_archive                     Whether there should be post type archives, or if a string, the
 *                                                         archive slug to use. Will generate the proper rewrite rules if
 *                                                         $rewrite is enabled. Default false.
 *     @type bool|array   $rewrite                         {
 *         Triggers the handling of rewrites for this post type. To prevent rewrite, set to false.
 *         Defaults to true, using $post_type as slug. To specify rewrite rules, an array can be
 *         passed with any of these keys:
 *
 *         @type string $slug       Customize the permastruct slug. Defaults to $post_type key.
 *         @type bool   $with_front Whether the permastruct should be prepended with WP_Rewrite::$front.
 *                                  Default true.
 *         @type bool   $feeds      Whether the feed permastruct should be built for this post type.
 *                                  Default is value of $has_archive.
 *         @type bool   $pages      Whether the permastruct should provide for pagination. Default true.
 *         @type int    $ep_mask    Endpoint mask to assign. If not specified and permalink_epmask is set,
 *                                  inherits from $permalink_epmask. If not specified and permalink_epmask
 *                                  is not set, defaults to EP_PERMALINK.
 *     }
 *     @type string|bool  $query_var                      Sets the query_var key for this post type. Defaults to $post_type
 *                                                        key. If false, a post type cannot be loaded at
 *                                                        ?{query_var}={post_slug}. If specified as a string, the query
 *                                                        ?{query_var_string}={post_slug} will be valid.
 *     @type bool         $can_export                     Whether to allow this post type to be exported. Default true.
 *     @type bool         $delete_with_user               Whether to delete posts of this type when deleting a user.
 *                                                          * If true, posts of this type belonging to the user will be moved
 *                                                            to Trash when the user is deleted.
 *                                                          * If false, posts of this type belonging to the user will *not*
 *                                                            be trashed or deleted.
 *                                                          * If not set (the default), posts are trashed if post type supports
 *                                                            the 'author' feature. Otherwise posts are not trashed or deleted.
 *                                                        Default null.
 *     @type array        $template                       Array of blocks to use as the default initial state for an editor
 *                                                        session. Each item should be an array containing block name and
 *                                                        optional attributes. Default empty array.
 *     @type string|false $template_lock                  Whether the block template should be locked if $template is set.
 *                                                        * If set to 'all', the user is unable to insert new blocks,
 *                                                          move existing blocks and delete blocks.
 *                                                       * If set to 'insert', the user is able to move existing blocks
 *                                                         but is unable to insert new blocks and delete blocks.
 *                                                         Default false.
 *     @type bool         $_builtin                     FOR INTERNAL USE ONLY! True if this post type is a native or
 *                                                      "built-in" post_type. Default false.
 *     @type string       $_edit_link                   FOR INTERNAL USE ONLY! URL segment to use for edit link of
 *                                                      this post type. Default 'post.php?post=%d'.
 * }
 * @return \WP_Post_Type|\WP_Error The registered post type object on success,
 *                               WP_Error object on failure.
 */
    public function registerPostType(string $postType, array|string $args = []): \WP_Post_Type|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a post type.
 *
 * Cannot be used to unregister built-in post types.
 *
 * @since 4.5.0
 *
 * @global array $wp_post_types List of post types.
 *
 * @param string $postType Post type to unregister.
 * @return true|\WP_Error True on success, WP_Error on failure or if the post type doesn't exist.
 */
    public function unregisterPostType(string $postType): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds an object with all post type capabilities out of a post type object
 *
 * Post type capabilities use the 'capability_type' argument as a base, if the
 * capability is not set in the 'capabilities' argument array or if the
 * 'capabilities' argument is not supplied.
 *
 * The capability_type argument can optionally be registered as an array, with
 * the first value being singular and the second plural, e.g. array('story, 'stories')
 * Otherwise, an 's' will be added to the value for the plural form. After
 * registration, capability_type will always be a string of the singular value.
 *
 * By default, eight keys are accepted as part of the capabilities array:
 *
 * - edit_post, read_post, and delete_post are meta capabilities, which are then
 *   generally mapped to corresponding primitive capabilities depending on the
 *   context, which would be the post being edited/read/deleted and the user or
 *   role being checked. Thus these capabilities would generally not be granted
 *   directly to users or roles.
 *
 * - edit_posts - Controls whether objects of this post type can be edited.
 * - edit_others_posts - Controls whether objects of this type owned by other users
 *   can be edited. If the post type does not support an author, then this will
 *   behave like edit_posts.
 * - delete_posts - Controls whether objects of this post type can be deleted.
 * - publish_posts - Controls publishing objects of this post type.
 * - read_private_posts - Controls whether private objects can be read.
 *
 * These five primitive capabilities are checked in core in various locations.
 * There are also six other primitive capabilities which are not referenced
 * directly in core, except in map_meta_cap(), which takes the three aforementioned
 * meta capabilities and translates them into one or more primitive capabilities
 * that must then be checked against the user or role, depending on the context.
 *
 * - read - Controls whether objects of this post type can be read.
 * - delete_private_posts - Controls whether private objects can be deleted.
 * - delete_published_posts - Controls whether published objects can be deleted.
 * - delete_others_posts - Controls whether objects owned by other users can be
 *   can be deleted. If the post type does not support an author, then this will
 *   behave like delete_posts.
 * - edit_private_posts - Controls whether private objects can be edited.
 * - edit_published_posts - Controls whether published objects can be edited.
 *
 * These additional capabilities are only used in map_meta_cap(). Thus, they are
 * only assigned by default if the post type is registered with the 'map_meta_cap'
 * argument set to true (default is false).
 *
 * @since 3.0.0
 * @since 5.4.0 'delete_posts' is included in default capabilities.
 *
 * @see register_post_type()
 * @see map_meta_cap()
 *
 * @param object $args Post type registration arguments.
 * @return object Object with all the capabilities as member variables.
 */
    public function getPostTypeCapabilities(object $args): object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers support of certain features for a post type.
 *
 * All core features are directly associated with a functional area of the edit
 * screen, such as the editor or a meta box. Features include: 'title', 'editor',
 * 'comments', 'revisions', 'trackbacks', 'author', 'excerpt', 'page-attributes',
 * 'thumbnail', 'custom-fields', and 'post-formats'.
 *
 * Additionally, the 'revisions' feature dictates whether the post type will
 * store revisions, the 'autosave' feature dictates whether the post type
 * will be autosaved, and the 'comments' feature dictates whether the comments
 * count will show on the edit screen.
 *
 * A third, optional parameter can also be passed along with a feature to provide
 * additional information about supporting that feature.
 *
 * Example usage:
 *
 *     add_post_type_support( 'my_post_type', 'comments' );
 *     add_post_type_support( 'my_post_type', array(
 *         'author', 'excerpt',
 *     ) );
 *     add_post_type_support( 'my_post_type', 'my_feature', array(
 *         'field' => 'value',
 *     ) );
 *
 * @since 3.0.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @global array $_wp_post_type_features
 *
 * @param string $postType The post type for which to add the feature.
 * @param string|array $feature   The feature being added, accepts an array of
 *                                feature strings or a single string.
 * @param mixed        ...$args   Optional extra arguments to pass along with certain features.
 */
    public function addPostTypeSupport(string $postType, string|array $feature): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes support for a feature from a post type.
 *
 * @since 3.0.0
 *
 * @global array $_wp_post_type_features
 *
 * @param string $postType The post type for which to remove the feature.
 * @param string $feature   The feature being removed.
 */
    public function removePostTypeSupport(string $postType, string $feature): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets all the post type features
 *
 * @since 3.4.0
 *
 * @global array $_wp_post_type_features
 *
 * @param string $postType The post type.
 * @return array Post type supports list.
 */
    public function getAllPostTypeSupports(string $postType): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks a post type's support for a given feature.
 *
 * @since 3.0.0
 *
 * @global array $_wp_post_type_features
 *
 * @param string $postType The post type being checked.
 * @param string $feature   The feature being checked.
 * @return bool Whether the post type supports the given feature.
 */
    public function postTypeSupports(string $postType, string $feature): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of post type names that support a specific feature.
 *
 * @since 4.5.0
 *
 * @global array $_wp_post_type_features Post type features
 *
 * @param array|string $feature  Single feature or an array of features the post types should support.
 * @param string $operator Optional. The logical operation to perform. 'or' means
 *                               only one element from the array needs to match; 'and'
 *                               means all elements must match; 'not' means no elements may
 *                               match. Default 'and'.
 * @return string[] A list of post type names.
 */
    public function getPostTypesBySupport(array|string $feature, string $operator = 'and'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the post type for the post ID.
 *
 * The page or post cache will be cleaned for the post ID.
 *
 * @since 2.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $postId   Optional. Post ID to change post type. Default 0.
 * @param string $postType Optional. Post type. Accepts 'post' or 'page' to
 *                          name a few. Default 'post'.
 * @return int|false Amount of rows changed. Should be 1 for success and 0 for failure.
 */
    public function setPostType(int $postId = 0, string $postType = 'post'): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a post type is considered "viewable".
 *
 * For built-in post types such as posts and pages, the 'public' value will be evaluated.
 * For all others, the 'publicly_queryable' value will be used.
 *
 * @since 4.4.0
 * @since 4.5.0 Added the ability to pass a post type name in addition to object.
 * @since 4.6.0 Converted the `$post_type` parameter to accept a `WP_Post_Type` object.
 * @since 5.9.0 Added `is_post_type_viewable` hook to filter the result.
 *
 * @param string|\WP_Post_Type $postType Post type name or object.
 * @return bool Whether the post type should be considered viewable.
 */
    public function isPostTypeViewable(string|\WP_Post_Type $postType): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a post status is considered "viewable".
 *
 * For built-in post statuses such as publish and private, the 'public' value will be evaluated.
 * For all others, the 'publicly_queryable' value will be used.
 *
 * @since 5.7.0
 * @since 5.9.0 Added `is_post_status_viewable` hook to filter the result.
 *
 * @param string|\stdClass $postStatus Post status name or object.
 * @return bool Whether the post status should be considered viewable.
 */
    public function isPostStatusViewable(string|\stdClass $postStatus): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a post is publicly viewable.
 *
 * Posts are considered publicly viewable if both the post status and post type
 * are viewable.
 *
 * @since 5.7.0
 *
 * @param int|\WP_Post|null $post Optional. Post ID or post object. Defaults to global $post.
 * @return bool Whether the post is publicly viewable.
 */
    public function isPostPubliclyViewable(int|\WP_Post|null $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an array of the latest posts, or posts matching the given criteria.
 *
 * For more information on the accepted arguments, see the
 * {@link https://developer.wordpress.org/reference/classes/wp_query/
 * WP_Query} documentation in the Developer Handbook.
 *
 * The `$ignore_sticky_posts` and `$no_found_rows` arguments are ignored by
 * this function and both are set to `true`.
 *
 * The defaults are as follows:
 *
 * @since 1.2.0
 *
 * @see WP_Query
 * @see WP_Query::parse_query()
 *
 * @param array $args {
 *     Optional. Arguments to retrieve posts. See WP_Query::parse_query() for all available arguments.
 *
 *     @type int        $numberposts      Total number of posts to retrieve. Is an alias of `$posts_per_page`
 *                                        in WP_Query. Accepts -1 for all. Default 5.
 *     @type int|string $category         Category ID or comma-separated list of IDs (this or any children).
 *                                        Is an alias of `$cat` in WP_Query. Default 0.
 *     @type int[]      $include          An array of post IDs to retrieve, sticky posts will be included.
 *                                        Is an alias of `$post__in` in WP_Query. Default empty array.
 *     @type int[]      $exclude          An array of post IDs not to retrieve. Default empty array.
 *     @type bool       $suppress_filters Whether to suppress filters. Default true.
 * }
 * @return WP_Post[]|int[] Array of post objects or post IDs.
 */
    public function getPosts(array $args = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a meta field to the given post.
 *
 * Post meta data is called "Custom Fields" on the Administration Screen.
 *
 * @since 1.5.0
 *
 * @param int $postId    Post ID.
 * @param string $metaKey   Metadata name.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param bool $unique     Optional. Whether the same key should not be added.
 *                           Default false.
 * @return int|false Meta ID on success, false on failure.
 */
    public function addPostMeta(int $postId, string $metaKey, mixed $metaValue, bool $unique = false): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a post meta field for the given post ID.
 *
 * You can match based on the key, or key and value. Removing based on key and
 * value, will keep from removing duplicate metadata with the same key. It also
 * allows removing all metadata matching the key, if needed.
 *
 * @since 1.5.0
 *
 * @param int $postId    Post ID.
 * @param string $metaKey   Metadata name.
 * @param mixed $metaValue Optional. Metadata value. If provided,
 *                           rows will only be removed that match the value.
 *                           Must be serializable if non-scalar. Default empty.
 * @return bool True on success, false on failure.
 */
    public function deletePostMeta(int $postId, string $metaKey, mixed $metaValue = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a post meta field for the given post ID.
 *
 * @since 1.5.0
 *
 * @param int $postId Post ID.
 * @param string $key     Optional. The meta key to retrieve. By default,
 *                        returns data for all keys. Default empty.
 * @param bool $single  Optional. Whether to return a single value.
 *                        This parameter has no effect if `$key` is not specified.
 *                        Default false.
 * @return mixed An array of values if `$single` is false.
 *               The value of the meta field if `$single` is true.
 *               False for an invalid `$post_id` (non-numeric, zero, or negative value).
 *               An empty string if a valid but non-existing post ID is passed.
 */
    public function getPostMeta(int $postId, string $key = '', bool $single = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates a post meta field based on the given post ID.
 *
 * Use the `$prev_value` parameter to differentiate between meta fields with the
 * same key and post ID.
 *
 * If the meta field for the post does not exist, it will be added and its ID returned.
 *
 * Can be used in place of add_post_meta().
 *
 * @since 1.5.0
 *
 * @param int $postId    Post ID.
 * @param string $metaKey   Metadata key.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param mixed $prevValue Optional. Previous value to check before updating.
 *                           If specified, only update existing metadata entries with
 *                           this value. Otherwise, update all entries. Default empty.
 * @return int|bool Meta ID if the key didn't exist, true on successful update,
 *                  false on failure or if the value passed to the function
 *                  is the same as the one that is already in the database.
 */
    public function updatePostMeta(int $postId, string $metaKey, mixed $metaValue, mixed $prevValue = ''): int|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes everything from post meta matching the given meta key.
 *
 * @since 2.3.0
 *
 * @param string $postMetaKey Key to search for when deleting.
 * @return bool Whether the post meta key was deleted from the database.
 */
    public function deletePostMetaByKey(string $postMetaKey): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a meta key for posts.
 *
 * @since 4.9.8
 *
 * @param string $postType Post type to register a meta key for. Pass an empty string
 *                          to register the meta key across all existing post types.
 * @param string $metaKey  The meta key to register.
 * @param array $args      Data used to describe the meta key when registered. See
 *                          {@see register_meta()} for a list of supported arguments.
 * @return bool True if the meta key was successfully registered, false if not.
 */
    public function registerPostMeta(string $postType, string $metaKey, array $args): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a meta key for posts.
 *
 * @since 4.9.8
 *
 * @param string $postType Post type the meta key is currently registered for. Pass
 *                          an empty string if the meta key is registered across all
 *                          existing post types.
 * @param string $metaKey  The meta key to unregister.
 * @return bool True on success, false if the meta key was not previously registered.
 */
    public function unregisterPostMeta(string $postType, string $metaKey): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves post meta fields, based on post ID.
 *
 * The post meta fields are retrieved from the cache where possible,
 * so the function is optimized to be called more than once.
 *
 * @since 1.2.0
 *
 * @param int $postId Optional. Post ID. Default is the ID of the global `$post`.
 * @return mixed An array of values.
 *               False for an invalid `$post_id` (non-numeric, zero, or negative value).
 *               An empty string if a valid but non-existing post ID is passed.
 */
    public function getPostCustom(int $postId = 0): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves meta field names for a post.
 *
 * If there are no meta fields, then nothing (null) will be returned.
 *
 * @since 1.2.0
 *
 * @param int $postId Optional. Post ID. Default is the ID of the global `$post`.
 * @return array|void Array of the keys, if retrieved.
 */
    public function getPostCustomKeys(int $postId = 0): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves values for a custom post field.
 *
 * The parameters must not be considered optional. All of the post meta fields
 * will be retrieved and only the meta field key values returned.
 *
 * @since 1.2.0
 *
 * @param string $key     Optional. Meta field key. Default empty.
 * @param int $postId Optional. Post ID. Default is the ID of the global `$post`.
 * @return array|null Meta field values.
 */
    public function getPostCustomValues(string $key = '', int $postId = 0): array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a post is sticky.
 *
 * Sticky posts should remain at the top of The Loop. If the post ID is not
 * given, then The Loop ID for the current post will be used.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.7.0
 *
 * @param int $postId Optional. Post ID. Default is the ID of the global `$post`.
 * @return bool Whether post is sticky.
 */
    public function isSticky(int $postId = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes every post field.
 *
 * If the context is 'raw', then the post object or array will get minimal
 * sanitization of the integer fields.
 *
 * @since 2.3.0
 *
 * @see sanitize_post_field()
 *
 * @param object|WP_Post|array $post    The post object or array
 * @param string $context Optional. How to sanitize post fields.
 *                                      Accepts 'raw', 'edit', 'db', 'display',
 *                                      'attribute', or 'js'. Default 'display'.
 * @return object|WP_Post|array The now sanitized post object or array (will be the
 *                              same type as `$post`).
 */
    public function sanitizePost(array|object $post, string $context = 'display'): array|object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes a post field based on context.
 *
 * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and
 * 'js'. The 'display' context is used by default. 'attribute' and 'js' contexts
 * are treated like 'display' when calling filters.
 *
 * @since 2.3.0
 * @since 4.4.0 Like `sanitize_post()`, `$context` defaults to 'display'.
 *
 * @param string $field   The Post Object field name.
 * @param mixed $value   The Post Object value.
 * @param int $postId Post ID.
 * @param string $context Optional. How to sanitize the field. Possible values are 'raw', 'edit',
 *                        'db', 'display', 'attribute' and 'js'. Default 'display'.
 * @return mixed Sanitized value.
 */
    public function sanitizePostField(string $field, mixed $value, int $postId, string $context = 'display'): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Makes a post sticky.
 *
 * Sticky posts should be displayed at the top of the front page.
 *
 * @since 2.7.0
 *
 * @param int $postId Post ID.
 */
    public function stickPost(int $postId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Un-sticks a post.
 *
 * Sticky posts should be displayed at the top of the front page.
 *
 * @since 2.7.0
 *
 * @param int $postId Post ID.
 */
    public function unstickPost(int $postId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Counts number of posts of a post type and if user has permissions to view.
 *
 * This function provides an efficient method of finding the amount of post's
 * type a blog has. Another method is to count the amount of items in
 * get_posts(), but that method has a lot of overhead with doing so. Therefore,
 * when developing for 2.5+, use this function instead.
 *
 * The $perm parameter checks for 'readable' value and if the user can read
 * private posts, it will display that for the user that is signed in.
 *
 * @since 2.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $type Optional. Post type to retrieve count. Default 'post'.
 * @param string $perm Optional. 'readable' or empty. Default empty.
 * @return \stdClass An object containing the number of posts for each status,
 *                  or an empty object if the post type does not exist.
 */
    public function wpCountPosts(string $type = 'post', string $perm = ''): \stdClass
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Counts number of attachments for the mime type(s).
 *
 * If you set the optional mime_type parameter, then an array will still be
 * returned, but will only have the item you are looking for. It does not give
 * you the number of attachments that are children of a post. You can get that
 * by counting the number of children that post has.
 *
 * @since 2.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string|string[] $mimeType Optional. Array or comma-separated list of
 *                                   MIME patterns. Default empty.
 * @return \stdClass An object containing the attachment counts by mime type.
 */
    public function wpCountAttachments(string|array $mimeType = ''): \stdClass
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets default post mime types.
 *
 * @since 2.9.0
 * @since 5.3.0 Added the 'Documents', 'Spreadsheets', and 'Archives' mime type groups.
 *
 * @return array List of post mime types.
 */
    public function getPostMimeTypes(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks a MIME-Type against a list.
 *
 * If the `$wildcard_mime_types` parameter is a string, it must be comma separated
 * list. If the `$real_mime_types` is a string, it is also comma separated to
 * create the list.
 *
 * @since 2.5.0
 *
 * @param string|string[] $wildcardMimeTypes Mime types, e.g. `audio/mpeg`, `image` (same as `image/*`),
 *                                             or `flash` (same as `*flash*`).
 * @param string|string[] $realMimeTypes     Real post mime type values.
 * @return array array(wildcard=>array(real types)).
 */
    public function wpMatchMimeTypes(string|array $wildcardMimeTypes, string|array $realMimeTypes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts MIME types into SQL.
 *
 * @since 2.5.0
 *
 * @param string|string[] $postMimeTypes List of mime types or comma separated string
 *                                         of mime types.
 * @param string $tableAlias     Optional. Specify a table alias, if needed.
 *                                         Default empty.
 * @return string The SQL AND clause for mime searching.
 */
    public function wpPostMimeTypeWhere(string|array $postMimeTypes, string $tableAlias = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Trashes or deletes a post or page.
 *
 * When the post and page is permanently deleted, everything that is tied to
 * it is deleted also. This includes comments, post meta fields, and terms
 * associated with the post.
 *
 * The post or page is moved to Trash instead of permanently deleted unless
 * Trash is disabled, item is already in the Trash, or $force_delete is true.
 *
 * @since 1.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 * @see wp_delete_attachment()
 * @see wp_trash_post()
 *
 * @param int $postId      Optional. Post ID. Default 0.
 * @param bool $forceDelete Optional. Whether to bypass Trash and force deletion.
 *                           Default false.
 * @return \WP_Post|false|null Post data on success, false or null on failure.
 */
    public function wpDeletePost(int $postId = 0, bool $forceDelete = false): \WP_Post|false|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Moves a post or page to the Trash
 *
 * If Trash is disabled, the post or page is permanently deleted.
 *
 * @since 2.9.0
 *
 * @see wp_delete_post()
 *
 * @param int $postId Optional. Post ID. Default is the ID of the global `$post`
 *                     if `EMPTY_TRASH_DAYS` equals true.
 * @return \WP_Post|false|null Post data on success, false or null on failure.
 */
    public function wpTrashPost(int $postId = 0): \WP_Post|false|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Restores a post from the Trash.
 *
 * @since 2.9.0
 * @since 5.6.0 An untrashed post is now returned to 'draft' status by default, except for
 *              attachments which are returned to their original 'inherit' status.
 *
 * @param int $postId Optional. Post ID. Default is the ID of the global `$post`.
 * @return \WP_Post|false|null Post data on success, false or null on failure.
 */
    public function wpUntrashPost(int $postId = 0): \WP_Post|false|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Moves comments for a post to the Trash.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|\WP_Post|null $post Optional. Post ID or post object. Defaults to global $post.
 * @return mixed|void False on failure.
 */
    public function wpTrashPostComments(int|\WP_Post|null $post = null): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Restores comments for a post from the Trash.
 *
 * @since 2.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|\WP_Post|null $post Optional. Post ID or post object. Defaults to global $post.
 * @return true|void
 */
    public function wpUntrashPostComments(int|\WP_Post|null $post = null): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the list of categories for a post.
 *
 * Compatibility layer for themes and plugins. Also an easy layer of abstraction
 * away from the complexity of the taxonomy layer.
 *
 * @since 2.1.0
 *
 * @see wp_get_object_terms()
 *
 * @param int $postId Optional. The Post ID. Does not default to the ID of the
 *                       global $post. Default 0.
 * @param array $args    Optional. Category query parameters. Default empty array.
 *                       See WP_Term_Query::__construct() for supported arguments.
 * @return array|\WP_Error List of categories. If the `$fields` argument passed via `$args` is 'all' or
 *                        'all_with_object_id', an array of WP_Term objects will be returned. If `$fields`
 *                        is 'ids', an array of category IDs. If `$fields` is 'names', an array of category names.
 *                        WP_Error object if 'category' taxonomy doesn't exist.
 */
    public function wpGetPostCategories(int $postId = 0, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the tags for a post.
 *
 * There is only one default for this function, called 'fields' and by default
 * is set to 'all'. There are other defaults that can be overridden in
 * wp_get_object_terms().
 *
 * @since 2.3.0
 *
 * @param int $postId Optional. The Post ID. Does not default to the ID of the
 *                       global $post. Default 0.
 * @param array $args    Optional. Tag query parameters. Default empty array.
 *                       See WP_Term_Query::__construct() for supported arguments.
 * @return array|\WP_Error Array of WP_Term objects on success or empty array if no tags were found.
 *                        WP_Error object if 'post_tag' taxonomy doesn't exist.
 */
    public function wpGetPostTags(int $postId = 0, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the terms for a post.
 *
 * @since 2.8.0
 *
 * @param int $postId  Optional. The Post ID. Does not default to the ID of the
 *                                  global $post. Default 0.
 * @param string|string[] $taxonomy Optional. The taxonomy slug or array of slugs for which
 *                                  to retrieve terms. Default 'post_tag'.
 * @param array $args     {
 *     Optional. Term query parameters. See WP_Term_Query::__construct() for supported arguments.
 *
 *     @type string $fields Term fields to retrieve. Default 'all'.
 * }
 * @return array|\WP_Error Array of WP_Term objects on success or empty array if no terms were found.
 *                        WP_Error object if `$taxonomy` doesn't exist.
 */
    public function wpGetPostTerms(int $postId = 0, string|array $taxonomy = 'post_tag', array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a number of recent posts.
 *
 * @since 1.0.0
 *
 * @see get_posts()
 *
 * @param array $args   Optional. Arguments to retrieve posts. Default empty array.
 * @param string $output Optional. The required return type. One of OBJECT or ARRAY_A, which
 *                       correspond to a WP_Post object or an associative array, respectively.
 *                       Default ARRAY_A.
 * @return array|false Array of recent posts, where the type of each element is determined
 *                     by the `$output` parameter. Empty array on failure.
 */
    public function wpGetRecentPosts(array $args = [], string $output = ARRAY_A): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Inserts or update a post.
 *
 * If the $postarr parameter has 'ID' set to a value, then post will be updated.
 *
 * You can set the post date manually, by setting the values for 'post_date'
 * and 'post_date_gmt' keys. You can close the comments or open the comments by
 * setting the value for 'comment_status' key.
 *
 * @since 1.0.0
 * @since 2.6.0 Added the `$wp_error` parameter to allow a WP_Error to be returned on failure.
 * @since 4.2.0 Support was added for encoding emoji in the post title, content, and excerpt.
 * @since 4.4.0 A 'meta_input' array can now be passed to `$postarr` to add post meta data.
 * @since 5.6.0 Added the `$fire_after_hooks` parameter.
 *
 * @see sanitize_post()
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array $postarr {
 *     An array of elements that make up a post to update or insert.
 *
 *     @type int    $ID                    The post ID. If equal to something other than 0,
 *                                         the post with that ID will be updated. Default 0.
 *     @type int    $post_author           The ID of the user who added the post. Default is
 *                                         the current user ID.
 *     @type string $post_date             The date of the post. Default is the current time.
 *     @type string $post_date_gmt         The date of the post in the GMT timezone. Default is
 *                                         the value of `$post_date`.
 *     @type string $post_content          The post content. Default empty.
 *     @type string $post_content_filtered The filtered post content. Default empty.
 *     @type string $post_title            The post title. Default empty.
 *     @type string $post_excerpt          The post excerpt. Default empty.
 *     @type string $post_status           The post status. Default 'draft'.
 *     @type string $post_type             The post type. Default 'post'.
 *     @type string $comment_status        Whether the post can accept comments. Accepts 'open' or 'closed'.
 *                                         Default is the value of 'default_comment_status' option.
 *     @type string $ping_status           Whether the post can accept pings. Accepts 'open' or 'closed'.
 *                                         Default is the value of 'default_ping_status' option.
 *     @type string $post_password         The password to access the post. Default empty.
 *     @type string $post_name             The post name. Default is the sanitized post title
 *                                         when creating a new post.
 *     @type string $to_ping               Space or carriage return-separated list of URLs to ping.
 *                                         Default empty.
 *     @type string $pinged                Space or carriage return-separated list of URLs that have
 *                                         been pinged. Default empty.
 *     @type int    $post_parent           Set this for the post it belongs to, if any. Default 0.
 *     @type int    $menu_order            The order the post should be displayed in. Default 0.
 *     @type string $post_mime_type        The mime type of the post. Default empty.
 *     @type string $guid                  Global Unique ID for referencing the post. Default empty.
 *     @type int    $import_id             The post ID to be used when inserting a new post.
 *                                         If specified, must not match any existing post ID. Default 0.
 *     @type int[]  $post_category         Array of category IDs.
 *                                         Defaults to value of the 'default_category' option.
 *     @type array  $tags_input            Array of tag names, slugs, or IDs. Default empty.
 *     @type array  $tax_input             An array of taxonomy terms keyed by their taxonomy name.
 *                                         If the taxonomy is hierarchical, the term list needs to be
 *                                         either an array of term IDs or a comma-separated string of IDs.
 *                                         If the taxonomy is non-hierarchical, the term list can be an array
 *                                         that contains term names or slugs, or a comma-separated string
 *                                         of names or slugs. This is because, in hierarchical taxonomy,
 *                                         child terms can have the same names with different parent terms,
 *                                         so the only way to connect them is using ID. Default empty.
 *     @type array  $meta_input            Array of post meta values keyed by their post meta key. Default empty.
 *     @type string $page_template         Page template to use.
 * }
 * @param bool $wpError         Optional. Whether to return a WP_Error on failure. Default false.
 * @param bool $fireAfterHooks Optional. Whether to fire the after insert hooks. Default true.
 * @return int|\WP_Error The post ID on success. The value 0 or WP_Error on failure.
 */
    public function wpInsertPost(array $postarr, bool $wpError = false, bool $fireAfterHooks = true): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates a post with new post data.
 *
 * The date does not have to be set for drafts. You can set the date and it will
 * not be overridden.
 *
 * @since 1.0.0
 * @since 3.5.0 Added the `$wp_error` parameter to allow a WP_Error to be returned on failure.
 * @since 5.6.0 Added the `$fire_after_hooks` parameter.
 *
 * @param array|object $postarr          Optional. Post data. Arrays are expected to be escaped,
 *                                       objects are not. See wp_insert_post() for accepted arguments.
 *                                       Default array.
 * @param bool $wpError         Optional. Whether to return a WP_Error on failure. Default false.
 * @param bool $fireAfterHooks Optional. Whether to fire the after insert hooks. Default true.
 * @return int|\WP_Error The post ID on success. The value 0 or WP_Error on failure.
 */
    public function wpUpdatePost(array|object $postarr = [], bool $wpError = false, bool $fireAfterHooks = true): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Publishes a post by transitioning the post status.
 *
 * @since 2.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|\WP_Post $post Post ID or post object.
 */
    public function wpPublishPost(int|\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Publishes future post and make sure post ID has future post status.
 *
 * Invoked by cron 'publish_future_post' event. This safeguard prevents cron
 * from publishing drafts, etc.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Post $post Post ID or post object.
 */
    public function checkAndPublishFuturePost(int|\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Uses wp_checkdate to return a valid Gregorian-calendar value for post_date.
 * If post_date is not provided, this first checks post_date_gmt if provided,
 * then falls back to use the current time.
 *
 * For back-compat purposes in wp_insert_post, an empty post_date and an invalid
 * post_date_gmt will continue to return '1970-01-01 00:00:00' rather than false.
 *
 * @since 5.7.0
 *
 * @param string $postDate     The date in mysql format (`Y-m-d H:i:s`).
 * @param string $postDateGmt The GMT date in mysql format (`Y-m-d H:i:s`).
 * @return string|false A valid Gregorian-calendar date string, or false on failure.
 */
    public function wpResolvePostDate(string $postDate = '', string $postDateGmt = ''): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Computes a unique slug for the post, when given the desired slug and some post details.
 *
 * @since 2.8.0
 *
 * @global wpdb       $wpdb       WordPress database abstraction object.
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $slug        The desired slug (post_name).
 * @param int $postId     Post ID.
 * @param string $postStatus No uniqueness checks are made if the post is still draft or pending.
 * @param string $postType   Post type.
 * @param int $postParent Post parent ID.
 * @return string Unique slug for the post, based on $post_name (with a -1, -2, etc. suffix)
 */
    public function wpUniquePostSlug(string $slug, int $postId, string $postStatus, string $postType, int $postParent): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds tags to a post.
 *
 * @see wp_set_post_tags()
 *
 * @since 2.3.0
 *
 * @param int $postId Optional. The Post ID. Does not default to the ID of the global $post.
 * @param string|array $tags    Optional. An array of tags to set for the post, or a string of tags
 *                              separated by commas. Default empty.
 * @return array|false|\WP_Error Array of affected term IDs. WP_Error or false on failure.
 */
    public function wpAddPostTags(int $postId = 0, string|array $tags = ''): array|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the tags for a post.
 *
 * @since 2.3.0
 *
 * @see wp_set_object_terms()
 *
 * @param int $postId Optional. The Post ID. Does not default to the ID of the global $post.
 * @param string|array $tags    Optional. An array of tags to set for the post, or a string of tags
 *                              separated by commas. Default empty.
 * @param bool $append  Optional. If true, don't delete existing tags, just add on. If false,
 *                              replace the tags with the new tags. Default false.
 * @return array|false|\WP_Error Array of term taxonomy IDs of affected terms. WP_Error or false on failure.
 */
    public function wpSetPostTags(int $postId = 0, string|array $tags = '', bool $append = false): array|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the terms for a post.
 *
 * @since 2.8.0
 *
 * @see wp_set_object_terms()
 *
 * @param int $postId  Optional. The Post ID. Does not default to the ID of the global $post.
 * @param string|array $terms    Optional. An array of terms to set for the post, or a string of terms
 *                               separated by commas. Hierarchical taxonomies must always pass IDs rather
 *                               than names so that children with the same names but different parents
 *                               aren't confused. Default empty.
 * @param string $taxonomy Optional. Taxonomy name. Default 'post_tag'.
 * @param bool $append   Optional. If true, don't delete existing terms, just add on. If false,
 *                               replace the terms with the new terms. Default false.
 * @return array|false|\WP_Error Array of term taxonomy IDs of affected terms. WP_Error or false on failure.
 */
    public function wpSetPostTerms(int $postId = 0, string|array $terms = '', string $taxonomy = 'post_tag', bool $append = false): array|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets categories for a post.
 *
 * If no categories are provided, the default category is used.
 *
 * @since 2.1.0
 *
 * @param int $postId         Optional. The Post ID. Does not default to the ID
 *                                   of the global $post. Default 0.
 * @param int[]|int $postCategories Optional. List of category IDs, or the ID of a single category.
 *                                   Default empty array.
 * @param bool $append          If true, don't delete existing categories, just add on.
 *                                   If false, replace the categories with the new categories.
 * @return array|false|\WP_Error Array of term taxonomy IDs of affected categories. WP_Error or false on failure.
 */
    public function wpSetPostCategories(int $postId = 0, array|int $postCategories = [], bool $append = false): array|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fires actions related to the transitioning of a post's status.
 *
 * When a post is saved, the post status is "transitioned" from one status to another,
 * though this does not always mean the status has actually changed before and after
 * the save. This function fires a number of action hooks related to that transition:
 * the generic {@see 'transition_post_status'} action, as well as the dynamic hooks
 * {@see '$old_status_to_$new_status'} and {@see '$new_status_$post->post_type'}. Note
 * that the function does not transition the post object in the database.
 *
 * For instance: When publishing a post for the first time, the post status may transition
 * from 'draft' – or some other status – to 'publish'. However, if a post is already
 * published and is simply being updated, the "old" and "new" statuses may both be 'publish'
 * before and after the transition.
 *
 * @since 2.3.0
 *
 * @param string $newStatus Transition to this post status.
 * @param string $oldStatus Previous post status.
 * @param \WP_Post $post Post data.
 */
    public function wpTransitionPostStatus(string $newStatus, string $oldStatus, \WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fires actions after a post, its terms and meta data has been saved.
 *
 * @since 5.6.0
 *
 * @param int|\WP_Post $post        The post ID or object that has been saved.
 * @param bool $update      Whether this is an existing post being updated.
 * @param null|\WP_Post $postBefore Null for new posts, the WP_Post object prior
 *                                  to the update for updated posts.
 */
    public function wpAfterInsertPost(int|\WP_Post $post, bool $update, null|\WP_Post $postBefore): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a URL to those already pinged.
 *
 * @since 1.5.0
 * @since 4.7.0 `$post` can be a WP_Post object.
 * @since 4.7.0 `$uri` can be an array of URIs.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|\WP_Post $post Post ID or post object.
 * @param string|array $uri  Ping URI or array of URIs.
 * @return int|false How many rows were updated.
 */
    public function addPing(int|\WP_Post $post, string|array $uri): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves enclosures already enclosed for a post.
 *
 * @since 1.5.0
 *
 * @param int $postId Post ID.
 * @return string[] Array of enclosures for the given post.
 */
    public function getEnclosed(int $postId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves URLs already pinged for a post.
 *
 * @since 1.5.0
 *
 * @since 4.7.0 `$post` can be a WP_Post object.
 *
 * @param int|\WP_Post $post Post ID or object.
 * @return string[]|false Array of URLs already pinged for the given post, false if the post is not found.
 */
    public function getPung(int|\WP_Post $post): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves URLs that need to be pinged.
 *
 * @since 1.5.0
 * @since 4.7.0 `$post` can be a WP_Post object.
 *
 * @param int|\WP_Post $post Post ID or post object.
 * @return string[]|false List of URLs yet to ping.
 */
    public function getToPing(int|\WP_Post $post): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Does trackbacks for a list of URLs.
 *
 * @since 1.0.0
 *
 * @param string $tbList Comma separated list of URLs.
 * @param int $postId Post ID.
 */
    public function trackbackUrlList(string $tbList, int $postId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a list of page IDs.
 *
 * @since 2.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @return string[] List of page IDs as strings.
 */
    public function getAllPageIds(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a page given its path.
 *
 * @since 2.1.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $pagePath Page path.
 * @param string $output    Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                                correspond to a WP_Post object, an associative array, or a numeric array,
 *                                respectively. Default OBJECT.
 * @param string|array $postType Optional. Post type or array of post types. Default 'page'.
 * @return \WP_Post|array|null WP_Post (or array) on success, or null on failure.
 */
    public function getPageByPath(string $pagePath, string $output = OBJECT, string|array $postType = 'page'): \WP_Post|array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Identifies descendants of a given page ID in a list of page objects.
 *
 * Descendants are identified from the `$pages` array passed to the function. No database queries are performed.
 *
 * @since 1.5.1
 *
 * @param int $pageId Page ID.
 * @param WP_Post[] $pages   List of page objects from which descendants should be identified.
 * @return WP_Post[] List of page children.
 */
    public function getPageChildren(int $pageId, array $pages): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Orders the pages with children under parents in a flat list.
 *
 * It uses auxiliary structure to hold parent-children relationships and
 * runs in O(N) complexity
 *
 * @since 2.0.0
 *
 * @param WP_Post[] $pages   Posts array (passed by reference).
 * @param int $pageId Optional. Parent page ID. Default 0.
 * @return string[] Array of post names keyed by ID and arranged by hierarchy. Children immediately follow their parents.
 */
    public function getPageHierarchy(array $pages, int $pageId = 0): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds the URI path for a page.
 *
 * Sub pages will be in the "directory" under the parent page post name.
 *
 * @since 1.5.0
 * @since 4.6.0 The `$page` parameter was made optional.
 *
 * @param WP_Post|object|int $page Optional. Page ID or WP_Post object. Default is global $post.
 * @return string|false Page URI, false on error.
 */
    public function getPageUri(int|object $page = 0): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an array of pages (or hierarchical post type items).
 *
 * @since 1.5.0
 * @since 6.3.0 Use WP_Query internally.
 *
 * @param array|string $args {
 *     Optional. Array or string of arguments to retrieve pages.
 *
 *     @type int          $child_of     Page ID to return child and grandchild pages of. Note: The value
 *                                      of `$hierarchical` has no bearing on whether `$child_of` returns
 *                                      hierarchical results. Default 0, or no restriction.
 *     @type string       $sort_order   How to sort retrieved pages. Accepts 'ASC', 'DESC'. Default 'ASC'.
 *     @type string       $sort_column  What columns to sort pages by, comma-separated. Accepts 'post_author',
 *                                      'post_date', 'post_title', 'post_name', 'post_modified', 'menu_order',
 *                                      'post_modified_gmt', 'post_parent', 'ID', 'rand', 'comment_count'.
 *                                      'post_' can be omitted for any values that start with it.
 *                                      Default 'post_title'.
 *     @type bool         $hierarchical Whether to return pages hierarchically. If false in conjunction with
 *                                      `$child_of` also being false, both arguments will be disregarded.
 *                                      Default true.
 *     @type int[]        $exclude      Array of page IDs to exclude. Default empty array.
 *     @type int[]        $include      Array of page IDs to include. Cannot be used with `$child_of`,
 *                                      `$parent`, `$exclude`, `$meta_key`, `$meta_value`, or `$hierarchical`.
 *                                      Default empty array.
 *     @type string       $meta_key     Only include pages with this meta key. Default empty.
 *     @type string       $meta_value   Only include pages with this meta value. Requires `$meta_key`.
 *                                      Default empty.
 *     @type string       $authors      A comma-separated list of author IDs. Default empty.
 *     @type int          $parent       Page ID to return direct children of. Default -1, or no restriction.
 *     @type string|int[] $exclude_tree Comma-separated string or array of page IDs to exclude.
 *                                      Default empty array.
 *     @type int          $number       The number of pages to return. Default 0, or all pages.
 *     @type int          $offset       The number of pages to skip before returning. Requires `$number`.
 *                                      Default 0.
 *     @type string       $post_type    The post type to query. Default 'page'.
 *     @type string|array $post_status  A comma-separated list or array of post statuses to include.
 *                                      Default 'publish'.
 * }
 * @return WP_Post[]|false Array of pages (or hierarchical post type items). Boolean false if the
 *                         specified post type is not hierarchical or the specified status is not
 *                         supported by the post type.
 */
    public function getPages(array|string $args = []): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether an attachment URI is local and really an attachment.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.0.0
 *
 * @param string $url URL to check
 * @return bool True on success, false on failure.
 */
    public function isLocalAttachment(string $url): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Inserts an attachment.
 *
 * If you set the 'ID' in the $args parameter, it will mean that you are
 * updating and attempt to update the attachment. You can also set the
 * attachment name or title by setting the key 'post_name' or 'post_title'.
 *
 * You can set the dates for the attachment manually by setting the 'post_date'
 * and 'post_date_gmt' keys' values.
 *
 * By default, the comments will use the default settings for whether the
 * comments are allowed. You can close them manually or keep them open by
 * setting the value for the 'comment_status' key.
 *
 * @since 2.0.0
 * @since 4.7.0 Added the `$wp_error` parameter to allow a WP_Error to be returned on failure.
 * @since 5.6.0 Added the `$fire_after_hooks` parameter.
 *
 * @see wp_insert_post()
 *
 * @param string|array $args             Arguments for inserting an attachment.
 * @param string|false $file             Optional. Filename. Default false.
 * @param int $parentPostId   Optional. Parent post ID or 0 for no parent. Default 0.
 * @param bool $wpError         Optional. Whether to return a WP_Error on failure. Default false.
 * @param bool $fireAfterHooks Optional. Whether to fire the after insert hooks. Default true.
 * @return int|\WP_Error The attachment ID on success. The value 0 or WP_Error on failure.
 */
    public function wpInsertAttachment(string|array $args, string|false $file = false, int $parentPostId = 0, bool $wpError = false, bool $fireAfterHooks = true): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Trashes or deletes an attachment.
 *
 * When an attachment is permanently deleted, the file will also be removed.
 * Deletion removes all post meta fields, taxonomy, comments, etc. associated
 * with the attachment (except the main post).
 *
 * The attachment is moved to the Trash instead of permanently deleted unless Trash
 * for media is disabled, item is already in the Trash, or $force_delete is true.
 *
 * @since 2.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $postId      Attachment ID.
 * @param bool $forceDelete Optional. Whether to bypass Trash and force deletion.
 *                           Default false.
 * @return \WP_Post|false|null Post data on success, false or null on failure.
 */
    public function wpDeleteAttachment(int $postId, bool $forceDelete = false): \WP_Post|false|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes all files that belong to the given attachment.
 *
 * @since 4.9.7
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $postId      Attachment ID.
 * @param array $meta         The attachment's meta data.
 * @param array $backupSizes The meta data for the attachment's backup images.
 * @param string $file         Absolute path to the attachment's file.
 * @return bool True on success, false on failure.
 */
    public function wpDeleteAttachmentFiles(int $postId, array $meta, array $backupSizes, string $file): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves attachment metadata for attachment ID.
 *
 * @since 2.1.0
 * @since 6.0.0 The `$filesize` value was added to the returned array.
 *
 * @param int $attachmentId Attachment post ID. Defaults to global $post.
 * @param bool $unfiltered    Optional. If true, filters are not run. Default false.
 * @return array|false {
 *     Attachment metadata. False on failure.
 *
 *     @type int    $width      The width of the attachment.
 *     @type int    $height     The height of the attachment.
 *     @type string $file       The file path relative to `wp-content/uploads`.
 *     @type array  $sizes      Keys are size slugs, each value is an array containing
 *                              'file', 'width', 'height', and 'mime-type'.
 *     @type array  $image_meta Image metadata.
 *     @type int    $filesize   File size of the attachment.
 * }
 */
    public function wpGetAttachmentMetadata(int $attachmentId = 0, bool $unfiltered = false): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates metadata for an attachment.
 *
 * @since 2.1.0
 *
 * @param int $attachmentId Attachment post ID.
 * @param array $data          Attachment meta data.
 * @return int|false False if $post is invalid.
 */
    public function wpUpdateAttachmentMetadata(int $attachmentId, array $data): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL for an attachment.
 *
 * @since 2.1.0
 *
 * @global string $pagenow The filename of the current screen.
 *
 * @param int $attachmentId Optional. Attachment post ID. Defaults to global $post.
 * @return string|false Attachment URL, otherwise false.
 */
    public function wpGetAttachmentUrl(int $attachmentId = 0): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the caption for an attachment.
 *
 * @since 4.6.0
 *
 * @param int $postId Optional. Attachment ID. Default is the ID of the global `$post`.
 * @return string|false Attachment caption on success, false on failure.
 */
    public function wpGetAttachmentCaption(int $postId = 0): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves URL for an attachment thumbnail.
 *
 * @since 2.1.0
 * @since 6.1.0 Changed to use wp_get_attachment_image_url().
 *
 * @param int $postId Optional. Attachment ID. Default is the ID of the global `$post`.
 * @return string|false Thumbnail URL on success, false on failure.
 */
    public function wpGetAttachmentThumbUrl(int $postId = 0): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Verifies an attachment is of a given type.
 *
 * @since 4.2.0
 *
 * @param string $type Attachment type. Accepts `image`, `audio`, `video`, or a file extension.
 * @param int|\WP_Post $post Optional. Attachment ID or object. Default is global $post.
 * @return bool True if an accepted type or a matching file extension, false otherwise.
 */
    public function wpAttachmentIs(string $type, int|\WP_Post $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether an attachment is an image.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.1.0
 * @since 4.2.0 Modified into wrapper for wp_attachment_is() and
 *              allowed WP_Post object to be passed.
 *
 * @param int|\WP_Post $post Optional. Attachment ID or object. Default is global $post.
 * @return bool Whether the attachment is an image.
 */
    public function wpAttachmentIsImage(int|\WP_Post $post = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the icon for a MIME type or attachment.
 *
 * @since 2.1.0
 * @since 6.5.0 Added the `$preferred_ext` parameter.
 *
 * @param string|int $mime          MIME type or attachment ID.
 * @param string $preferredExt File format to prefer in return. Default '.png'.
 * @return string|false Icon, false otherwise.
 */
    public function wpMimeTypeIcon(string|int $mime = 0, string $preferredExt = '.png'): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks for changed slugs for published post objects and save the old slug.
 *
 * The function is used when a post object of any type is updated,
 * by comparing the current and previous post objects.
 *
 * If the slug was changed and not already part of the old slugs then it will be
 * added to the post meta field ('_wp_old_slug') for storing old slugs for that
 * post.
 *
 * The most logically usage of this function is redirecting changed post objects, so
 * that those that linked to an changed post will be redirected to the new post.
 *
 * @since 2.1.0
 *
 * @param int $postId     Post ID.
 * @param \WP_Post $post        The post object.
 * @param \WP_Post $postBefore The previous post object.
 */
    public function wpCheckForChangedSlugs(int $postId, \WP_Post $post, \WP_Post $postBefore): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks for changed dates for published post objects and save the old date.
 *
 * The function is used when a post object of any type is updated,
 * by comparing the current and previous post objects.
 *
 * If the date was changed and not already part of the old dates then it will be
 * added to the post meta field ('_wp_old_date') for storing old dates for that
 * post.
 *
 * The most logically usage of this function is redirecting changed post objects, so
 * that those that linked to an changed post will be redirected to the new post.
 *
 * @since 4.9.3
 *
 * @param int $postId     Post ID.
 * @param \WP_Post $post        The post object.
 * @param \WP_Post $postBefore The previous post object.
 */
    public function wpCheckForChangedDates(int $postId, \WP_Post $post, \WP_Post $postBefore): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the private post SQL based on capability.
 *
 * This function provides a standardized way to appropriately select on the
 * post_status of a post type. The function will return a piece of SQL code
 * that can be added to a WHERE clause; this SQL is constructed to allow all
 * published posts, and all private posts to which the user has access.
 *
 * @since 2.2.0
 * @since 4.3.0 Added the ability to pass an array to `$post_type`.
 *
 * @param string|array $postType Single post type or an array of post types. Currently only supports 'post' or 'page'.
 * @return string SQL code that can be added to a where clause.
 */
    public function getPrivatePostsCapSql(string|array $postType): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the post SQL based on capability, author, and type.
 *
 * @since 3.0.0
 * @since 4.3.0 Introduced the ability to pass an array of post types to `$post_type`.
 *
 * @see get_private_posts_cap_sql()
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string|string[] $postType   Single post type or an array of post types.
 * @param bool $full        Optional. Returns a full WHERE statement instead of just
 *                                     an 'andalso' term. Default true.
 * @param int $postAuthor Optional. Query posts having a single author ID. Default null.
 * @param bool $publicOnly Optional. Only return public posts. Skips cap checks for
 *                                     $current_user.  Default false.
 * @return string SQL WHERE code that can be added to a query.
 */
    public function getPostsByAuthorSql(string|array $postType, bool $full = true, int $postAuthor = null, bool $publicOnly = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the most recent time that a post on the site was published.
 *
 * The server timezone is the default and is the difference between GMT and
 * server time. The 'blog' value is the date when the last post was posted.
 * The 'gmt' is when the last post was posted in GMT formatted date.
 *
 * @since 0.71
 * @since 4.4.0 The `$post_type` argument was added.
 *
 * @param string $timezone  Optional. The timezone for the timestamp. Accepts 'server', 'blog', or 'gmt'.
 *                          'server' uses the server's internal timezone.
 *                          'blog' uses the `post_date` field, which proxies to the timezone set for the site.
 *                          'gmt' uses the `post_date_gmt` field.
 *                          Default 'server'.
 * @param string $postType Optional. The post type to check. Default 'any'.
 * @return string The date of the last post, or false on failure.
 */
    public function getLastpostdate(string $timezone = 'server', string $postType = 'any'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the most recent time that a post on the site was modified.
 *
 * The server timezone is the default and is the difference between GMT and
 * server time. The 'blog' value is just when the last post was modified.
 * The 'gmt' is when the last post was modified in GMT time.
 *
 * @since 1.2.0
 * @since 4.4.0 The `$post_type` argument was added.
 *
 * @param string $timezone  Optional. The timezone for the timestamp. See get_lastpostdate()
 *                          for information on accepted values.
 *                          Default 'server'.
 * @param string $postType Optional. The post type to check. Default 'any'.
 * @return string The timestamp in 'Y-m-d H:i:s' format, or false on failure.
 */
    public function getLastpostmodified(string $timezone = 'server', string $postType = 'any'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates posts in cache.
 *
 * @since 1.5.1
 *
 * @param WP_Post[] $posts Array of post objects (passed by reference).
 */
    public function updatePostCache(array $posts): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Will clean the post in the cache.
 *
 * Cleaning means delete from the cache of the post. Will call to clean the term
 * object cache associated with the post ID.
 *
 * This function not run if $_wp_suspend_cache_invalidation is not empty. See
 * wp_suspend_cache_invalidation().
 *
 * @since 2.0.0
 *
 * @global bool $_wp_suspend_cache_invalidation
 *
 * @param int|\WP_Post $post Post ID or post object to remove from the cache.
 */
    public function cleanPostCache(int|\WP_Post $post): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates post, term, and metadata caches for a list of post objects.
 *
 * @since 1.5.0
 *
 * @param WP_Post[] $posts             Array of post objects (passed by reference).
 * @param string $postType         Optional. Post type. Default 'post'.
 * @param bool $updateTermCache Optional. Whether to update the term cache. Default true.
 * @param bool $updateMetaCache Optional. Whether to update the meta cache. Default true.
 */
    public function updatePostCaches(array $posts, string $postType = 'post', bool $updateTermCache = true, bool $updateMetaCache = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates post author user caches for a list of post objects.
 *
 * @since 6.1.0
 *
 * @param WP_Post[] $posts Array of post objects.
 */
    public function updatePostAuthorCaches(array $posts): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates parent post caches for a list of post objects.
 *
 * @since 6.1.0
 *
 * @param WP_Post[] $posts Array of post objects.
 */
    public function updatePostParentCaches(array $posts): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates metadata cache for a list of post IDs.
 *
 * Performs SQL query to retrieve the metadata for the post IDs and updates the
 * metadata cache for the posts. Therefore, the functions, which call this
 * function, do not need to perform SQL queries on their own.
 *
 * @since 2.1.0
 *
 * @param int[] $postIds Array of post IDs.
 * @return array|false An array of metadata on success, false if there is nothing to update.
 */
    public function updatePostmetaCache(array $postIds): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Will clean the attachment in the cache.
 *
 * Cleaning means delete from the cache. Optionally will clean the term
 * object cache associated with the attachment ID.
 *
 * This function will not run if $_wp_suspend_cache_invalidation is not empty.
 *
 * @since 3.0.0
 *
 * @global bool $_wp_suspend_cache_invalidation
 *
 * @param int $id          The attachment ID in the cache to clean.
 * @param bool $cleanTerms Optional. Whether to clean terms cache. Default false.
 */
    public function cleanAttachmentCache(int $id, bool $cleanTerms = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the ID of the post's parent.
 *
 * @since 3.1.0
 * @since 5.9.0 The `$post` parameter was made optional.
 *
 * @param int|\WP_Post|null $post Optional. Post ID or post object. Defaults to global $post.
 * @return int|false Post parent ID (which can be 0 if there is no parent),
 *                   or false if the post does not exist.
 */
    public function wpGetPostParentId(int|\WP_Post|null $post = null): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks the given subset of the post hierarchy for hierarchy loops.
 *
 * Prevents loops from forming and breaks those that it finds. Attached
 * to the {@see 'wp_insert_post_parent'} filter.
 *
 * @since 3.1.0
 *
 * @see wp_find_hierarchy_loop()
 *
 * @param int $postParent ID of the parent for the post we're checking.
 * @param int $postId     ID of the post we're checking.
 * @return int The new post_parent for the post, 0 otherwise.
 */
    public function wpCheckPostHierarchyForLoops(int $postParent, int $postId): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the post thumbnail (featured image) for the given post.
 *
 * @since 3.1.0
 *
 * @param int|\WP_Post $post         Post ID or post object where thumbnail should be attached.
 * @param int $thumbnailId Thumbnail to attach.
 * @return int|bool True on success, false on failure.
 */
    public function setPostThumbnail(int|\WP_Post $post, int $thumbnailId): int|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes the thumbnail (featured image) from the given post.
 *
 * @since 3.3.0
 *
 * @param int|\WP_Post $post Post ID or post object from which the thumbnail should be removed.
 * @return bool True on success, false on failure.
 */
    public function deletePostThumbnail(int|\WP_Post $post): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes auto-drafts for new posts that are > 7 days old.
 *
 * @since 3.4.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 */
    public function wpDeleteAutoDrafts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Queues posts for lazy-loading of term meta.
 *
 * @since 4.5.0
 *
 * @param WP_Post[] $posts Array of WP_Post objects.
 */
    public function wpQueuePostsForTermMetaLazyload(array $posts): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the last changed time for the 'posts' cache group.
 *
 * @since 5.0.0
 */
    public function wpCacheSetPostsLastChanged(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets all available post MIME types for a given post type.
 *
 * @since 2.5.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $type
 * @return string[] An array of MIME types.
 */
    public function getAvailablePostMimeTypes(string $type = 'attachment'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the path to an uploaded image file.
 *
 * Similar to `get_attached_file()` however some images may have been processed after uploading
 * to make them suitable for web use. In this case the attached "full" size file is usually replaced
 * with a scaled down version of the original image. This function always returns the path
 * to the originally uploaded image file.
 *
 * @since 5.3.0
 * @since 5.4.0 Added the `$unfiltered` parameter.
 *
 * @param int $attachmentId Attachment ID.
 * @param bool $unfiltered Optional. Passed through to `get_attached_file()`. Default false.
 * @return string|false Path to the original image file or false if the attachment is not an image.
 */
    public function wpGetOriginalImagePath(int $attachmentId, bool $unfiltered = false): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to an original attachment image.
 *
 * Similar to `wp_get_attachment_url()` however some images may have been
 * processed after uploading. In this case this function returns the URL
 * to the originally uploaded image file.
 *
 * @since 5.3.0
 *
 * @param int $attachmentId Attachment post ID.
 * @return string|false Attachment image URL, false on error or if the attachment is not an image.
 */
    public function wpGetOriginalImageUrl(int $attachmentId): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters callback which sets the status of an untrashed post to its previous status.
 *
 * This can be used as a callback on the `wp_untrash_post_status` filter.
 *
 * @since 5.6.0
 *
 * @param string $newStatus      The new status of the post being restored.
 * @param int $postId         The ID of the post being restored.
 * @param string $previousStatus The status of the post at the point where it was trashed.
 * @return string The new status of the post.
 */
    public function wpUntrashPostSetPreviousStatus(string $newStatus, int $postId, string $previousStatus): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether the post can be edited in the block editor.
 *
 * @since 5.0.0
 * @since 6.1.0 Moved to wp-includes from wp-admin.
 *
 * @param int|\WP_Post $post Post ID or WP_Post object.
 * @return bool Whether the post can be edited in the block editor.
 */
    public function useBlockEditorForPost(int|\WP_Post $post): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether a post type is compatible with the block editor.
 *
 * The block editor depends on the REST API, and if the post type is not shown in the
 * REST API, then it won't work with the block editor.
 *
 * @since 5.0.0
 * @since 6.1.0 Moved to wp-includes from wp-admin.
 *
 * @param string $postType The post type.
 * @return bool Whether the post type can be edited with the block editor.
 */
    public function useBlockEditorForPostType(string $postType): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers any additional post meta fields.
 *
 * @since 6.3.0 Adds `wp_pattern_sync_status` meta field to the wp_block post type so an unsynced option can be added.
 *
 * @link https://github.com/WordPress/gutenberg/pull/51144
 */
    public function wpCreateInitialPostMeta(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the value of a query variable in the WP_Query class.
 *
 * @since 1.5.0
 * @since 3.9.0 The `$default_value` argument was introduced.
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string $queryVar     The variable key to retrieve.
 * @param mixed $defaultValue Optional. Value to return if the query variable is not set.
 *                              Default empty string.
 * @return mixed Contents of the query variable.
 */
    public function getQueryVar(string $queryVar, mixed $defaultValue = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the currently queried object.
 *
 * Wrapper for WP_Query::get_queried_object().
 *
 * @since 3.1.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return \WP_Term|\WP_Post_Type|\WP_Post|\WP_User|null The queried object.
 */
    public function getQueriedObject(): \WP_Term|\WP_Post_Type|\WP_Post|\WP_User|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the ID of the currently queried object.
 *
 * Wrapper for WP_Query::get_queried_object_id().
 *
 * @since 3.1.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return int ID of the queried object.
 */
    public function getQueriedObjectId(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the value of a query variable in the WP_Query class.
 *
 * @since 2.2.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string $queryVar Query variable key.
 * @param mixed $value     Query variable value.
 */
    public function setQueryVar(string $queryVar, mixed $value): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets up The Loop with query parameters.
 *
 * Note: This function will completely override the main query and isn't intended for use
 * by plugins or themes. Its overly-simplistic approach to modifying the main query can be
 * problematic and should be avoided wherever possible. In most cases, there are better,
 * more performant options for modifying the main query such as via the {@see 'pre_get_posts'}
 * action within WP_Query.
 *
 * This must not be used within the WordPress Loop.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param array|string $query Array or string of WP_Query arguments.
 * @return WP_Post[]|int[] Array of post objects or post IDs.
 */
    public function queryPosts(array|string $query): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Destroys the previous query and sets up a new query.
 *
 * This should be used after query_posts() and before another query_posts().
 * This will remove obscure bugs that occur when the previous WP_Query object
 * is not destroyed properly before another is set up.
 *
 * @since 2.3.0
 *
 * @global WP_Query $wp_query     WordPress Query object.
 * @global WP_Query $wp_the_query Copy of the global WP_Query instance created during wp_reset_query().
 */
    public function wpResetQuery(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * After looping through a separate query, this function restores
 * the $post global to the current post in the main query.
 *
 * @since 3.0.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 */
    public function wpResetPostdata(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing archive page.
 *
 * Archive pages include category, tag, author, date, custom post type,
 * and custom taxonomy based archives.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @see is_category()
 * @see is_tag()
 * @see is_author()
 * @see is_date()
 * @see is_post_type_archive()
 * @see is_tax()
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for an existing archive page.
 */
    public function isArchive(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing post type archive page.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 3.1.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string|string[] $postTypes Optional. Post type or array of posts types
 *                                    to check against. Default empty.
 * @return bool Whether the query is for an existing post type archive page.
 */
    public function isPostTypeArchive(string|array $postTypes = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing attachment page.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.0.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param int|string|int[]|string[] $attachment Optional. Attachment ID, title, slug, or array of such
 *                                              to check against. Default empty.
 * @return bool Whether the query is for an existing attachment page.
 */
    public function isAttachment(int|string|array $attachment = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing author archive page.
 *
 * If the $author parameter is specified, this function will additionally
 * check if the query is for one of the authors specified.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param int|string|int[]|string[] $author Optional. User ID, nickname, nicename, or array of such
 *                                          to check against. Default empty.
 * @return bool Whether the query is for an existing author archive page.
 */
    public function isAuthor(int|string|array $author = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing category archive page.
 *
 * If the $category parameter is specified, this function will additionally
 * check if the query is for one of the categories specified.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param int|string|int[]|string[] $category Optional. Category ID, name, slug, or array of such
 *                                            to check against. Default empty.
 * @return bool Whether the query is for an existing category archive page.
 */
    public function isCategory(int|string|array $category = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing tag archive page.
 *
 * If the $tag parameter is specified, this function will additionally
 * check if the query is for one of the tags specified.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.3.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param int|string|int[]|string[] $tag Optional. Tag ID, name, slug, or array of such
 *                                       to check against. Default empty.
 * @return bool Whether the query is for an existing tag archive page.
 */
    public function isTag(int|string|array $tag = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing custom taxonomy archive page.
 *
 * If the $taxonomy parameter is specified, this function will additionally
 * check if the query is for that specific $taxonomy.
 *
 * If the $term parameter is specified in addition to the $taxonomy parameter,
 * this function will additionally check if the query is for one of the terms
 * specified.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string|string[] $taxonomy Optional. Taxonomy slug or slugs to check against.
 *                                            Default empty.
 * @param int|string|int[]|string[] $term     Optional. Term ID, name, slug, or array of such
 *                                            to check against. Default empty.
 * @return bool Whether the query is for an existing custom taxonomy archive page.
 *              True for custom taxonomy archive pages, false for built-in taxonomies
 *              (category and tag archives).
 */
    public function isTax(string|array $taxonomy = '', int|string|array $term = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing date archive.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for an existing date archive.
 */
    public function isDate(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing day archive.
 *
 * A conditional check to test whether the page is a date-based archive page displaying posts for the current day.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for an existing day archive.
 */
    public function isDay(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for a feed.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string|string[] $feeds Optional. Feed type or array of feed types
 *                                         to check against. Default empty.
 * @return bool Whether the query is for a feed.
 */
    public function isFeed(string|array $feeds = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Is the query for a comments feed?
 *
 * @since 3.0.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for a comments feed.
 */
    public function isCommentFeed(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for the front page of the site.
 *
 * This is for what is displayed at your site's main URL.
 *
 * Depends on the site's "Front page displays" Reading Settings 'show_on_front' and 'page_on_front'.
 *
 * If you set a static page for the front page of your site, this function will return
 * true when viewing that page.
 *
 * Otherwise the same as {@see is_home()}.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for the front page of the site.
 */
    public function isFrontPage(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for the blog homepage.
 *
 * The blog homepage is the page that shows the time-based blog content of the site.
 *
 * is_home() is dependent on the site's "Front page displays" Reading Settings 'show_on_front'
 * and 'page_for_posts'.
 *
 * If a static page is set for the front page of the site, this function will return true only
 * on the page you set as the "Posts page".
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @see is_front_page()
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for the blog homepage.
 */
    public function isHome(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for the Privacy Policy page.
 *
 * The Privacy Policy page is the page that shows the Privacy Policy content of the site.
 *
 * is_privacy_policy() is dependent on the site's "Change your Privacy Policy page" Privacy Settings 'wp_page_for_privacy_policy'.
 *
 * This function will return true only on the page you set as the "Privacy Policy page".
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 5.2.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for the Privacy Policy page.
 */
    public function isPrivacyPolicy(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing month archive.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for an existing month archive.
 */
    public function isMonth(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing single page.
 *
 * If the $page parameter is specified, this function will additionally
 * check if the query is for one of the pages specified.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @see is_single()
 * @see is_singular()
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param int|string|int[]|string[] $page Optional. Page ID, title, slug, or array of such
 *                                        to check against. Default empty.
 * @return bool Whether the query is for an existing single page.
 */
    public function isPage(int|string|array $page = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for a paged result and not for the first page.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for a paged result.
 */
    public function isPaged(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for a post or page preview.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.0.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for a post or page preview.
 */
    public function isPreview(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Is the query for the robots.txt file?
 *
 * @since 2.1.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for the robots.txt file.
 */
    public function isRobots(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Is the query for the favicon.ico file?
 *
 * @since 5.4.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for the favicon.ico file.
 */
    public function isFavicon(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for a search.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for a search.
 */
    public function isSearch(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing single post.
 *
 * Works for any post type, except attachments and pages
 *
 * If the $post parameter is specified, this function will additionally
 * check if the query is for one of the Posts specified.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @see is_page()
 * @see is_singular()
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param int|string|int[]|string[] $post Optional. Post ID, title, slug, or array of such
 *                                        to check against. Default empty.
 * @return bool Whether the query is for an existing single post.
 */
    public function isSingle(int|string|array $post = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing single post of any post type
 * (post, attachment, page, custom post types).
 *
 * If the $post_types parameter is specified, this function will additionally
 * check if the query is for one of the Posts Types specified.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @see is_page()
 * @see is_single()
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param string|string[] $postTypes Optional. Post type or array of post types
 *                                    to check against. Default empty.
 * @return bool Whether the query is for an existing single post
 *              or any of the given post types.
 */
    public function isSingular(string|array $postTypes = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for a specific time.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for a specific time.
 */
    public function isTime(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for a trackback endpoint call.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for a trackback endpoint call.
 */
    public function isTrackback(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is for an existing year archive.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for an existing year archive.
 */
    public function isYear(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query has resulted in a 404 (returns no results).
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is a 404 error.
 */
    public function is404(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Is the query for an embedded post?
 *
 * @since 4.4.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is for an embedded post.
 */
    public function isEmbed(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the query is the main query.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 3.3.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool Whether the query is the main query.
 */
    public function isMainQuery(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether current WordPress query has posts to loop over.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool True if posts are available, false if end of the loop.
 */
    public function havePosts(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the caller is in the Loop.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.0.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool True if caller is within loop, false if loop hasn't started or ended.
 */
    public function inTheLoop(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Rewind the loop posts.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 */
    public function rewindPosts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Iterate the post index in the loop.
 *
 * @since 1.5.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 */
    public function thePost(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether current WordPress query has comments to loop over.
 *
 * @since 2.2.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @return bool True if comments are available, false if no more comments.
 */
    public function haveComments(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Iterate comment index in the comment loop.
 *
 * @since 2.2.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 */
    public function theComment(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Redirect old slugs to the correct permalink.
 *
 * Attempts to find the current slug from the past slugs.
 *
 * @since 2.1.0
 */
    public function wpOldSlugRedirect(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Set up global post data.
 *
 * @since 1.5.0
 * @since 4.4.0 Added the ability to pass a post ID to `$post`.
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param WP_Post|object|int $post WP_Post instance or Post ID/object.
 * @return bool True when finished.
 */
    public function setupPostdata(int|object $post): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates post data.
 *
 * @since 5.2.0
 *
 * @global WP_Query $wp_query WordPress Query object.
 *
 * @param WP_Post|object|int $post WP_Post instance or Post ID/object.
 * @return array|false Elements of post, or false on failure.
 */
    public function generatePostdata(int|object $post): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a REST API route.
 *
 * Note: Do not use before the {@see 'rest_api_init'} hook.
 *
 * @since 4.4.0
 * @since 5.1.0 Added a `_doing_it_wrong()` notice when not called on or after the `rest_api_init` hook.
 * @since 5.5.0 Added a `_doing_it_wrong()` notice when the required `permission_callback` argument is not set.
 *
 * @param string $routeNamespace The first URL segment after core prefix. Should be unique to your package/plugin.
 * @param string $route           The base URL for route you are adding.
 * @param array $args            Optional. Either an array of options for the endpoint, or an array of arrays for
 *                                multiple methods. Default empty array.
 * @param bool $override        Optional. If the route already exists, should we override it? True overrides,
 *                                false merges (with newer overriding if duplicate keys exist). Default false.
 * @return bool True on success, false on error.
 */
    public function registerRestRoute(string $routeNamespace, string $route, array $args = [], bool $override = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a new field on an existing WordPress object type.
 *
 * @since 4.7.0
 *
 * @global array $wp_rest_additional_fields Holds registered fields, organized
 *                                          by object type.
 *
 * @param string|array $objectType Object(s) the field is being registered to,
 *                                  "post"|"term"|"comment" etc.
 * @param string $attribute   The attribute name.
 * @param array $args {
 *     Optional. An array of arguments used to handle the registered field.
 *
 *     @type callable|null $get_callback    Optional. The callback function used to retrieve the field value. Default is
 *                                          'null', the field will not be returned in the response. The function will
 *                                          be passed the prepared object data.
 *     @type callable|null $update_callback Optional. The callback function used to set and update the field value. Default
 *                                          is 'null', the value cannot be set or updated. The function will be passed
 *                                          the model object, like WP_Post.
 *     @type array|null $schema             Optional. The schema for this field.
 *                                          Default is 'null', no schema entry will be returned.
 * }
 */
    public function registerRestField(string|array $objectType, string $attribute, array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers rewrite rules for the REST API.
 *
 * @since 4.4.0
 *
 * @see rest_api_register_rewrites()
 * @global WP $wp Current WordPress environment instance.
 */
    public function restApiInit(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds REST rewrite rules.
 *
 * @since 4.4.0
 *
 * @see add_rewrite_rule()
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 */
    public function restApiRegisterRewrites(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the default REST API filters.
 *
 * Attached to the {@see 'rest_api_init'} action
 * to make testing and disabling these filters easier.
 *
 * @since 4.4.0
 */
    public function restApiDefaultFilters(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers default REST API routes.
 *
 * @since 4.7.0
 */
    public function createInitialRestRoutes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads the REST API.
 *
 * @since 4.4.0
 *
 * @global WP $wp Current WordPress environment instance.
 */
    public function restApiLoaded(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL prefix for any API resource.
 *
 * @since 4.4.0
 *
 * @return string Prefix.
 */
    public function restGetUrlPrefix(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to a REST endpoint on a site.
 *
 * Note: The returned URL is NOT escaped.
 *
 * @since 4.4.0
 *
 * @todo Check if this is even necessary
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param int|null $blogId Optional. Blog ID. Default of null returns URL for current blog.
 * @param string $path    Optional. REST route. Default '/'.
 * @param string $scheme  Optional. Sanitization scheme. Default 'rest'.
 * @return string Full URL to the endpoint.
 */
    public function getRestUrl(int|null $blogId = null, string $path = '/', string $scheme = 'rest'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the URL to a REST endpoint.
 *
 * Note: The returned URL is NOT escaped.
 *
 * @since 4.4.0
 *
 * @param string $path   Optional. REST route. Default empty.
 * @param string $scheme Optional. Sanitization scheme. Default 'rest'.
 * @return string Full URL to the endpoint.
 */
    public function restUrl(string $path = '', string $scheme = 'rest'): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Do a REST request.
 *
 * Used primarily to route internal requests through WP_REST_Server.
 *
 * @since 4.4.0
 *
 * @param \WP_REST_Request|string $request Request.
 * @return \WP_REST_Response REST response.
 */
    public function restDoRequest(\WP_REST_Request|string $request): \WP_REST_Response
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current REST server instance.
 *
 * Instantiates a new instance if none exists already.
 *
 * @since 4.5.0
 *
 * @global WP_REST_Server $wp_rest_server REST server instance.
 *
 * @return \WP_REST_Server REST server instance.
 */
    public function restGetServer(): \WP_REST_Server
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Ensures request arguments are a request object (for consistency).
 *
 * @since 4.4.0
 * @since 5.3.0 Accept string argument for the request path.
 *
 * @param array|string|\WP_REST_Request $request Request to check.
 * @return \WP_REST_Request REST request instance.
 */
    public function restEnsureRequest(array|string|\WP_REST_Request $request): \WP_REST_Request
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Ensures a REST response is a response object (for consistency).
 *
 * This implements WP_REST_Response, allowing usage of `set_status`/`header`/etc
 * without needing to double-check the object. Will also allow WP_Error to indicate error
 * responses, so users should immediately check for this value.
 *
 * @since 4.4.0
 *
 * @param WP_REST_Response|WP_Error|WP_HTTP_Response|mixed $response Response to check.
 * @return \WP_REST_Response|\WP_Error If response generated an error, WP_Error, if response
 *                                   is already an instance, WP_REST_Response, otherwise
 *                                   returns a new WP_REST_Response instance.
 */
    public function restEnsureResponse(mixed $response): \WP_REST_Response|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles _deprecated_function() errors.
 *
 * @since 4.4.0
 *
 * @param string $functionName The function that was called.
 * @param string $replacement   The function that should have been called.
 * @param string $version       Version.
 */
    public function restHandleDeprecatedFunction(string $functionName, string $replacement, string $version): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles _deprecated_argument() errors.
 *
 * @since 4.4.0
 *
 * @param string $functionName The function that was called.
 * @param string $message       A message regarding the change.
 * @param string $version       Version.
 */
    public function restHandleDeprecatedArgument(string $functionName, string $message, string $version): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles _doing_it_wrong errors.
 *
 * @since 5.5.0
 *
 * @param string $functionName The function that was called.
 * @param string $message       A message explaining what has been done incorrectly.
 * @param string|null $version       The version of WordPress where the message was added.
 */
    public function restHandleDoingItWrong(string $functionName, string $message, string|null $version): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends Cross-Origin Resource Sharing headers with API requests.
 *
 * @since 4.4.0
 *
 * @param mixed $value Response data.
 * @return mixed Response data.
 */
    public function restSendCorsHeaders(mixed $value): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles OPTIONS requests for the server.
 *
 * This is handled outside of the server code, as it doesn't obey normal route
 * mapping.
 *
 * @since 4.4.0
 *
 * @param mixed $response Current response, either response or `null` to indicate pass-through.
 * @param \WP_REST_Server $handler  ResponseHandler instance (usually WP_REST_Server).
 * @param \WP_REST_Request $request  The request that was used to make current response.
 * @return \WP_REST_Response Modified response, either response or `null` to indicate pass-through.
 */
    public function restHandleOptionsRequest(mixed $response, \WP_REST_Server $handler, \WP_REST_Request $request): \WP_REST_Response
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends the "Allow" header to state all methods that can be sent to the current route.
 *
 * @since 4.4.0
 *
 * @param \WP_REST_Response $response Current response being served.
 * @param \WP_REST_Server $server   ResponseHandler instance (usually WP_REST_Server).
 * @param \WP_REST_Request $request  The request that was used to make current response.
 * @return \WP_REST_Response Response to be served, with "Allow" header if route has allowed methods.
 */
    public function restSendAllowHeader(\WP_REST_Response $response, \WP_REST_Server $server, \WP_REST_Request $request): \WP_REST_Response
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the REST API response to include only an allow-listed set of response object fields.
 *
 * @since 4.8.0
 *
 * @param \WP_REST_Response $response Current response being served.
 * @param \WP_REST_Server $server   ResponseHandler instance (usually WP_REST_Server).
 * @param \WP_REST_Request $request  The request that was used to make current response.
 * @return \WP_REST_Response Response to be served, trimmed down to contain a subset of fields.
 */
    public function restFilterResponseFields(\WP_REST_Response $response, \WP_REST_Server $server, \WP_REST_Request $request): \WP_REST_Response
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Given an array of fields to include in a response, some of which may be
 * `nested.fields`, determine whether the provided field should be included
 * in the response body.
 *
 * If a parent field is passed in, the presence of any nested field within
 * that parent will cause the method to return `true`. For example "title"
 * will return true if any of `title`, `title.raw` or `title.rendered` is
 * provided.
 *
 * @since 5.3.0
 *
 * @param string $field  A field to test for inclusion in the response body.
 * @param array $fields An array of string fields supported by the endpoint.
 * @return bool Whether to include the field or not.
 */
    public function restIsFieldIncluded(string $field, array $fields): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds the REST API URL to the WP RSD endpoint.
 *
 * @since 4.4.0
 *
 * @see get_rest_url()
 */
    public function restOutputRsd(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the REST API link tag into page header.
 *
 * @since 4.4.0
 *
 * @see get_rest_url()
 */
    public function restOutputLinkWpHead(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a Link header for the REST API.
 *
 * @since 4.4.0
 */
    public function restOutputLinkHeader(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks for errors when using cookie-based authentication.
 *
 * WordPress' built-in cookie authentication is always active
 * for logged in users. However, the API has to check nonces
 * for each request to ensure users are not vulnerable to CSRF.
 *
 * @since 4.4.0
 *
 * @global mixed          $wp_rest_auth_cookie
 *
 * @param WP_Error|mixed $result Error from another authentication handler,
 *                               null if we should handle it, or another value if not.
 * @return WP_Error|mixed|bool WP_Error if the cookie is invalid, the $result, otherwise true.
 */
    public function restCookieCheckErrors(mixed $result): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Collects cookie authentication status.
 *
 * Collects errors from wp_validate_auth_cookie for use by rest_cookie_check_errors.
 *
 * @since 4.4.0
 *
 * @see current_action()
 * @global mixed $wp_rest_auth_cookie
 */
    public function restCookieCollectStatus(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Collects the status of authenticating with an application password.
 *
 * @since 5.6.0
 * @since 5.7.0 Added the `$app_password` parameter.
 *
 * @global WP_User|WP_Error|null $wp_rest_application_password_status
 * @global string|null $wp_rest_application_password_uuid
 *
 * @param \WP_Error $userOrError The authenticated user or error instance.
 * @param array $appPassword  The Application Password used to authenticate.
 */
    public function restApplicationPasswordCollectStatus(\WP_Error $userOrError, array $appPassword = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the Application Password used for authenticating the request.
 *
 * @since 5.7.0
 *
 * @global string|null $wp_rest_application_password_uuid
 *
 * @return string|null The Application Password UUID, or null if Application Passwords was not used.
 */
    public function restGetAuthenticatedAppPassword(): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks for errors when using application password-based authentication.
 *
 * @since 5.6.0
 *
 * @global WP_User|WP_Error|null $wp_rest_application_password_status
 *
 * @param \WP_Error|null|true $result Error from another authentication handler,
 *                                   null if we should handle it, or another value if not.
 * @return \WP_Error|null|true WP_Error if the application password is invalid, the $result, otherwise true.
 */
    public function restApplicationPasswordCheckErrors(\WP_Error|null|true $result): \WP_Error|null|true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds Application Passwords info to the REST API index.
 *
 * @since 5.6.0
 *
 * @param \WP_REST_Response $response The index response object.
 * @return \WP_REST_Response
 */
    public function restAddApplicationPasswordsToIndex(\WP_REST_Response $response): \WP_REST_Response
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the avatar URLs in various sizes.
 *
 * @since 4.7.0
 *
 * @see get_avatar_url()
 *
 * @param mixed $idOrEmail The avatar to retrieve a URL for. Accepts a user ID, Gravatar MD5 hash,
 *                           user email, WP_User object, WP_Post object, or WP_Comment object.
 * @return (string|false)[] Avatar URLs keyed by size. Each value can be a URL string or boolean false.
 */
    public function restGetAvatarUrls(mixed $idOrEmail): string|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the pixel sizes for avatars.
 *
 * @since 4.7.0
 *
 * @return int[] List of pixel sizes for avatars. Default `[ 24, 48, 96 ]`.
 */
    public function restGetAvatarSizes(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses an RFC3339 time into a Unix timestamp.
 *
 * @since 4.4.0
 *
 * @param string $date      RFC3339 timestamp.
 * @param bool $forceUtc Optional. Whether to force UTC timezone instead of using
 *                          the timestamp's timezone. Default false.
 * @return int|false Unix timestamp on success, false on failure.
 */
    public function restParseDate(string $date, bool $forceUtc = false): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses a 3 or 6 digit hex color (with #).
 *
 * @since 5.4.0
 *
 * @param string $color 3 or 6 digit hex color (with #).
 * @return string|false Color value on success, false on failure.
 */
    public function restParseHexColor(string $color): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses a date into both its local and UTC equivalent, in MySQL datetime format.
 *
 * @since 4.4.0
 *
 * @see rest_parse_date()
 *
 * @param string $date   RFC3339 timestamp.
 * @param bool $isUtc Whether the provided date should be interpreted as UTC. Default false.
 * @return array|null {
 *     Local and UTC datetime strings, in MySQL datetime format (Y-m-d H:i:s),
 *     null on failure.
 *
 *     @type string $0 Local datetime string.
 *     @type string $1 UTC datetime string.
 * }
 */
    public function restGetDateWithGmt(string $date, bool $isUtc = false): array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a contextual HTTP error code for authorization failure.
 *
 * @since 4.7.0
 *
 * @return int 401 if the user is not logged in, 403 if the user is logged in.
 */
    public function restAuthorizationRequiredCode(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validate a request argument based on details registered to the route.
 *
 * @since 4.7.0
 *
 * @param mixed $value
 * @param \WP_REST_Request $request
 * @param string $param
 * @return true|\WP_Error
 */
    public function restValidateRequestArg(mixed $value, \WP_REST_Request $request, string $param): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitize a request argument based on details registered to the route.
 *
 * @since 4.7.0
 *
 * @param mixed $value
 * @param \WP_REST_Request $request
 * @param string $param
 * @return mixed
 */
    public function restSanitizeRequestArg(mixed $value, \WP_REST_Request $request, string $param): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parse a request argument based on details registered to the route.
 *
 * Runs a validation check and sanitizes the value, primarily to be used via
 * the `sanitize_callback` arguments in the endpoint args registration.
 *
 * @since 4.7.0
 *
 * @param mixed $value
 * @param \WP_REST_Request $request
 * @param string $param
 * @return mixed
 */
    public function restParseRequestArg(mixed $value, \WP_REST_Request $request, string $param): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if an IP address is valid.
 *
 * Handles both IPv4 and IPv6 addresses.
 *
 * @since 4.7.0
 *
 * @param string $ip IP address.
 * @return string|false The valid IP address, otherwise false.
 */
    public function restIsIpAddress(string $ip): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Changes a boolean-like value into the proper boolean value.
 *
 * @since 4.7.0
 *
 * @param bool|string|int $value The value being evaluated.
 * @return bool Returns the proper associated boolean value.
 */
    public function restSanitizeBoolean(bool|string|int $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if a given value is boolean-like.
 *
 * @since 4.7.0
 *
 * @param bool|string $maybeBool The value being evaluated.
 * @return bool True if a boolean, otherwise false.
 */
    public function restIsBoolean(bool|string $maybeBool): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if a given value is integer-like.
 *
 * @since 5.5.0
 *
 * @param mixed $maybeInteger The value being evaluated.
 * @return bool True if an integer, otherwise false.
 */
    public function restIsInteger(mixed $maybeInteger): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if a given value is array-like.
 *
 * @since 5.5.0
 *
 * @param mixed $maybeArray The value being evaluated.
 * @return bool
 */
    public function restIsArray(mixed $maybeArray): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts an array-like value to an array.
 *
 * @since 5.5.0
 *
 * @param mixed $maybeArray The value being evaluated.
 * @return array Returns the array extracted from the value.
 */
    public function restSanitizeArray(mixed $maybeArray): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if a given value is object-like.
 *
 * @since 5.5.0
 *
 * @param mixed $maybeObject The value being evaluated.
 * @return bool True if object like, otherwise false.
 */
    public function restIsObject(mixed $maybeObject): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts an object-like value to an array.
 *
 * @since 5.5.0
 *
 * @param mixed $maybeObject The value being evaluated.
 * @return array Returns the object extracted from the value as an associative array.
 */
    public function restSanitizeObject(mixed $maybeObject): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the best type for a value.
 *
 * @since 5.5.0
 *
 * @param mixed $value The value to check.
 * @param string[] $types The list of possible types.
 * @return string The best matching type, an empty string if no types match.
 */
    public function restGetBestTypeForValue(mixed $value, array $types): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles getting the best type for a multi-type schema.
 *
 * This is a wrapper for {@see rest_get_best_type_for_value()} that handles
 * backward compatibility for schemas that use invalid types.
 *
 * @since 5.5.0
 *
 * @param mixed $value The value to check.
 * @param array $args  The schema array to use.
 * @param string $param The parameter name, used in error messages.
 * @return string
 */
    public function restHandleMultiTypeSchema(mixed $value, array $args, string $param = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if an array is made up of unique items.
 *
 * @since 5.5.0
 *
 * @param array $inputArray The array to check.
 * @return bool True if the array contains unique items, false otherwise.
 */
    public function restValidateArrayContainsUniqueItems(array $inputArray): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Stabilizes a value following JSON Schema semantics.
 *
 * For lists, order is preserved. For objects, properties are reordered alphabetically.
 *
 * @since 5.5.0
 *
 * @param mixed $value The value to stabilize. Must already be sanitized. Objects should have been converted to arrays.
 * @return mixed The stabilized value.
 */
    public function restStabilizeValue(mixed $value): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates if the JSON Schema pattern matches a value.
 *
 * @since 5.6.0
 *
 * @param string $pattern The pattern to match against.
 * @param string $value   The value to check.
 * @return bool           True if the pattern matches the given value, false otherwise.
 */
    public function restValidateJsonSchemaPattern(string $pattern, string $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds the schema for a property using the patternProperties keyword.
 *
 * @since 5.6.0
 *
 * @param string $property The property name to check.
 * @param array $args     The schema array to use.
 * @return array|null      The schema of matching pattern property, or null if no patterns match.
 */
    public function restFindMatchingPatternPropertySchema(string $property, array $args): array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Formats a combining operation error into a WP_Error object.
 *
 * @since 5.6.0
 *
 * @param string $param The parameter name.
 * @param array $error  The error details.
 * @return \WP_Error
 */
    public function restFormatCombiningOperationError(string $param, array $error): \WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the error of combining operation.
 *
 * @since 5.6.0
 *
 * @param array $value  The value to validate.
 * @param string $param  The parameter name, used in error messages.
 * @param array $errors The errors array, to search for possible error.
 * @return \WP_Error      The combining operation error.
 */
    public function restGetCombiningOperationError(array $value, string $param, array $errors): \WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds the matching schema among the "anyOf" schemas.
 *
 * @since 5.6.0
 *
 * @param mixed $value   The value to validate.
 * @param array $args    The schema array to use.
 * @param string $param   The parameter name, used in error messages.
 * @return array|\WP_Error The matching schema or WP_Error instance if all schemas do not match.
 */
    public function restFindAnyMatchingSchema(mixed $value, array $args, string $param): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds the matching schema among the "oneOf" schemas.
 *
 * @since 5.6.0
 *
 * @param mixed $value                  The value to validate.
 * @param array $args                   The schema array to use.
 * @param string $param                  The parameter name, used in error messages.
 * @param bool $stopAfterFirstMatch Optional. Whether the process should stop after the first successful match.
 * @return array|\WP_Error                The matching schema or WP_Error instance if the number of matching schemas is not equal to one.
 */
    public function restFindOneMatchingSchema(mixed $value, array $args, string $param, bool $stopAfterFirstMatch = false): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks the equality of two values, following JSON Schema semantics.
 *
 * Property order is ignored for objects.
 *
 * Values must have been previously sanitized/coerced to their native types.
 *
 * @since 5.7.0
 *
 * @param mixed $value1 The first value to check.
 * @param mixed $value2 The second value to check.
 * @return bool True if the values are equal or false otherwise.
 */
    public function restAreValuesEqual(mixed $value1, mixed $value2): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates that the given value is a member of the JSON Schema "enum".
 *
 * @since 5.7.0
 *
 * @param mixed $value  The value to validate.
 * @param array $args   The schema array to use.
 * @param string $param  The parameter name, used in error messages.
 * @return true|\WP_Error True if the "enum" contains the value or a WP_Error instance otherwise.
 */
    public function restValidateEnum(mixed $value, array $args, string $param): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Get all valid JSON schema properties.
 *
 * @since 5.6.0
 *
 * @return string[] All valid JSON schema properties.
 */
    public function restGetAllowedSchemaKeywords(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validate a value based on a schema.
 *
 * @since 4.7.0
 * @since 4.9.0 Support the "object" type.
 * @since 5.2.0 Support validating "additionalProperties" against a schema.
 * @since 5.3.0 Support multiple types.
 * @since 5.4.0 Convert an empty string to an empty object.
 * @since 5.5.0 Add the "uuid" and "hex-color" formats.
 *              Support the "minLength", "maxLength" and "pattern" keywords for strings.
 *              Support the "minItems", "maxItems" and "uniqueItems" keywords for arrays.
 *              Validate required properties.
 * @since 5.6.0 Support the "minProperties" and "maxProperties" keywords for objects.
 *              Support the "multipleOf" keyword for numbers and integers.
 *              Support the "patternProperties" keyword for objects.
 *              Support the "anyOf" and "oneOf" keywords.
 *
 * @param mixed $value The value to validate.
 * @param array $args  Schema array to use for validation.
 * @param string $param The parameter name, used in error messages.
 * @return true|\WP_Error
 */
    public function restValidateValueFromSchema(mixed $value, array $args, string $param = ''): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates a null value based on a schema.
 *
 * @since 5.7.0
 *
 * @param mixed $value The value to validate.
 * @param string $param The parameter name, used in error messages.
 * @return true|\WP_Error
 */
    public function restValidateNullValueFromSchema(mixed $value, string $param): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates a boolean value based on a schema.
 *
 * @since 5.7.0
 *
 * @param mixed $value The value to validate.
 * @param string $param The parameter name, used in error messages.
 * @return true|\WP_Error
 */
    public function restValidateBooleanValueFromSchema(mixed $value, string $param): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates an object value based on a schema.
 *
 * @since 5.7.0
 *
 * @param mixed $value The value to validate.
 * @param array $args  Schema array to use for validation.
 * @param string $param The parameter name, used in error messages.
 * @return true|\WP_Error
 */
    public function restValidateObjectValueFromSchema(mixed $value, array $args, string $param): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates an array value based on a schema.
 *
 * @since 5.7.0
 *
 * @param mixed $value The value to validate.
 * @param array $args  Schema array to use for validation.
 * @param string $param The parameter name, used in error messages.
 * @return true|\WP_Error
 */
    public function restValidateArrayValueFromSchema(mixed $value, array $args, string $param): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates a number value based on a schema.
 *
 * @since 5.7.0
 *
 * @param mixed $value The value to validate.
 * @param array $args  Schema array to use for validation.
 * @param string $param The parameter name, used in error messages.
 * @return true|\WP_Error
 */
    public function restValidateNumberValueFromSchema(mixed $value, array $args, string $param): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates a string value based on a schema.
 *
 * @since 5.7.0
 *
 * @param mixed $value The value to validate.
 * @param array $args  Schema array to use for validation.
 * @param string $param The parameter name, used in error messages.
 * @return true|\WP_Error
 */
    public function restValidateStringValueFromSchema(mixed $value, array $args, string $param): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates an integer value based on a schema.
 *
 * @since 5.7.0
 *
 * @param mixed $value The value to validate.
 * @param array $args  Schema array to use for validation.
 * @param string $param The parameter name, used in error messages.
 * @return true|\WP_Error
 */
    public function restValidateIntegerValueFromSchema(mixed $value, array $args, string $param): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitize a value based on a schema.
 *
 * @since 4.7.0
 * @since 5.5.0 Added the `$param` parameter.
 * @since 5.6.0 Support the "anyOf" and "oneOf" keywords.
 * @since 5.9.0 Added `text-field` and `textarea-field` formats.
 *
 * @param mixed $value The value to sanitize.
 * @param array $args  Schema array to use for sanitization.
 * @param string $param The parameter name, used in error messages.
 * @return mixed|WP_Error The sanitized value or a WP_Error instance if the value cannot be safely sanitized.
 */
    public function restSanitizeValueFromSchema(mixed $value, array $args, string $param = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Append result of internal request to REST API for purpose of preloading data to be attached to a page.
 * Expected to be called in the context of `array_reduce`.
 *
 * @since 5.0.0
 *
 * @param array $memo Reduce accumulator.
 * @param string $path REST API path to preload.
 * @return array Modified reduce accumulator.
 */
    public function restPreloadApiRequest(array $memo, string $path): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Parses the "_embed" parameter into the list of resources to embed.
 *
 * @since 5.4.0
 *
 * @param string|array $embed Raw "_embed" parameter value.
 * @return true|string[] Either true to embed all embeds, or a list of relations to embed.
 */
    public function restParseEmbedParam(string|array $embed): true|array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the response to remove any fields not available in the given context.
 *
 * @since 5.5.0
 * @since 5.6.0 Support the "patternProperties" keyword for objects.
 *              Support the "anyOf" and "oneOf" keywords.
 *
 * @param array|object $responseData The response data to modify.
 * @param array $schema        The schema for the endpoint used to filter the response.
 * @param string $context       The requested context.
 * @return array|object The filtered response data.
 */
    public function restFilterResponseByContext(array|object $responseData, array $schema, string $context): array|object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the "additionalProperties" to false by default for all object definitions in the schema.
 *
 * @since 5.5.0
 * @since 5.6.0 Support the "patternProperties" keyword.
 *
 * @param array $schema The schema to modify.
 * @return array The modified schema.
 */
    public function restDefaultAdditionalPropertiesToFalse(array $schema): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the REST API route for a post.
 *
 * @since 5.5.0
 *
 * @param int|\WP_Post $post Post ID or post object.
 * @return string The route path with a leading slash for the given post,
 *                or an empty string if there is not a route.
 */
    public function restGetRouteForPost(int|\WP_Post $post): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the REST API route for a post type.
 *
 * @since 5.9.0
 *
 * @param string $postType The name of a registered post type.
 * @return string The route path with a leading slash for the given post type,
 *                or an empty string if there is not a route.
 */
    public function restGetRouteForPostTypeItems(string $postType): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the REST API route for a term.
 *
 * @since 5.5.0
 *
 * @param int|\WP_Term $term Term ID or term object.
 * @return string The route path with a leading slash for the given term,
 *                or an empty string if there is not a route.
 */
    public function restGetRouteForTerm(int|\WP_Term $term): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the REST API route for a taxonomy.
 *
 * @since 5.9.0
 *
 * @param string $taxonomy Name of taxonomy.
 * @return string The route path with a leading slash for the given taxonomy.
 */
    public function restGetRouteForTaxonomyItems(string $taxonomy): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the REST route for the currently queried object.
 *
 * @since 5.5.0
 *
 * @return string The REST route of the resource, or an empty string if no resource identified.
 */
    public function restGetQueriedResourceRoute(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an array of endpoint arguments from the item schema and endpoint method.
 *
 * @since 5.6.0
 *
 * @param array $schema The full JSON schema for the endpoint.
 * @param string $method Optional. HTTP method of the endpoint. The arguments for `CREATABLE` endpoints are
 *                       checked for required values and may fall-back to a given default, this is not done
 *                       on `EDITABLE` endpoints. Default WP_REST_Server::CREATABLE.
 * @return array The endpoint arguments.
 */
    public function restGetEndpointArgsForSchema(array $schema, string $method): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts an error to a response object.
 *
 * This iterates over all error codes and messages to change it into a flat
 * array. This enables simpler client behavior, as it is represented as a
 * list in JSON rather than an object/map.
 *
 * @since 5.7.0
 *
 * @param \WP_Error $error WP_Error instance.
 *
 * @return \WP_REST_Response List of associative arrays with code and message keys.
 */
    public function restConvertErrorToResponse(\WP_Error $error): \WP_REST_Response
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a REST API endpoint request is currently being handled.
 *
 * This may be a standalone REST API request, or an internal request dispatched from within a regular page load.
 *
 * @since 6.5.0
 *
 * @global WP_REST_Server $wp_rest_server REST server instance.
 *
 * @return bool True if a REST endpoint request is currently being handled, false otherwise.
 */
    public function wpIsRestEndpoint(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Saves revisions for a post after all changes have been made.
 *
 * @since 6.4.0
 *
 * @param int $postId The post id that was inserted.
 * @param \WP_Post $post    The post object that was inserted.
 * @param bool $update  Whether this insert is updating an existing post.
 */
    public function wpSavePostRevisionOnInsert(int $postId, \WP_Post $post, bool $update): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates a revision for the current version of a post.
 *
 * Typically used immediately after a post update, as every update is a revision,
 * and the most recent revision always matches the current post.
 *
 * @since 2.6.0
 *
 * @param int $postId The ID of the post to save as a revision.
 * @return int|\WP_Error|void Void or 0 if error, new revision ID, if success.
 */
    public function wpSavePostRevision(int $postId): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the autosaved data of the specified post.
 *
 * Returns a post object with the information that was autosaved for the specified post.
 * If the optional $user_id is passed, returns the autosave for that user, otherwise
 * returns the latest autosave.
 *
 * @since 2.6.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $postId The post ID.
 * @param int $userId Optional. The post author ID. Default 0.
 * @return \WP_Post|false The autosaved data or false on failure or when no autosave exists.
 */
    public function wpGetPostAutosave(int $postId, int $userId = 0): \WP_Post|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if the specified post is a revision.
 *
 * @since 2.6.0
 *
 * @param int|\WP_Post $post Post ID or post object.
 * @return int|false ID of revision's parent on success, false if not a revision.
 */
    public function wpIsPostRevision(int|\WP_Post $post): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if the specified post is an autosave.
 *
 * @since 2.6.0
 *
 * @param int|\WP_Post $post Post ID or post object.
 * @return int|false ID of autosave's parent on success, false if not a revision.
 */
    public function wpIsPostAutosave(int|\WP_Post $post): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Save the revisioned meta fields.
 *
 * @since 6.4.0
 *
 * @param int $revisionId The ID of the revision to save the meta to.
 * @param int $postId     The ID of the post the revision is associated with.
 */
    public function wpSaveRevisionedMetaFields(int $revisionId, int $postId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a post revision.
 *
 * @since 2.6.0
 *
 * @param int|\WP_Post $post   Post ID or post object.
 * @param string $output Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                            correspond to a WP_Post object, an associative array, or a numeric array,
 *                            respectively. Default OBJECT.
 * @param string $filter Optional sanitization filter. See sanitize_post(). Default 'raw'.
 * @return \WP_Post|array|null WP_Post (or array) on success, or null on failure.
 */
    public function wpGetPostRevision(int|\WP_Post $post, string $output = OBJECT, string $filter = 'raw'): \WP_Post|array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Restores a post to the specified revision.
 *
 * Can restore a past revision using all fields of the post revision, or only selected fields.
 *
 * @since 2.6.0
 *
 * @param int|\WP_Post $revision Revision ID or revision object.
 * @param array $fields   Optional. What fields to restore from. Defaults to all.
 * @return int|false|null Null if error, false if no fields to restore, (int) post ID if success.
 */
    public function wpRestorePostRevision(int|\WP_Post $revision, array $fields = null): int|false|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Restore the revisioned meta values for a post.
 *
 * @since 6.4.0
 *
 * @param int $postId     The ID of the post to restore the meta to.
 * @param int $revisionId The ID of the revision to restore the meta from.
 */
    public function wpRestorePostRevisionMeta(int $postId, int $revisionId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determine which post meta fields should be revisioned.
 *
 * @since 6.4.0
 *
 * @param string $postType The post type being revisioned.
 * @return array An array of meta keys to be revisioned.
 */
    public function wpPostRevisionMetaKeys(string $postType): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Check whether revisioned post meta fields have changed.
 *
 * @since 6.4.0
 *
 * @param bool $postHasChanged Whether the post has changed.
 * @param \WP_Post $lastRevision    The last revision post object.
 * @param \WP_Post $post             The post object.
 * @return bool Whether the post has changed.
 */
    public function wpCheckRevisionedMetaFieldsHaveChanged(bool $postHasChanged, \WP_Post $lastRevision, \WP_Post $post): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes a revision.
 *
 * Deletes the row from the posts table corresponding to the specified revision.
 *
 * @since 2.6.0
 *
 * @param int|\WP_Post $revision Revision ID or revision object.
 * @return \WP_Post|false|null Null or false if error, deleted post object if success.
 */
    public function wpDeletePostRevision(int|\WP_Post $revision): \WP_Post|false|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns all revisions of specified post.
 *
 * @since 2.6.0
 *
 * @see get_children()
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.
 * @param array|null $args Optional. Arguments for retrieving post revisions. Default null.
 * @return WP_Post[]|int[] Array of revision objects or IDs, or an empty array if none.
 */
    public function wpGetPostRevisions(int|\WP_Post $post = 0, array|null $args = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the latest revision ID and count of revisions for a post.
 *
 * @since 6.1.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return array|\WP_Error {
 *     Returns associative array with latest revision ID and total count,
 *     or a WP_Error if the post does not exist or revisions are not enabled.
 *
 *     @type int $latest_id The latest revision post ID or 0 if no revisions exist.
 *     @type int $count     The total count of revisions for the given post.
 * }
 */
    public function wpGetLatestRevisionIdAndTotalCount(int|\WP_Post $post = 0): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the url for viewing and potentially restoring revisions of a given post.
 *
 * @since 5.9.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global `$post`.
 * @return string|null The URL for editing revisions on the given post, otherwise null.
 */
    public function wpGetPostRevisionsUrl(int|\WP_Post $post = 0): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether revisions are enabled for a given post.
 *
 * @since 3.6.0
 *
 * @param \WP_Post $post The post object.
 * @return bool True if number of revisions to keep isn't zero, false otherwise.
 */
    public function wpRevisionsEnabled(\WP_Post $post): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines how many revisions to retain for a given post.
 *
 * By default, an infinite number of revisions are kept.
 *
 * The constant WP_POST_REVISIONS can be set in wp-config to specify the limit
 * of revisions to keep.
 *
 * @since 3.6.0
 *
 * @param \WP_Post $post The post object.
 * @return int The number of revisions to keep.
 */
    public function wpRevisionsToKeep(\WP_Post $post): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a rewrite rule that transforms a URL structure to a set of query vars.
 *
 * Any value in the $after parameter that isn't 'bottom' will result in the rule
 * being placed at the top of the rewrite rules.
 *
 * @since 2.1.0
 * @since 4.4.0 Array support was added to the `$query` parameter.
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $regex Regular expression to match request against.
 * @param string|array $query The corresponding query vars for this rewrite rule.
 * @param string $after Optional. Priority of the new rule. Accepts 'top'
 *                            or 'bottom'. Default 'bottom'.
 */
    public function addRewriteRule(string $regex, string|array $query, string $after = 'bottom'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new rewrite tag (like %postname%).
 *
 * The `$query` parameter is optional. If it is omitted you must ensure that you call
 * this on, or before, the {@see 'init'} hook. This is because `$query` defaults to
 * `$tag=`, and for this to work a new query var has to be added.
 *
 * @since 2.1.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 * @global WP         $wp         Current WordPress environment instance.
 *
 * @param string $tag   Name of the new rewrite tag.
 * @param string $regex Regular expression to substitute the tag for in rewrite rules.
 * @param string $query Optional. String to append to the rewritten query. Must end in '='. Default empty.
 */
    public function addRewriteTag(string $tag, string $regex, string $query = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes an existing rewrite tag (like %postname%).
 *
 * @since 4.5.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $tag Name of the rewrite tag.
 */
    public function removeRewriteTag(string $tag): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a permalink structure.
 *
 * @since 3.0.0
 *
 * @see WP_Rewrite::add_permastruct()
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $name   Name for permalink structure.
 * @param string $struct Permalink structure.
 * @param array $args   Optional. Arguments for building the rules from the permalink structure,
 *                       see WP_Rewrite::add_permastruct() for full details. Default empty array.
 */
    public function addPermastruct(string $name, string $struct, array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a permalink structure.
 *
 * Can only be used to remove permastructs that were added using add_permastruct().
 * Built-in permastructs cannot be removed.
 *
 * @since 4.5.0
 *
 * @see WP_Rewrite::remove_permastruct()
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $name Name for permalink structure.
 */
    public function removePermastruct(string $name): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new feed type like /atom1/.
 *
 * @since 2.1.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $feedname Feed name.
 * @param callable $callback Callback to run on feed display.
 * @return string Feed action name.
 */
    public function addFeed(string $feedname, callable $callback): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes rewrite rules and then recreate rewrite rules.
 *
 * @since 3.0.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param bool $hard Whether to update .htaccess (hard flush) or just update
 *                   rewrite_rules option (soft flush). Default is true (hard).
 */
    public function flushRewriteRules(bool $hard = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds an endpoint, like /trackback/.
 *
 * Adding an endpoint creates extra rewrite rules for each of the matching
 * places specified by the provided bitmask. For example:
 *
 *     add_rewrite_endpoint( 'json', EP_PERMALINK | EP_PAGES );
 *
 * will add a new rewrite rule ending with "json(/(.*))?/?$" for every permastruct
 * that describes a permalink (post) or page. This is rewritten to "json=$match"
 * where $match is the part of the URL matched by the endpoint regex (e.g. "foo" in
 * "[permalink]/json/foo/").
 *
 * A new query var with the same name as the endpoint will also be created.
 *
 * When specifying $places ensure that you are using the EP_* constants (or a
 * combination of them using the bitwise OR operator) as their values are not
 * guaranteed to remain static (especially `EP_ALL`).
 *
 * Be sure to flush the rewrite rules - see flush_rewrite_rules() - when your plugin gets
 * activated and deactivated.
 *
 * @since 2.1.0
 * @since 4.3.0 Added support for skipping query var registration by passing `false` to `$query_var`.
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param string $name      Name of the endpoint.
 * @param int $places    Endpoint mask describing the places the endpoint should be added.
 *                               Accepts a mask of:
 *                               - `EP_ALL`
 *                               - `EP_NONE`
 *                               - `EP_ALL_ARCHIVES`
 *                               - `EP_ATTACHMENT`
 *                               - `EP_AUTHORS`
 *                               - `EP_CATEGORIES`
 *                               - `EP_COMMENTS`
 *                               - `EP_DATE`
 *                               - `EP_DAY`
 *                               - `EP_MONTH`
 *                               - `EP_PAGES`
 *                               - `EP_PERMALINK`
 *                               - `EP_ROOT`
 *                               - `EP_SEARCH`
 *                               - `EP_TAGS`
 *                               - `EP_YEAR`
 * @param string|bool $queryVar Name of the corresponding query variable. Pass `false` to skip registering a query_var
 *                               for this endpoint. Defaults to the value of `$name`.
 */
    public function addRewriteEndpoint(string $name, int $places, string|bool $queryVar = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Resolves numeric slugs that collide with date permalinks.
 *
 * Permalinks of posts with numeric slugs can sometimes look to WP_Query::parse_query()
 * like a date archive, as when your permalink structure is `/%year%/%postname%/` and
 * a post with post_name '05' has the URL `/2015/05/`.
 *
 * This function detects conflicts of this type and resolves them in favor of the
 * post permalink.
 *
 * Note that, since 4.3.0, wp_unique_post_slug() prevents the creation of post slugs
 * that would result in a date archive conflict. The resolution performed in this
 * function is primarily for legacy content, as well as cases when the admin has changed
 * the site's permalink structure in a way that introduces URL conflicts.
 *
 * @since 4.3.0
 *
 * @param array $queryVars Optional. Query variables for setting up the loop, as determined in
 *                          WP::parse_request(). Default empty array.
 * @return array Returns the original array of query vars, with date/post conflicts resolved.
 */
    public function wpResolveNumericSlugConflicts(array $queryVars = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Examines a URL and try to determine the post ID it represents.
 *
 * Checks are supposedly from the hosted site blog.
 *
 * @since 1.0.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 * @global WP         $wp         Current WordPress environment instance.
 *
 * @param string $url Permalink to check.
 * @return int Post ID, or 0 on failure.
 */
    public function urlToPostid(string $url): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the robots meta tag as necessary.
 *
 * Gathers robots directives to include for the current context, using the
 * {@see 'wp_robots'} filter. The directives are then sanitized, and the
 * robots meta tag is output if there is at least one relevant directive.
 *
 * @since 5.7.0
 * @since 5.7.1 No longer prevents specific directives to occur together.
 */
    public function wpRobots(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `noindex` to the robots meta tag if required by the site configuration.
 *
 * If a blog is marked as not being public then noindex will be output to
 * tell web robots not to index the page content. Add this to the
 * {@see 'wp_robots'} filter.
 *
 * Typical usage is as a {@see 'wp_robots'} callback:
 *
 *     add_filter( 'wp_robots', 'wp_robots_noindex' );
 *
 * @since 5.7.0
 *
 * @see wp_robots_no_robots()
 *
 * @param array $robots Associative array of robots directives.
 * @return array Filtered robots directives.
 */
    public function wpRobotsNoindex(array $robots): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `noindex` to the robots meta tag for embeds.
 *
 * Typical usage is as a {@see 'wp_robots'} callback:
 *
 *     add_filter( 'wp_robots', 'wp_robots_noindex_embeds' );
 *
 * @since 5.7.0
 *
 * @see wp_robots_no_robots()
 *
 * @param array $robots Associative array of robots directives.
 * @return array Filtered robots directives.
 */
    public function wpRobotsNoindexEmbeds(array $robots): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `noindex` to the robots meta tag if a search is being performed.
 *
 * If a search is being performed then noindex will be output to
 * tell web robots not to index the page content. Add this to the
 * {@see 'wp_robots'} filter.
 *
 * Typical usage is as a {@see 'wp_robots'} callback:
 *
 *     add_filter( 'wp_robots', 'wp_robots_noindex_search' );
 *
 * @since 5.7.0
 *
 * @see wp_robots_no_robots()
 *
 * @param array $robots Associative array of robots directives.
 * @return array Filtered robots directives.
 */
    public function wpRobotsNoindexSearch(array $robots): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `noindex` to the robots meta tag.
 *
 * This directive tells web robots not to index the page content.
 *
 * Typical usage is as a {@see 'wp_robots'} callback:
 *
 *     add_filter( 'wp_robots', 'wp_robots_no_robots' );
 *
 * @since 5.7.0
 *
 * @param array $robots Associative array of robots directives.
 * @return array Filtered robots directives.
 */
    public function wpRobotsNoRobots(array $robots): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `noindex` and `noarchive` to the robots meta tag.
 *
 * This directive tells web robots not to index or archive the page content and
 * is recommended to be used for sensitive pages.
 *
 * Typical usage is as a {@see 'wp_robots'} callback:
 *
 *     add_filter( 'wp_robots', 'wp_robots_sensitive_page' );
 *
 * @since 5.7.0
 *
 * @param array $robots Associative array of robots directives.
 * @return array Filtered robots directives.
 */
    public function wpRobotsSensitivePage(array $robots): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds `max-image-preview:large` to the robots meta tag.
 *
 * This directive tells web robots that large image previews are allowed to be
 * displayed, e.g. in search engines, unless the blog is marked as not being public.
 *
 * Typical usage is as a {@see 'wp_robots'} callback:
 *
 *     add_filter( 'wp_robots', 'wp_robots_max_image_preview_large' );
 *
 * @since 5.7.0
 *
 * @param array $robots Associative array of robots directives.
 * @return array Filtered robots directives.
 */
    public function wpRobotsMaxImagePreviewLarge(array $robots): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers TinyMCE scripts.
 *
 * @since 5.0.0
 *
 * @global string $tinymce_version
 * @global bool   $concatenate_scripts
 * @global bool   $compress_scripts
 *
 * @param \WP_Scripts $scripts            WP_Scripts object.
 * @param bool $forceUncompressed Whether to forcibly prevent gzip compression. Default false.
 */
    public function wpRegisterTinymceScripts(\WP_Scripts $scripts, bool $forceUncompressed = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers all the WordPress vendor scripts that are in the standardized
 * `js/dist/vendor/` location.
 *
 * For the order of `$scripts->add` see `wp_default_scripts`.
 *
 * @since 5.0.0
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @param \WP_Scripts $scripts WP_Scripts object.
 */
    public function wpDefaultPackagesVendor(\WP_Scripts $scripts): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns contents of an inline script used in appending polyfill scripts for
 * browsers which fail the provided tests. The provided array is a mapping from
 * a condition to verify feature support to its polyfill script handle.
 *
 * @since 5.0.0
 *
 * @param \WP_Scripts $scripts WP_Scripts object.
 * @param string[] $tests   Features to detect.
 * @return string Conditional polyfill inline script.
 */
    public function wpGetScriptPolyfill(\WP_Scripts $scripts, array $tests): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers development scripts that integrate with `@wordpress/scripts`.
 *
 * @see https://github.com/WordPress/gutenberg/tree/trunk/packages/scripts#start
 *
 * @since 6.0.0
 *
 * @param \WP_Scripts $scripts WP_Scripts object.
 */
    public function wpRegisterDevelopmentScripts(\WP_Scripts $scripts): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers all the WordPress packages scripts that are in the standardized
 * `js/dist/` location.
 *
 * For the order of `$scripts->add` see `wp_default_scripts`.
 *
 * @since 5.0.0
 *
 * @param \WP_Scripts $scripts WP_Scripts object.
 */
    public function wpDefaultPackagesScripts(\WP_Scripts $scripts): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds inline scripts required for the WordPress JavaScript packages.
 *
 * @since 5.0.0
 * @since 6.4.0 Added relative time strings for the `wp-date` inline script output.
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 * @global wpdb      $wpdb      WordPress database abstraction object.
 *
 * @param \WP_Scripts $scripts WP_Scripts object.
 */
    public function wpDefaultPackagesInlineScripts(\WP_Scripts $scripts): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds inline scripts required for the TinyMCE in the block editor.
 *
 * These TinyMCE init settings are used to extend and override the default settings
 * from `_WP_Editors::default_settings()` for the Classic block.
 *
 * @since 5.0.0
 *
 * @global WP_Scripts $wp_scripts
 */
    public function wpTinymceInlineScripts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers all the WordPress packages scripts.
 *
 * @since 5.0.0
 *
 * @param \WP_Scripts $scripts WP_Scripts object.
 */
    public function wpDefaultPackages(\WP_Scripts $scripts): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the suffix that can be used for the scripts.
 *
 * There are two suffix types, the normal one and the dev suffix.
 *
 * @since 5.0.0
 *
 * @param string $type The type of suffix to retrieve.
 * @return string The script suffix.
 */
    public function wpScriptsGetSuffix(string $type = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers all WordPress scripts.
 *
 * Localizes some of them.
 * args order: `$scripts->add( 'handle', 'url', 'dependencies', 'query-string', 1 );`
 * when last arg === 1 queues the script for the footer
 *
 * @since 2.6.0
 *
 * @param \WP_Scripts $scripts WP_Scripts object.
 */
    public function wpDefaultScripts(\WP_Scripts $scripts): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Assigns default styles to $styles object.
 *
 * Nothing is returned, because the $styles parameter is passed by reference.
 * Meaning that whatever object is passed will be updated without having to
 * reassign the variable that was passed back to the same value. This saves
 * memory.
 *
 * Adding default styles is not the only task, it also assigns the base_url
 * property, the default version, and text direction for the object.
 *
 * @since 2.6.0
 *
 * @global array $editor_styles
 *
 * @param \WP_Styles $styles
 */
    public function wpDefaultStyles(\WP_Styles $styles): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Reorders JavaScript scripts array to place prototype before jQuery.
 *
 * @since 2.3.1
 *
 * @param string[] $jsArray JavaScript scripts array
 * @return string[] Reordered array, if needed.
 */
    public function wpPrototypeBeforeJquery(array $jsArray): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads localized data on print rather than initialization.
 *
 * These localizations require information that may not be loaded even by init.
 *
 * @since 2.5.0
 *
 * @global array $shortcode_tags
 */
    public function wpJustInTimeScriptLocalization(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Localizes the jQuery UI datepicker.
 *
 * @since 4.6.0
 *
 * @link https://api.jqueryui.com/datepicker/#options
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 */
    public function wpLocalizeJqueryUiDatepicker(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Localizes community events data that needs to be passed to dashboard.js.
 *
 * @since 4.8.0
 */
    public function wpLocalizeCommunityEvents(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Administration Screen CSS for changing the styles.
 *
 * If installing the 'wp-admin/' directory will be replaced with './'.
 *
 * The $_wp_admin_css_colors global manages the Administration Screens CSS
 * stylesheet that is loaded. The option that is set is 'admin_color' and is the
 * color and key for the array. The value for the color key is an object with
 * a 'url' parameter that has the URL path to the CSS file.
 *
 * The query from $src parameter will be appended to the URL that is given from
 * the $_wp_admin_css_colors array value URL.
 *
 * @since 2.6.0
 *
 * @global array $_wp_admin_css_colors
 *
 * @param string $src    Source URL.
 * @param string $handle Either 'colors' or 'colors-rtl'.
 * @return string|false URL path to CSS stylesheet for Administration Screens.
 */
    public function wpStyleLoaderSrc(string $src, string $handle): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the script queue in the HTML head on admin pages.
 *
 * Postpones the scripts that were queued for the footer.
 * print_footer_scripts() is called in the footer to print these scripts.
 *
 * @since 2.8.0
 *
 * @see wp_print_scripts()
 *
 * @global bool $concatenate_scripts
 *
 * @return array
 */
    public function printHeadScripts(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the scripts that were queued for the footer or too late for the HTML head.
 *
 * @since 2.8.0
 *
 * @global WP_Scripts $wp_scripts
 * @global bool       $concatenate_scripts
 *
 * @return array
 */
    public function printFooterScripts(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the script queue in the HTML head on the front end.
 *
 * Postpones the scripts that were queued for the footer.
 * wp_print_footer_scripts() is called in the footer to print these scripts.
 *
 * @since 2.8.0
 *
 * @global WP_Scripts $wp_scripts
 *
 * @return array
 */
    public function wpPrintHeadScripts(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Hooks to print the scripts and styles in the footer.
 *
 * @since 2.8.0
 */
    public function wpPrintFooterScripts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Wrapper for do_action( 'wp_enqueue_scripts' ).
 *
 * Allows plugins to queue scripts for the front end using wp_enqueue_script().
 * Runs first in wp_head() where all is_home(), is_page(), etc. functions are available.
 *
 * @since 2.8.0
 */
    public function wpEnqueueScripts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the styles queue in the HTML head on admin pages.
 *
 * @since 2.8.0
 *
 * @global bool $concatenate_scripts
 *
 * @return array
 */
    public function printAdminStyles(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the styles that were queued too late for the HTML head.
 *
 * @since 3.3.0
 *
 * @global WP_Styles $wp_styles
 * @global bool      $concatenate_scripts
 *
 * @return array|void
 */
    public function printLateStyles(): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines the concatenation and compression settings for scripts and styles.
 *
 * @since 2.8.0
 *
 * @global bool $concatenate_scripts
 * @global bool $compress_scripts
 * @global bool $compress_css
 */
    public function scriptConcatSettings(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles the enqueueing of block scripts and styles that are common to both
 * the editor and the front-end.
 *
 * @since 5.0.0
 */
    public function wpCommonBlockScriptsAndStyles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Applies a filter to the list of style nodes that comes from WP_Theme_JSON::get_style_nodes().
 *
 * This particular filter removes all of the blocks from the array.
 *
 * We want WP_Theme_JSON to be ignorant of the implementation details of how the CSS is being used.
 * This filter allows us to modify the output of WP_Theme_JSON depending on whether or not we are
 * loading separate assets, without making the class aware of that detail.
 *
 * @since 6.1.0
 *
 * @param array $nodes The nodes to filter.
 * @return array A filtered array of style nodes.
 */
    public function wpFilterOutBlockNodes(array $nodes): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues the global styles defined via theme.json.
 *
 * @since 5.8.0
 */
    public function wpEnqueueGlobalStyles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues the global styles custom css defined via theme.json.
 *
 * @since 6.2.0
 */
    public function wpEnqueueGlobalStylesCustomCss(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if the editor scripts and styles for all registered block types
 * should be enqueued on the current screen.
 *
 * @since 5.6.0
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 *
 * @return bool Whether scripts and styles should be enqueued.
 */
    public function wpShouldLoadBlockEditorScriptsAndStyles(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether separate styles should be loaded for core blocks on-render.
 *
 * When this function returns true, other functions ensure that core blocks
 * only load their assets on-render, and each block loads its own, individual
 * assets. Third-party blocks only load their assets when rendered.
 *
 * When this function returns false, all core block assets are loaded regardless
 * of whether they are rendered in a page or not, because they are all part of
 * the `block-library/style.css` file. Assets for third-party blocks are always
 * enqueued regardless of whether they are rendered or not.
 *
 * This only affects front end and not the block editor screens.
 *
 * @see wp_enqueue_registered_block_scripts_and_styles()
 * @see register_block_style_handle()
 *
 * @since 5.8.0
 *
 * @return bool Whether separate assets will be loaded.
 */
    public function wpShouldLoadSeparateCoreBlockAssets(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues registered block scripts and styles, depending on current rendered
 * context (only enqueuing editor scripts while in context of the editor).
 *
 * @since 5.0.0
 *
 * @global WP_Screen $current_screen WordPress current screen object.
 */
    public function wpEnqueueRegisteredBlockScriptsAndStyles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Function responsible for enqueuing the styles required for block styles functionality on the editor and on the frontend.
 *
 * @since 5.3.0
 *
 * @global WP_Styles $wp_styles
 */
    public function enqueueBlockStylesAssets(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Function responsible for enqueuing the assets required for block styles functionality on the editor.
 *
 * @since 5.3.0
 */
    public function enqueueEditorBlockStylesAssets(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues the assets required for the block directory within the block editor.
 *
 * @since 5.5.0
 */
    public function wpEnqueueEditorBlockDirectoryAssets(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues the assets required for the format library within the block editor.
 *
 * @since 5.8.0
 */
    public function wpEnqueueEditorFormatLibraryAssets(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes an attributes array into an attributes string to be placed inside a `<script>` tag.
 *
 * Automatically injects type attribute if needed.
 * Used by {@see wp_get_script_tag()} and {@see wp_get_inline_script_tag()}.
 *
 * @since 5.7.0
 *
 * @param array $attributes Key-value pairs representing `<script>` tag attributes.
 * @return string String made of sanitized `<script>` tag attributes.
 */
    public function wpSanitizeScriptAttributes(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Formats `<script>` loader tags.
 *
 * It is possible to inject attributes in the `<script>` tag via the {@see 'wp_script_attributes'} filter.
 * Automatically injects type attribute if needed.
 *
 * @since 5.7.0
 *
 * @param array $attributes Key-value pairs representing `<script>` tag attributes.
 * @return string String containing `<script>` opening and closing tags.
 */
    public function wpGetScriptTag(array $attributes): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints formatted `<script>` loader tag.
 *
 * It is possible to inject attributes in the `<script>` tag via the  {@see 'wp_script_attributes'}  filter.
 * Automatically injects type attribute if needed.
 *
 * @since 5.7.0
 *
 * @param array $attributes Key-value pairs representing `<script>` tag attributes.
 */
    public function wpPrintScriptTag(array $attributes): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Constructs an inline script tag.
 *
 * It is possible to inject attributes in the `<script>` tag via the  {@see 'wp_script_attributes'}  filter.
 * Automatically injects type attribute if needed.
 *
 * @since 5.7.0
 *
 * @param string $data       Data for script tag: JavaScript, importmap, speculationrules, etc.
 * @param array $attributes Optional. Key-value pairs representing `<script>` tag attributes.
 * @return string String containing inline JavaScript code wrapped around `<script>` tag.
 */
    public function wpGetInlineScriptTag(string $data, array $attributes = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints an inline script tag.
 *
 * It is possible to inject attributes in the `<script>` tag via the  {@see 'wp_script_attributes'}  filter.
 * Automatically injects type attribute if needed.
 *
 * @since 5.7.0
 *
 * @param string $data       Data for script tag: JavaScript, importmap, speculationrules, etc.
 * @param array $attributes Optional. Key-value pairs representing `<script>` tag attributes.
 */
    public function wpPrintInlineScriptTag(string $data, array $attributes = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Allows small styles to be inlined.
 *
 * This improves performance and sustainability, and is opt-in. Stylesheets can opt in
 * by adding `path` data using `wp_style_add_data`, and defining the file's absolute path:
 *
 *     wp_style_add_data( $style_handle, 'path', $file_path );
 *
 * @since 5.8.0
 *
 * @global WP_Styles $wp_styles
 */
    public function wpMaybeInlineStyles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Function that enqueues the CSS Custom Properties coming from theme.json.
 *
 * @since 5.9.0
 */
    public function wpEnqueueGlobalStylesCssCustomProperties(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Hooks inline styles in the proper place, depending on the active theme.
 *
 * @since 5.9.1
 * @since 6.1.0 Added the `$priority` parameter.
 *
 * For block themes, styles are loaded in the head.
 * For classic ones, styles are loaded in the body because the wp_head action happens before render_block.
 *
 * @link https://core.trac.wordpress.org/ticket/53494.
 *
 * @param string $style    String containing the CSS styles to be added.
 * @param int $priority To set the priority for the add_action.
 */
    public function wpEnqueueBlockSupportStyles(string $style, int $priority = 10): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fetches, processes and compiles stored core styles, then combines and renders them to the page.
 * Styles are stored via the style engine API.
 *
 * @link https://developer.wordpress.org/block-editor/reference-guides/packages/packages-style-engine/
 *
 * @since 6.1.0
 *
 * @param array $options {
 *     Optional. An array of options to pass to wp_style_engine_get_stylesheet_from_context().
 *     Default empty array.
 *
 *     @type bool $optimize Whether to optimize the CSS output, e.g., combine rules.
 *                          Default false.
 *     @type bool $prettify Whether to add new lines and indents to output.
 *                          Default to whether the `SCRIPT_DEBUG` constant is defined.
 * }
 */
    public function wpEnqueueStoredStyles(array $options = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enqueues a stylesheet for a specific block.
 *
 * If the theme has opted-in to separate-styles loading,
 * then the stylesheet will be enqueued on-render,
 * otherwise when the block inits.
 *
 * @since 5.9.0
 *
 * @param string $blockName The block-name, including namespace.
 * @param array $args       {
 *     An array of arguments. See wp_register_style() for full information about each argument.
 *
 *     @type string           $handle The handle for the stylesheet.
 *     @type string|false     $src    The source URL of the stylesheet.
 *     @type string[]         $deps   Array of registered stylesheet handles this stylesheet depends on.
 *     @type string|bool|null $ver    Stylesheet version number.
 *     @type string           $media  The media for which this stylesheet has been defined.
 *     @type string|null      $path   Absolute path to the stylesheet, so that it can potentially be inlined.
 * }
 */
    public function wpEnqueueBlockStyle(string $blockName, array $args): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads classic theme styles on classic themes in the frontend.
 *
 * This is needed for backwards compatibility for button blocks specifically.
 *
 * @since 6.1.0
 */
    public function wpEnqueueClassicThemeStyles(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Loads classic theme styles on classic themes in the editor.
 *
 * This is needed for backwards compatibility for button blocks specifically.
 *
 * @since 6.1.0
 *
 * @param array $editorSettings The array of editor settings.
 * @return array A filtered array of editor settings.
 */
    public function wpAddEditorClassicThemeStyles(array $editorSettings): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the main WP_Script_Modules instance.
 *
 * This function provides access to the WP_Script_Modules instance, creating one
 * if it doesn't exist yet.
 *
 * @since 6.5.0
 *
 * @global WP_Script_Modules $wp_script_modules
 *
 * @return \WP_Script_Modules The main WP_Script_Modules instance.
 */
    public function wpScriptModules(): \WP_Script_Modules
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the script module if no script module with that script module
 * identifier has already been registered.
 *
 * @since 6.5.0
 *
 * @param string $id      The identifier of the script module. Should be unique. It will be used in the
 *                                   final import map.
 * @param string $src     Optional. Full URL of the script module, or path of the script module relative
 *                                   to the WordPress root directory. If it is provided and the script module has
 *                                   not been registered yet, it will be registered.
 * @param array $deps    {
 *                                       Optional. List of dependencies.
 *
 *                                       @type string|array ...$0 {
 *                                           An array of script module identifiers of the dependencies of this script
 *                                           module. The dependencies can be strings or arrays. If they are arrays,
 *                                           they need an `id` key with the script module identifier, and can contain
 *                                           an `import` key with either `static` or `dynamic`. By default,
 *                                           dependencies that don't contain an `import` key are considered static.
 *
 *                                           @type string $id     The script module identifier.
 *                                           @type string $import Optional. Import type. May be either `static` or
 *                                                                `dynamic`. Defaults to `static`.
 *                                       }
 *                                   }
 * @param string|false|null $version Optional. String specifying the script module version number. Defaults to false.
 *                                   It is added to the URL as a query string for cache busting purposes. If $version
 *                                   is set to false, the version number is the currently installed WordPress version.
 *                                   If $version is set to null, no version is added.
 */
    public function wpRegisterScriptModule(string $id, string $src, array $deps = [], string|false|null $version = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Marks the script module to be enqueued in the page.
 *
 * If a src is provided and the script module has not been registered yet, it
 * will be registered.
 *
 * @since 6.5.0
 *
 * @param string $id      The identifier of the script module. Should be unique. It will be used in the
 *                                   final import map.
 * @param string $src     Optional. Full URL of the script module, or path of the script module relative
 *                                   to the WordPress root directory. If it is provided and the script module has
 *                                   not been registered yet, it will be registered.
 * @param array $deps    {
 *                                       Optional. List of dependencies.
 *
 *                                       @type string|array ...$0 {
 *                                           An array of script module identifiers of the dependencies of this script
 *                                           module. The dependencies can be strings or arrays. If they are arrays,
 *                                           they need an `id` key with the script module identifier, and can contain
 *                                           an `import` key with either `static` or `dynamic`. By default,
 *                                           dependencies that don't contain an `import` key are considered static.
 *
 *                                           @type string $id     The script module identifier.
 *                                           @type string $import Optional. Import type. May be either `static` or
 *                                                                `dynamic`. Defaults to `static`.
 *                                       }
 *                                   }
 * @param string|false|null $version Optional. String specifying the script module version number. Defaults to false.
 *                                   It is added to the URL as a query string for cache busting purposes. If $version
 *                                   is set to false, the version number is the currently installed WordPress version.
 *                                   If $version is set to null, no version is added.
 */
    public function wpEnqueueScriptModule(string $id, string $src = '', array $deps = [], string|false|null $version = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unmarks the script module so it is no longer enqueued in the page.
 *
 * @since 6.5.0
 *
 * @param string $id The identifier of the script module.
 */
    public function wpDequeueScriptModule(string $id): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deregisters the script module.
 *
 * @since 6.5.0
 *
 * @param string $id The identifier of the script module.
 */
    public function wpDeregisterScriptModule(string $id): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new shortcode.
 *
 * Care should be taken through prefixing or other means to ensure that the
 * shortcode tag being added is unique and will not conflict with other,
 * already-added shortcode tags. In the event of a duplicated tag, the tag
 * loaded last will take precedence.
 *
 * @since 2.5.0
 *
 * @global array $shortcode_tags
 *
 * @param string $tag      Shortcode tag to be searched in post content.
 * @param callable $callback The callback function to run when the shortcode is found.
 *                           Every shortcode callback is passed three parameters by default,
 *                           including an array of attributes (`$atts`), the shortcode content
 *                           or null if not set (`$content`), and finally the shortcode tag
 *                           itself (`$shortcode_tag`), in that order.
 */
    public function addShortcode(string $tag, callable $callback): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes hook for shortcode.
 *
 * @since 2.5.0
 *
 * @global array $shortcode_tags
 *
 * @param string $tag Shortcode tag to remove hook for.
 */
    public function removeShortcode(string $tag): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Clears all shortcodes.
 *
 * This function clears all of the shortcode tags by replacing the shortcodes global with
 * an empty array. This is actually an efficient method for removing all shortcodes.
 *
 * @since 2.5.0
 *
 * @global array $shortcode_tags
 */
    public function removeAllShortcodes(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a registered shortcode exists named $tag.
 *
 * @since 3.6.0
 *
 * @global array $shortcode_tags List of shortcode tags and their callback hooks.
 *
 * @param string $tag Shortcode tag to check.
 * @return bool Whether the given shortcode exists.
 */
    public function shortcodeExists(string $tag): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the passed content contains the specified shortcode.
 *
 * @since 3.6.0
 *
 * @global array $shortcode_tags
 *
 * @param string $content Content to search for shortcodes.
 * @param string $tag     Shortcode tag to check.
 * @return bool Whether the passed content contains the given shortcode.
 */
    public function hasShortcode(string $content, string $tag): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a list of registered shortcode names found in the given content.
 *
 * Example usage:
 *
 *     get_shortcode_tags_in_content( '[audio src="file.mp3"][/audio] [foo] [gallery ids="1,2,3"]' );
 *     // array( 'audio', 'gallery' )
 *
 * @since 6.3.2
 *
 * @param string $content The content to check.
 * @return string[] An array of registered shortcode names found in the content.
 */
    public function getShortcodeTagsInContent(string $content): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Searches content for shortcodes and filter shortcodes through their hooks.
 *
 * This function is an alias for do_shortcode().
 *
 * @since 5.4.0
 *
 * @see do_shortcode()
 *
 * @param string $content     Content to search for shortcodes.
 * @param bool $ignoreHtml When true, shortcodes inside HTML elements will be skipped.
 *                            Default false.
 * @return string Content with shortcodes filtered out.
 */
    public function applyShortcodes(string $content, bool $ignoreHtml = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Searches content for shortcodes and filter shortcodes through their hooks.
 *
 * If there are no shortcode tags defined, then the content will be returned
 * without any filtering. This might cause issues when plugins are disabled but
 * the shortcode will still show up in the post or content.
 *
 * @since 2.5.0
 *
 * @global array $shortcode_tags List of shortcode tags and their callback hooks.
 *
 * @param string $content     Content to search for shortcodes.
 * @param bool $ignoreHtml When true, shortcodes inside HTML elements will be skipped.
 *                            Default false.
 * @return string Content with shortcodes filtered out.
 */
    public function doShortcode(string $content, bool $ignoreHtml = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the shortcode regular expression for searching.
 *
 * The regular expression combines the shortcode tags in the regular expression
 * in a regex class.
 *
 * The regular expression contains 6 different sub matches to help with parsing.
 *
 * 1 - An extra [ to allow for escaping shortcodes with double [[]]
 * 2 - The shortcode name
 * 3 - The shortcode argument list
 * 4 - The self closing /
 * 5 - The content of a shortcode when it wraps some content.
 * 6 - An extra ] to allow for escaping shortcodes with double [[]]
 *
 * @since 2.5.0
 * @since 4.4.0 Added the `$tagnames` parameter.
 *
 * @global array $shortcode_tags
 *
 * @param array $tagnames Optional. List of shortcodes to find. Defaults to all registered shortcodes.
 * @return string The shortcode search regular expression
 */
    public function getShortcodeRegex(array $tagnames = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Searches only inside HTML elements for shortcodes and process them.
 *
 * Any [ or ] characters remaining inside elements will be HTML encoded
 * to prevent interference with shortcodes that are outside the elements.
 * Assumes $content processed by KSES already.  Users with unfiltered_html
 * capability may get unexpected output if angle braces are nested in tags.
 *
 * @since 4.2.3
 *
 * @param string $content     Content to search for shortcodes.
 * @param bool $ignoreHtml When true, all square braces inside elements will be encoded.
 * @param array $tagnames    List of shortcodes to find.
 * @return string Content with shortcodes filtered out.
 */
    public function doShortcodesInHtmlTags(string $content, bool $ignoreHtml, array $tagnames): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes placeholders added by do_shortcodes_in_html_tags().
 *
 * @since 4.2.3
 *
 * @param string $content Content to search for placeholders.
 * @return string Content with placeholders removed.
 */
    public function unescapeInvalidShortcodes(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the shortcode attributes regex.
 *
 * @since 4.4.0
 *
 * @return string The shortcode attribute regular expression.
 */
    public function getShortcodeAttsRegex(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all attributes from the shortcodes tag.
 *
 * The attributes list has the attribute name as the key and the value of the
 * attribute as the value in the key/value pair. This allows for easier
 * retrieval of the attributes, since all attributes have to be known.
 *
 * @since 2.5.0
 * @since 6.5.0 The function now always returns an array,
 *              even if the original arguments string cannot be parsed or is empty.
 *
 * @param string $text Shortcode arguments list.
 * @return array Array of attribute values keyed by attribute name.
 *               Returns empty array if there are no attributes
 *               or if the original arguments string cannot be parsed.
 */
    public function shortcodeParseAtts(string $text): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Combines user attributes with known attributes and fill in defaults when needed.
 *
 * The pairs should be considered to be all of the attributes which are
 * supported by the caller and given as a list. The returned attributes will
 * only contain the attributes in the $pairs list.
 *
 * If the $atts list has unsupported attributes, then they will be ignored and
 * removed from the final returned list.
 *
 * @since 2.5.0
 *
 * @param array $pairs     Entire list of supported attributes and their defaults.
 * @param array $atts      User defined attributes in shortcode tag.
 * @param string $shortcode Optional. The name of the shortcode, provided for context to enable filtering
 * @return array Combined and filtered attribute list.
 */
    public function shortcodeAtts(array $pairs, array $atts, string $shortcode = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all shortcode tags from the given content.
 *
 * @since 2.5.0
 *
 * @global array $shortcode_tags
 *
 * @param string $content Content to remove shortcode tags.
 * @return string Content without shortcode tags.
 */
    public function stripShortcodes(string $content): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Strips a shortcode tag based on RegEx matches against post content.
 *
 * @since 3.3.0
 *
 * @param array $m RegEx matches against post content.
 * @return string|false The content stripped of the tag, otherwise false.
 */
    public function stripShortcodeTag(array $m): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current Sitemaps server instance.
 *
 * @since 5.5.0
 *
 * @global WP_Sitemaps $wp_sitemaps Global Core Sitemaps instance.
 *
 * @return \WP_Sitemaps Sitemaps instance.
 */
    public function wpSitemapsGetServer(): \WP_Sitemaps
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets an array of sitemap providers.
 *
 * @since 5.5.0
 *
 * @return WP_Sitemaps_Provider[] Array of sitemap providers.
 */
    public function wpGetSitemapProviders(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a new sitemap provider.
 *
 * @since 5.5.0
 *
 * @param string $name     Unique name for the sitemap provider.
 * @param \WP_Sitemaps_Provider $provider The `Sitemaps_Provider` instance implementing the sitemap.
 * @return bool Whether the sitemap was added.
 */
    public function wpRegisterSitemapProvider(string $name, \WP_Sitemaps_Provider $provider): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the maximum number of URLs for a sitemap.
 *
 * @since 5.5.0
 *
 * @param string $objectType Object type for sitemap to be filtered (e.g. 'post', 'term', 'user').
 * @return int The maximum number of URLs.
 */
    public function wpSitemapsGetMaxUrls(string $objectType): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the full URL for a sitemap.
 *
 * @since 5.5.1
 *
 * @param string $name         The sitemap name.
 * @param string $subtypeName The sitemap subtype name. Default empty string.
 * @param int $page         The page of the sitemap. Default 1.
 * @return string|false The sitemap URL or false if the sitemap doesn't exist.
 */
    public function getSitemapUrl(string $name, string $subtypeName = '', int $page = 1): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Global public interface method to generate styles from a single style object,
 * e.g. the value of a block's attributes.style object or the top level styles in theme.json.
 *
 * Example usage:
 *
 *     $styles = wp_style_engine_get_styles(
 *         array(
 *             'color' => array( 'text' => '#cccccc' ),
 *         )
 *     );
 *
 * Returns:
 *
 *     array(
 *         'css'          => 'color: #cccccc',
 *         'declarations' => array( 'color' => '#cccccc' ),
 *         'classnames'   => 'has-color',
 *     )
 *
 * @since 6.1.0
 *
 * @see https://developer.wordpress.org/block-editor/reference-guides/theme-json-reference/theme-json-living/#styles
 * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-supports/
 *
 * @param array $blockStyles The style object.
 * @param array $options {
 *     Optional. An array of options. Default empty array.
 *
 *     @type string|null $context                    An identifier describing the origin of the style object,
 *                                                   e.g. 'block-supports' or 'global-styles'. Default null.
 *                                                   When set, the style engine will attempt to store the CSS rules,
 *                                                   where a selector is also passed.
 *     @type bool        $convert_vars_to_classnames Whether to skip converting incoming CSS var patterns,
 *                                                   e.g. `var:preset|<PRESET_TYPE>|<PRESET_SLUG>`,
 *                                                   to `var( --wp--preset--* )` values. Default false.
 *     @type string      $selector                   Optional. When a selector is passed,
 *                                                   the value of `$css` in the return value will comprise
 *                                                   a full CSS rule `$selector { ...$css_declarations }`,
 *                                                   otherwise, the value will be a concatenated string
 *                                                   of CSS declarations.
 * }
 * @return array {
 *     @type string   $css          A CSS ruleset or declarations block
 *                                  formatted to be placed in an HTML `style` attribute or tag.
 *     @type string[] $declarations An associative array of CSS definitions,
 *                                  e.g. `array( "$property" => "$value", "$property" => "$value" )`.
 *     @type string   $classnames   Classnames separated by a space.
 * }
 */
    public function wpStyleEngineGetStyles(array $blockStyles, array $options = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns compiled CSS from a collection of selectors and declarations.
 * Useful for returning a compiled stylesheet from any collection of CSS selector + declarations.
 *
 * Example usage:
 *
 *     $css_rules = array(
 *         array(
 *             'selector'     => '.elephant-are-cool',
 *             'declarations' => array(
 *                 'color' => 'gray',
 *                 'width' => '3em',
 *             ),
 *         ),
 *     );
 *
 *     $css = wp_style_engine_get_stylesheet_from_css_rules( $css_rules );
 *
 * Returns:
 *
 *     .elephant-are-cool{color:gray;width:3em}
 *
 * @since 6.1.0
 * @since 6.6.0 Added support for `$rules_group` in the `$css_rules` array.
 *
 * @param array $cssRules {
 *     Required. A collection of CSS rules.
 *
 *     @type array ...$0 {
 *         @type string   $rules_group  A parent CSS selector in the case of nested CSS,
 *                                      or a CSS nested @rule, such as `@media (min-width: 80rem)` or `@layer module`.
 *         @type string   $selector     A CSS selector.
 *         @type string[] $declarations An associative array of CSS definitions,
 *                                      e.g. `array( "$property" => "$value", "$property" => "$value" )`.
 *     }
 * }
 * @param array $options {
 *     Optional. An array of options. Default empty array.
 *
 *     @type string|null $context  An identifier describing the origin of the style object,
 *                                 e.g. 'block-supports' or 'global-styles'. Default 'block-supports'.
 *                                 When set, the style engine will attempt to store the CSS rules.
 *     @type bool        $optimize Whether to optimize the CSS output, e.g. combine rules.
 *                                 Default false.
 *     @type bool        $prettify Whether to add new lines and indents to output.
 *                                 Defaults to whether the `SCRIPT_DEBUG` constant is defined.
 * }
 * @return string A string of compiled CSS declarations, or empty string.
 */
    public function wpStyleEngineGetStylesheetFromCssRules(array $cssRules, array $options = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns compiled CSS from a store, if found.
 *
 * @since 6.1.0
 *
 * @param string $context A valid context name, corresponding to an existing store key.
 * @param array $options {
 *     Optional. An array of options. Default empty array.
 *
 *     @type bool $optimize Whether to optimize the CSS output, e.g. combine rules.
 *                          Default false.
 *     @type bool $prettify Whether to add new lines and indents to output.
 *                          Defaults to whether the `SCRIPT_DEBUG` constant is defined.
 * }
 * @return string A compiled CSS string.
 */
    public function wpStyleEngineGetStylesheetFromContext(string $context, array $options = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates the initial taxonomies.
 *
 * This function fires twice: in wp-settings.php before plugins are loaded (for
 * backward compatibility reasons), and again on the {@see 'init'} action. We must
 * avoid registering rewrite rules before the {@see 'init'} action.
 *
 * @since 2.8.0
 * @since 5.9.0 Added `'wp_template_part_area'` taxonomy.
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 */
    public function createInitialTaxonomies(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of registered taxonomy names or objects.
 *
 * @since 3.0.0
 *
 * @global WP_Taxonomy[] $wp_taxonomies The registered taxonomies.
 *
 * @param array $args     Optional. An array of `key => value` arguments to match against the taxonomy objects.
 *                         Default empty array.
 * @param string $output   Optional. The type of output to return in the array. Either 'names'
 *                         or 'objects'. Default 'names'.
 * @param string $operator Optional. The logical operation to perform. Accepts 'and' or 'or'. 'or' means only
 *                         one element from the array needs to match; 'and' means all elements must match.
 *                         Default 'and'.
 * @return string[]|WP_Taxonomy[] An array of taxonomy names or objects.
 */
    public function getTaxonomies(array $args = [], string $output = 'names', string $operator = 'and'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the names or objects of the taxonomies which are registered for the requested object or object type,
 * such as a post object or post type name.
 *
 * Example:
 *
 *     $taxonomies = get_object_taxonomies( 'post' );
 *
 * This results in:
 *
 *     Array( 'category', 'post_tag' )
 *
 * @since 2.3.0
 *
 * @global WP_Taxonomy[] $wp_taxonomies The registered taxonomies.
 *
 * @param string|string[]|WP_Post $objectType Name of the type of taxonomy object, or an object (row from posts).
 * @param string $output      Optional. The type of output to return in the array. Accepts either
 *                                             'names' or 'objects'. Default 'names'.
 * @return string[]|WP_Taxonomy[] The names or objects of all taxonomies of `$object_type`.
 */
    public function getObjectTaxonomies(string|array|\WP_Post $objectType, string $output = 'names'): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the taxonomy object of $taxonomy.
 *
 * The get_taxonomy function will first check that the parameter string given
 * is a taxonomy object and if it is, it will return it.
 *
 * @since 2.3.0
 *
 * @global WP_Taxonomy[] $wp_taxonomies The registered taxonomies.
 *
 * @param string $taxonomy Name of taxonomy object to return.
 * @return \WP_Taxonomy|false The taxonomy object or false if $taxonomy doesn't exist.
 */
    public function getTaxonomy(string $taxonomy): \WP_Taxonomy|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the taxonomy name exists.
 *
 * Formerly is_taxonomy(), introduced in 2.3.0.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 3.0.0
 *
 * @global WP_Taxonomy[] $wp_taxonomies The registered taxonomies.
 *
 * @param string $taxonomy Name of taxonomy object.
 * @return bool Whether the taxonomy exists.
 */
    public function taxonomyExists(string $taxonomy): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the taxonomy object is hierarchical.
 *
 * Checks to make sure that the taxonomy is an object first. Then Gets the
 * object, and finally returns the hierarchical value in the object.
 *
 * A false return value might also mean that the taxonomy does not exist.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.3.0
 *
 * @param string $taxonomy Name of taxonomy object.
 * @return bool Whether the taxonomy is hierarchical.
 */
    public function isTaxonomyHierarchical(string $taxonomy): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates or modifies a taxonomy object.
 *
 * Note: Do not use before the {@see 'init'} hook.
 *
 * A simple function for creating or modifying a taxonomy object based on
 * the parameters given. If modifying an existing taxonomy object, note
 * that the `$object_type` value from the original registration will be
 * overwritten.
 *
 * @since 2.3.0
 * @since 4.2.0 Introduced `show_in_quick_edit` argument.
 * @since 4.4.0 The `show_ui` argument is now enforced on the term editing screen.
 * @since 4.4.0 The `public` argument now controls whether the taxonomy can be queried on the front end.
 * @since 4.5.0 Introduced `publicly_queryable` argument.
 * @since 4.7.0 Introduced `show_in_rest`, 'rest_base' and 'rest_controller_class'
 *              arguments to register the taxonomy in REST API.
 * @since 5.1.0 Introduced `meta_box_sanitize_cb` argument.
 * @since 5.4.0 Added the registered taxonomy object as a return value.
 * @since 5.5.0 Introduced `default_term` argument.
 * @since 5.9.0 Introduced `rest_namespace` argument.
 *
 * @global WP_Taxonomy[] $wp_taxonomies Registered taxonomies.
 *
 * @param string $taxonomy    Taxonomy key. Must not exceed 32 characters and may only contain
 *                                  lowercase alphanumeric characters, dashes, and underscores. See sanitize_key().
 * @param array|string $objectType Object type or array of object types with which the taxonomy should be associated.
 * @param array|string $args        {
 *     Optional. Array or query string of arguments for registering a taxonomy.
 *
 *     @type string[]      $labels                An array of labels for this taxonomy. By default, Tag labels are
 *                                                used for non-hierarchical taxonomies, and Category labels are used
 *                                                for hierarchical taxonomies. See accepted values in
 *                                                get_taxonomy_labels(). Default empty array.
 *     @type string        $description           A short descriptive summary of what the taxonomy is for. Default empty.
 *     @type bool          $public                Whether a taxonomy is intended for use publicly either via
 *                                                the admin interface or by front-end users. The default settings
 *                                                of `$publicly_queryable`, `$show_ui`, and `$show_in_nav_menus`
 *                                                are inherited from `$public`.
 *     @type bool          $publicly_queryable    Whether the taxonomy is publicly queryable.
 *                                                If not set, the default is inherited from `$public`
 *     @type bool          $hierarchical          Whether the taxonomy is hierarchical. Default false.
 *     @type bool          $show_ui               Whether to generate and allow a UI for managing terms in this taxonomy in
 *                                                the admin. If not set, the default is inherited from `$public`
 *                                                (default true).
 *     @type bool          $show_in_menu          Whether to show the taxonomy in the admin menu. If true, the taxonomy is
 *                                                shown as a submenu of the object type menu. If false, no menu is shown.
 *                                                `$show_ui` must be true. If not set, default is inherited from `$show_ui`
 *                                                (default true).
 *     @type bool          $show_in_nav_menus     Makes this taxonomy available for selection in navigation menus. If not
 *                                                set, the default is inherited from `$public` (default true).
 *     @type bool          $show_in_rest          Whether to include the taxonomy in the REST API. Set this to true
 *                                                for the taxonomy to be available in the block editor.
 *     @type string        $rest_base             To change the base url of REST API route. Default is $taxonomy.
 *     @type string        $rest_namespace        To change the namespace URL of REST API route. Default is wp/v2.
 *     @type string        $rest_controller_class REST API Controller class name. Default is 'WP_REST_Terms_Controller'.
 *     @type bool          $show_tagcloud         Whether to list the taxonomy in the Tag Cloud Widget controls. If not set,
 *                                                the default is inherited from `$show_ui` (default true).
 *     @type bool          $show_in_quick_edit    Whether to show the taxonomy in the quick/bulk edit panel. It not set,
 *                                                the default is inherited from `$show_ui` (default true).
 *     @type bool          $show_admin_column     Whether to display a column for the taxonomy on its post type listing
 *                                                screens. Default false.
 *     @type bool|callable $meta_box_cb           Provide a callback function for the meta box display. If not set,
 *                                                post_categories_meta_box() is used for hierarchical taxonomies, and
 *                                                post_tags_meta_box() is used for non-hierarchical. If false, no meta
 *                                                box is shown.
 *     @type callable      $meta_box_sanitize_cb  Callback function for sanitizing taxonomy data saved from a meta
 *                                                box. If no callback is defined, an appropriate one is determined
 *                                                based on the value of `$meta_box_cb`.
 *     @type string[]      $capabilities {
 *         Array of capabilities for this taxonomy.
 *
 *         @type string $manage_terms Default 'manage_categories'.
 *         @type string $edit_terms   Default 'manage_categories'.
 *         @type string $delete_terms Default 'manage_categories'.
 *         @type string $assign_terms Default 'edit_posts'.
 *     }
 *     @type bool|array    $rewrite {
 *         Triggers the handling of rewrites for this taxonomy. Default true, using $taxonomy as slug. To prevent
 *         rewrite, set to false. To specify rewrite rules, an array can be passed with any of these keys:
 *
 *         @type string $slug         Customize the permastruct slug. Default `$taxonomy` key.
 *         @type bool   $with_front   Should the permastruct be prepended with WP_Rewrite::$front. Default true.
 *         @type bool   $hierarchical Either hierarchical rewrite tag or not. Default false.
 *         @type int    $ep_mask      Assign an endpoint mask. Default `EP_NONE`.
 *     }
 *     @type string|bool   $query_var             Sets the query var key for this taxonomy. Default `$taxonomy` key. If
 *                                                false, a taxonomy cannot be loaded at `?{query_var}={term_slug}`. If a
 *                                                string, the query `?{query_var}={term_slug}` will be valid.
 *     @type callable      $update_count_callback Works much like a hook, in that it will be called when the count is
 *                                                updated. Default _update_post_term_count() for taxonomies attached
 *                                                to post types, which confirms that the objects are published before
 *                                                counting them. Default _update_generic_term_count() for taxonomies
 *                                                attached to other object types, such as users.
 *     @type string|array  $default_term {
 *         Default term to be used for the taxonomy.
 *
 *         @type string $name         Name of default term.
 *         @type string $slug         Slug for default term. Default empty.
 *         @type string $description  Description for default term. Default empty.
 *     }
 *     @type bool          $sort                  Whether terms in this taxonomy should be sorted in the order they are
 *                                                provided to `wp_set_object_terms()`. Default null which equates to false.
 *     @type array         $args                  Array of arguments to automatically use inside `wp_get_object_terms()`
 *                                                for this taxonomy.
 *     @type bool          $_builtin              This taxonomy is a "built-in" taxonomy. INTERNAL USE ONLY!
 *                                                Default false.
 * }
 * @return \WP_Taxonomy|\WP_Error The registered taxonomy object on success, WP_Error object on failure.
 */
    public function registerTaxonomy(string $taxonomy, array|string $objectType, array|string $args = []): \WP_Taxonomy|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a taxonomy.
 *
 * Can not be used to unregister built-in taxonomies.
 *
 * @since 4.5.0
 *
 * @global WP_Taxonomy[] $wp_taxonomies List of taxonomies.
 *
 * @param string $taxonomy Taxonomy name.
 * @return true|\WP_Error True on success, WP_Error on failure or if the taxonomy doesn't exist.
 */
    public function unregisterTaxonomy(string $taxonomy): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds an object with all taxonomy labels out of a taxonomy object.
 *
 * @since 3.0.0
 * @since 4.3.0 Added the `no_terms` label.
 * @since 4.4.0 Added the `items_list_navigation` and `items_list` labels.
 * @since 4.9.0 Added the `most_used` and `back_to_items` labels.
 * @since 5.7.0 Added the `filter_by_item` label.
 * @since 5.8.0 Added the `item_link` and `item_link_description` labels.
 * @since 5.9.0 Added the `name_field_description`, `slug_field_description`,
 *              `parent_field_description`, and `desc_field_description` labels.
 * @since 6.6.0 Added the `template_name` label.
 *
 * @param \WP_Taxonomy $tax Taxonomy object.
 * @return object {
 *     Taxonomy labels object. The first default value is for non-hierarchical taxonomies
 *     (like tags) and the second one is for hierarchical taxonomies (like categories).
 *
 *     @type string $name                       General name for the taxonomy, usually plural. The same
 *                                              as and overridden by `$tax->label`. Default 'Tags'/'Categories'.
 *     @type string $singular_name              Name for one object of this taxonomy. Default 'Tag'/'Category'.
 *     @type string $search_items               Default 'Search Tags'/'Search Categories'.
 *     @type string $popular_items              This label is only used for non-hierarchical taxonomies.
 *                                              Default 'Popular Tags'.
 *     @type string $all_items                  Default 'All Tags'/'All Categories'.
 *     @type string $parent_item                This label is only used for hierarchical taxonomies. Default
 *                                              'Parent Category'.
 *     @type string $parent_item_colon          The same as `parent_item`, but with colon `:` in the end.
 *     @type string $name_field_description     Description for the Name field on Edit Tags screen.
 *                                              Default 'The name is how it appears on your site'.
 *     @type string $slug_field_description     Description for the Slug field on Edit Tags screen.
 *                                              Default 'The &#8220;slug&#8221; is the URL-friendly version
 *                                              of the name. It is usually all lowercase and contains
 *                                              only letters, numbers, and hyphens'.
 *     @type string $parent_field_description   Description for the Parent field on Edit Tags screen.
 *                                              Default 'Assign a parent term to create a hierarchy.
 *                                              The term Jazz, for example, would be the parent
 *                                              of Bebop and Big Band'.
 *     @type string $desc_field_description     Description for the Description field on Edit Tags screen.
 *                                              Default 'The description is not prominent by default;
 *                                              however, some themes may show it'.
 *     @type string $edit_item                  Default 'Edit Tag'/'Edit Category'.
 *     @type string $view_item                  Default 'View Tag'/'View Category'.
 *     @type string $update_item                Default 'Update Tag'/'Update Category'.
 *     @type string $add_new_item               Default 'Add New Tag'/'Add New Category'.
 *     @type string $new_item_name              Default 'New Tag Name'/'New Category Name'.
 *     @type string $template_name              Default 'Tag Archives'/'Category Archives'.
 *     @type string $separate_items_with_commas This label is only used for non-hierarchical taxonomies. Default
 *                                              'Separate tags with commas', used in the meta box.
 *     @type string $add_or_remove_items        This label is only used for non-hierarchical taxonomies. Default
 *                                              'Add or remove tags', used in the meta box when JavaScript
 *                                              is disabled.
 *     @type string $choose_from_most_used      This label is only used on non-hierarchical taxonomies. Default
 *                                              'Choose from the most used tags', used in the meta box.
 *     @type string $not_found                  Default 'No tags found'/'No categories found', used in
 *                                              the meta box and taxonomy list table.
 *     @type string $no_terms                   Default 'No tags'/'No categories', used in the posts and media
 *                                              list tables.
 *     @type string $filter_by_item             This label is only used for hierarchical taxonomies. Default
 *                                              'Filter by category', used in the posts list table.
 *     @type string $items_list_navigation      Label for the table pagination hidden heading.
 *     @type string $items_list                 Label for the table hidden heading.
 *     @type string $most_used                  Title for the Most Used tab. Default 'Most Used'.
 *     @type string $back_to_items              Label displayed after a term has been updated.
 *     @type string $item_link                  Used in the block editor. Title for a navigation link block variation.
 *                                              Default 'Tag Link'/'Category Link'.
 *     @type string $item_link_description      Used in the block editor. Description for a navigation link block
 *                                              variation. Default 'A link to a tag'/'A link to a category'.
 * }
 */
    public function getTaxonomyLabels(\WP_Taxonomy $tax): object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds an already registered taxonomy to an object type.
 *
 * @since 3.0.0
 *
 * @global WP_Taxonomy[] $wp_taxonomies The registered taxonomies.
 *
 * @param string $taxonomy    Name of taxonomy object.
 * @param string $objectType Name of the object type.
 * @return bool True if successful, false if not.
 */
    public function registerTaxonomyForObjectType(string $taxonomy, string $objectType): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes an already registered taxonomy from an object type.
 *
 * @since 3.7.0
 *
 * @global WP_Taxonomy[] $wp_taxonomies The registered taxonomies.
 *
 * @param string $taxonomy    Name of taxonomy object.
 * @param string $objectType Name of the object type.
 * @return bool True if successful, false if not.
 */
    public function unregisterTaxonomyForObjectType(string $taxonomy, string $objectType): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves object IDs of valid taxonomy and term.
 *
 * The strings of `$taxonomies` must exist before this function will continue.
 * On failure of finding a valid taxonomy, it will return a WP_Error.
 *
 * The `$terms` aren't checked the same as `$taxonomies`, but still need to exist
 * for object IDs to be returned.
 *
 * It is possible to change the order that object IDs are returned by using `$args`
 * with either ASC or DESC array. The value should be in the key named 'order'.
 *
 * @since 2.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|int[] $termIds   Term ID or array of term IDs of terms that will be used.
 * @param string|string[] $taxonomies String of taxonomy name or Array of string values of taxonomy names.
 * @param array|string $args       {
 *     Change the order of the object IDs.
 *
 *     @type string $order Order to retrieve terms. Accepts 'ASC' or 'DESC'. Default 'ASC'.
 * }
 * @return string[]|WP_Error An array of object IDs as numeric strings on success,
 *                           WP_Error if the taxonomy does not exist.
 */
    public function getObjectsInTerm(int|array $termIds, string|array $taxonomies, array|string $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Given a taxonomy query, generates SQL to be appended to a main query.
 *
 * @since 3.1.0
 *
 * @see WP_Tax_Query
 *
 * @param array $taxQuery         A compact tax query
 * @param string $primaryTable
 * @param string $primaryIdColumn
 * @return string[]
 */
    public function getTaxSql(array $taxQuery, string $primaryTable, string $primaryIdColumn): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets all term data from database by term ID.
 *
 * The usage of the get_term function is to apply filters to a term object. It
 * is possible to get a term object from the database before applying the
 * filters.
 *
 * $term ID must be part of $taxonomy, to get from the database. Failure, might
 * be able to be captured by the hooks. Failure would be the same value as $wpdb
 * returns for the get_row method.
 *
 * There are two hooks, one is specifically for each term, named 'get_term', and
 * the second is for the taxonomy name, 'term_$taxonomy'. Both hooks gets the
 * term object, and the taxonomy name as parameters. Both hooks are expected to
 * return a term object.
 *
 * {@see 'get_term'} hook - Takes two parameters the term Object and the taxonomy name.
 * Must return term object. Used in get_term() as a catch-all filter for every
 * $term.
 *
 * {@see 'get_$taxonomy'} hook - Takes two parameters the term Object and the taxonomy
 * name. Must return term object. $taxonomy will be the taxonomy name, so for
 * example, if 'category', it would be 'get_category' as the filter name. Useful
 * for custom taxonomies or plugging into default taxonomies.
 *
 * @todo Better formatting for DocBlock
 *
 * @since 2.3.0
 * @since 4.4.0 Converted to return a WP_Term object if `$output` is `OBJECT`.
 *              The `$taxonomy` parameter was made optional.
 *
 * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param.
 *
 * @param int|WP_Term|object $term     If integer, term data will be fetched from the database,
 *                                     or from the cache if available.
 *                                     If stdClass object (as in the results of a database query),
 *                                     will apply filters and return a `WP_Term` object with the `$term` data.
 *                                     If `WP_Term`, will return `$term`.
 * @param string $taxonomy Optional. Taxonomy name that `$term` is part of.
 * @param string $output   Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                                     correspond to a WP_Term object, an associative array, or a numeric array,
 *                                     respectively. Default OBJECT.
 * @param string $filter   Optional. How to sanitize term fields. Default 'raw'.
 * @return \WP_Term|array|\WP_Error|null WP_Term instance (or array) on success, depending on the `$output` value.
 *                                     WP_Error if `$taxonomy` does not exist. Null for miscellaneous failure.
 */
    public function getTerm(int|object $term, string $taxonomy = '', string $output = OBJECT, string $filter = 'raw'): \WP_Term|array|\WP_Error|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets all term data from database by term field and data.
 *
 * Warning: $value is not escaped for 'name' $field. You must do it yourself, if
 * required.
 *
 * The default $field is 'id', therefore it is possible to also use null for
 * field, but not recommended that you do so.
 *
 * If $value does not exist, the return value will be false. If $taxonomy exists
 * and $field and $value combinations exist, the term will be returned.
 *
 * This function will always return the first term that matches the `$field`-
 * `$value`-`$taxonomy` combination specified in the parameters. If your query
 * is likely to match more than one term (as is likely to be the case when
 * `$field` is 'name', for example), consider using get_terms() instead; that
 * way, you will get all matching terms, and can provide your own logic for
 * deciding which one was intended.
 *
 * @todo Better formatting for DocBlock.
 *
 * @since 2.3.0
 * @since 4.4.0 `$taxonomy` is optional if `$field` is 'term_taxonomy_id'. Converted to return
 *              a WP_Term object if `$output` is `OBJECT`.
 * @since 5.5.0 Added 'ID' as an alias of 'id' for the `$field` parameter.
 *
 * @see sanitize_term_field() The $context param lists the available values for get_term_by() $filter param.
 *
 * @param string $field    Either 'slug', 'name', 'term_id' (or 'id', 'ID'), or 'term_taxonomy_id'.
 * @param string|int $value    Search for this term value.
 * @param string $taxonomy Taxonomy name. Optional, if `$field` is 'term_taxonomy_id'.
 * @param string $output   Optional. The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which
 *                             correspond to a WP_Term object, an associative array, or a numeric array,
 *                             respectively. Default OBJECT.
 * @param string $filter   Optional. How to sanitize term fields. Default 'raw'.
 * @return \WP_Term|array|false WP_Term instance (or array) on success, depending on the `$output` value.
 *                             False if `$taxonomy` does not exist or `$term` was not found.
 */
    public function getTermBy(string $field, string|int $value, string $taxonomy = '', string $output = OBJECT, string $filter = 'raw'): \WP_Term|array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Merges all term children into a single array of their IDs.
 *
 * This recursive function will merge all of the children of $term into the same
 * array of term IDs. Only useful for taxonomies which are hierarchical.
 *
 * Will return an empty array if $term does not exist in $taxonomy.
 *
 * @since 2.3.0
 *
 * @param int $termId  ID of term to get children.
 * @param string $taxonomy Taxonomy name.
 * @return array|\WP_Error List of term IDs. WP_Error returned if `$taxonomy` does not exist.
 */
    public function getTermChildren(int $termId, string $taxonomy): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets sanitized term field.
 *
 * The function is for contextual reasons and for simplicity of usage.
 *
 * @since 2.3.0
 * @since 4.4.0 The `$taxonomy` parameter was made optional. `$term` can also now accept a WP_Term object.
 *
 * @see sanitize_term_field()
 *
 * @param string $field    Term field to fetch.
 * @param int|\WP_Term $term     Term ID or object.
 * @param string $taxonomy Optional. Taxonomy name. Default empty.
 * @param string $context  Optional. How to sanitize term fields. Look at sanitize_term_field() for available options.
 *                              Default 'display'.
 * @return string|int|null|\WP_Error Will return an empty string if $term is not an object or if $field is not set in $term.
 */
    public function getTermField(string $field, int|\WP_Term $term, string $taxonomy = '', string $context = 'display'): string|int|null|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes term for editing.
 *
 * Return value is sanitize_term() and usage is for sanitizing the term for
 * editing. Function is for contextual and simplicity.
 *
 * @since 2.3.0
 *
 * @param int|object $id       Term ID or object.
 * @param string $taxonomy Taxonomy name.
 * @return string|int|null|\WP_Error Will return empty string if $term is not an object.
 */
    public function getTermToEdit(int|object $id, string $taxonomy): string|int|null|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the terms in a given taxonomy or list of taxonomies.
 *
 * You can fully inject any customizations to the query before it is sent, as
 * well as control the output with a filter.
 *
 * The return type varies depending on the value passed to `$args['fields']`. See
 * WP_Term_Query::get_terms() for details. In all cases, a `WP_Error` object will
 * be returned if an invalid taxonomy is requested.
 *
 * The {@see 'get_terms'} filter will be called when the cache has the term and will
 * pass the found term along with the array of $taxonomies and array of $args.
 * This filter is also called before the array of terms is passed and will pass
 * the array of terms, along with the $taxonomies and $args.
 *
 * The {@see 'list_terms_exclusions'} filter passes the compiled exclusions along with
 * the $args.
 *
 * The {@see 'get_terms_orderby'} filter passes the `ORDER BY` clause for the query
 * along with the $args array.
 *
 * Taxonomy or an array of taxonomies should be passed via the 'taxonomy' argument
 * in the `$args` array:
 *
 *     $terms = get_terms( array(
 *         'taxonomy'   => 'post_tag',
 *         'hide_empty' => false,
 *     ) );
 *
 * Prior to 4.5.0, taxonomy was passed as the first parameter of `get_terms()`.
 *
 * @since 2.3.0
 * @since 4.2.0 Introduced 'name' and 'childless' parameters.
 * @since 4.4.0 Introduced the ability to pass 'term_id' as an alias of 'id' for the `orderby` parameter.
 *              Introduced the 'meta_query' and 'update_term_meta_cache' parameters. Converted to return
 *              a list of WP_Term objects.
 * @since 4.5.0 Changed the function signature so that the `$args` array can be provided as the first parameter.
 *              Introduced 'meta_key' and 'meta_value' parameters. Introduced the ability to order results by metadata.
 * @since 4.8.0 Introduced 'suppress_filter' parameter.
 *
 * @internal The `$deprecated` parameter is parsed for backward compatibility only.
 *
 * @param array|string $args       Optional. Array or string of arguments. See WP_Term_Query::__construct()
 *                                 for information on accepted arguments. Default empty array.
 * @param array|string $deprecated Optional. Argument array, when using the legacy function parameter format.
 *                                 If present, this parameter will be interpreted as `$args`, and the first
 *                                 function parameter will be parsed as a taxonomy or array of taxonomies.
 *                                 Default empty.
 * @return WP_Term[]|int[]|string[]|string|WP_Error Array of terms, a count thereof as a numeric string,
 *                                                  or WP_Error if any of the taxonomies do not exist.
 *                                                  See the function description for more information.
 */
    public function getTerms(array|string $args = [], array|string $deprecated = ''): array|string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds metadata to a term.
 *
 * @since 4.4.0
 *
 * @param int $termId    Term ID.
 * @param string $metaKey   Metadata name.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param bool $unique     Optional. Whether the same key should not be added.
 *                           Default false.
 * @return int|false|\WP_Error Meta ID on success, false on failure.
 *                            WP_Error when term_id is ambiguous between taxonomies.
 */
    public function addTermMeta(int $termId, string $metaKey, mixed $metaValue, bool $unique = false): int|false|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes metadata matching criteria from a term.
 *
 * @since 4.4.0
 *
 * @param int $termId    Term ID.
 * @param string $metaKey   Metadata name.
 * @param mixed $metaValue Optional. Metadata value. If provided,
 *                           rows will only be removed that match the value.
 *                           Must be serializable if non-scalar. Default empty.
 * @return bool True on success, false on failure.
 */
    public function deleteTermMeta(int $termId, string $metaKey, mixed $metaValue = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves metadata for a term.
 *
 * @since 4.4.0
 *
 * @param int $termId Term ID.
 * @param string $key     Optional. The meta key to retrieve. By default,
 *                        returns data for all keys. Default empty.
 * @param bool $single  Optional. Whether to return a single value.
 *                        This parameter has no effect if `$key` is not specified.
 *                        Default false.
 * @return mixed An array of values if `$single` is false.
 *               The value of the meta field if `$single` is true.
 *               False for an invalid `$term_id` (non-numeric, zero, or negative value).
 *               An empty string if a valid but non-existing term ID is passed.
 */
    public function getTermMeta(int $termId, string $key = '', bool $single = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates term metadata.
 *
 * Use the `$prev_value` parameter to differentiate between meta fields with the same key and term ID.
 *
 * If the meta field for the term does not exist, it will be added.
 *
 * @since 4.4.0
 *
 * @param int $termId    Term ID.
 * @param string $metaKey   Metadata key.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param mixed $prevValue Optional. Previous value to check before updating.
 *                           If specified, only update existing metadata entries with
 *                           this value. Otherwise, update all entries. Default empty.
 * @return int|bool|\WP_Error Meta ID if the key didn't exist. true on successful update,
 *                           false on failure or if the value passed to the function
 *                           is the same as the one that is already in the database.
 *                           WP_Error when term_id is ambiguous between taxonomies.
 */
    public function updateTermMeta(int $termId, string $metaKey, mixed $metaValue, mixed $prevValue = ''): int|bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates metadata cache for list of term IDs.
 *
 * Performs SQL query to retrieve all metadata for the terms matching `$term_ids` and stores them in the cache.
 * Subsequent calls to `get_term_meta()` will not need to query the database.
 *
 * @since 4.4.0
 *
 * @param array $termIds List of term IDs.
 * @return array|false An array of metadata on success, false if there is nothing to update.
 */
    public function updateTermmetaCache(array $termIds): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Queue term meta for lazy-loading.
 *
 * @since 6.3.0
 *
 * @param array $termIds List of term IDs.
 */
    public function wpLazyloadTermMeta(array $termIds): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets all meta data, including meta IDs, for the given term ID.
 *
 * @since 4.9.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $termId Term ID.
 * @return array|false Array with meta data, or false when the meta table is not installed.
 */
    public function hasTermMeta(int $termId): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a meta key for terms.
 *
 * @since 4.9.8
 *
 * @param string $taxonomy Taxonomy to register a meta key for. Pass an empty string
 *                         to register the meta key across all existing taxonomies.
 * @param string $metaKey The meta key to register.
 * @param array $args     Data used to describe the meta key when registered. See
 *                         {@see register_meta()} for a list of supported arguments.
 * @return bool True if the meta key was successfully registered, false if not.
 */
    public function registerTermMeta(string $taxonomy, string $metaKey, array $args): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a meta key for terms.
 *
 * @since 4.9.8
 *
 * @param string $taxonomy Taxonomy the meta key is currently registered for. Pass
 *                         an empty string if the meta key is registered across all
 *                         existing taxonomies.
 * @param string $metaKey The meta key to unregister.
 * @return bool True on success, false if the meta key was not previously registered.
 */
    public function unregisterTermMeta(string $taxonomy, string $metaKey): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a taxonomy term exists.
 *
 * Formerly is_term(), introduced in 2.3.0.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 3.0.0
 * @since 6.0.0 Converted to use `get_terms()`.
 *
 * @global bool $_wp_suspend_cache_invalidation
 *
 * @param int|string $term        The term to check. Accepts term ID, slug, or name.
 * @param string $taxonomy    Optional. The taxonomy name to use.
 * @param int $parentTerm Optional. ID of parent term under which to confine the exists search.
 * @return mixed Returns null if the term does not exist.
 *               Returns the term ID if no taxonomy is specified and the term ID exists.
 *               Returns an array of the term ID and the term taxonomy ID if the taxonomy is specified and the pairing exists.
 *               Returns 0 if term ID 0 is passed to the function.
 */
    public function termExists(int|string $term, string $taxonomy = '', int $parentTerm = null): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if a term is an ancestor of another term.
 *
 * You can use either an ID or the term object for both parameters.
 *
 * @since 3.4.0
 *
 * @param int|object $term1    ID or object to check if this is the parent term.
 * @param int|object $term2    The child term.
 * @param string $taxonomy Taxonomy name that $term1 and `$term2` belong to.
 * @return bool Whether `$term2` is a child of `$term1`.
 */
    public function termIsAncestorOf(int|object $term1, int|object $term2, string $taxonomy): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes all term fields.
 *
 * Relies on sanitize_term_field() to sanitize the term. The difference is that
 * this function will sanitize **all** fields. The context is based
 * on sanitize_term_field().
 *
 * The `$term` is expected to be either an array or an object.
 *
 * @since 2.3.0
 *
 * @param array|object $term     The term to check.
 * @param string $taxonomy The taxonomy name to use.
 * @param string $context  Optional. Context in which to sanitize the term.
 *                               Accepts 'raw', 'edit', 'db', 'display', 'rss',
 *                               'attribute', or 'js'. Default 'display'.
 * @return array|object Term with all fields sanitized.
 */
    public function sanitizeTerm(array|object $term, string $taxonomy, string $context = 'display'): array|object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes the field value in the term based on the context.
 *
 * Passing a term field value through the function should be assumed to have
 * cleansed the value for whatever context the term field is going to be used.
 *
 * If no context or an unsupported context is given, then default filters will
 * be applied.
 *
 * There are enough filters for each context to support a custom filtering
 * without creating your own filter function. Simply create a function that
 * hooks into the filter you need.
 *
 * @since 2.3.0
 *
 * @param string $field    Term field to sanitize.
 * @param string $value    Search for this term value.
 * @param int $termId  Term ID.
 * @param string $taxonomy Taxonomy name.
 * @param string $context  Context in which to sanitize the term field.
 *                         Accepts 'raw', 'edit', 'db', 'display', 'rss',
 *                         'attribute', or 'js'. Default 'display'.
 * @return mixed Sanitized field.
 */
    public function sanitizeTermField(string $field, string $value, int $termId, string $taxonomy, string $context): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Counts how many terms are in taxonomy.
 *
 * Default $args is 'hide_empty' which can be 'hide_empty=true' or array('hide_empty' => true).
 *
 * @since 2.3.0
 * @since 5.6.0 Changed the function signature so that the `$args` array can be provided as the first parameter.
 *
 * @internal The `$deprecated` parameter is parsed for backward compatibility only.
 *
 * @param array|string $args       Optional. Array or string of arguments. See WP_Term_Query::__construct()
 *                                 for information on accepted arguments. Default empty array.
 * @param array|string $deprecated Optional. Argument array, when using the legacy function parameter format.
 *                                 If present, this parameter will be interpreted as `$args`, and the first
 *                                 function parameter will be parsed as a taxonomy or array of taxonomies.
 *                                 Default empty.
 * @return string|\WP_Error Numeric string containing the number of terms in that
 *                         taxonomy or WP_Error if the taxonomy does not exist.
 */
    public function wpCountTerms(array|string $args = [], array|string $deprecated = ''): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unlinks the object from the taxonomy or taxonomies.
 *
 * Will remove all relationships between the object and any terms in
 * a particular taxonomy or taxonomies. Does not remove the term or
 * taxonomy itself.
 *
 * @since 2.3.0
 *
 * @param int $objectId  The term object ID that refers to the term.
 * @param string|array $taxonomies List of taxonomy names or single taxonomy name.
 */
    public function wpDeleteObjectTermRelationships(int $objectId, string|array $taxonomies): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a term from the database.
 *
 * If the term is a parent of other terms, then the children will be updated to
 * that term's parent.
 *
 * Metadata associated with the term will be deleted.
 *
 * @since 2.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $term     Term ID.
 * @param string $taxonomy Taxonomy name.
 * @param array|string $args {
 *     Optional. Array of arguments to override the default term ID. Default empty array.
 *
 *     @type int  $default       The term ID to make the default term. This will only override
 *                               the terms found if there is only one term found. Any other and
 *                               the found terms are used.
 *     @type bool $force_default Optional. Whether to force the supplied term as default to be
 *                               assigned even if the object was not going to be term-less.
 *                               Default false.
 * }
 * @return bool|int|\WP_Error True on success, false if term does not exist. Zero on attempted
 *                           deletion of default Category. WP_Error if the taxonomy does not exist.
 */
    public function wpDeleteTerm(int $term, string $taxonomy, array|string $args = []): bool|int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes one existing category.
 *
 * @since 2.0.0
 *
 * @param int $catId Category term ID.
 * @return bool|int|\WP_Error Returns true if completes delete action; false if term doesn't exist;
 *                           Zero on attempted deletion of default Category; WP_Error object is
 *                           also a possibility.
 */
    public function wpDeleteCategory(int $catId): bool|int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the terms associated with the given object(s), in the supplied taxonomies.
 *
 * @since 2.3.0
 * @since 4.2.0 Added support for 'taxonomy', 'parent', and 'term_taxonomy_id' values of `$orderby`.
 *              Introduced `$parent` argument.
 * @since 4.4.0 Introduced `$meta_query` and `$update_term_meta_cache` arguments. When `$fields` is 'all' or
 *              'all_with_object_id', an array of `WP_Term` objects will be returned.
 * @since 4.7.0 Refactored to use WP_Term_Query, and to support any WP_Term_Query arguments.
 * @since 6.3.0 Passing `update_term_meta_cache` argument value false by default resulting in get_terms() to not
 *              prime the term meta cache.
 *
 * @param int|int[] $objectIds The ID(s) of the object(s) to retrieve.
 * @param string|string[] $taxonomies The taxonomy names to retrieve terms from.
 * @param array|string $args       See WP_Term_Query::__construct() for supported arguments.
 * @return WP_Term[]|int[]|string[]|string|WP_Error Array of terms, a count thereof as a numeric string,
 *                                                  or WP_Error if any of the taxonomies do not exist.
 *                                                  See WP_Term_Query::get_terms() for more information.
 */
    public function wpGetObjectTerms(int|array $objectIds, string|array $taxonomies, array|string $args = []): array|string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a new term to the database.
 *
 * A non-existent term is inserted in the following sequence:
 * 1. The term is added to the term table, then related to the taxonomy.
 * 2. If everything is correct, several actions are fired.
 * 3. The 'term_id_filter' is evaluated.
 * 4. The term cache is cleaned.
 * 5. Several more actions are fired.
 * 6. An array is returned containing the `term_id` and `term_taxonomy_id`.
 *
 * If the 'slug' argument is not empty, then it is checked to see if the term
 * is invalid. If it is not a valid, existing term, it is added and the term_id
 * is given.
 *
 * If the taxonomy is hierarchical, and the 'parent' argument is not empty,
 * the term is inserted and the term_id will be given.
 *
 * Error handling:
 * If `$taxonomy` does not exist or `$term` is empty,
 * a WP_Error object will be returned.
 *
 * If the term already exists on the same hierarchical level,
 * or the term slug and name are not unique, a WP_Error object will be returned.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @since 2.3.0
 *
 * @param string $term     The term name to add.
 * @param string $taxonomy The taxonomy to which to add the term.
 * @param array|string $args {
 *     Optional. Array or query string of arguments for inserting a term.
 *
 *     @type string $alias_of    Slug of the term to make this term an alias of.
 *                               Default empty string. Accepts a term slug.
 *     @type string $description The term description. Default empty string.
 *     @type int    $parent      The id of the parent term. Default 0.
 *     @type string $slug        The term slug to use. Default empty string.
 * }
 * @return array|\WP_Error {
 *     An array of the new term data, WP_Error otherwise.
 *
 *     @type int        $term_id          The new term ID.
 *     @type int|string $term_taxonomy_id The new term taxonomy ID. Can be a numeric string.
 * }
 */
    public function wpInsertTerm(string $term, string $taxonomy, array|string $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates term and taxonomy relationships.
 *
 * Relates an object (post, link, etc.) to a term and taxonomy type. Creates the
 * term and taxonomy relationship if it doesn't already exist. Creates a term if
 * it doesn't exist (using the slug).
 *
 * A relationship means that the term is grouped in or belongs to the taxonomy.
 * A term has no meaning until it is given context by defining which taxonomy it
 * exists under.
 *
 * @since 2.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $objectId The object to relate to.
 * @param string|int|array $terms     A single term slug, single term ID, or array of either term slugs or IDs.
 *                                    Will replace all existing related terms in this taxonomy. Passing an
 *                                    empty array will remove all related terms.
 * @param string $taxonomy  The context in which to relate the term to the object.
 * @param bool $append    Optional. If false will delete difference of terms. Default false.
 * @return array|\WP_Error Term taxonomy IDs of the affected terms or WP_Error on failure.
 */
    public function wpSetObjectTerms(int $objectId, string|int|array $terms, string $taxonomy, bool $append = false): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds term(s) associated with a given object.
 *
 * @since 3.6.0
 *
 * @param int $objectId The ID of the object to which the terms will be added.
 * @param string|int|array $terms     The slug(s) or ID(s) of the term(s) to add.
 * @param array|string $taxonomy  Taxonomy name.
 * @return array|\WP_Error Term taxonomy IDs of the affected terms.
 */
    public function wpAddObjectTerms(int $objectId, string|int|array $terms, array|string $taxonomy): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes term(s) associated with a given object.
 *
 * @since 3.6.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $objectId The ID of the object from which the terms will be removed.
 * @param string|int|array $terms     The slug(s) or ID(s) of the term(s) to remove.
 * @param string $taxonomy  Taxonomy name.
 * @return bool|\WP_Error True on success, false or WP_Error on failure.
 */
    public function wpRemoveObjectTerms(int $objectId, string|int|array $terms, string $taxonomy): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Makes term slug unique, if it isn't already.
 *
 * The `$slug` has to be unique global to every taxonomy, meaning that one
 * taxonomy term can't have a matching slug with another taxonomy term. Each
 * slug has to be globally unique for every taxonomy.
 *
 * The way this works is that if the taxonomy that the term belongs to is
 * hierarchical and has a parent, it will append that parent to the $slug.
 *
 * If that still doesn't return a unique slug, then it tries to append a number
 * until it finds a number that is truly unique.
 *
 * The only purpose for `$term` is for appending a parent, if one exists.
 *
 * @since 2.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $slug The string that will be tried for a unique slug.
 * @param object $term The term object that the `$slug` will belong to.
 * @return string Will return a true unique slug.
 */
    public function wpUniqueTermSlug(string $slug, object $term): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates term based on arguments provided.
 *
 * The `$args` will indiscriminately override all values with the same field name.
 * Care must be taken to not override important information need to update or
 * update will fail (or perhaps create a new term, neither would be acceptable).
 *
 * Defaults will set 'alias_of', 'description', 'parent', and 'slug' if not
 * defined in `$args` already.
 *
 * 'alias_of' will create a term group, if it doesn't already exist, and
 * update it for the `$term`.
 *
 * If the 'slug' argument in `$args` is missing, then the 'name' will be used.
 * If you set 'slug' and it isn't unique, then a WP_Error is returned.
 * If you don't pass any slug, then a unique one will be created.
 *
 * @since 2.3.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $termId  The ID of the term.
 * @param string $taxonomy The taxonomy of the term.
 * @param array $args {
 *     Optional. Array of arguments for updating a term.
 *
 *     @type string $alias_of    Slug of the term to make this term an alias of.
 *                               Default empty string. Accepts a term slug.
 *     @type string $description The term description. Default empty string.
 *     @type int    $parent      The id of the parent term. Default 0.
 *     @type string $slug        The term slug to use. Default empty string.
 * }
 * @return array|\WP_Error An array containing the `term_id` and `term_taxonomy_id`,
 *                        WP_Error otherwise.
 */
    public function wpUpdateTerm(int $termId, string $taxonomy, array $args = []): array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Enables or disables term counting.
 *
 * @since 2.5.0
 *
 * @param bool $defer Optional. Enable if true, disable if false.
 * @return bool Whether term counting is enabled or disabled.
 */
    public function wpDeferTermCounting(bool $defer = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the amount of terms in taxonomy.
 *
 * If there is a taxonomy callback applied, then it will be called for updating
 * the count.
 *
 * The default action is to count what the amount of terms have the relationship
 * of term ID. Once that is done, then update the database.
 *
 * @since 2.3.0
 *
 * @param int|array $terms       The term_taxonomy_id of the terms.
 * @param string $taxonomy    The context of the term.
 * @param bool $doDeferred Whether to flush the deferred term counts too. Default false.
 * @return bool If no terms will return false, and if successful will return true.
 */
    public function wpUpdateTermCount(int|array $terms, string $taxonomy, bool $doDeferred = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs term count update immediately.
 *
 * @since 2.5.0
 *
 * @param array $terms    The term_taxonomy_id of terms to update.
 * @param string $taxonomy The context of the term.
 * @return true Always true when complete.
 */
    public function wpUpdateTermCountNow(array $terms, string $taxonomy): true
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes the taxonomy relationship to terms from the cache.
 *
 * Will remove the entire taxonomy relationship containing term `$object_id`. The
 * term IDs have to exist within the taxonomy `$object_type` for the deletion to
 * take place.
 *
 * @since 2.3.0
 *
 * @global bool $_wp_suspend_cache_invalidation
 *
 * @see get_object_taxonomies() for more on $object_type.
 *
 * @param int|array $objectIds  Single or list of term object ID(s).
 * @param array|string $objectType The taxonomy object type.
 */
    public function cleanObjectTermCache(int|array $objectIds, array|string $objectType): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all of the term IDs from the cache.
 *
 * @since 2.3.0
 *
 * @global wpdb $wpdb                           WordPress database abstraction object.
 * @global bool $_wp_suspend_cache_invalidation
 *
 * @param int|int[] $ids            Single or array of term IDs.
 * @param string $taxonomy       Optional. Taxonomy slug. Can be empty, in which case the taxonomies of the passed
 *                                  term IDs will be used. Default empty.
 * @param bool $cleanTaxonomy Optional. Whether to clean taxonomy wide caches (true), or just individual
 *                                  term object caches (false). Default true.
 */
    public function cleanTermCache(int|array $ids, string $taxonomy = '', bool $cleanTaxonomy = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleans the caches for a taxonomy.
 *
 * @since 4.9.0
 *
 * @param string $taxonomy Taxonomy slug.
 */
    public function cleanTaxonomyCache(string $taxonomy): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the cached term objects for the given object ID.
 *
 * Upstream functions (like get_the_terms() and is_object_in_term()) are
 * responsible for populating the object-term relationship cache. The current
 * function only fetches relationship data that is already in the cache.
 *
 * @since 2.3.0
 * @since 4.7.0 Returns a `WP_Error` object if there's an error with
 *              any of the matched terms.
 *
 * @param int $id       Term object ID, for example a post, comment, or user ID.
 * @param string $taxonomy Taxonomy name.
 * @return bool|WP_Term[]|WP_Error Array of `WP_Term` objects, if cached.
 *                                 False if cache is empty for `$taxonomy` and `$id`.
 *                                 WP_Error if get_term() returns an error object for any term.
 */
    public function getObjectTermCache(int $id, string $taxonomy): bool|array|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the cache for the given term object ID(s).
 *
 * Note: Due to performance concerns, great care should be taken to only update
 * term caches when necessary. Processing time can increase exponentially depending
 * on both the number of passed term IDs and the number of taxonomies those terms
 * belong to.
 *
 * Caches will only be updated for terms not already cached.
 *
 * @since 2.3.0
 *
 * @param string|int[] $objectIds  Comma-separated list or array of term object IDs.
 * @param string|string[] $objectType The taxonomy object type or array of the same.
 * @return void|false Void on success or if the `$object_ids` parameter is empty,
 *                    false if all of the terms in `$object_ids` are already cached.
 */
    public function updateObjectTermCache(string|array $objectIds, string|array $objectType): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates terms in cache.
 *
 * @since 2.3.0
 *
 * @param WP_Term[] $terms    Array of term objects to change.
 * @param string $taxonomy Not used.
 */
    public function updateTermCache(array $terms, string $taxonomy = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets data about terms that previously shared a single term_id, but have since been split.
 *
 * @since 4.2.0
 *
 * @param int $oldTermId Term ID. This is the old, pre-split term ID.
 * @return array Array of new term IDs, keyed by taxonomy.
 */
    public function wpGetSplitTerms(int $oldTermId): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the new term ID corresponding to a previously split term.
 *
 * @since 4.2.0
 *
 * @param int $oldTermId Term ID. This is the old, pre-split term ID.
 * @param string $taxonomy    Taxonomy that the term belongs to.
 * @return int|false If a previously split term is found corresponding to the old term_id and taxonomy,
 *                   the new term_id will be returned. If no previously split term is found matching
 *                   the parameters, returns false.
 */
    public function wpGetSplitTerm(int $oldTermId, string $taxonomy): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a term is shared between multiple taxonomies.
 *
 * Shared taxonomy terms began to be split in 4.3, but failed cron tasks or
 * other delays in upgrade routines may cause shared terms to remain.
 *
 * @since 4.4.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $termId Term ID.
 * @return bool Returns false if a term is not shared between multiple taxonomies or
 *              if splitting shared taxonomy terms is finished.
 */
    public function wpTermIsShared(int $termId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates a permalink for a taxonomy term archive.
 *
 * @since 2.5.0
 *
 * @global WP_Rewrite $wp_rewrite WordPress rewrite component.
 *
 * @param \WP_Term|int|string $term     The term object, ID, or slug whose link will be retrieved.
 * @param string $taxonomy Optional. Taxonomy. Default empty.
 * @return string|\WP_Error URL of the taxonomy term archive on success, WP_Error if term does not exist.
 */
    public function getTermLink(\WP_Term|int|string $term, string $taxonomy = ''): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the taxonomies of a post with available options.
 *
 * This function can be used within the loop to display the taxonomies for a
 * post without specifying the Post ID. You can also use it outside the Loop to
 * display the taxonomies for a specific post.
 *
 * @since 2.5.0
 *
 * @param array $args {
 *     Arguments about which post to use and how to format the output. Shares all of the arguments
 *     supported by get_the_taxonomies(), in addition to the following.
 *
 *     @type int|WP_Post $post   Post ID or object to get taxonomies of. Default current post.
 *     @type string      $before Displays before the taxonomies. Default empty string.
 *     @type string      $sep    Separates each taxonomy. Default is a space.
 *     @type string      $after  Displays after the taxonomies. Default empty string.
 * }
 */
    public function theTaxonomies(array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all taxonomies associated with a post.
 *
 * This function can be used within the loop. It will also return an array of
 * the taxonomies with links to the taxonomy and name.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @param array $args {
 *           Optional. Arguments about how to format the list of taxonomies. Default empty array.
 *
 *     @type string $template      Template for displaying a taxonomy label and list of terms.
 *                                 Default is "Label: Terms."
 *     @type string $term_template Template for displaying a single term in the list. Default is the term name
 *                                 linked to its archive.
 * }
 * @return string[] List of taxonomies.
 */
    public function getTheTaxonomies(int|\WP_Post $post = 0, array $args = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all taxonomy names for the given post.
 *
 * @since 2.5.0
 *
 * @param int|\WP_Post $post Optional. Post ID or WP_Post object. Default is global $post.
 * @return string[] An array of all taxonomy names for the given post.
 */
    public function getPostTaxonomies(int|\WP_Post $post = 0): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if the given object is associated with any of the given terms.
 *
 * The given terms are checked against the object's terms' term_ids, names and slugs.
 * Terms given as integers will only be checked against the object's terms' term_ids.
 * If no terms are given, determines if object is associated with any terms in the given taxonomy.
 *
 * @since 2.7.0
 *
 * @param int $objectId ID of the object (post ID, link ID, ...).
 * @param string $taxonomy  Single taxonomy name.
 * @param int|string|int[]|string[] $terms     Optional. Term ID, name, slug, or array of such
 *                                             to check against. Default null.
 * @return bool|\WP_Error WP_Error on input error.
 */
    public function isObjectInTerm(int $objectId, string $taxonomy, int|string|array $terms = null): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines if the given object type is associated with the given taxonomy.
 *
 * @since 3.0.0
 *
 * @param string $objectType Object type string.
 * @param string $taxonomy    Single taxonomy name.
 * @return bool True if object is associated with the taxonomy, otherwise false.
 */
    public function isObjectInTaxonomy(string $objectType, string $taxonomy): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets an array of ancestor IDs for a given object.
 *
 * @since 3.1.0
 * @since 4.1.0 Introduced the `$resource_type` argument.
 *
 * @param int $objectId     Optional. The ID of the object. Default 0.
 * @param string $objectType   Optional. The type of object for which we'll be retrieving
 *                              ancestors. Accepts a post type or a taxonomy name. Default empty.
 * @param string $resourceType Optional. Type of resource $object_type is. Accepts 'post_type'
 *                              or 'taxonomy'. Default empty.
 * @return int[] An array of IDs of ancestors from lowest to highest in the hierarchy.
 */
    public function getAncestors(int $objectId = 0, string $objectType = '', string $resourceType = ''): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the term's parent's term ID.
 *
 * @since 3.1.0
 *
 * @param int $termId  Term ID.
 * @param string $taxonomy Taxonomy name.
 * @return int|false Parent term ID on success, false on failure.
 */
    public function wpGetTermTaxonomyParentId(int $termId, string $taxonomy): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks the given subset of the term hierarchy for hierarchy loops.
 * Prevents loops from forming and breaks those that it finds.
 *
 * Attached to the {@see 'wp_update_term_parent'} filter.
 *
 * @since 3.1.0
 *
 * @param int $parentTerm `term_id` of the parent for the term we're checking.
 * @param int $termId     The term we're checking.
 * @param string $taxonomy    The taxonomy of the term we're checking.
 * @return int The new parent for the term.
 */
    public function wpCheckTermHierarchyForLoops(int $parentTerm, int $termId, string $taxonomy): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a taxonomy is considered "viewable".
 *
 * @since 5.1.0
 *
 * @param string|\WP_Taxonomy $taxonomy Taxonomy name or object.
 * @return bool Whether the taxonomy should be considered viewable.
 */
    public function isTaxonomyViewable(string|\WP_Taxonomy $taxonomy): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a term is publicly viewable.
 *
 * A term is considered publicly viewable if its taxonomy is viewable.
 *
 * @since 6.1.0
 *
 * @param int|\WP_Term $term Term ID or term object.
 * @return bool Whether the term is publicly viewable.
 */
    public function isTermPubliclyViewable(int|\WP_Term $term): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the last changed time for the 'terms' cache group.
 *
 * @since 5.0.0
 */
    public function wpCacheSetTermsLastChanged(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Aborts calls to term meta if it is not supported.
 *
 * @since 5.0.0
 *
 * @param mixed $check Skip-value for whether to proceed term meta function execution.
 * @return mixed Original value of $check, or false if term meta is not supported.
 */
    public function wpCheckTermMetaSupportPrefilter(mixed $check): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path to a template.
 *
 * Used to quickly retrieve the path of a template without including the file
 * extension. It will also check the parent theme, if the file exists, with
 * the use of locate_template(). Allows for more generic template location
 * without the use of the other get_*_template() functions.
 *
 * @since 1.5.0
 *
 * @param string $type      Filename without extension.
 * @param string[] $templates An optional list of template candidates.
 * @return string Full path to template file.
 */
    public function getQueryTemplate(string $type, array $templates = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of index template in current or parent template.
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'index'.
 *
 * @since 3.0.0
 *
 * @see get_query_template()
 *
 * @return string Full path to index template file.
 */
    public function getIndexTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of 404 template in current or parent template.
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is '404'.
 *
 * @since 1.5.0
 *
 * @see get_query_template()
 *
 * @return string Full path to 404 template file.
 */
    public function get404Template(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of archive template in current or parent template.
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'archive'.
 *
 * @since 1.5.0
 *
 * @see get_query_template()
 *
 * @return string Full path to archive template file.
 */
    public function getArchiveTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of post type archive template in current or parent template.
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'archive'.
 *
 * @since 3.7.0
 *
 * @see get_archive_template()
 *
 * @return string Full path to archive template file.
 */
    public function getPostTypeArchiveTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of author template in current or parent template.
 *
 * The hierarchy for this template looks like:
 *
 * 1. author-{nicename}.php
 * 2. author-{id}.php
 * 3. author.php
 *
 * An example of this is:
 *
 * 1. author-john.php
 * 2. author-1.php
 * 3. author.php
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'author'.
 *
 * @since 1.5.0
 *
 * @see get_query_template()
 *
 * @return string Full path to author template file.
 */
    public function getAuthorTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of category template in current or parent template.
 *
 * The hierarchy for this template looks like:
 *
 * 1. category-{slug}.php
 * 2. category-{id}.php
 * 3. category.php
 *
 * An example of this is:
 *
 * 1. category-news.php
 * 2. category-2.php
 * 3. category.php
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'category'.
 *
 * @since 1.5.0
 * @since 4.7.0 The decoded form of `category-{slug}.php` was added to the top of the
 *              template hierarchy when the category slug contains multibyte characters.
 *
 * @see get_query_template()
 *
 * @return string Full path to category template file.
 */
    public function getCategoryTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of tag template in current or parent template.
 *
 * The hierarchy for this template looks like:
 *
 * 1. tag-{slug}.php
 * 2. tag-{id}.php
 * 3. tag.php
 *
 * An example of this is:
 *
 * 1. tag-wordpress.php
 * 2. tag-3.php
 * 3. tag.php
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'tag'.
 *
 * @since 2.3.0
 * @since 4.7.0 The decoded form of `tag-{slug}.php` was added to the top of the
 *              template hierarchy when the tag slug contains multibyte characters.
 *
 * @see get_query_template()
 *
 * @return string Full path to tag template file.
 */
    public function getTagTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of custom taxonomy term template in current or parent template.
 *
 * The hierarchy for this template looks like:
 *
 * 1. taxonomy-{taxonomy_slug}-{term_slug}.php
 * 2. taxonomy-{taxonomy_slug}.php
 * 3. taxonomy.php
 *
 * An example of this is:
 *
 * 1. taxonomy-location-texas.php
 * 2. taxonomy-location.php
 * 3. taxonomy.php
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'taxonomy'.
 *
 * @since 2.5.0
 * @since 4.7.0 The decoded form of `taxonomy-{taxonomy_slug}-{term_slug}.php` was added to the top of the
 *              template hierarchy when the term slug contains multibyte characters.
 *
 * @see get_query_template()
 *
 * @return string Full path to custom taxonomy term template file.
 */
    public function getTaxonomyTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of date template in current or parent template.
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'date'.
 *
 * @since 1.5.0
 *
 * @see get_query_template()
 *
 * @return string Full path to date template file.
 */
    public function getDateTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of home template in current or parent template.
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'home'.
 *
 * @since 1.5.0
 *
 * @see get_query_template()
 *
 * @return string Full path to home template file.
 */
    public function getHomeTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of front page template in current or parent template.
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'frontpage'.
 *
 * @since 3.0.0
 *
 * @see get_query_template()
 *
 * @return string Full path to front page template file.
 */
    public function getFrontPageTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of Privacy Policy page template in current or parent template.
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'privacypolicy'.
 *
 * @since 5.2.0
 *
 * @see get_query_template()
 *
 * @return string Full path to privacy policy template file.
 */
    public function getPrivacyPolicyTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of page template in current or parent template.
 *
 * Note: For block themes, use locate_block_template() function instead.
 *
 * The hierarchy for this template looks like:
 *
 * 1. {Page Template}.php
 * 2. page-{page_name}.php
 * 3. page-{id}.php
 * 4. page.php
 *
 * An example of this is:
 *
 * 1. page-templates/full-width.php
 * 2. page-about.php
 * 3. page-4.php
 * 4. page.php
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'page'.
 *
 * @since 1.5.0
 * @since 4.7.0 The decoded form of `page-{page_name}.php` was added to the top of the
 *              template hierarchy when the page name contains multibyte characters.
 *
 * @see get_query_template()
 *
 * @return string Full path to page template file.
 */
    public function getPageTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of search template in current or parent template.
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'search'.
 *
 * @since 1.5.0
 *
 * @see get_query_template()
 *
 * @return string Full path to search template file.
 */
    public function getSearchTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of single template in current or parent template. Applies to single Posts,
 * single Attachments, and single custom post types.
 *
 * The hierarchy for this template looks like:
 *
 * 1. {Post Type Template}.php
 * 2. single-{post_type}-{post_name}.php
 * 3. single-{post_type}.php
 * 4. single.php
 *
 * An example of this is:
 *
 * 1. templates/full-width.php
 * 2. single-post-hello-world.php
 * 3. single-post.php
 * 4. single.php
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'single'.
 *
 * @since 1.5.0
 * @since 4.4.0 `single-{post_type}-{post_name}.php` was added to the top of the template hierarchy.
 * @since 4.7.0 The decoded form of `single-{post_type}-{post_name}.php` was added to the top of the
 *              template hierarchy when the post name contains multibyte characters.
 * @since 4.7.0 `{Post Type Template}.php` was added to the top of the template hierarchy.
 *
 * @see get_query_template()
 *
 * @return string Full path to single template file.
 */
    public function getSingleTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves an embed template path in the current or parent template.
 *
 * The hierarchy for this template looks like:
 *
 * 1. embed-{post_type}-{post_format}.php
 * 2. embed-{post_type}.php
 * 3. embed.php
 *
 * An example of this is:
 *
 * 1. embed-post-audio.php
 * 2. embed-post.php
 * 3. embed.php
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'embed'.
 *
 * @since 4.5.0
 *
 * @see get_query_template()
 *
 * @return string Full path to embed template file.
 */
    public function getEmbedTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the path of the singular template in current or parent template.
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'singular'.
 *
 * @since 4.3.0
 *
 * @see get_query_template()
 *
 * @return string Full path to singular template file
 */
    public function getSingularTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path of attachment template in current or parent template.
 *
 * The hierarchy for this template looks like:
 *
 * 1. {mime_type}-{sub_type}.php
 * 2. {sub_type}.php
 * 3. {mime_type}.php
 * 4. attachment.php
 *
 * An example of this is:
 *
 * 1. image-jpeg.php
 * 2. jpeg.php
 * 3. image.php
 * 4. attachment.php
 *
 * The template hierarchy and template path are filterable via the {@see '$type_template_hierarchy'}
 * and {@see '$type_template'} dynamic hooks, where `$type` is 'attachment'.
 *
 * @since 2.0.0
 * @since 4.3.0 The order of the mime type logic was reversed so the hierarchy is more logical.
 *
 * @see get_query_template()
 *
 * @return string Full path to attachment template file.
 */
    public function getAttachmentTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Set up the globals used for template loading.
 *
 * @since 6.5.0
 *
 * @global string $wp_stylesheet_path Path to current theme's stylesheet directory.
 * @global string $wp_template_path   Path to current theme's template directory.
 */
    public function wpSetTemplateGlobals(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the name of the highest priority template file that exists.
 *
 * Searches in the stylesheet directory before the template directory and
 * wp-includes/theme-compat so that themes which inherit from a parent theme
 * can just overload one file.
 *
 * @since 2.7.0
 * @since 5.5.0 The `$args` parameter was added.
 *
 * @global string $wp_stylesheet_path Path to current theme's stylesheet directory.
 * @global string $wp_template_path   Path to current theme's template directory.
 *
 * @param string|array $templateNames Template file(s) to search for, in order.
 * @param bool $load           If true the template file will be loaded if it is found.
 * @param bool $loadOnce      Whether to require_once or require. Has no effect if `$load` is false.
 *                                     Default true.
 * @param array $args           Optional. Additional arguments passed to the template.
 *                                     Default empty array.
 * @return string The template filename if one is located.
 */
    public function locateTemplate(string|array $templateNames, bool $load = false, bool $loadOnce = true, array $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Requires the template file with WordPress environment.
 *
 * The globals are set up for the template file to ensure that the WordPress
 * environment is available from within the function. The query variables are
 * also available.
 *
 * @since 1.5.0
 * @since 5.5.0 The `$args` parameter was added.
 *
 * @global array      $posts
 * @global WP_Post    $post          Global post object.
 * @global bool       $wp_did_header
 * @global WP_Query   $wp_query      WordPress Query object.
 * @global WP_Rewrite $wp_rewrite    WordPress rewrite component.
 * @global wpdb       $wpdb          WordPress database abstraction object.
 * @global string     $wp_version
 * @global WP         $wp            Current WordPress environment instance.
 * @global int        $id
 * @global WP_Comment $comment       Global comment object.
 * @global int        $user_ID
 *
 * @param string $templateFile Path to template file.
 * @param bool $loadOnce      Whether to require_once or require. Default true.
 * @param array $args           Optional. Additional arguments passed to the template.
 *                               Default empty array.
 */
    public function loadTemplate(string $templateFile, bool $loadOnce = true, array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Filters the blog option to return the path for the previewed theme.
 *
 * @since 6.3.0
 *
 * @param string $currentStylesheet The current theme's stylesheet or template path.
 * @return string The previewed theme's stylesheet or template path.
 */
    public function wpGetThemePreviewPath(string $currentStylesheet = null): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds a middleware to `apiFetch` to set the theme for the preview.
 * This adds a `wp_theme_preview` URL parameter to API requests from the Site Editor, so they also respond as if the theme is set to the value of the parameter.
 *
 * @since 6.3.0
 */
    public function wpAttachThemePreviewMiddleware(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Add filters and actions to enable Block Theme Previews in the Site Editor.
 *
 * The filters and actions should be added after `pluggable.php` is included as they may
 * trigger code that uses `current_user_can()` which requires functionality from `pluggable.php`.
 *
 * @since 6.3.2
 */
    public function wpInitializeThemePreviewHooks(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets a custom slug when creating auto-draft template parts.
 *
 * This is only needed for auto-drafts created by the regular WP editor.
 * If this page is to be removed, this will not be necessary.
 *
 * @since 5.9.0
 *
 * @param int $postId Post ID.
 */
    public function wpSetUniqueSlugOnCreateTemplatePart(int $postId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns an array of WP_Theme objects based on the arguments.
 *
 * Despite advances over get_themes(), this function is quite expensive, and grows
 * linearly with additional themes. Stick to wp_get_theme() if possible.
 *
 * @since 3.4.0
 *
 * @global array $wp_theme_directories
 *
 * @param array $args {
 *     Optional. The search arguments.
 *
 *     @type mixed $errors  True to return themes with errors, false to return
 *                          themes without errors, null to return all themes.
 *                          Default false.
 *     @type mixed $allowed (Multisite) True to return only allowed themes for a site.
 *                          False to return only disallowed themes for a site.
 *                          'site' to return only site-allowed themes.
 *                          'network' to return only network-allowed themes.
 *                          Null to return all themes. Default null.
 *     @type int   $blog_id (Multisite) The blog ID used to calculate which themes
 *                          are allowed. Default 0, synonymous for the current blog.
 * }
 * @return WP_Theme[] Array of WP_Theme objects.
 */
    public function wpGetThemes(array $args = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets a WP_Theme object for a theme.
 *
 * @since 3.4.0
 *
 * @global array $wp_theme_directories
 *
 * @param string $stylesheet Optional. Directory name for the theme. Defaults to active theme.
 * @param string $themeRoot Optional. Absolute path of the theme root to look in.
 *                           If not specified, get_raw_theme_root() is used to calculate
 *                           the theme root for the $stylesheet provided (or active theme).
 * @return \WP_Theme Theme object. Be sure to check the object's exists() method
 *                  if you need to confirm the theme's existence.
 */
    public function wpGetTheme(string $stylesheet = '', string $themeRoot = ''): \WP_Theme
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Clears the cache held by get_theme_roots() and WP_Theme.
 *
 * @since 3.5.0
 * @param bool $clearUpdateCache Whether to clear the theme updates cache.
 */
    public function wpCleanThemesCache(bool $clearUpdateCache = true): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Whether a child theme is in use.
 *
 * @since 3.0.0
 * @since 6.5.0 Makes use of global template variables.
 *
 * @global string $wp_stylesheet_path Path to current theme's stylesheet directory.
 * @global string $wp_template_path   Path to current theme's template directory.
 *
 * @return bool True if a child theme is in use, false otherwise.
 */
    public function isChildTheme(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves name of the current stylesheet.
 *
 * The theme name that is currently set as the front end theme.
 *
 * For all intents and purposes, the template name and the stylesheet name
 * are going to be the same for most cases.
 *
 * @since 1.5.0
 *
 * @return string Stylesheet name.
 */
    public function getStylesheet(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves stylesheet directory path for the active theme.
 *
 * @since 1.5.0
 * @since 6.4.0 Memoizes filter execution so that it only runs once for the current theme.
 * @since 6.4.2 Memoization removed.
 *
 * @return string Path to active theme's stylesheet directory.
 */
    public function getStylesheetDirectory(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves stylesheet directory URI for the active theme.
 *
 * @since 1.5.0
 *
 * @return string URI to active theme's stylesheet directory.
 */
    public function getStylesheetDirectoryUri(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves stylesheet URI for the active theme.
 *
 * The stylesheet file name is 'style.css' which is appended to the stylesheet directory URI path.
 * See get_stylesheet_directory_uri().
 *
 * @since 1.5.0
 *
 * @return string URI to active theme's stylesheet.
 */
    public function getStylesheetUri(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the localized stylesheet URI.
 *
 * The stylesheet directory for the localized stylesheet files are located, by
 * default, in the base theme directory. The name of the locale file will be the
 * locale followed by '.css'. If that does not exist, then the text direction
 * stylesheet will be checked for existence, for example 'ltr.css'.
 *
 * The theme may change the location of the stylesheet directory by either using
 * the {@see 'stylesheet_directory_uri'} or {@see 'locale_stylesheet_uri'} filters.
 *
 * If you want to change the location of the stylesheet files for the entire
 * WordPress workflow, then change the former. If you just have the locale in a
 * separate folder, then change the latter.
 *
 * @since 2.1.0
 *
 * @global WP_Locale $wp_locale WordPress date and time locale object.
 *
 * @return string URI to active theme's localized stylesheet.
 */
    public function getLocaleStylesheetUri(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves name of the active theme.
 *
 * @since 1.5.0
 *
 * @return string Template name.
 */
    public function getTemplate(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves template directory path for the active theme.
 *
 * @since 1.5.0
 * @since 6.4.0 Memoizes filter execution so that it only runs once for the current theme.
 * @since 6.4.1 Memoization removed.
 *
 * @return string Path to active theme's template directory.
 */
    public function getTemplateDirectory(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves template directory URI for the active theme.
 *
 * @since 1.5.0
 *
 * @return string URI to active theme's template directory.
 */
    public function getTemplateDirectoryUri(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves theme roots.
 *
 * @since 2.9.0
 *
 * @global array $wp_theme_directories
 *
 * @return array|string An array of theme roots keyed by template/stylesheet
 *                      or a single theme root if all themes have the same root.
 */
    public function getThemeRoots(): array|string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a directory that contains themes.
 *
 * @since 2.9.0
 *
 * @global array $wp_theme_directories
 *
 * @param string $directory Either the full filesystem path to a theme folder
 *                          or a folder within WP_CONTENT_DIR.
 * @return bool True if successfully registered a directory that contains themes,
 *              false if the directory does not exist.
 */
    public function registerThemeDirectory(string $directory): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Searches all registered theme directories for complete and valid themes.
 *
 * @since 2.9.0
 *
 * @global array $wp_theme_directories
 *
 * @param bool $force Optional. Whether to force a new directory scan. Default false.
 * @return array|false Valid themes found on success, false on failure.
 */
    public function searchThemeDirectories(bool $force = false): array|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves path to themes directory.
 *
 * Does not have trailing slash.
 *
 * @since 1.5.0
 *
 * @global array $wp_theme_directories
 *
 * @param string $stylesheetOrTemplate Optional. The stylesheet or template name of the theme.
 *                                       Default is to leverage the main theme root.
 * @return string Themes directory path.
 */
    public function getThemeRoot(string $stylesheetOrTemplate = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves URI for themes directory.
 *
 * Does not have trailing slash.
 *
 * @since 1.5.0
 *
 * @global array $wp_theme_directories
 *
 * @param string $stylesheetOrTemplate Optional. The stylesheet or template name of the theme.
 *                                       Default is to leverage the main theme root.
 * @param string $themeRoot             Optional. The theme root for which calculations will be based,
 *                                       preventing the need for a get_raw_theme_root() call. Default empty.
 * @return string Themes directory URI.
 */
    public function getThemeRootUri(string $stylesheetOrTemplate = '', string $themeRoot = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the raw theme root relative to the content directory with no filters applied.
 *
 * @since 3.1.0
 *
 * @global array $wp_theme_directories
 *
 * @param string $stylesheetOrTemplate The stylesheet or template name of the theme.
 * @param bool $skipCache             Optional. Whether to skip the cache.
 *                                       Defaults to false, meaning the cache is used.
 * @return string Theme root.
 */
    public function getRawThemeRoot(string $stylesheetOrTemplate, bool $skipCache = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays localized stylesheet link element.
 *
 * @since 2.1.0
 */
    public function localeStylesheet(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Switches the theme.
 *
 * Accepts one argument: $stylesheet of the theme. It also accepts an additional function signature
 * of two arguments: $template then $stylesheet. This is for backward compatibility.
 *
 * @since 2.5.0
 *
 * @global array                $wp_theme_directories
 * @global WP_Customize_Manager $wp_customize
 * @global array                $sidebars_widgets
 * @global array                $wp_registered_sidebars
 *
 * @param string $stylesheet Stylesheet name.
 */
    public function switchTheme(string $stylesheet): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks that the active theme has the required files.
 *
 * Standalone themes need to have a `templates/index.html` or `index.php` template file.
 * Child themes need to have a `Template` header in the `style.css` stylesheet.
 *
 * Does not initially check the default theme, which is the fallback and should always exist.
 * But if it doesn't exist, it'll fall back to the latest core default theme that does exist.
 * Will switch theme to the fallback theme if active theme does not validate.
 *
 * You can use the {@see 'validate_current_theme'} filter to return false to disable
 * this functionality.
 *
 * @since 1.5.0
 * @since 6.0.0 Removed the requirement for block themes to have an `index.php` template.
 *
 * @see WP_DEFAULT_THEME
 *
 * @return bool
 */
    public function validateCurrentTheme(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates the theme requirements for WordPress version and PHP version.
 *
 * Uses the information from `Requires at least` and `Requires PHP` headers
 * defined in the theme's `style.css` file.
 *
 * @since 5.5.0
 * @since 5.8.0 Removed support for using `readme.txt` as a fallback.
 *
 * @param string $stylesheet Directory name for the theme.
 * @return true|\WP_Error True if requirements are met, WP_Error on failure.
 */
    public function validateThemeRequirements(string $stylesheet): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves all theme modifications.
 *
 * @since 3.1.0
 * @since 5.9.0 The return value is always an array.
 *
 * @return array Theme modifications.
 */
    public function getThemeMods(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves theme modification value for the active theme.
 *
 * If the modification name does not exist and `$default_value` is a string, then the
 * default will be passed through the {@link https://www.php.net/sprintf sprintf()}
 * PHP function with the template directory URI as the first value and the
 * stylesheet directory URI as the second value.
 *
 * @since 2.1.0
 *
 * @param string $name          Theme modification name.
 * @param mixed $defaultValue Optional. Theme modification default value. Default false.
 * @return mixed Theme modification value.
 */
    public function getThemeMod(string $name, mixed $defaultValue = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates theme modification value for the active theme.
 *
 * @since 2.1.0
 * @since 5.6.0 A return value was added.
 *
 * @param string $name  Theme modification name.
 * @param mixed $value Theme modification value.
 * @return bool True if the value was updated, false otherwise.
 */
    public function setThemeMod(string $name, mixed $value): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes theme modification name from active theme list.
 *
 * If removing the name also removes all elements, then the entire option
 * will be removed.
 *
 * @since 2.1.0
 *
 * @param string $name Theme modification name.
 */
    public function removeThemeMod(string $name): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes theme modifications option for the active theme.
 *
 * @since 2.1.0
 */
    public function removeThemeMods(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the custom header text color in 3- or 6-digit hexadecimal form.
 *
 * @since 2.1.0
 *
 * @return string Header text color in 3- or 6-digit hexadecimal form (minus the hash symbol).
 */
    public function getHeaderTextcolor(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the custom header text color in 3- or 6-digit hexadecimal form (minus the hash symbol).
 *
 * @since 2.1.0
 */
    public function headerTextcolor(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Whether to display the header text.
 *
 * @since 3.4.0
 *
 * @return bool
 */
    public function displayHeaderText(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a header image is set or not.
 *
 * @since 4.2.0
 *
 * @see get_header_image()
 *
 * @return bool Whether a header image is set or not.
 */
    public function hasHeaderImage(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves header image for custom header.
 *
 * @since 2.1.0
 *
 * @return string|false
 */
    public function getHeaderImage(): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates image tag markup for a custom header image.
 *
 * @since 4.4.0
 *
 * @param array $attr Optional. Additional attributes for the image tag. Can be used
 *                              to override the default attributes. Default empty.
 * @return string HTML image element markup or empty string on failure.
 */
    public function getHeaderImageTag(array $attr = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the image markup for a custom header image.
 *
 * @since 4.4.0
 *
 * @param array $attr Optional. Attributes for the image markup. Default empty.
 */
    public function theHeaderImageTag(array $attr = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets random header image URL from registered images in theme.
 *
 * @since 3.2.0
 *
 * @return string Path to header image.
 */
    public function getRandomHeaderImage(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if random header image is in use.
 *
 * Always true if user expressly chooses the option in Appearance > Header.
 * Also true if theme has multiple header images registered, no specific header image
 * is chosen, and theme turns on random headers with add_theme_support().
 *
 * @since 3.2.0
 *
 * @param string $type The random pool to use. Possible values include 'any',
 *                     'default', 'uploaded'. Default 'any'.
 * @return bool
 */
    public function isRandomHeaderImage(string $type = 'any'): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays header image URL.
 *
 * @since 2.1.0
 */
    public function headerImage(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the header images uploaded for the active theme.
 *
 * @since 3.2.0
 *
 * @return array
 */
    public function getUploadedHeaderImages(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the header image data.
 *
 * @since 3.4.0
 *
 * @global array $_wp_default_headers
 *
 * @return object
 */
    public function getCustomHeader(): object
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a selection of default headers to be displayed by the custom header admin UI.
 *
 * @since 3.0.0
 *
 * @global array $_wp_default_headers
 *
 * @param array $headers Array of headers keyed by a string ID. The IDs point to arrays
 *                       containing 'url', 'thumbnail_url', and 'description' keys.
 */
    public function registerDefaultHeaders(array $headers): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters default headers.
 *
 * This function must be called after register_default_headers() has already added the
 * header you want to remove.
 *
 * @see register_default_headers()
 * @since 3.0.0
 *
 * @global array $_wp_default_headers
 *
 * @param string|array $header The header string id (key of array) to remove, or an array thereof.
 * @return bool|void A single header returns true on success, false on failure.
 *                   There is currently no return value for multiple headers.
 */
    public function unregisterDefaultHeaders(string|array $header): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a header video is set or not.
 *
 * @since 4.7.0
 *
 * @see get_header_video_url()
 *
 * @return bool Whether a header video is set or not.
 */
    public function hasHeaderVideo(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves header video URL for custom header.
 *
 * Uses a local video if present, or falls back to an external video.
 *
 * @since 4.7.0
 *
 * @return string|false Header video URL or false if there is no video.
 */
    public function getHeaderVideoUrl(): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays header video URL.
 *
 * @since 4.7.0
 */
    public function theHeaderVideoUrl(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves header video settings.
 *
 * @since 4.7.0
 *
 * @return array
 */
    public function getHeaderVideoSettings(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a custom header is set or not.
 *
 * @since 4.7.0
 *
 * @return bool True if a custom header is set. False if not.
 */
    public function hasCustomHeader(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether the custom header video is eligible to show on the current page.
 *
 * @since 4.7.0
 *
 * @return bool True if the custom header video should be shown. False if not.
 */
    public function isHeaderVideoActive(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the markup for a custom header.
 *
 * The container div will always be returned in the Customizer preview.
 *
 * @since 4.7.0
 *
 * @return string The markup for a custom header on success.
 */
    public function getCustomHeaderMarkup(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints the markup for a custom header.
 *
 * A container div will always be printed in the Customizer preview.
 *
 * @since 4.7.0
 */
    public function theCustomHeaderMarkup(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves background image for custom background.
 *
 * @since 3.0.0
 *
 * @return string
 */
    public function getBackgroundImage(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays background image path.
 *
 * @since 3.0.0
 */
    public function backgroundImage(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves value for custom background color.
 *
 * @since 3.0.0
 *
 * @return string
 */
    public function getBackgroundColor(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays background color value.
 *
 * @since 3.0.0
 */
    public function backgroundColor(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Renders the Custom CSS style element.
 *
 * @since 4.7.0
 */
    public function wpCustomCssCb(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fetches the `custom_css` post for a given theme.
 *
 * @since 4.7.0
 *
 * @param string $stylesheet Optional. A theme object stylesheet name. Defaults to the active theme.
 * @return \WP_Post|null The custom_css post or null if none exists.
 */
    public function wpGetCustomCssPost(string $stylesheet = ''): \WP_Post|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Fetches the saved Custom CSS content for rendering.
 *
 * @since 4.7.0
 *
 * @param string $stylesheet Optional. A theme object stylesheet name. Defaults to the active theme.
 * @return string The Custom CSS Post content.
 */
    public function wpGetCustomCss(string $stylesheet = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the `custom_css` post for a given theme.
 *
 * Inserts a `custom_css` post when one doesn't yet exist.
 *
 * @since 4.7.0
 *
 * @param string $css CSS, stored in `post_content`.
 * @param array $args {
 *     Args.
 *
 *     @type string $preprocessed Optional. Pre-processed CSS, stored in `post_content_filtered`.
 *                                Normally empty string.
 *     @type string $stylesheet   Optional. Stylesheet (child theme) to update.
 *                                Defaults to active theme/stylesheet.
 * }
 * @return \WP_Post|\WP_Error Post on success, error on failure.
 */
    public function wpUpdateCustomCssPost(string $css, array $args = []): \WP_Post|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds callback for custom TinyMCE editor stylesheets.
 *
 * The parameter $stylesheet is the name of the stylesheet, relative to
 * the theme root. It also accepts an array of stylesheets.
 * It is optional and defaults to 'editor-style.css'.
 *
 * This function automatically adds another stylesheet with -rtl prefix, e.g. editor-style-rtl.css.
 * If that file doesn't exist, it is removed before adding the stylesheet(s) to TinyMCE.
 * If an array of stylesheets is passed to add_editor_style(),
 * RTL is only added for the first stylesheet.
 *
 * Since version 3.4 the TinyMCE body has .rtl CSS class.
 * It is a better option to use that class and add any RTL styles to the main stylesheet.
 *
 * @since 3.0.0
 *
 * @global array $editor_styles
 *
 * @param array|string $stylesheet Optional. Stylesheet name or array thereof, relative to theme root.
 *                                 Defaults to 'editor-style.css'
 */
    public function addEditorStyle(array|string $stylesheet = 'editor-style.css'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all visual editor stylesheets.
 *
 * @since 3.1.0
 *
 * @global array $editor_styles
 *
 * @return bool True on success, false if there were no stylesheets to remove.
 */
    public function removeEditorStyles(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves any registered editor stylesheet URLs.
 *
 * @since 4.0.0
 *
 * @global array $editor_styles Registered editor stylesheets
 *
 * @return string[] If registered, a list of editor stylesheet URLs.
 */
    public function getEditorStylesheets(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Expands a theme's starter content configuration using core-provided data.
 *
 * @since 4.7.0
 *
 * @return array Array of starter content.
 */
    public function getThemeStarterContent(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers theme support for a given feature.
 *
 * Must be called in the theme's functions.php file to work.
 * If attached to a hook, it must be {@see 'after_setup_theme'}.
 * The {@see 'init'} hook may be too late for some features.
 *
 * Example usage:
 *
 *     add_theme_support( 'title-tag' );
 *     add_theme_support( 'custom-logo', array(
 *         'height' => 480,
 *         'width'  => 720,
 *     ) );
 *
 * @since 2.9.0
 * @since 3.4.0 The `custom-header-uploads` feature was deprecated.
 * @since 3.6.0 The `html5` feature was added.
 * @since 3.6.1 The `html5` feature requires an array of types to be passed. Defaults to
 *              'comment-list', 'comment-form', 'search-form' for backward compatibility.
 * @since 3.9.0 The `html5` feature now also accepts 'gallery' and 'caption'.
 * @since 4.1.0 The `title-tag` feature was added.
 * @since 4.5.0 The `customize-selective-refresh-widgets` feature was added.
 * @since 4.7.0 The `starter-content` feature was added.
 * @since 5.0.0 The `responsive-embeds`, `align-wide`, `dark-editor-style`, `disable-custom-colors`,
 *              `disable-custom-font-sizes`, `editor-color-palette`, `editor-font-sizes`,
 *              `editor-styles`, and `wp-block-styles` features were added.
 * @since 5.3.0 The `html5` feature now also accepts 'script' and 'style'.
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 * @since 5.4.0 The `disable-custom-gradients` feature limits to default gradients or gradients added
 *              through `editor-gradient-presets` theme support.
 * @since 5.5.0 The `core-block-patterns` feature was added and is enabled by default.
 * @since 5.5.0 The `custom-logo` feature now also accepts 'unlink-homepage-logo'.
 * @since 5.6.0 The `post-formats` feature warns if no array is passed as the second parameter.
 * @since 5.8.0 The `widgets-block-editor` feature enables the Widgets block editor.
 * @since 5.8.0 The `block-templates` feature indicates whether a theme uses block-based templates.
 * @since 6.0.0 The `html5` feature warns if no array is passed as the second parameter.
 * @since 6.1.0 The `block-template-parts` feature allows to edit any reusable template part from site editor.
 * @since 6.1.0 The `disable-layout-styles` feature disables the default layout styles.
 * @since 6.3.0 The `link-color` feature allows to enable the link color setting.
 * @since 6.3.0 The `border` feature allows themes without theme.json to add border styles to blocks.
 * @since 6.5.0 The `appearance-tools` feature enables a few design tools for blocks,
 *              see `WP_Theme_JSON::APPEARANCE_TOOLS_OPT_INS` for a complete list.
 * @since 6.6.0 The `editor-spacing-sizes` feature was added.
 *
 * @global array $_wp_theme_features
 *
 * @param string $feature The feature being added. Likely core values include:
 *                          - 'admin-bar'
 *                          - 'align-wide'
 *                          - 'appearance-tools'
 *                          - 'automatic-feed-links'
 *                          - 'block-templates'
 *                          - 'block-template-parts'
 *                          - 'border'
 *                          - 'core-block-patterns'
 *                          - 'custom-background'
 *                          - 'custom-header'
 *                          - 'custom-line-height'
 *                          - 'custom-logo'
 *                          - 'customize-selective-refresh-widgets'
 *                          - 'custom-spacing'
 *                          - 'custom-units'
 *                          - 'dark-editor-style'
 *                          - 'disable-custom-colors'
 *                          - 'disable-custom-font-sizes'
 *                          - 'disable-custom-gradients'
 *                          - 'disable-layout-styles'
 *                          - 'editor-color-palette'
 *                          - 'editor-gradient-presets'
 *                          - 'editor-font-sizes'
 *                          - 'editor-spacing-sizes'
 *                          - 'editor-styles'
 *                          - 'featured-content'
 *                          - 'html5'
 *                          - 'link-color'
 *                          - 'menus'
 *                          - 'post-formats'
 *                          - 'post-thumbnails'
 *                          - 'responsive-embeds'
 *                          - 'starter-content'
 *                          - 'title-tag'
 *                          - 'widgets'
 *                          - 'widgets-block-editor'
 *                          - 'wp-block-styles'
 * @param mixed  ...$args Optional extra arguments to pass along with certain features.
 * @return void|false Void on success, false on failure.
 */
    public function addThemeSupport(string $feature): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the theme support arguments passed when registering that support.
 *
 * Example usage:
 *
 *     get_theme_support( 'custom-logo' );
 *     get_theme_support( 'custom-header', 'width' );
 *
 * @since 3.1.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @global array $_wp_theme_features
 *
 * @param string $feature The feature to check. See add_theme_support() for the list
 *                        of possible values.
 * @param mixed  ...$args Optional extra arguments to be checked against certain features.
 * @return mixed The array of extra arguments or the value for the registered feature.
 */
    public function getThemeSupport(string $feature): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Allows a theme to de-register its support of a certain feature
 *
 * Should be called in the theme's functions.php file. Generally would
 * be used for child themes to override support from the parent theme.
 *
 * @since 3.0.0
 *
 * @see add_theme_support()
 *
 * @param string $feature The feature being removed. See add_theme_support() for the list
 *                        of possible values.
 * @return bool|void Whether feature was removed.
 */
    public function removeThemeSupport(string $feature): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks a theme's support for a given feature.
 *
 * Example usage:
 *
 *     current_theme_supports( 'custom-logo' );
 *     current_theme_supports( 'html5', 'comment-form' );
 *
 * @since 2.9.0
 * @since 5.3.0 Formalized the existing and already documented `...$args` parameter
 *              by adding it to the function signature.
 *
 * @global array $_wp_theme_features
 *
 * @param string $feature The feature being checked. See add_theme_support() for the list
 *                        of possible values.
 * @param mixed  ...$args Optional extra arguments to be checked against certain features.
 * @return bool True if the active theme supports the feature, false otherwise.
 */
    public function currentThemeSupports(string $feature): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks a theme's support for a given feature before loading the functions which implement it.
 *
 * @since 2.9.0
 *
 * @param string $feature The feature being checked. See add_theme_support() for the list
 *                        of possible values.
 * @param string $file    Path to the file.
 * @return bool True if the active theme supports the supplied feature, false otherwise.
 */
    public function requireIfThemeSupports(string $feature, string $file): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers a theme feature for use in add_theme_support().
 *
 * This does not indicate that the active theme supports the feature, it only describes
 * the feature's supported options.
 *
 * @since 5.5.0
 *
 * @see add_theme_support()
 *
 * @global array $_wp_registered_theme_features
 *
 * @param string $feature The name uniquely identifying the feature. See add_theme_support()
 *                        for the list of possible values.
 * @param array $args {
 *     Data used to describe the theme.
 *
 *     @type string     $type         The type of data associated with this feature.
 *                                    Valid values are 'string', 'boolean', 'integer',
 *                                    'number', 'array', and 'object'. Defaults to 'boolean'.
 *     @type bool       $variadic     Does this feature utilize the variadic support
 *                                    of add_theme_support(), or are all arguments specified
 *                                    as the second parameter. Must be used with the "array" type.
 *     @type string     $description  A short description of the feature. Included in
 *                                    the Themes REST API schema. Intended for developers.
 *     @type bool|array $show_in_rest {
 *         Whether this feature should be included in the Themes REST API endpoint.
 *         Defaults to not being included. When registering an 'array' or 'object' type,
 *         this argument must be an array with the 'schema' key.
 *
 *         @type array    $schema           Specifies the JSON Schema definition describing
 *                                          the feature. If any objects in the schema do not include
 *                                          the 'additionalProperties' keyword, it is set to false.
 *         @type string   $name             An alternate name to be used as the property name
 *                                          in the REST API.
 *         @type callable $prepare_callback A function used to format the theme support in the REST API.
 *                                          Receives the raw theme support value.
 *      }
 * }
 * @return true|\WP_Error True if the theme feature was successfully registered, a WP_Error object if not.
 */
    public function registerThemeFeature(string $feature, array $args = []): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the list of registered theme features.
 *
 * @since 5.5.0
 *
 * @global array $_wp_registered_theme_features
 *
 * @return array[] List of theme features, keyed by their name.
 */
    public function getRegisteredThemeFeatures(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the registration config for a theme feature.
 *
 * @since 5.5.0
 *
 * @global array $_wp_registered_theme_features
 *
 * @param string $feature The feature name. See add_theme_support() for the list
 *                        of possible values.
 * @return array|null The registration args, or null if the feature was not registered.
 */
    public function getRegisteredThemeFeature(string $feature): array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if a theme has been changed and runs 'after_switch_theme' hook on the next WP load.
 *
 * See {@see 'after_switch_theme'}.
 *
 * @since 3.3.0
 */
    public function checkThemeSwitched(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a URL to load the Customizer.
 *
 * @since 3.4.0
 *
 * @param string $stylesheet Optional. Theme to customize. Defaults to active theme.
 *                           The theme's stylesheet will be urlencoded if necessary.
 * @return string
 */
    public function wpCustomizeUrl(string $stylesheet = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints a script to check whether or not the Customizer is supported,
 * and apply either the no-customize-support or customize-support class
 * to the body.
 *
 * This function MUST be called inside the body tag.
 *
 * Ideally, call this function immediately after the body tag is opened.
 * This prevents a flash of unstyled content.
 *
 * It is also recommended that you add the "no-customize-support" class
 * to the body tag by default.
 *
 * @since 3.4.0
 * @since 4.7.0 Support for IE8 and below is explicitly removed via conditional comments.
 * @since 5.5.0 IE8 and older are no longer supported.
 */
    public function wpCustomizeSupportScript(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Whether the site is being previewed in the Customizer.
 *
 * @since 4.0.0
 *
 * @global WP_Customize_Manager $wp_customize Customizer instance.
 *
 * @return bool True if the site is being previewed in the Customizer, false otherwise.
 */
    public function isCustomizePreview(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates the initial theme features when the 'setup_theme' action is fired.
 *
 * See {@see 'setup_theme'}.
 *
 * @since 5.5.0
 * @since 6.0.1 The `block-templates` feature was added.
 */
    public function createInitialThemeFeatures(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns whether the active theme is a block-based theme or not.
 *
 * @since 5.9.0
 *
 * @return bool Whether the active theme is a block-based theme or not.
 */
    public function wpIsBlockTheme(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Given an element name, returns a class name.
 *
 * Alias of WP_Theme_JSON::get_element_class_name.
 *
 * @since 6.1.0
 *
 * @param string $element The name of the element.
 *
 * @return string The name of the class.
 */
    public function wpThemeGetElementClassName(string $element): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks WordPress version against the newest version.
 *
 * The WordPress version, PHP version, and locale is sent.
 *
 * Checks against the WordPress server at api.wordpress.org. Will only check
 * if WordPress isn't installing.
 *
 * @since 2.3.0
 *
 * @global string $wp_version       Used to check against the newest WordPress version.
 * @global wpdb   $wpdb             WordPress database abstraction object.
 * @global string $wp_local_package Locale code of the package.
 *
 * @param array $extraStats Extra statistics to report to the WordPress.org API.
 * @param bool $forceCheck Whether to bypass the transient cache and force a fresh update check.
 *                           Defaults to false, true if $extra_stats is set.
 */
    public function wpVersionCheck(array $extraStats = [], bool $forceCheck = false): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks for available updates to plugins based on the latest versions hosted on WordPress.org.
 *
 * Despite its name this function does not actually perform any updates, it only checks for available updates.
 *
 * A list of all plugins installed is sent to WP, along with the site locale.
 *
 * Checks against the WordPress server at api.wordpress.org. Will only check
 * if WordPress isn't installing.
 *
 * @since 2.3.0
 *
 * @global string $wp_version The WordPress version string.
 *
 * @param array $extraStats Extra statistics to report to the WordPress.org API.
 */
    public function wpUpdatePlugins(array $extraStats = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks for available updates to themes based on the latest versions hosted on WordPress.org.
 *
 * Despite its name this function does not actually perform any updates, it only checks for available updates.
 *
 * A list of all themes installed is sent to WP, along with the site locale.
 *
 * Checks against the WordPress server at api.wordpress.org. Will only check
 * if WordPress isn't installing.
 *
 * @since 2.7.0
 *
 * @global string $wp_version The WordPress version string.
 *
 * @param array $extraStats Extra statistics to report to the WordPress.org API.
 */
    public function wpUpdateThemes(array $extraStats = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Performs WordPress automatic background updates.
 *
 * Updates WordPress core plus any plugins and themes that have automatic updates enabled.
 *
 * @since 3.7.0
 */
    public function wpMaybeAutoUpdate(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of all language updates available.
 *
 * @since 3.7.0
 *
 * @return object[] Array of translation objects that have available updates.
 */
    public function wpGetTranslationUpdates(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Collects counts and UI strings for available updates.
 *
 * @since 3.3.0
 *
 * @return array
 */
    public function wpGetUpdateData(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Schedules core, theme, and plugin update checks.
 *
 * @since 3.1.0
 */
    public function wpScheduleUpdateChecks(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Clears existing update caches for plugins, themes, and core.
 *
 * @since 4.1.0
 */
    public function wpCleanUpdateCache(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Schedules the removal of all contents in the temporary backup directory.
 *
 * @since 6.3.0
 */
    public function wpDeleteAllTempBackups(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Authenticates and logs a user in with 'remember' capability.
 *
 * The credentials is an array that has 'user_login', 'user_password', and
 * 'remember' indices. If the credentials is not given, then the log in form
 * will be assumed and used if set.
 *
 * The various authentication cookies will be set by this function and will be
 * set for a longer period depending on if the 'remember' credential is set to
 * true.
 *
 * Note: wp_signon() doesn't handle setting the current user. This means that if the
 * function is called before the {@see 'init'} hook is fired, is_user_logged_in() will
 * evaluate as false until that point. If is_user_logged_in() is needed in conjunction
 * with wp_signon(), wp_set_current_user() should be called explicitly.
 *
 * @since 2.5.0
 *
 * @global string $auth_secure_cookie
 * @global wpdb   $wpdb               WordPress database abstraction object.
 *
 * @param array $credentials {
 *     Optional. User info in order to sign on.
 *
 *     @type string $user_login    Username.
 *     @type string $user_password User password.
 *     @type bool   $remember      Whether to 'remember' the user. Increases the time
 *                                 that the cookie will be kept. Default false.
 * }
 * @param string|bool $secureCookie Optional. Whether to use secure cookie.
 * @return \WP_User|\WP_Error WP_User on success, WP_Error on failure.
 */
    public function wpSignon(array $credentials = [], string|bool $secureCookie = ''): \WP_User|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Authenticates a user, confirming the username and password are valid.
 *
 * @since 2.8.0
 *
 * @param \WP_User|\WP_Error|null $user     WP_User or WP_Error object from a previous callback. Default null.
 * @param string $username Username for authentication.
 * @param string $password Password for authentication.
 * @return \WP_User|\WP_Error WP_User on success, WP_Error on failure.
 */
    public function wpAuthenticateUsernamePassword(\WP_User|\WP_Error|null $user, string $username, string $password): \WP_User|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Authenticates a user using the email and password.
 *
 * @since 4.5.0
 *
 * @param \WP_User|\WP_Error|null $user     WP_User or WP_Error object if a previous
 *                                        callback failed authentication.
 * @param string $email    Email address for authentication.
 * @param string $password Password for authentication.
 * @return \WP_User|\WP_Error WP_User on success, WP_Error on failure.
 */
    public function wpAuthenticateEmailPassword(\WP_User|\WP_Error|null $user, string $email, string $password): \WP_User|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Authenticates the user using the WordPress auth cookie.
 *
 * @since 2.8.0
 *
 * @global string $auth_secure_cookie
 *
 * @param \WP_User|\WP_Error|null $user     WP_User or WP_Error object from a previous callback. Default null.
 * @param string $username Username. If not empty, cancels the cookie authentication.
 * @param string $password Password. If not empty, cancels the cookie authentication.
 * @return \WP_User|\WP_Error WP_User on success, WP_Error on failure.
 */
    public function wpAuthenticateCookie(\WP_User|\WP_Error|null $user, string $username, string $password): \WP_User|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Authenticates the user using an application password.
 *
 * @since 5.6.0
 *
 * @param \WP_User|\WP_Error|null $inputUser WP_User or WP_Error object if a previous
 *                                          callback failed authentication.
 * @param string $username   Username for authentication.
 * @param string $password   Password for authentication.
 * @return \WP_User|\WP_Error|null WP_User on success, WP_Error on failure, null if
 *                               null is passed in and this isn't an API request.
 */
    public function wpAuthenticateApplicationPassword(\WP_User|\WP_Error|null $inputUser, string $username, string $password): \WP_User|\WP_Error|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates the application password credentials passed via Basic Authentication.
 *
 * @since 5.6.0
 *
 * @param int|false $inputUser User ID if one has been determined, false otherwise.
 * @return int|false The authenticated user ID if successful, false otherwise.
 */
    public function wpValidateApplicationPassword(int|false $inputUser): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * For Multisite blogs, checks if the authenticated user has been marked as a
 * spammer, or if the user's primary blog has been marked as spam.
 *
 * @since 3.7.0
 *
 * @param \WP_User|\WP_Error|null $user WP_User or WP_Error object from a previous callback. Default null.
 * @return \WP_User|\WP_Error WP_User on success, WP_Error if the user is considered a spammer.
 */
    public function wpAuthenticateSpamCheck(\WP_User|\WP_Error|null $user): \WP_User|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates the logged-in cookie.
 *
 * Checks the logged-in cookie if the previous auth cookie could not be
 * validated and parsed.
 *
 * This is a callback for the {@see 'determine_current_user'} filter, rather than API.
 *
 * @since 3.9.0
 *
 * @param int|false $userId The user ID (or false) as received from
 *                           the `determine_current_user` filter.
 * @return int|false User ID if validated, false otherwise. If a user ID from
 *                   an earlier filter callback is received, that value is returned.
 */
    public function wpValidateLoggedInCookie(int|false $userId): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the number of posts a user has written.
 *
 * @since 3.0.0
 * @since 4.1.0 Added `$post_type` argument.
 * @since 4.3.0 Added `$public_only` argument. Added the ability to pass an array
 *              of post types to `$post_type`.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $userid      User ID.
 * @param array|string $postType   Optional. Single post type or array of post types to count the number of posts for. Default 'post'.
 * @param bool $publicOnly Optional. Whether to only return counts for public posts. Default false.
 * @return string Number of posts the user has written in this post type.
 */
    public function countUserPosts(int $userid, array|string $postType = 'post', bool $publicOnly = false): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the number of posts written by a list of users.
 *
 * @since 3.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int[] $users       Array of user IDs.
 * @param string|string[] $postType   Optional. Single post type or array of post types to check. Defaults to 'post'.
 * @param bool $publicOnly Optional. Only return counts for public posts.  Defaults to false.
 * @return string[] Amount of posts each user has written, as strings, keyed by user ID.
 */
    public function countManyUsersPosts(array $users, string|array $postType = 'post', bool $publicOnly = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the current user's ID.
 *
 * @since MU (3.0.0)
 *
 * @return int The current user's ID, or 0 if no user is logged in.
 */
    public function getCurrentUserId(): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves user option that can be either per Site or per Network.
 *
 * If the user ID is not given, then the current user will be used instead. If
 * the user ID is given, then the user data will be retrieved. The filter for
 * the result, will also pass the original option name and finally the user data
 * object as the third parameter.
 *
 * The option will first check for the per site name and then the per Network name.
 *
 * @since 2.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $option     User option name.
 * @param int $user       Optional. User ID.
 * @param string $deprecated Use get_option() to check for an option in the options table.
 * @return mixed User option value on success, false on failure.
 */
    public function getUserOption(string $option, int $user = 0, string $deprecated = ''): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates user option with global blog capability.
 *
 * User options are just like user metadata except that they have support for
 * global blog options. If the 'is_global' parameter is false, which it is by default,
 * it will prepend the WordPress table prefix to the option name.
 *
 * Deletes the user option if $newvalue is empty.
 *
 * @since 2.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $userId     User ID.
 * @param string $optionName User option name.
 * @param mixed $newvalue    User option value.
 * @param bool $isGlobal   Optional. Whether option name is global or blog specific.
 *                            Default false (blog specific).
 * @return int|bool User meta ID if the option didn't exist, true on successful update,
 *                  false on failure.
 */
    public function updateUserOption(int $userId, string $optionName, mixed $newvalue, bool $isGlobal = false): int|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Deletes user option with global blog capability.
 *
 * User options are just like user metadata except that they have support for
 * global blog options. If the 'is_global' parameter is false, which it is by default,
 * it will prepend the WordPress table prefix to the option name.
 *
 * @since 3.0.0
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $userId     User ID
 * @param string $optionName User option name.
 * @param bool $isGlobal   Optional. Whether option name is global or blog specific.
 *                            Default false (blog specific).
 * @return bool True on success, false on failure.
 */
    public function deleteUserOption(int $userId, string $optionName, bool $isGlobal = false): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves list of users matching criteria.
 *
 * @since 3.1.0
 *
 * @see WP_User_Query
 *
 * @param array $args Optional. Arguments to retrieve users. See WP_User_Query::prepare_query()
 *                    for more information on accepted arguments.
 * @return array List of users.
 */
    public function getUsers(array $args = []): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Lists all the users of the site, with several options available.
 *
 * @since 5.9.0
 *
 * @param string|array $args {
 *     Optional. Array or string of default arguments.
 *
 *     @type string $orderby       How to sort the users. Accepts 'nicename', 'email', 'url', 'registered',
 *                                 'user_nicename', 'user_email', 'user_url', 'user_registered', 'name',
 *                                 'display_name', 'post_count', 'ID', 'meta_value', 'user_login'. Default 'name'.
 *     @type string $order         Sorting direction for $orderby. Accepts 'ASC', 'DESC'. Default 'ASC'.
 *     @type int    $number        Maximum users to return or display. Default empty (all users).
 *     @type bool   $exclude_admin Whether to exclude the 'admin' account, if it exists. Default false.
 *     @type bool   $show_fullname Whether to show the user's full name. Default false.
 *     @type string $feed          If not empty, show a link to the user's feed and use this text as the alt
 *                                 parameter of the link. Default empty.
 *     @type string $feed_image    If not empty, show a link to the user's feed and use this image URL as
 *                                 clickable anchor. Default empty.
 *     @type string $feed_type     The feed type to link to, such as 'rss2'. Defaults to default feed type.
 *     @type bool   $echo          Whether to output the result or instead return it. Default true.
 *     @type string $style         If 'list', each user is wrapped in an `<li>` element, otherwise the users
 *                                 will be separated by commas.
 *     @type bool   $html          Whether to list the items in HTML form or plaintext. Default true.
 *     @type string $exclude       An array, comma-, or space-separated list of user IDs to exclude. Default empty.
 *     @type string $include       An array, comma-, or space-separated list of user IDs to include. Default empty.
 * }
 * @return string|null The output if echo is false. Otherwise null.
 */
    public function wpListUsers(string|array $args = []): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the sites a user belongs to.
 *
 * @since 3.0.0
 * @since 4.7.0 Converted to use `get_sites()`.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $userId User ID
 * @param bool $all     Whether to retrieve all sites, or only sites that are not
 *                      marked as deleted, archived, or spam.
 * @return object[] A list of the user's sites. An empty array if the user doesn't exist
 *                  or belongs to no sites.
 */
    public function getBlogsOfUser(int $userId, bool $all = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds out whether a user is a member of a given blog.
 *
 * @since MU (3.0.0)
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int $userId Optional. The unique ID of the user. Defaults to the current user.
 * @param int $blogId Optional. ID of the blog to check. Defaults to the current site.
 * @return bool
 */
    public function isUserMemberOfBlog(int $userId = 0, int $blogId = 0): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds meta data to a user.
 *
 * @since 3.0.0
 *
 * @param int $userId    User ID.
 * @param string $metaKey   Metadata name.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param bool $unique     Optional. Whether the same key should not be added.
 *                           Default false.
 * @return int|false Meta ID on success, false on failure.
 */
    public function addUserMeta(int $userId, string $metaKey, mixed $metaValue, bool $unique = false): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes metadata matching criteria from a user.
 *
 * You can match based on the key, or key and value. Removing based on key and
 * value, will keep from removing duplicate metadata with the same key. It also
 * allows removing all metadata matching key, if needed.
 *
 * @since 3.0.0
 *
 * @link https://developer.wordpress.org/reference/functions/delete_user_meta/
 *
 * @param int $userId    User ID
 * @param string $metaKey   Metadata name.
 * @param mixed $metaValue Optional. Metadata value. If provided,
 *                           rows will only be removed that match the value.
 *                           Must be serializable if non-scalar. Default empty.
 * @return bool True on success, false on failure.
 */
    public function deleteUserMeta(int $userId, string $metaKey, mixed $metaValue = ''): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves user meta field for a user.
 *
 * @since 3.0.0
 *
 * @link https://developer.wordpress.org/reference/functions/get_user_meta/
 *
 * @param int $userId User ID.
 * @param string $key     Optional. The meta key to retrieve. By default,
 *                        returns data for all keys.
 * @param bool $single  Optional. Whether to return a single value.
 *                        This parameter has no effect if `$key` is not specified.
 *                        Default false.
 * @return mixed An array of values if `$single` is false.
 *               The value of meta data field if `$single` is true.
 *               False for an invalid `$user_id` (non-numeric, zero, or negative value).
 *               An empty string if a valid but non-existing user ID is passed.
 */
    public function getUserMeta(int $userId, string $key = '', bool $single = false): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates user meta field based on user ID.
 *
 * Use the $prev_value parameter to differentiate between meta fields with the
 * same key and user ID.
 *
 * If the meta field for the user does not exist, it will be added.
 *
 * @since 3.0.0
 *
 * @link https://developer.wordpress.org/reference/functions/update_user_meta/
 *
 * @param int $userId    User ID.
 * @param string $metaKey   Metadata key.
 * @param mixed $metaValue Metadata value. Must be serializable if non-scalar.
 * @param mixed $prevValue Optional. Previous value to check before updating.
 *                           If specified, only update existing metadata entries with
 *                           this value. Otherwise, update all entries. Default empty.
 * @return int|bool Meta ID if the key didn't exist, true on successful update,
 *                  false on failure or if the value passed to the function
 *                  is the same as the one that is already in the database.
 */
    public function updateUserMeta(int $userId, string $metaKey, mixed $metaValue, mixed $prevValue = ''): int|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Counts number of users who have each of the user roles.
 *
 * Assumes there are neither duplicated nor orphaned capabilities meta_values.
 * Assumes role names are unique phrases. Same assumption made by WP_User_Query::prepare_query()
 * Using $strategy = 'time' this is CPU-intensive and should handle around 10^7 users.
 * Using $strategy = 'memory' this is memory-intensive and should handle around 10^5 users, but see WP Bug #12257.
 *
 * @since 3.0.0
 * @since 4.4.0 The number of users with no role is now included in the `none` element.
 * @since 4.9.0 The `$site_id` parameter was added to support multisite.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param string $strategy Optional. The computational strategy to use when counting the users.
 *                           Accepts either 'time' or 'memory'. Default 'time'.
 * @param int|null $siteId  Optional. The site ID to count users for. Defaults to the current site.
 * @return array {
 *     User counts.
 *
 *     @type int   $total_users Total number of users on the site.
 *     @type int[] $avail_roles Array of user counts keyed by user role.
 * }
 */
    public function countUsers(string $strategy = 'time', int|null $siteId = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the number of active users in your installation.
 *
 * Note that on a large site the count may be cached and only updated twice daily.
 *
 * @since MU (3.0.0)
 * @since 4.8.0 The `$network_id` parameter has been added.
 * @since 6.0.0 Moved to wp-includes/user.php.
 *
 * @param int|null $networkId ID of the network. Defaults to the current network.
 * @return int Number of active users on the network.
 */
    public function getUserCount(int|null $networkId = null): int
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the total count of users on the site if live user counting is enabled.
 *
 * @since 6.0.0
 *
 * @param int|null $networkId ID of the network. Defaults to the current network.
 * @return bool Whether the update was successful.
 */
    public function wpMaybeUpdateUserCounts(int|null $networkId = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates the total count of users on the site.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 * @since 6.0.0
 *
 * @param int|null $networkId ID of the network. Defaults to the current network.
 * @return bool Whether the update was successful.
 */
    public function wpUpdateUserCounts(int|null $networkId = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Schedules a recurring recalculation of the total count of users.
 *
 * @since 6.0.0
 */
    public function wpScheduleUpdateUserCounts(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the site has a large number of users.
 *
 * The default criteria for a large site is more than 10,000 users.
 *
 * @since 6.0.0
 *
 * @param int|null $networkId ID of the network. Defaults to the current network.
 * @return bool Whether the site has a large number of users.
 */
    public function wpIsLargeUserCount(int|null $networkId = null): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets up global user vars.
 *
 * Used by wp_set_current_user() for back compat. Might be deprecated in the future.
 *
 * @since 2.0.4
 *
 * @global string  $user_login    The user username for logging in
 * @global WP_User $userdata      User data.
 * @global int     $user_level    The level of the user
 * @global int     $user_ID       The ID of the user
 * @global string  $user_email    The email address of the user
 * @global string  $user_url      The url in the user's profile
 * @global string  $user_identity The display name of the user
 *
 * @param int $forUserId Optional. User ID to set up global data. Default 0.
 */
    public function setupUserdata(int $forUserId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates dropdown HTML content of users.
 *
 * The content can either be displayed, which it is by default or retrieved by
 * setting the 'echo' argument. The 'include' and 'exclude' arguments do not
 * need to be used; all users will be displayed in that case. Only one can be
 * used, either 'include' or 'exclude', but not both.
 *
 * The available arguments are as follows:
 *
 * @since 2.3.0
 * @since 4.5.0 Added the 'display_name_with_login' value for 'show'.
 * @since 4.7.0 Added the 'role', 'role__in', and 'role__not_in' parameters.
 * @since 5.9.0 Added the 'capability', 'capability__in', and 'capability__not_in' parameters.
 *              Deprecated the 'who' parameter.
 *
 * @param array|string $args {
 *     Optional. Array or string of arguments to generate a drop-down of users.
 *     See WP_User_Query::prepare_query() for additional available arguments.
 *
 *     @type string          $show_option_all         Text to show as the drop-down default (all).
 *                                                    Default empty.
 *     @type string          $show_option_none        Text to show as the drop-down default when no
 *                                                    users were found. Default empty.
 *     @type int|string      $option_none_value       Value to use for `$show_option_none` when no users
 *                                                    were found. Default -1.
 *     @type string          $hide_if_only_one_author Whether to skip generating the drop-down
 *                                                    if only one user was found. Default empty.
 *     @type string          $orderby                 Field to order found users by. Accepts user fields.
 *                                                    Default 'display_name'.
 *     @type string          $order                   Whether to order users in ascending or descending
 *                                                    order. Accepts 'ASC' (ascending) or 'DESC' (descending).
 *                                                    Default 'ASC'.
 *     @type int[]|string    $include                 Array or comma-separated list of user IDs to include.
 *                                                    Default empty.
 *     @type int[]|string    $exclude                 Array or comma-separated list of user IDs to exclude.
 *                                                    Default empty.
 *     @type bool|int        $multi                   Whether to skip the ID attribute on the 'select' element.
 *                                                    Accepts 1|true or 0|false. Default 0|false.
 *     @type string          $show                    User data to display. If the selected item is empty
 *                                                    then the 'user_login' will be displayed in parentheses.
 *                                                    Accepts any user field, or 'display_name_with_login' to show
 *                                                    the display name with user_login in parentheses.
 *                                                    Default 'display_name'.
 *     @type int|bool        $echo                    Whether to echo or return the drop-down. Accepts 1|true (echo)
 *                                                    or 0|false (return). Default 1|true.
 *     @type int             $selected                Which user ID should be selected. Default 0.
 *     @type bool            $include_selected        Whether to always include the selected user ID in the drop-
 *                                                    down. Default false.
 *     @type string          $name                    Name attribute of select element. Default 'user'.
 *     @type string          $id                      ID attribute of the select element. Default is the value of `$name`.
 *     @type string          $class                   Class attribute of the select element. Default empty.
 *     @type int             $blog_id                 ID of blog (Multisite only). Default is ID of the current blog.
 *     @type string          $who                     Deprecated, use `$capability` instead.
 *                                                    Which type of users to query. Accepts only an empty string or
 *                                                    'authors'. Default empty (all users).
 *     @type string|string[] $role                    An array or a comma-separated list of role names that users
 *                                                    must match to be included in results. Note that this is
 *                                                    an inclusive list: users must match *each* role. Default empty.
 *     @type string[]        $role__in                An array of role names. Matched users must have at least one
 *                                                    of these roles. Default empty array.
 *     @type string[]        $role__not_in            An array of role names to exclude. Users matching one or more
 *                                                    of these roles will not be included in results. Default empty array.
 *     @type string|string[] $capability              An array or a comma-separated list of capability names that users
 *                                                    must match to be included in results. Note that this is
 *                                                    an inclusive list: users must match *each* capability.
 *                                                    Does NOT work for capabilities not in the database or filtered
 *                                                    via {@see 'map_meta_cap'}. Default empty.
 *     @type string[]        $capability__in          An array of capability names. Matched users must have at least one
 *                                                    of these capabilities.
 *                                                    Does NOT work for capabilities not in the database or filtered
 *                                                    via {@see 'map_meta_cap'}. Default empty array.
 *     @type string[]        $capability__not_in      An array of capability names to exclude. Users matching one or more
 *                                                    of these capabilities will not be included in results.
 *                                                    Does NOT work for capabilities not in the database or filtered
 *                                                    via {@see 'map_meta_cap'}. Default empty array.
 * }
 * @return string HTML dropdown list of users.
 */
    public function wpDropdownUsers(array|string $args = ''): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sanitizes user field based on context.
 *
 * Possible context values are:  'raw', 'edit', 'db', 'display', 'attribute' and 'js'. The
 * 'display' context is used by default. 'attribute' and 'js' contexts are treated like 'display'
 * when calling filters.
 *
 * @since 2.3.0
 *
 * @param string $field   The user Object field name.
 * @param mixed $value   The user Object value.
 * @param int $userId User ID.
 * @param string $context How to sanitize user fields. Looks for 'raw', 'edit', 'db', 'display',
 *                        'attribute' and 'js'.
 * @return mixed Sanitized value.
 */
    public function sanitizeUserField(string $field, mixed $value, int $userId, string $context): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates all user caches.
 *
 * @since 3.0.0
 *
 * @param object|WP_User $user User object or database row to be cached
 * @return void|false Void on success, false on failure.
 */
    public function updateUserCaches(object $user): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Cleans all user caches.
 *
 * @since 3.0.0
 * @since 4.4.0 'clean_user_cache' action was added.
 * @since 6.2.0 User metadata caches are now cleared.
 *
 * @param \WP_User|int $user User object or ID to be cleaned from the cache
 */
    public function cleanUserCache(\WP_User|int $user): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the given username exists.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.0.0
 *
 * @param string $username The username to check for existence.
 * @return int|false The user ID on success, false on failure.
 */
    public function usernameExists(string $username): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the given email exists.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.1.0
 *
 * @param string $email The email to check for existence.
 * @return int|false The user ID on success, false on failure.
 */
    public function emailExists(string $email): int|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks whether a username is valid.
 *
 * @since 2.0.1
 * @since 4.4.0 Empty sanitized usernames are now considered invalid.
 *
 * @param string $username Username.
 * @return bool Whether username given is valid.
 */
    public function validateUsername(string $username): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Inserts a user into the database.
 *
 * Most of the `$userdata` array fields have filters associated with the values. Exceptions are
 * 'ID', 'rich_editing', 'syntax_highlighting', 'comment_shortcuts', 'admin_color', 'use_ssl',
 * 'user_registered', 'user_activation_key', 'spam', and 'role'. The filters have the prefix
 * 'pre_user_' followed by the field name. An example using 'description' would have the filter
 * called 'pre_user_description' that can be hooked into.
 *
 * @since 2.0.0
 * @since 3.6.0 The `aim`, `jabber`, and `yim` fields were removed as default user contact
 *              methods for new installations. See wp_get_user_contact_methods().
 * @since 4.7.0 The `locale` field can be passed to `$userdata`.
 * @since 5.3.0 The `user_activation_key` field can be passed to `$userdata`.
 * @since 5.3.0 The `spam` field can be passed to `$userdata` (Multisite only).
 * @since 5.9.0 The `meta_input` field can be passed to `$userdata` to allow addition of user meta data.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param array|object|WP_User $userdata {
 *     An array, object, or WP_User object of user data arguments.
 *
 *     @type int    $ID                   User ID. If supplied, the user will be updated.
 *     @type string $user_pass            The plain-text user password for new users.
 *                                        Hashed password for existing users.
 *     @type string $user_login           The user's login username.
 *     @type string $user_nicename        The URL-friendly user name.
 *     @type string $user_url             The user URL.
 *     @type string $user_email           The user email address.
 *     @type string $display_name         The user's display name.
 *                                        Default is the user's username.
 *     @type string $nickname             The user's nickname.
 *                                        Default is the user's username.
 *     @type string $first_name           The user's first name. For new users, will be used
 *                                        to build the first part of the user's display name
 *                                        if `$display_name` is not specified.
 *     @type string $last_name            The user's last name. For new users, will be used
 *                                        to build the second part of the user's display name
 *                                        if `$display_name` is not specified.
 *     @type string $description          The user's biographical description.
 *     @type string $rich_editing         Whether to enable the rich-editor for the user.
 *                                        Accepts 'true' or 'false' as a string literal,
 *                                        not boolean. Default 'true'.
 *     @type string $syntax_highlighting  Whether to enable the rich code editor for the user.
 *                                        Accepts 'true' or 'false' as a string literal,
 *                                        not boolean. Default 'true'.
 *     @type string $comment_shortcuts    Whether to enable comment moderation keyboard
 *                                        shortcuts for the user. Accepts 'true' or 'false'
 *                                        as a string literal, not boolean. Default 'false'.
 *     @type string $admin_color          Admin color scheme for the user. Default 'fresh'.
 *     @type bool   $use_ssl              Whether the user should always access the admin over
 *                                        https. Default false.
 *     @type string $user_registered      Date the user registered in UTC. Format is 'Y-m-d H:i:s'.
 *     @type string $user_activation_key  Password reset key. Default empty.
 *     @type bool   $spam                 Multisite only. Whether the user is marked as spam.
 *                                        Default false.
 *     @type string $show_admin_bar_front Whether to display the Admin Bar for the user
 *                                        on the site's front end. Accepts 'true' or 'false'
 *                                        as a string literal, not boolean. Default 'true'.
 *     @type string $role                 User's role.
 *     @type string $locale               User's locale. Default empty.
 *     @type array  $meta_input           Array of custom user meta values keyed by meta key.
 *                                        Default empty.
 * }
 * @return int|\WP_Error The newly created user's ID or a WP_Error object if the user could not
 *                      be created.
 */
    public function wpInsertUser(array|object $userdata): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Updates a user in the database.
 *
 * It is possible to update a user's password by specifying the 'user_pass'
 * value in the $userdata parameter array.
 *
 * If current user's password is being updated, then the cookies will be
 * cleared.
 *
 * @since 2.0.0
 *
 * @see wp_insert_user() For what fields can be set in $userdata.
 *
 * @param array|object|WP_User $userdata An array of user data or a user object of type stdClass or WP_User.
 * @return int|\WP_Error The updated user's ID or a WP_Error object if the user could not be updated.
 */
    public function wpUpdateUser(array|object $userdata): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Provides a simpler way of inserting a user into the database.
 *
 * Creates a new user with just the username, password, and email. For more
 * complex user creation use wp_insert_user() to specify more information.
 *
 * @since 2.0.0
 *
 * @see wp_insert_user() More complete way to create a new user.
 *
 * @param string $username The user's username.
 * @param string $password The user's password.
 * @param string $email    Optional. The user's email. Default empty.
 * @return int|\WP_Error The newly created user's ID or a WP_Error object if the user could not
 *                      be created.
 */
    public function wpCreateUser(string $username, string $password, string $email = ''): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets up the user contact methods.
 *
 * Default contact methods were removed in 3.6. A filter dictates contact methods.
 *
 * @since 3.7.0
 *
 * @param \WP_User|null $user Optional. WP_User object.
 * @return string[] Array of contact method labels keyed by contact method.
 */
    public function wpGetUserContactMethods(\WP_User|null $user = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the text suggesting how to create strong passwords.
 *
 * @since 4.1.0
 *
 * @return string The password hint text.
 */
    public function wpGetPasswordHint(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates, stores, then returns a password reset key for user.
 *
 * @since 4.4.0
 *
 * @global PasswordHash $wp_hasher Portable PHP password hashing framework instance.
 *
 * @param \WP_User $user User to retrieve password reset key for.
 * @return string|\WP_Error Password reset key on success. WP_Error on error.
 */
    public function getPasswordResetKey(\WP_User $user): string|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a user row based on password reset key and login.
 *
 * A key is considered 'expired' if it exactly matches the value of the
 * user_activation_key field, rather than being matched after going through the
 * hashing process. This field is now hashed; old values are no longer accepted
 * but have a different WP_Error code so good user feedback can be provided.
 *
 * @since 3.1.0
 *
 * @global PasswordHash $wp_hasher Portable PHP password hashing framework instance.
 *
 * @param string $key       Hash to validate sending user's password.
 * @param string $login     The user login.
 * @return \WP_User|\WP_Error WP_User object on success, WP_Error object for invalid or expired keys.
 */
    public function checkPasswordResetKey(string $key, string $login): \WP_User|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles sending a password retrieval email to a user.
 *
 * @since 2.5.0
 * @since 5.7.0 Added `$user_login` parameter.
 *
 * @global wpdb         $wpdb      WordPress database abstraction object.
 * @global PasswordHash $wp_hasher Portable PHP password hashing framework instance.
 *
 * @param string $userLogin Optional. Username to send a password retrieval email for.
 *                           Defaults to `$_POST['user_login']` if not set.
 * @return true|\WP_Error True when finished, WP_Error object on error.
 */
    public function retrievePassword(string $userLogin = null): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles resetting the user's password.
 *
 * @since 2.5.0
 *
 * @param \WP_User $user     The user
 * @param string $newPass New password for the user in plaintext
 */
    public function resetPassword(\WP_User $user, string $newPass): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Handles registering a new user.
 *
 * @since 2.5.0
 *
 * @param string $userLogin User's username for logging in
 * @param string $userEmail User's email address to send password and add
 * @return int|\WP_Error Either user's ID or error on failure.
 */
    public function registerNewUser(string $userLogin, string $userEmail): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Initiates email notifications related to the creation of new users.
 *
 * Notifications are sent both to the site admin and to the newly created user.
 *
 * @since 4.4.0
 * @since 4.6.0 Converted the `$notify` parameter to accept 'user' for sending
 *              notifications only to the user created.
 *
 * @param int $userId ID of the newly created user.
 * @param string $notify  Optional. Type of notification that should happen. Accepts 'admin'
 *                        or an empty string (admin only), 'user', or 'both' (admin and user).
 *                        Default 'both'.
 */
    public function wpSendNewUserNotifications(int $userId, string $notify = 'both'): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the current session token from the logged_in cookie.
 *
 * @since 4.0.0
 *
 * @return string Token.
 */
    public function wpGetSessionToken(): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves a list of sessions for the current user.
 *
 * @since 4.0.0
 *
 * @return array Array of sessions.
 */
    public function wpGetAllSessions(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes the current session token from the database.
 *
 * @since 4.0.0
 */
    public function wpDestroyCurrentSession(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all but the current session token for the current user for the database.
 *
 * @since 4.0.0
 */
    public function wpDestroyOtherSessions(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes all session tokens for the current user from the database.
 *
 * @since 4.0.0
 */
    public function wpDestroyAllSessions(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets the user IDs of all users with no role on this site.
 *
 * @since 4.4.0
 * @since 4.9.0 The `$site_id` parameter was added to support multisite.
 *
 * @global wpdb $wpdb WordPress database abstraction object.
 *
 * @param int|null $siteId Optional. The site ID to get users with no role for. Defaults to the current site.
 * @return string[] Array of user IDs as strings.
 */
    public function wpGetUsersWithNoRole(int|null $siteId = null): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sends a confirmation request email when a change of user email address is attempted.
 *
 * @since 3.0.0
 * @since 4.9.0 This function was moved from wp-admin/includes/ms.php so it's no longer Multisite specific.
 *
 * @global WP_Error $errors WP_Error object.
 */
    public function sendConfirmationOnProfileEmail(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Adds an admin notice alerting the user to check for confirmation request email
 * after email address change.
 *
 * @since 3.0.0
 * @since 4.9.0 This function was moved from wp-admin/includes/ms.php so it's no longer Multisite specific.
 *
 * @global string $pagenow The filename of the current screen.
 */
    public function newUserEmailAdminNotice(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers the personal data exporter for users.
 *
 * @since 4.9.6
 *
 * @param array[] $exporters An array of personal data exporters.
 * @return array[] An array of personal data exporters.
 */
    public function wpRegisterUserPersonalDataExporter(array $exporters): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds and exports personal data associated with an email address from the user and user_meta table.
 *
 * @since 4.9.6
 * @since 5.4.0 Added 'Community Events Location' group to the export data.
 * @since 5.4.0 Added 'Session Tokens' group to the export data.
 *
 * @param string $emailAddress  The user's email address.
 * @return array {
 *     An array of personal data.
 *
 *     @type array[] $data An array of personal data arrays.
 *     @type bool    $done Whether the exporter is finished.
 * }
 */
    public function wpUserPersonalDataExporter(string $emailAddress): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates and logs a user request to perform a specific action.
 *
 * Requests are stored inside a post type named `user_request` since they can apply to both
 * users on the site, or guests without a user account.
 *
 * @since 4.9.6
 * @since 5.7.0 Added the `$status` parameter.
 *
 * @param string $emailAddress           User email address. This can be the address of a registered
 *                                        or non-registered user.
 * @param string $actionName             Name of the action that is being confirmed. Required.
 * @param array $requestData            Misc data you want to send with the verification request and pass
 *                                        to the actions once the request is confirmed.
 * @param string $status                  Optional request status (pending or confirmed). Default 'pending'.
 * @return int|\WP_Error                   Returns the request ID if successful, or a WP_Error object on failure.
 */
    public function wpCreateUserRequest(string $emailAddress = '', string $actionName = '', array $requestData = [], string $status = 'pending'): int|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Gets action description from the name and return a string.
 *
 * @since 4.9.6
 *
 * @param string $actionName Action name of the request.
 * @return string Human readable action name.
 */
    public function wpUserRequestActionDescription(string $actionName): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Send a confirmation request email to confirm an action.
 *
 * If the request is not already pending, it will be updated.
 *
 * @since 4.9.6
 *
 * @param string $requestId ID of the request created via wp_create_user_request().
 * @return true|\WP_Error True on success, `WP_Error` on failure.
 */
    public function wpSendUserRequest(string $requestId): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns a confirmation key for a user action and stores the hashed version for future comparison.
 *
 * @since 4.9.6
 *
 * @global PasswordHash $wp_hasher Portable PHP password hashing framework instance.
 *
 * @param int $requestId Request ID.
 * @return string Confirmation key.
 */
    public function wpGenerateUserRequestKey(int $requestId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates a user request by comparing the key with the request's key.
 *
 * @since 4.9.6
 *
 * @global PasswordHash $wp_hasher Portable PHP password hashing framework instance.
 *
 * @param string $requestId ID of the request being confirmed.
 * @param string $key        Provided key to validate.
 * @return true|\WP_Error True on success, WP_Error on failure.
 */
    public function wpValidateUserRequestKey(string $requestId, string $key): true|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Returns the user request object for the specified request ID.
 *
 * @since 4.9.6
 *
 * @param int $requestId The ID of the user request.
 * @return \WP_User_Request|false
 */
    public function wpGetUserRequest(int $requestId): \WP_User_Request|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if Application Passwords is supported.
 *
 * Application Passwords is supported only by sites using SSL or local environments
 * but may be made available using the {@see 'wp_is_application_passwords_available'} filter.
 *
 * @since 5.9.0
 *
 * @return bool
 */
    public function wpIsApplicationPasswordsSupported(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if Application Passwords is globally available.
 *
 * By default, Application Passwords is available to all sites using SSL or to local environments.
 * Use the {@see 'wp_is_application_passwords_available'} filter to adjust its availability.
 *
 * @since 5.6.0
 *
 * @return bool
 */
    public function wpIsApplicationPasswordsAvailable(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if Application Passwords is available for a specific user.
 *
 * By default all users can use Application Passwords. Use {@see 'wp_is_application_passwords_available_for_user'}
 * to restrict availability to certain users.
 *
 * @since 5.6.0
 *
 * @param int|\WP_User $user The user to check.
 * @return bool
 */
    public function wpIsApplicationPasswordsAvailableForUser(int|\WP_User $user): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Sets the last changed time for the 'users' cache group.
 *
 * @since 6.3.0
 */
    public function wpCacheSetUsersLastChanged(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if password reset is allowed for a specific user.
 *
 * @since 6.3.0
 *
 * @param int|\WP_User $user The user to check.
 * @return bool|\WP_Error True if allowed, false or WP_Error otherwise.
 */
    public function wpIsPasswordResetAllowedForUser(int|\WP_User $user): bool|\WP_Error
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Test if the current browser runs on a mobile device (smart phone, tablet, etc.).
 *
 * @since 3.4.0
 * @since 6.4.0 Added checking for the Sec-CH-UA-Mobile request header.
 *
 * @return bool
 */
    public function wpIsMobile(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register a widget
 *
 * Registers a WP_Widget widget
 *
 * @since 2.8.0
 * @since 4.6.0 Updated the `$widget` parameter to also accept a WP_Widget instance object
 *              instead of simply a `WP_Widget` subclass name.
 *
 * @see WP_Widget
 *
 * @global WP_Widget_Factory $wp_widget_factory
 *
 * @param string|\WP_Widget $widget Either the name of a `WP_Widget` subclass or an instance of a `WP_Widget` subclass.
 */
    public function registerWidget(string|\WP_Widget $widget): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Unregisters a widget.
 *
 * Unregisters a WP_Widget widget. Useful for un-registering default widgets.
 * Run within a function hooked to the {@see 'widgets_init'} action.
 *
 * @since 2.8.0
 * @since 4.6.0 Updated the `$widget` parameter to also accept a WP_Widget instance object
 *              instead of simply a `WP_Widget` subclass name.
 *
 * @see WP_Widget
 *
 * @global WP_Widget_Factory $wp_widget_factory
 *
 * @param string|\WP_Widget $widget Either the name of a `WP_Widget` subclass or an instance of a `WP_Widget` subclass.
 */
    public function unregisterWidget(string|\WP_Widget $widget): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Creates multiple sidebars.
 *
 * If you wanted to quickly create multiple sidebars for a theme or internally.
 * This function will allow you to do so. If you don't pass the 'name' and/or
 * 'id' in `$args`, then they will be built for you.
 *
 * @since 2.2.0
 *
 * @see register_sidebar() The second parameter is documented by register_sidebar() and is the same here.
 *
 * @global array $wp_registered_sidebars The new sidebars are stored in this array by sidebar ID.
 *
 * @param int $number Optional. Number of sidebars to create. Default 1.
 * @param array|string $args {
 *     Optional. Array or string of arguments for building a sidebar.
 *
 *     @type string $id   The base string of the unique identifier for each sidebar. If provided, and multiple
 *                        sidebars are being defined, the ID will have "-2" appended, and so on.
 *                        Default 'sidebar-' followed by the number the sidebar creation is currently at.
 *     @type string $name The name or title for the sidebars displayed in the admin dashboard. If registering
 *                        more than one sidebar, include '%d' in the string as a placeholder for the uniquely
 *                        assigned number for each sidebar.
 *                        Default 'Sidebar' for the first sidebar, otherwise 'Sidebar %d'.
 * }
 */
    public function registerSidebars(int $number = 1, array|string $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Builds the definition for a single sidebar and returns the ID.
 *
 * Accepts either a string or an array and then parses that against a set
 * of default arguments for the new sidebar. WordPress will automatically
 * generate a sidebar ID and name based on the current number of registered
 * sidebars if those arguments are not included.
 *
 * When allowing for automatic generation of the name and ID parameters, keep
 * in mind that the incrementor for your sidebar can change over time depending
 * on what other plugins and themes are installed.
 *
 * If theme support for 'widgets' has not yet been added when this function is
 * called, it will be automatically enabled through the use of add_theme_support()
 *
 * @since 2.2.0
 * @since 5.6.0 Added the `before_sidebar` and `after_sidebar` arguments.
 * @since 5.9.0 Added the `show_in_rest` argument.
 *
 * @global array $wp_registered_sidebars The registered sidebars.
 *
 * @param array|string $args {
 *     Optional. Array or string of arguments for the sidebar being registered.
 *
 *     @type string $name           The name or title of the sidebar displayed in the Widgets
 *                                  interface. Default 'Sidebar $instance'.
 *     @type string $id             The unique identifier by which the sidebar will be called.
 *                                  Default 'sidebar-$instance'.
 *     @type string $description    Description of the sidebar, displayed in the Widgets interface.
 *                                  Default empty string.
 *     @type string $class          Extra CSS class to assign to the sidebar in the Widgets interface.
 *                                  Default empty.
 *     @type string $before_widget  HTML content to prepend to each widget's HTML output when assigned
 *                                  to this sidebar. Receives the widget's ID attribute as `%1$s`
 *                                  and class name as `%2$s`. Default is an opening list item element.
 *     @type string $after_widget   HTML content to append to each widget's HTML output when assigned
 *                                  to this sidebar. Default is a closing list item element.
 *     @type string $before_title   HTML content to prepend to the sidebar title when displayed.
 *                                  Default is an opening h2 element.
 *     @type string $after_title    HTML content to append to the sidebar title when displayed.
 *                                  Default is a closing h2 element.
 *     @type string $before_sidebar HTML content to prepend to the sidebar when displayed.
 *                                  Receives the `$id` argument as `%1$s` and `$class` as `%2$s`.
 *                                  Outputs after the {@see 'dynamic_sidebar_before'} action.
 *                                  Default empty string.
 *     @type string $after_sidebar  HTML content to append to the sidebar when displayed.
 *                                  Outputs before the {@see 'dynamic_sidebar_after'} action.
 *                                  Default empty string.
 *     @type bool $show_in_rest     Whether to show this sidebar publicly in the REST API.
 *                                  Defaults to only showing the sidebar to administrator users.
 * }
 * @return string Sidebar ID added to $wp_registered_sidebars global.
 */
    public function registerSidebar(array|string $args = []): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Removes a sidebar from the list.
 *
 * @since 2.2.0
 *
 * @global array $wp_registered_sidebars The registered sidebars.
 *
 * @param string|int $sidebarId The ID of the sidebar when it was registered.
 */
    public function unregisterSidebar(string|int $sidebarId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Checks if a sidebar is registered.
 *
 * @since 4.4.0
 *
 * @global array $wp_registered_sidebars The registered sidebars.
 *
 * @param string|int $sidebarId The ID of the sidebar when it was registered.
 * @return bool True if the sidebar is registered, false otherwise.
 */
    public function isRegisteredSidebar(string|int $sidebarId): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Register an instance of a widget.
 *
 * The default widget option is 'classname' that can be overridden.
 *
 * The function can also be used to un-register widgets when `$output_callback`
 * parameter is an empty string.
 *
 * @since 2.2.0
 * @since 5.3.0 Formalized the existing and already documented `...$params` parameter
 *              by adding it to the function signature.
 * @since 5.8.0 Added show_instance_in_rest option.
 *
 * @global array $wp_registered_widgets            Uses stored registered widgets.
 * @global array $wp_registered_widget_controls    Stores the registered widget controls (options).
 * @global array $wp_registered_widget_updates     The registered widget updates.
 * @global array $_wp_deprecated_widgets_callbacks
 *
 * @param int|string $id              Widget ID.
 * @param string $name            Widget display title.
 * @param callable $outputCallback Run when widget is called.
 * @param array $options {
 *     Optional. An array of supplementary widget options for the instance.
 *
 *     @type string $classname             Class name for the widget's HTML container. Default is a shortened
 *                                         version of the output callback name.
 *     @type string $description           Widget description for display in the widget administration
 *                                         panel and/or theme.
 *     @type bool   $show_instance_in_rest Whether to show the widget's instance settings in the REST API.
 *                                         Only available for WP_Widget based widgets.
 * }
 * @param mixed      ...$params       Optional additional parameters to pass to the callback function when it's called.
 */
    public function wpRegisterSidebarWidget(int|string $id, string $name, callable $outputCallback, array $options = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieve description for widget.
 *
 * When registering widgets, the options can also include 'description' that
 * describes the widget for display on the widget administration panel or
 * in the theme.
 *
 * @since 2.5.0
 *
 * @global array $wp_registered_widgets The registered widgets.
 *
 * @param int|string $id Widget ID.
 * @return string|void Widget description, if available.
 */
    public function wpWidgetDescription(int|string $id): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieve description for a sidebar.
 *
 * When registering sidebars a 'description' parameter can be included that
 * describes the sidebar for display on the widget administration panel.
 *
 * @since 2.9.0
 *
 * @global array $wp_registered_sidebars The registered sidebars.
 *
 * @param string $id sidebar ID.
 * @return string|void Sidebar description, if available.
 */
    public function wpSidebarDescription(string $id): mixed
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Remove widget from sidebar.
 *
 * @since 2.2.0
 *
 * @param int|string $id Widget ID.
 */
    public function wpUnregisterSidebarWidget(int|string $id): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers widget control callback for customizing options.
 *
 * @since 2.2.0
 * @since 5.3.0 Formalized the existing and already documented `...$params` parameter
 *              by adding it to the function signature.
 *
 * @global array $wp_registered_widget_controls The registered widget controls.
 * @global array $wp_registered_widget_updates  The registered widget updates.
 * @global array $wp_registered_widgets         The registered widgets.
 * @global array $_wp_deprecated_widgets_callbacks
 *
 * @param int|string $id               Sidebar ID.
 * @param string $name             Sidebar display name.
 * @param callable $controlCallback Run when sidebar is displayed.
 * @param array $options {
 *     Optional. Array or string of control options. Default empty array.
 *
 *     @type int        $height  Never used. Default 200.
 *     @type int        $width   Width of the fully expanded control form (but try hard to use the default width).
 *                               Default 250.
 *     @type int|string $id_base Required for multi-widgets, i.e widgets that allow multiple instances such as the
 *                               text widget. The widget ID will end up looking like `{$id_base}-{$unique_number}`.
 * }
 * @param mixed      ...$params        Optional additional parameters to pass to the callback function when it's called.
 */
    public function wpRegisterWidgetControl(int|string $id, string $name, callable $controlCallback, array $options = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Remove control callback for widget.
 *
 * @since 2.2.0
 *
 * @param int|string $id Widget ID.
 */
    public function wpUnregisterWidgetControl(int|string $id): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display dynamic sidebar.
 *
 * By default this displays the default sidebar or 'sidebar-1'. If your theme specifies the 'id' or
 * 'name' parameter for its registered sidebars you can pass an ID or name as the $index parameter.
 * Otherwise, you can pass in a numerical index to display the sidebar at that index.
 *
 * @since 2.2.0
 *
 * @global array $wp_registered_sidebars The registered sidebars.
 * @global array $wp_registered_widgets  The registered widgets.
 *
 * @param int|string $index Optional. Index, name or ID of dynamic sidebar. Default 1.
 * @return bool True, if widget sidebar was found and called. False if not found or not called.
 */
    public function dynamicSidebar(int|string $index = 1): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a given widget is displayed on the front end.
 *
 * Either $callback or $id_base can be used
 * $id_base is the first argument when extending WP_Widget class
 * Without the optional $widget_id parameter, returns the ID of the first sidebar
 * in which the first instance of the widget with the given callback or $id_base is found.
 * With the $widget_id parameter, returns the ID of the sidebar where
 * the widget with that callback/$id_base AND that ID is found.
 *
 * NOTE: $widget_id and $id_base are the same for single widgets. To be effective
 * this function has to run after widgets have initialized, at action {@see 'init'} or later.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.2.0
 *
 * @global array $wp_registered_widgets The registered widgets.
 *
 * @param callable|false $callback      Optional. Widget callback to check. Default false.
 * @param string|false $widgetId     Optional. Widget ID. Optional, but needed for checking.
 *                                      Default false.
 * @param string|false $idBase       Optional. The base ID of a widget created by extending WP_Widget.
 *                                      Default false.
 * @param bool $skipInactive Optional. Whether to check in 'wp_inactive_widgets'.
 *                                      Default true.
 * @return string|false ID of the sidebar in which the widget is active,
 *                      false if the widget is not active.
 */
    public function isActiveWidget(callable|false $callback = false, string|false $widgetId = false, string|false $idBase = false, bool $skipInactive = true): string|false
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether the dynamic sidebar is enabled and used by the theme.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.2.0
 *
 * @global array $wp_registered_widgets  The registered widgets.
 * @global array $wp_registered_sidebars The registered sidebars.
 *
 * @return bool True if using widgets, false otherwise.
 */
    public function isDynamicSidebar(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Determines whether a sidebar contains widgets.
 *
 * For more information on this and similar theme functions, check out
 * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/
 * Conditional Tags} article in the Theme Developer Handbook.
 *
 * @since 2.8.0
 *
 * @param string|int $index Sidebar name, id or number to check.
 * @return bool True if the sidebar has widgets, false otherwise.
 */
    public function isActiveSidebar(string|int $index): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves the registered sidebar with the given ID.
 *
 * @since 5.9.0
 *
 * @global array $wp_registered_sidebars The registered sidebars.
 *
 * @param string $id The sidebar ID.
 * @return array|null The discovered sidebar, or null if it is not registered.
 */
    public function wpGetSidebar(string $id): array|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts the widget settings from single to multi-widget format.
 *
 * @since 2.8.0
 *
 * @global array $_wp_sidebars_widgets
 *
 * @param string $baseName   Root ID for all widgets of this type.
 * @param string $optionName Option name for this widget type.
 * @param array $settings    The array of widget instance settings.
 * @return array The array of widget settings converted to multi-widget format.
 */
    public function wpConvertWidgetSettings(string $baseName, string $optionName, array $settings): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Output an arbitrary widget as a template tag.
 *
 * @since 2.8.0
 *
 * @global WP_Widget_Factory $wp_widget_factory
 *
 * @param string $widget   The widget's PHP class name (see class-wp-widget.php).
 * @param array $instance Optional. The widget's instance settings. Default empty array.
 * @param array $args {
 *     Optional. Array of arguments to configure the display of the widget.
 *
 *     @type string $before_widget HTML content that will be prepended to the widget's HTML output.
 *                                 Default `<div class="widget %s">`, where `%s` is the widget's class name.
 *     @type string $after_widget  HTML content that will be appended to the widget's HTML output.
 *                                 Default `</div>`.
 *     @type string $before_title  HTML content that will be prepended to the widget's title when displayed.
 *                                 Default `<h2 class="widgettitle">`.
 *     @type string $after_title   HTML content that will be appended to the widget's title when displayed.
 *                                 Default `</h2>`.
 * }
 */
    public function theWidget(string $widget, array $instance = [], array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates and remaps any "orphaned" widgets to wp_inactive_widgets sidebar,
 * and saves the widget settings. This has to run at least on each theme change.
 *
 * For example, let's say theme A has a "footer" sidebar, and theme B doesn't have one.
 * After switching from theme A to theme B, all the widgets previously assigned
 * to the footer would be inaccessible. This function detects this scenario, and
 * moves all the widgets previously assigned to the footer under wp_inactive_widgets.
 *
 * Despite the word "retrieve" in the name, this function actually updates the database
 * and the global `$sidebars_widgets`. For that reason it should not be run on front end,
 * unless the `$theme_changed` value is 'customize' (to bypass the database write).
 *
 * @since 2.8.0
 *
 * @global array $wp_registered_sidebars The registered sidebars.
 * @global array $sidebars_widgets
 * @global array $wp_registered_widgets  The registered widgets.
 *
 * @param string|bool $themeChanged Whether the theme was changed as a boolean. A value
 *                                   of 'customize' defers updates for the Customizer.
 * @return array Updated sidebars widgets.
 */
    public function retrieveWidgets(string|bool $themeChanged = false): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Compares a list of sidebars with their widgets against an allowed list.
 *
 * @since 4.9.0
 * @since 4.9.2 Always tries to restore widget assignments from previous data, not just if sidebars needed mapping.
 *
 * @global array $wp_registered_sidebars The registered sidebars.
 *
 * @param array $existingSidebarsWidgets List of sidebars and their widget instance IDs.
 * @return array Mapped sidebars widgets.
 */
    public function wpMapSidebarsWidgets(array $existingSidebarsWidgets): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display the RSS entries in a list.
 *
 * @since 2.5.0
 *
 * @param string|array|object $rss  RSS url.
 * @param array $args Widget arguments.
 */
    public function wpWidgetRssOutput(string|array|object $rss, array $args = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Display RSS widget options form.
 *
 * The options for what fields are displayed for the RSS form are all booleans
 * and are as follows: 'url', 'title', 'items', 'show_summary', 'show_author',
 * 'show_date'.
 *
 * @since 2.5.0
 *
 * @param array|string $args   Values for input fields.
 * @param array $inputs Override default display options.
 */
    public function wpWidgetRssForm(array|string $args, array $inputs = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Process RSS feed widget data and optionally retrieve feed items.
 *
 * The feed widget can not have more than 20 items or it will reset back to the
 * default, which is 10.
 *
 * The resulting array has the feed title, feed url, feed link (from channel),
 * feed items, error (if any), and whether to show summary, author, and date.
 * All respectively in the order of the array elements.
 *
 * @since 2.5.0
 *
 * @param array $widgetRss RSS widget feed data. Expects unescaped data.
 * @param bool $checkFeed Optional. Whether to check feed for errors. Default true.
 * @return array
 */
    public function wpWidgetRssProcess(array $widgetRss, bool $checkFeed = true): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Registers all of the default WordPress widgets on startup.
 *
 * Calls {@see 'widgets_init'} action after all of the WordPress widgets have been registered.
 *
 * @since 2.2.0
 */
    public function wpWidgetsInit(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Whether or not to use the block editor to manage widgets. Defaults to true
 * unless a theme has removed support for widgets-block-editor or a plugin has
 * filtered the return value of this function.
 *
 * @since 5.8.0
 *
 * @return bool Whether to use the block editor to manage widgets.
 */
    public function wpUseWidgetsBlockEditor(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Converts a widget ID into its id_base and number components.
 *
 * @since 5.8.0
 *
 * @param string $id Widget ID.
 * @return array Array containing a widget's id_base and number components.
 */
    public function wpParseWidgetId(string $id): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Finds the sidebar that a given widget belongs to.
 *
 * @since 5.8.0
 *
 * @param string $widgetId The widget ID to look for.
 * @return string|null The found sidebar's ID, or null if it was not found.
 */
    public function wpFindWidgetsSidebar(string $widgetId): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Assigns a widget to the given sidebar.
 *
 * @since 5.8.0
 *
 * @param string $widgetId  The widget ID to assign.
 * @param string $sidebarId The sidebar ID to assign to. If empty, the widget won't be added to any sidebar.
 */
    public function wpAssignWidgetToSidebar(string $widgetId, string $sidebarId): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calls the render callback of a widget and returns the output.
 *
 * @since 5.8.0
 *
 * @global array $wp_registered_widgets  The registered widgets.
 * @global array $wp_registered_sidebars The registered sidebars.
 *
 * @param string $widgetId Widget ID.
 * @param string $sidebarId Sidebar ID.
 * @return string
 */
    public function wpRenderWidget(string $widgetId, string $sidebarId): string
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Calls the control callback of a widget and returns the output.
 *
 * @since 5.8.0
 *
 * @global array $wp_registered_widget_controls The registered widget controls.
 *
 * @param string $id Widget ID.
 * @return string|null
 */
    public function wpRenderWidgetControl(string $id): string|null
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the login page header.
 *
 * @since 2.1.0
 *
 * @global string      $error         Login error message set by deprecated pluggable wp_login() function
 *                                    or plugins replacing it.
 * @global bool|string $interim_login Whether interim login modal is being displayed. String 'success'
 *                                    upon successful login.
 * @global string      $action        The action that brought the visitor to the login page.
 *
 * @param string|null $title    Optional. WordPress login page title to display in the `<title>` element.
 *                                Defaults to 'Log In'.
 * @param string $message  Optional. Message to display in header. Default empty.
 * @param \WP_Error|null $wpError Optional. The error to pass. Defaults to a WP_Error instance.
 */
    public function loginHeader(string|null $title = null, string $message = '', \WP_Error|null $wpError = null): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the footer for the login page.
 *
 * @since 3.1.0
 *
 * @global bool|string $interim_login Whether interim login modal is being displayed. String 'success'
 *                                    upon successful login.
 *
 * @param string $inputId Which input to auto-focus.
 */
    public function loginFooter(string $inputId = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the JavaScript to handle the form shaking on the login page.
 *
 * @since 3.0.0
 */
    public function wpShakeJs(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Outputs the viewport meta tag for the login page.
 *
 * @since 3.7.0
 */
    public function wpLoginViewportMeta(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints signup_header via wp_head.
 *
 * @since MU (3.0.0)
 */
    public function doSignupHeader(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Prints styles for front-end Multisite Sign-up pages.
 *
 * @since MU (3.0.0)
 */
    public function wpmuSignupStylesheet(): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Generates and displays the Sign-up and Create Site forms.
 *
 * @since MU (3.0.0)
 *
 * @param string $blogname   The new site name.
 * @param string $blogTitle The new site title.
 * @param \WP_Error|string $errors     A WP_Error object containing existing errors. Defaults to empty string.
 */
    public function showBlogForm(string $blogname = '', string $blogTitle = '', \WP_Error|string $errors = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates the new site sign-up.
 *
 * @since MU (3.0.0)
 *
 * @return array Contains the new site data and error messages.
 *               See wpmu_validate_blog_signup() for details.
 */
    public function validateBlogForm(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Displays the fields for the new user account registration form.
 *
 * @since MU (3.0.0)
 *
 * @param string $userName  The entered username.
 * @param string $userEmail The entered email address.
 * @param \WP_Error|string $errors     A WP_Error object containing existing errors. Defaults to empty string.
 */
    public function showUserForm(string $userName = '', string $userEmail = '', \WP_Error|string $errors = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates user sign-up name and email.
 *
 * @since MU (3.0.0)
 *
 * @return array Contains username, email, and error messages.
 *               See wpmu_validate_user_signup() for details.
 */
    public function validateUserForm(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Shows a form for returning users to sign up for another site.
 *
 * @since MU (3.0.0)
 *
 * @param string $blogname   The new site name
 * @param string $blogTitle The new site title.
 * @param \WP_Error|string $errors     A WP_Error object containing existing errors. Defaults to empty string.
 */
    public function signupAnotherBlog(string $blogname = '', string $blogTitle = '', \WP_Error|string $errors = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates a new site sign-up for an existing user.
 *
 * @since MU (3.0.0)
 *
 * @global string   $blogname   The new site's subdomain or directory name.
 * @global string   $blog_title The new site's title.
 * @global WP_Error $errors     Existing errors in the global scope.
 * @global string   $domain     The new site's domain.
 * @global string   $path       The new site's path.
 *
 * @return null|bool True if site signup was validated, false on error.
 *                   The function halts all execution if the user is not logged in.
 */
    public function validateAnotherBlogSignup(): null|bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Shows a message confirming that the new site has been created.
 *
 * @since MU (3.0.0)
 * @since 4.4.0 Added the `$blog_id` parameter.
 *
 * @param string $domain     The domain URL.
 * @param string $path       The site root path.
 * @param string $blogTitle The site title.
 * @param string $userName  The username.
 * @param string $userEmail The user's email address.
 * @param array $meta       Any additional meta from the {@see 'add_signup_meta'} filter in validate_blog_signup().
 * @param int $blogId    The site ID.
 */
    public function confirmAnotherBlogSignup(string $domain, string $path, string $blogTitle, string $userName, string $userEmail = '', array $meta = [], int $blogId = 0): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Shows a form for a visitor to sign up for a new user account.
 *
 * @since MU (3.0.0)
 *
 * @global string $active_signup String that returns registration type. The value can be
 *                               'all', 'none', 'blog', or 'user'.
 *
 * @param string $userName  The username.
 * @param string $userEmail The user's email.
 * @param \WP_Error|string $errors     A WP_Error object containing existing errors. Defaults to empty string.
 */
    public function signupUser(string $userName = '', string $userEmail = '', \WP_Error|string $errors = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates the new user sign-up.
 *
 * @since MU (3.0.0)
 *
 * @return bool True if new user sign-up was validated, false on error.
 */
    public function validateUserSignup(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Shows a message confirming that the new user has been registered and is awaiting activation.
 *
 * @since MU (3.0.0)
 *
 * @param string $userName  The username.
 * @param string $userEmail The user's email address.
 */
    public function confirmUserSignup(string $userName, string $userEmail): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Shows a form for a user or visitor to sign up for a new site.
 *
 * @since MU (3.0.0)
 *
 * @param string $userName  The username.
 * @param string $userEmail The user's email address.
 * @param string $blogname   The site name.
 * @param string $blogTitle The site title.
 * @param \WP_Error|string $errors     A WP_Error object containing existing errors. Defaults to empty string.
 */
    public function signupBlog(string $userName = '', string $userEmail = '', string $blogname = '', string $blogTitle = '', \WP_Error|string $errors = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Validates new site signup.
 *
 * @since MU (3.0.0)
 *
 * @return bool True if the site sign-up was validated, false on error.
 */
    public function validateBlogSignup(): bool
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Shows a message confirming that the new site has been registered and is awaiting activation.
 *
 * @since MU (3.0.0)
 *
 * @param string $domain     The domain or subdomain of the site.
 * @param string $path       The path of the site.
 * @param string $blogTitle The title of the new site.
 * @param string $userName  The user's username.
 * @param string $userEmail The user's email address.
 * @param array $meta       Any additional meta from the {@see 'add_signup_meta'} filter in validate_blog_signup().
 */
    public function confirmBlogSignup(string $domain, string $path, string $blogTitle, string $userName = '', string $userEmail = '', array $meta = []): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Retrieves languages available during the site/user sign-up process.
 *
 * @since 4.4.0
 *
 * @see get_available_languages()
 *
 * @return string[] Array of available language codes. Language codes are formed by
 *                  stripping the .mo extension from the language file names.
 */
    public function signupGetAvailableLanguages(): array
    {
        return  $this->inner->{__FUNCTION__}(...func_get_args());
    }
/**
 * Response to a trackback.
 *
 * Responds with an error or success XML message.
 *
 * @since 0.71
 *
 * @param int|bool $error         Whether there was an error.
 *                                Default '0'. Accepts '0' or '1', true or false.
 * @param string $errorMessage Error message if an error occurred. Default empty string.
 */
    public function trackbackResponse(int|bool $error = 0, string $errorMessage = ''): void
    {
         $this->inner->{__FUNCTION__}(...func_get_args());
    }
}
